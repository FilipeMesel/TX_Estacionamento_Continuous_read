
TX_Estacionamento_continuos_read.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f120  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c70  0800f1e0  0800f1e0  0001f1e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fe50  0800fe50  0003001c  2**0
                  CONTENTS
  4 .ARM          00000008  0800fe50  0800fe50  0001fe50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fe58  0800fe58  0003001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fe58  0800fe58  0001fe58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fe5c  0800fe5c  0001fe5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .eeprom_rodata 0000001c  08080000  08080000  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000190  20000000  0800fe60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          000017b0  20000190  0800fff0  00020190  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001940  0800fff0  00021940  2**0
                  ALLOC
 12 .ARM.attributes 00000028  00000000  00000000  0003001c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0005de71  00000000  00000000  00030044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000cbbd  00000000  00000000  0008deb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    0001f26c  00000000  00000000  0009aa72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000024a8  00000000  00000000  000b9ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00003ac8  00000000  00000000  000bc188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001ee1d  00000000  00000000  000bfc50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00049c29  00000000  00000000  000dea6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00099094  00000000  00000000  00128696  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  001c172a  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006b4c  00000000  00000000  001c1780  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000190 	.word	0x20000190
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800f1c8 	.word	0x0800f1c8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000194 	.word	0x20000194
 8000104:	0800f1c8 	.word	0x0800f1c8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__gnu_thumb1_case_uhi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5a09      	ldrh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__udivsi3>:
 8000154:	2200      	movs	r2, #0
 8000156:	0843      	lsrs	r3, r0, #1
 8000158:	428b      	cmp	r3, r1
 800015a:	d374      	bcc.n	8000246 <__udivsi3+0xf2>
 800015c:	0903      	lsrs	r3, r0, #4
 800015e:	428b      	cmp	r3, r1
 8000160:	d35f      	bcc.n	8000222 <__udivsi3+0xce>
 8000162:	0a03      	lsrs	r3, r0, #8
 8000164:	428b      	cmp	r3, r1
 8000166:	d344      	bcc.n	80001f2 <__udivsi3+0x9e>
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d328      	bcc.n	80001c0 <__udivsi3+0x6c>
 800016e:	0c03      	lsrs	r3, r0, #16
 8000170:	428b      	cmp	r3, r1
 8000172:	d30d      	bcc.n	8000190 <__udivsi3+0x3c>
 8000174:	22ff      	movs	r2, #255	; 0xff
 8000176:	0209      	lsls	r1, r1, #8
 8000178:	ba12      	rev	r2, r2
 800017a:	0c03      	lsrs	r3, r0, #16
 800017c:	428b      	cmp	r3, r1
 800017e:	d302      	bcc.n	8000186 <__udivsi3+0x32>
 8000180:	1212      	asrs	r2, r2, #8
 8000182:	0209      	lsls	r1, r1, #8
 8000184:	d065      	beq.n	8000252 <__udivsi3+0xfe>
 8000186:	0b03      	lsrs	r3, r0, #12
 8000188:	428b      	cmp	r3, r1
 800018a:	d319      	bcc.n	80001c0 <__udivsi3+0x6c>
 800018c:	e000      	b.n	8000190 <__udivsi3+0x3c>
 800018e:	0a09      	lsrs	r1, r1, #8
 8000190:	0bc3      	lsrs	r3, r0, #15
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x46>
 8000196:	03cb      	lsls	r3, r1, #15
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b83      	lsrs	r3, r0, #14
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x52>
 80001a2:	038b      	lsls	r3, r1, #14
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0b43      	lsrs	r3, r0, #13
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x5e>
 80001ae:	034b      	lsls	r3, r1, #13
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0b03      	lsrs	r3, r0, #12
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x6a>
 80001ba:	030b      	lsls	r3, r1, #12
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0ac3      	lsrs	r3, r0, #11
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x76>
 80001c6:	02cb      	lsls	r3, r1, #11
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a83      	lsrs	r3, r0, #10
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x82>
 80001d2:	028b      	lsls	r3, r1, #10
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0a43      	lsrs	r3, r0, #9
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x8e>
 80001de:	024b      	lsls	r3, r1, #9
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0a03      	lsrs	r3, r0, #8
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x9a>
 80001ea:	020b      	lsls	r3, r1, #8
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	d2cd      	bcs.n	800018e <__udivsi3+0x3a>
 80001f2:	09c3      	lsrs	r3, r0, #7
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xa8>
 80001f8:	01cb      	lsls	r3, r1, #7
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0983      	lsrs	r3, r0, #6
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xb4>
 8000204:	018b      	lsls	r3, r1, #6
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0943      	lsrs	r3, r0, #5
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xc0>
 8000210:	014b      	lsls	r3, r1, #5
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0903      	lsrs	r3, r0, #4
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xcc>
 800021c:	010b      	lsls	r3, r1, #4
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	08c3      	lsrs	r3, r0, #3
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xd8>
 8000228:	00cb      	lsls	r3, r1, #3
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	0883      	lsrs	r3, r0, #2
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xe4>
 8000234:	008b      	lsls	r3, r1, #2
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0843      	lsrs	r3, r0, #1
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xf0>
 8000240:	004b      	lsls	r3, r1, #1
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	1a41      	subs	r1, r0, r1
 8000248:	d200      	bcs.n	800024c <__udivsi3+0xf8>
 800024a:	4601      	mov	r1, r0
 800024c:	4152      	adcs	r2, r2
 800024e:	4610      	mov	r0, r2
 8000250:	4770      	bx	lr
 8000252:	e7ff      	b.n	8000254 <__udivsi3+0x100>
 8000254:	b501      	push	{r0, lr}
 8000256:	2000      	movs	r0, #0
 8000258:	f000 f8f0 	bl	800043c <__aeabi_idiv0>
 800025c:	bd02      	pop	{r1, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_uidivmod>:
 8000260:	2900      	cmp	r1, #0
 8000262:	d0f7      	beq.n	8000254 <__udivsi3+0x100>
 8000264:	e776      	b.n	8000154 <__udivsi3>
 8000266:	4770      	bx	lr

08000268 <__divsi3>:
 8000268:	4603      	mov	r3, r0
 800026a:	430b      	orrs	r3, r1
 800026c:	d47f      	bmi.n	800036e <__divsi3+0x106>
 800026e:	2200      	movs	r2, #0
 8000270:	0843      	lsrs	r3, r0, #1
 8000272:	428b      	cmp	r3, r1
 8000274:	d374      	bcc.n	8000360 <__divsi3+0xf8>
 8000276:	0903      	lsrs	r3, r0, #4
 8000278:	428b      	cmp	r3, r1
 800027a:	d35f      	bcc.n	800033c <__divsi3+0xd4>
 800027c:	0a03      	lsrs	r3, r0, #8
 800027e:	428b      	cmp	r3, r1
 8000280:	d344      	bcc.n	800030c <__divsi3+0xa4>
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d328      	bcc.n	80002da <__divsi3+0x72>
 8000288:	0c03      	lsrs	r3, r0, #16
 800028a:	428b      	cmp	r3, r1
 800028c:	d30d      	bcc.n	80002aa <__divsi3+0x42>
 800028e:	22ff      	movs	r2, #255	; 0xff
 8000290:	0209      	lsls	r1, r1, #8
 8000292:	ba12      	rev	r2, r2
 8000294:	0c03      	lsrs	r3, r0, #16
 8000296:	428b      	cmp	r3, r1
 8000298:	d302      	bcc.n	80002a0 <__divsi3+0x38>
 800029a:	1212      	asrs	r2, r2, #8
 800029c:	0209      	lsls	r1, r1, #8
 800029e:	d065      	beq.n	800036c <__divsi3+0x104>
 80002a0:	0b03      	lsrs	r3, r0, #12
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d319      	bcc.n	80002da <__divsi3+0x72>
 80002a6:	e000      	b.n	80002aa <__divsi3+0x42>
 80002a8:	0a09      	lsrs	r1, r1, #8
 80002aa:	0bc3      	lsrs	r3, r0, #15
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x4c>
 80002b0:	03cb      	lsls	r3, r1, #15
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b83      	lsrs	r3, r0, #14
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x58>
 80002bc:	038b      	lsls	r3, r1, #14
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0b43      	lsrs	r3, r0, #13
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x64>
 80002c8:	034b      	lsls	r3, r1, #13
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0b03      	lsrs	r3, r0, #12
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x70>
 80002d4:	030b      	lsls	r3, r1, #12
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0ac3      	lsrs	r3, r0, #11
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x7c>
 80002e0:	02cb      	lsls	r3, r1, #11
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a83      	lsrs	r3, r0, #10
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x88>
 80002ec:	028b      	lsls	r3, r1, #10
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0a43      	lsrs	r3, r0, #9
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0x94>
 80002f8:	024b      	lsls	r3, r1, #9
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0a03      	lsrs	r3, r0, #8
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__divsi3+0xa0>
 8000304:	020b      	lsls	r3, r1, #8
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	d2cd      	bcs.n	80002a8 <__divsi3+0x40>
 800030c:	09c3      	lsrs	r3, r0, #7
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xae>
 8000312:	01cb      	lsls	r3, r1, #7
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0983      	lsrs	r3, r0, #6
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xba>
 800031e:	018b      	lsls	r3, r1, #6
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0943      	lsrs	r3, r0, #5
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xc6>
 800032a:	014b      	lsls	r3, r1, #5
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xd2>
 8000336:	010b      	lsls	r3, r1, #4
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	08c3      	lsrs	r3, r0, #3
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xde>
 8000342:	00cb      	lsls	r3, r1, #3
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	0883      	lsrs	r3, r0, #2
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xea>
 800034e:	008b      	lsls	r3, r1, #2
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	0843      	lsrs	r3, r0, #1
 8000356:	428b      	cmp	r3, r1
 8000358:	d301      	bcc.n	800035e <__divsi3+0xf6>
 800035a:	004b      	lsls	r3, r1, #1
 800035c:	1ac0      	subs	r0, r0, r3
 800035e:	4152      	adcs	r2, r2
 8000360:	1a41      	subs	r1, r0, r1
 8000362:	d200      	bcs.n	8000366 <__divsi3+0xfe>
 8000364:	4601      	mov	r1, r0
 8000366:	4152      	adcs	r2, r2
 8000368:	4610      	mov	r0, r2
 800036a:	4770      	bx	lr
 800036c:	e05d      	b.n	800042a <__divsi3+0x1c2>
 800036e:	0fca      	lsrs	r2, r1, #31
 8000370:	d000      	beq.n	8000374 <__divsi3+0x10c>
 8000372:	4249      	negs	r1, r1
 8000374:	1003      	asrs	r3, r0, #32
 8000376:	d300      	bcc.n	800037a <__divsi3+0x112>
 8000378:	4240      	negs	r0, r0
 800037a:	4053      	eors	r3, r2
 800037c:	2200      	movs	r2, #0
 800037e:	469c      	mov	ip, r3
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d32d      	bcc.n	80003e2 <__divsi3+0x17a>
 8000386:	0a03      	lsrs	r3, r0, #8
 8000388:	428b      	cmp	r3, r1
 800038a:	d312      	bcc.n	80003b2 <__divsi3+0x14a>
 800038c:	22fc      	movs	r2, #252	; 0xfc
 800038e:	0189      	lsls	r1, r1, #6
 8000390:	ba12      	rev	r2, r2
 8000392:	0a03      	lsrs	r3, r0, #8
 8000394:	428b      	cmp	r3, r1
 8000396:	d30c      	bcc.n	80003b2 <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d308      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	1192      	asrs	r2, r2, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d304      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a8:	0189      	lsls	r1, r1, #6
 80003aa:	d03a      	beq.n	8000422 <__divsi3+0x1ba>
 80003ac:	1192      	asrs	r2, r2, #6
 80003ae:	e000      	b.n	80003b2 <__divsi3+0x14a>
 80003b0:	0989      	lsrs	r1, r1, #6
 80003b2:	09c3      	lsrs	r3, r0, #7
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x154>
 80003b8:	01cb      	lsls	r3, r1, #7
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0983      	lsrs	r3, r0, #6
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x160>
 80003c4:	018b      	lsls	r3, r1, #6
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0943      	lsrs	r3, r0, #5
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x16c>
 80003d0:	014b      	lsls	r3, r1, #5
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0903      	lsrs	r3, r0, #4
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x178>
 80003dc:	010b      	lsls	r3, r1, #4
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	08c3      	lsrs	r3, r0, #3
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x184>
 80003e8:	00cb      	lsls	r3, r1, #3
 80003ea:	1ac0      	subs	r0, r0, r3
 80003ec:	4152      	adcs	r2, r2
 80003ee:	0883      	lsrs	r3, r0, #2
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x190>
 80003f4:	008b      	lsls	r3, r1, #2
 80003f6:	1ac0      	subs	r0, r0, r3
 80003f8:	4152      	adcs	r2, r2
 80003fa:	d2d9      	bcs.n	80003b0 <__divsi3+0x148>
 80003fc:	0843      	lsrs	r3, r0, #1
 80003fe:	428b      	cmp	r3, r1
 8000400:	d301      	bcc.n	8000406 <__divsi3+0x19e>
 8000402:	004b      	lsls	r3, r1, #1
 8000404:	1ac0      	subs	r0, r0, r3
 8000406:	4152      	adcs	r2, r2
 8000408:	1a41      	subs	r1, r0, r1
 800040a:	d200      	bcs.n	800040e <__divsi3+0x1a6>
 800040c:	4601      	mov	r1, r0
 800040e:	4663      	mov	r3, ip
 8000410:	4152      	adcs	r2, r2
 8000412:	105b      	asrs	r3, r3, #1
 8000414:	4610      	mov	r0, r2
 8000416:	d301      	bcc.n	800041c <__divsi3+0x1b4>
 8000418:	4240      	negs	r0, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d500      	bpl.n	8000420 <__divsi3+0x1b8>
 800041e:	4249      	negs	r1, r1
 8000420:	4770      	bx	lr
 8000422:	4663      	mov	r3, ip
 8000424:	105b      	asrs	r3, r3, #1
 8000426:	d300      	bcc.n	800042a <__divsi3+0x1c2>
 8000428:	4240      	negs	r0, r0
 800042a:	b501      	push	{r0, lr}
 800042c:	2000      	movs	r0, #0
 800042e:	f000 f805 	bl	800043c <__aeabi_idiv0>
 8000432:	bd02      	pop	{r1, pc}

08000434 <__aeabi_idivmod>:
 8000434:	2900      	cmp	r1, #0
 8000436:	d0f8      	beq.n	800042a <__divsi3+0x1c2>
 8000438:	e716      	b.n	8000268 <__divsi3>
 800043a:	4770      	bx	lr

0800043c <__aeabi_idiv0>:
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_cdrcmple>:
 8000440:	4684      	mov	ip, r0
 8000442:	1c10      	adds	r0, r2, #0
 8000444:	4662      	mov	r2, ip
 8000446:	468c      	mov	ip, r1
 8000448:	1c19      	adds	r1, r3, #0
 800044a:	4663      	mov	r3, ip
 800044c:	e000      	b.n	8000450 <__aeabi_cdcmpeq>
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_cdcmpeq>:
 8000450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000452:	f001 fa69 	bl	8001928 <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	d401      	bmi.n	800045e <__aeabi_cdcmpeq+0xe>
 800045a:	2100      	movs	r1, #0
 800045c:	42c8      	cmn	r0, r1
 800045e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000460 <__aeabi_dcmpeq>:
 8000460:	b510      	push	{r4, lr}
 8000462:	f001 f9b3 	bl	80017cc <__eqdf2>
 8000466:	4240      	negs	r0, r0
 8000468:	3001      	adds	r0, #1
 800046a:	bd10      	pop	{r4, pc}

0800046c <__aeabi_dcmplt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fa5b 	bl	8001928 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	db01      	blt.n	800047a <__aeabi_dcmplt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmple>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fa51 	bl	8001928 <__ledf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dd01      	ble.n	800048e <__aeabi_dcmple+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpgt>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f9d5 	bl	8001844 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	dc01      	bgt.n	80004a2 <__aeabi_dcmpgt+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_dcmpge>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f001 f9cb 	bl	8001844 <__gedf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	da01      	bge.n	80004b6 <__aeabi_dcmpge+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)

080004bc <__aeabi_uldivmod>:
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d111      	bne.n	80004e4 <__aeabi_uldivmod+0x28>
 80004c0:	2a00      	cmp	r2, #0
 80004c2:	d10f      	bne.n	80004e4 <__aeabi_uldivmod+0x28>
 80004c4:	2900      	cmp	r1, #0
 80004c6:	d100      	bne.n	80004ca <__aeabi_uldivmod+0xe>
 80004c8:	2800      	cmp	r0, #0
 80004ca:	d002      	beq.n	80004d2 <__aeabi_uldivmod+0x16>
 80004cc:	2100      	movs	r1, #0
 80004ce:	43c9      	mvns	r1, r1
 80004d0:	1c08      	adds	r0, r1, #0
 80004d2:	b407      	push	{r0, r1, r2}
 80004d4:	4802      	ldr	r0, [pc, #8]	; (80004e0 <__aeabi_uldivmod+0x24>)
 80004d6:	a102      	add	r1, pc, #8	; (adr r1, 80004e0 <__aeabi_uldivmod+0x24>)
 80004d8:	1840      	adds	r0, r0, r1
 80004da:	9002      	str	r0, [sp, #8]
 80004dc:	bd03      	pop	{r0, r1, pc}
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	ffffff5d 	.word	0xffffff5d
 80004e4:	b403      	push	{r0, r1}
 80004e6:	4668      	mov	r0, sp
 80004e8:	b501      	push	{r0, lr}
 80004ea:	9802      	ldr	r0, [sp, #8]
 80004ec:	f000 f84c 	bl	8000588 <__udivmoddi4>
 80004f0:	9b01      	ldr	r3, [sp, #4]
 80004f2:	469e      	mov	lr, r3
 80004f4:	b002      	add	sp, #8
 80004f6:	bc0c      	pop	{r2, r3}
 80004f8:	4770      	bx	lr
 80004fa:	46c0      	nop			; (mov r8, r8)

080004fc <__aeabi_lmul>:
 80004fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004fe:	0415      	lsls	r5, r2, #16
 8000500:	0c2d      	lsrs	r5, r5, #16
 8000502:	000f      	movs	r7, r1
 8000504:	0001      	movs	r1, r0
 8000506:	002e      	movs	r6, r5
 8000508:	46c6      	mov	lr, r8
 800050a:	4684      	mov	ip, r0
 800050c:	0400      	lsls	r0, r0, #16
 800050e:	0c14      	lsrs	r4, r2, #16
 8000510:	0c00      	lsrs	r0, r0, #16
 8000512:	0c09      	lsrs	r1, r1, #16
 8000514:	4346      	muls	r6, r0
 8000516:	434d      	muls	r5, r1
 8000518:	4360      	muls	r0, r4
 800051a:	4361      	muls	r1, r4
 800051c:	1940      	adds	r0, r0, r5
 800051e:	0c34      	lsrs	r4, r6, #16
 8000520:	1824      	adds	r4, r4, r0
 8000522:	b500      	push	{lr}
 8000524:	42a5      	cmp	r5, r4
 8000526:	d903      	bls.n	8000530 <__aeabi_lmul+0x34>
 8000528:	2080      	movs	r0, #128	; 0x80
 800052a:	0240      	lsls	r0, r0, #9
 800052c:	4680      	mov	r8, r0
 800052e:	4441      	add	r1, r8
 8000530:	0c25      	lsrs	r5, r4, #16
 8000532:	186d      	adds	r5, r5, r1
 8000534:	4661      	mov	r1, ip
 8000536:	4359      	muls	r1, r3
 8000538:	437a      	muls	r2, r7
 800053a:	0430      	lsls	r0, r6, #16
 800053c:	1949      	adds	r1, r1, r5
 800053e:	0424      	lsls	r4, r4, #16
 8000540:	0c00      	lsrs	r0, r0, #16
 8000542:	1820      	adds	r0, r4, r0
 8000544:	1889      	adds	r1, r1, r2
 8000546:	bc80      	pop	{r7}
 8000548:	46b8      	mov	r8, r7
 800054a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800054c <__aeabi_d2uiz>:
 800054c:	b570      	push	{r4, r5, r6, lr}
 800054e:	2200      	movs	r2, #0
 8000550:	4b0c      	ldr	r3, [pc, #48]	; (8000584 <__aeabi_d2uiz+0x38>)
 8000552:	0004      	movs	r4, r0
 8000554:	000d      	movs	r5, r1
 8000556:	f7ff ffa7 	bl	80004a8 <__aeabi_dcmpge>
 800055a:	2800      	cmp	r0, #0
 800055c:	d104      	bne.n	8000568 <__aeabi_d2uiz+0x1c>
 800055e:	0020      	movs	r0, r4
 8000560:	0029      	movs	r1, r5
 8000562:	f001 fde3 	bl	800212c <__aeabi_d2iz>
 8000566:	bd70      	pop	{r4, r5, r6, pc}
 8000568:	4b06      	ldr	r3, [pc, #24]	; (8000584 <__aeabi_d2uiz+0x38>)
 800056a:	2200      	movs	r2, #0
 800056c:	0020      	movs	r0, r4
 800056e:	0029      	movs	r1, r5
 8000570:	f001 fa4a 	bl	8001a08 <__aeabi_dsub>
 8000574:	f001 fdda 	bl	800212c <__aeabi_d2iz>
 8000578:	2380      	movs	r3, #128	; 0x80
 800057a:	061b      	lsls	r3, r3, #24
 800057c:	469c      	mov	ip, r3
 800057e:	4460      	add	r0, ip
 8000580:	e7f1      	b.n	8000566 <__aeabi_d2uiz+0x1a>
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	41e00000 	.word	0x41e00000

08000588 <__udivmoddi4>:
 8000588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800058a:	4657      	mov	r7, sl
 800058c:	464e      	mov	r6, r9
 800058e:	4645      	mov	r5, r8
 8000590:	46de      	mov	lr, fp
 8000592:	b5e0      	push	{r5, r6, r7, lr}
 8000594:	0004      	movs	r4, r0
 8000596:	000d      	movs	r5, r1
 8000598:	4692      	mov	sl, r2
 800059a:	4699      	mov	r9, r3
 800059c:	b083      	sub	sp, #12
 800059e:	428b      	cmp	r3, r1
 80005a0:	d830      	bhi.n	8000604 <__udivmoddi4+0x7c>
 80005a2:	d02d      	beq.n	8000600 <__udivmoddi4+0x78>
 80005a4:	4649      	mov	r1, r9
 80005a6:	4650      	mov	r0, sl
 80005a8:	f001 fe82 	bl	80022b0 <__clzdi2>
 80005ac:	0029      	movs	r1, r5
 80005ae:	0006      	movs	r6, r0
 80005b0:	0020      	movs	r0, r4
 80005b2:	f001 fe7d 	bl	80022b0 <__clzdi2>
 80005b6:	1a33      	subs	r3, r6, r0
 80005b8:	4698      	mov	r8, r3
 80005ba:	3b20      	subs	r3, #32
 80005bc:	469b      	mov	fp, r3
 80005be:	d433      	bmi.n	8000628 <__udivmoddi4+0xa0>
 80005c0:	465a      	mov	r2, fp
 80005c2:	4653      	mov	r3, sl
 80005c4:	4093      	lsls	r3, r2
 80005c6:	4642      	mov	r2, r8
 80005c8:	001f      	movs	r7, r3
 80005ca:	4653      	mov	r3, sl
 80005cc:	4093      	lsls	r3, r2
 80005ce:	001e      	movs	r6, r3
 80005d0:	42af      	cmp	r7, r5
 80005d2:	d83a      	bhi.n	800064a <__udivmoddi4+0xc2>
 80005d4:	42af      	cmp	r7, r5
 80005d6:	d100      	bne.n	80005da <__udivmoddi4+0x52>
 80005d8:	e078      	b.n	80006cc <__udivmoddi4+0x144>
 80005da:	465b      	mov	r3, fp
 80005dc:	1ba4      	subs	r4, r4, r6
 80005de:	41bd      	sbcs	r5, r7
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	da00      	bge.n	80005e6 <__udivmoddi4+0x5e>
 80005e4:	e075      	b.n	80006d2 <__udivmoddi4+0x14a>
 80005e6:	2200      	movs	r2, #0
 80005e8:	2300      	movs	r3, #0
 80005ea:	9200      	str	r2, [sp, #0]
 80005ec:	9301      	str	r3, [sp, #4]
 80005ee:	2301      	movs	r3, #1
 80005f0:	465a      	mov	r2, fp
 80005f2:	4093      	lsls	r3, r2
 80005f4:	9301      	str	r3, [sp, #4]
 80005f6:	2301      	movs	r3, #1
 80005f8:	4642      	mov	r2, r8
 80005fa:	4093      	lsls	r3, r2
 80005fc:	9300      	str	r3, [sp, #0]
 80005fe:	e028      	b.n	8000652 <__udivmoddi4+0xca>
 8000600:	4282      	cmp	r2, r0
 8000602:	d9cf      	bls.n	80005a4 <__udivmoddi4+0x1c>
 8000604:	2200      	movs	r2, #0
 8000606:	2300      	movs	r3, #0
 8000608:	9200      	str	r2, [sp, #0]
 800060a:	9301      	str	r3, [sp, #4]
 800060c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <__udivmoddi4+0x8e>
 8000612:	601c      	str	r4, [r3, #0]
 8000614:	605d      	str	r5, [r3, #4]
 8000616:	9800      	ldr	r0, [sp, #0]
 8000618:	9901      	ldr	r1, [sp, #4]
 800061a:	b003      	add	sp, #12
 800061c:	bcf0      	pop	{r4, r5, r6, r7}
 800061e:	46bb      	mov	fp, r7
 8000620:	46b2      	mov	sl, r6
 8000622:	46a9      	mov	r9, r5
 8000624:	46a0      	mov	r8, r4
 8000626:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000628:	4642      	mov	r2, r8
 800062a:	2320      	movs	r3, #32
 800062c:	1a9b      	subs	r3, r3, r2
 800062e:	4652      	mov	r2, sl
 8000630:	40da      	lsrs	r2, r3
 8000632:	4641      	mov	r1, r8
 8000634:	0013      	movs	r3, r2
 8000636:	464a      	mov	r2, r9
 8000638:	408a      	lsls	r2, r1
 800063a:	0017      	movs	r7, r2
 800063c:	4642      	mov	r2, r8
 800063e:	431f      	orrs	r7, r3
 8000640:	4653      	mov	r3, sl
 8000642:	4093      	lsls	r3, r2
 8000644:	001e      	movs	r6, r3
 8000646:	42af      	cmp	r7, r5
 8000648:	d9c4      	bls.n	80005d4 <__udivmoddi4+0x4c>
 800064a:	2200      	movs	r2, #0
 800064c:	2300      	movs	r3, #0
 800064e:	9200      	str	r2, [sp, #0]
 8000650:	9301      	str	r3, [sp, #4]
 8000652:	4643      	mov	r3, r8
 8000654:	2b00      	cmp	r3, #0
 8000656:	d0d9      	beq.n	800060c <__udivmoddi4+0x84>
 8000658:	07fb      	lsls	r3, r7, #31
 800065a:	0872      	lsrs	r2, r6, #1
 800065c:	431a      	orrs	r2, r3
 800065e:	4646      	mov	r6, r8
 8000660:	087b      	lsrs	r3, r7, #1
 8000662:	e00e      	b.n	8000682 <__udivmoddi4+0xfa>
 8000664:	42ab      	cmp	r3, r5
 8000666:	d101      	bne.n	800066c <__udivmoddi4+0xe4>
 8000668:	42a2      	cmp	r2, r4
 800066a:	d80c      	bhi.n	8000686 <__udivmoddi4+0xfe>
 800066c:	1aa4      	subs	r4, r4, r2
 800066e:	419d      	sbcs	r5, r3
 8000670:	2001      	movs	r0, #1
 8000672:	1924      	adds	r4, r4, r4
 8000674:	416d      	adcs	r5, r5
 8000676:	2100      	movs	r1, #0
 8000678:	3e01      	subs	r6, #1
 800067a:	1824      	adds	r4, r4, r0
 800067c:	414d      	adcs	r5, r1
 800067e:	2e00      	cmp	r6, #0
 8000680:	d006      	beq.n	8000690 <__udivmoddi4+0x108>
 8000682:	42ab      	cmp	r3, r5
 8000684:	d9ee      	bls.n	8000664 <__udivmoddi4+0xdc>
 8000686:	3e01      	subs	r6, #1
 8000688:	1924      	adds	r4, r4, r4
 800068a:	416d      	adcs	r5, r5
 800068c:	2e00      	cmp	r6, #0
 800068e:	d1f8      	bne.n	8000682 <__udivmoddi4+0xfa>
 8000690:	9800      	ldr	r0, [sp, #0]
 8000692:	9901      	ldr	r1, [sp, #4]
 8000694:	465b      	mov	r3, fp
 8000696:	1900      	adds	r0, r0, r4
 8000698:	4169      	adcs	r1, r5
 800069a:	2b00      	cmp	r3, #0
 800069c:	db24      	blt.n	80006e8 <__udivmoddi4+0x160>
 800069e:	002b      	movs	r3, r5
 80006a0:	465a      	mov	r2, fp
 80006a2:	4644      	mov	r4, r8
 80006a4:	40d3      	lsrs	r3, r2
 80006a6:	002a      	movs	r2, r5
 80006a8:	40e2      	lsrs	r2, r4
 80006aa:	001c      	movs	r4, r3
 80006ac:	465b      	mov	r3, fp
 80006ae:	0015      	movs	r5, r2
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	db2a      	blt.n	800070a <__udivmoddi4+0x182>
 80006b4:	0026      	movs	r6, r4
 80006b6:	409e      	lsls	r6, r3
 80006b8:	0033      	movs	r3, r6
 80006ba:	0026      	movs	r6, r4
 80006bc:	4647      	mov	r7, r8
 80006be:	40be      	lsls	r6, r7
 80006c0:	0032      	movs	r2, r6
 80006c2:	1a80      	subs	r0, r0, r2
 80006c4:	4199      	sbcs	r1, r3
 80006c6:	9000      	str	r0, [sp, #0]
 80006c8:	9101      	str	r1, [sp, #4]
 80006ca:	e79f      	b.n	800060c <__udivmoddi4+0x84>
 80006cc:	42a3      	cmp	r3, r4
 80006ce:	d8bc      	bhi.n	800064a <__udivmoddi4+0xc2>
 80006d0:	e783      	b.n	80005da <__udivmoddi4+0x52>
 80006d2:	4642      	mov	r2, r8
 80006d4:	2320      	movs	r3, #32
 80006d6:	2100      	movs	r1, #0
 80006d8:	1a9b      	subs	r3, r3, r2
 80006da:	2200      	movs	r2, #0
 80006dc:	9100      	str	r1, [sp, #0]
 80006de:	9201      	str	r2, [sp, #4]
 80006e0:	2201      	movs	r2, #1
 80006e2:	40da      	lsrs	r2, r3
 80006e4:	9201      	str	r2, [sp, #4]
 80006e6:	e786      	b.n	80005f6 <__udivmoddi4+0x6e>
 80006e8:	4642      	mov	r2, r8
 80006ea:	2320      	movs	r3, #32
 80006ec:	1a9b      	subs	r3, r3, r2
 80006ee:	002a      	movs	r2, r5
 80006f0:	4646      	mov	r6, r8
 80006f2:	409a      	lsls	r2, r3
 80006f4:	0023      	movs	r3, r4
 80006f6:	40f3      	lsrs	r3, r6
 80006f8:	4644      	mov	r4, r8
 80006fa:	4313      	orrs	r3, r2
 80006fc:	002a      	movs	r2, r5
 80006fe:	40e2      	lsrs	r2, r4
 8000700:	001c      	movs	r4, r3
 8000702:	465b      	mov	r3, fp
 8000704:	0015      	movs	r5, r2
 8000706:	2b00      	cmp	r3, #0
 8000708:	dad4      	bge.n	80006b4 <__udivmoddi4+0x12c>
 800070a:	4642      	mov	r2, r8
 800070c:	002f      	movs	r7, r5
 800070e:	2320      	movs	r3, #32
 8000710:	0026      	movs	r6, r4
 8000712:	4097      	lsls	r7, r2
 8000714:	1a9b      	subs	r3, r3, r2
 8000716:	40de      	lsrs	r6, r3
 8000718:	003b      	movs	r3, r7
 800071a:	4333      	orrs	r3, r6
 800071c:	e7cd      	b.n	80006ba <__udivmoddi4+0x132>
 800071e:	46c0      	nop			; (mov r8, r8)

08000720 <__aeabi_fsub>:
 8000720:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000722:	4646      	mov	r6, r8
 8000724:	46d6      	mov	lr, sl
 8000726:	464f      	mov	r7, r9
 8000728:	0243      	lsls	r3, r0, #9
 800072a:	0a5b      	lsrs	r3, r3, #9
 800072c:	00da      	lsls	r2, r3, #3
 800072e:	4694      	mov	ip, r2
 8000730:	024a      	lsls	r2, r1, #9
 8000732:	b5c0      	push	{r6, r7, lr}
 8000734:	0044      	lsls	r4, r0, #1
 8000736:	0a56      	lsrs	r6, r2, #9
 8000738:	1c05      	adds	r5, r0, #0
 800073a:	46b0      	mov	r8, r6
 800073c:	0e24      	lsrs	r4, r4, #24
 800073e:	004e      	lsls	r6, r1, #1
 8000740:	0992      	lsrs	r2, r2, #6
 8000742:	001f      	movs	r7, r3
 8000744:	0020      	movs	r0, r4
 8000746:	4692      	mov	sl, r2
 8000748:	0fed      	lsrs	r5, r5, #31
 800074a:	0e36      	lsrs	r6, r6, #24
 800074c:	0fc9      	lsrs	r1, r1, #31
 800074e:	2eff      	cmp	r6, #255	; 0xff
 8000750:	d100      	bne.n	8000754 <__aeabi_fsub+0x34>
 8000752:	e07f      	b.n	8000854 <__aeabi_fsub+0x134>
 8000754:	2201      	movs	r2, #1
 8000756:	4051      	eors	r1, r2
 8000758:	428d      	cmp	r5, r1
 800075a:	d051      	beq.n	8000800 <__aeabi_fsub+0xe0>
 800075c:	1ba2      	subs	r2, r4, r6
 800075e:	4691      	mov	r9, r2
 8000760:	2a00      	cmp	r2, #0
 8000762:	dc00      	bgt.n	8000766 <__aeabi_fsub+0x46>
 8000764:	e07e      	b.n	8000864 <__aeabi_fsub+0x144>
 8000766:	2e00      	cmp	r6, #0
 8000768:	d100      	bne.n	800076c <__aeabi_fsub+0x4c>
 800076a:	e099      	b.n	80008a0 <__aeabi_fsub+0x180>
 800076c:	2cff      	cmp	r4, #255	; 0xff
 800076e:	d100      	bne.n	8000772 <__aeabi_fsub+0x52>
 8000770:	e08c      	b.n	800088c <__aeabi_fsub+0x16c>
 8000772:	2380      	movs	r3, #128	; 0x80
 8000774:	4652      	mov	r2, sl
 8000776:	04db      	lsls	r3, r3, #19
 8000778:	431a      	orrs	r2, r3
 800077a:	4692      	mov	sl, r2
 800077c:	464a      	mov	r2, r9
 800077e:	2301      	movs	r3, #1
 8000780:	2a1b      	cmp	r2, #27
 8000782:	dc08      	bgt.n	8000796 <__aeabi_fsub+0x76>
 8000784:	4653      	mov	r3, sl
 8000786:	2120      	movs	r1, #32
 8000788:	40d3      	lsrs	r3, r2
 800078a:	1a89      	subs	r1, r1, r2
 800078c:	4652      	mov	r2, sl
 800078e:	408a      	lsls	r2, r1
 8000790:	1e51      	subs	r1, r2, #1
 8000792:	418a      	sbcs	r2, r1
 8000794:	4313      	orrs	r3, r2
 8000796:	4662      	mov	r2, ip
 8000798:	1ad3      	subs	r3, r2, r3
 800079a:	015a      	lsls	r2, r3, #5
 800079c:	d400      	bmi.n	80007a0 <__aeabi_fsub+0x80>
 800079e:	e0f3      	b.n	8000988 <__aeabi_fsub+0x268>
 80007a0:	019b      	lsls	r3, r3, #6
 80007a2:	099e      	lsrs	r6, r3, #6
 80007a4:	0030      	movs	r0, r6
 80007a6:	f001 fd65 	bl	8002274 <__clzsi2>
 80007aa:	3805      	subs	r0, #5
 80007ac:	4086      	lsls	r6, r0
 80007ae:	4284      	cmp	r4, r0
 80007b0:	dd00      	ble.n	80007b4 <__aeabi_fsub+0x94>
 80007b2:	e0f7      	b.n	80009a4 <__aeabi_fsub+0x284>
 80007b4:	0032      	movs	r2, r6
 80007b6:	1b04      	subs	r4, r0, r4
 80007b8:	2020      	movs	r0, #32
 80007ba:	3401      	adds	r4, #1
 80007bc:	40e2      	lsrs	r2, r4
 80007be:	1b04      	subs	r4, r0, r4
 80007c0:	40a6      	lsls	r6, r4
 80007c2:	0033      	movs	r3, r6
 80007c4:	1e5e      	subs	r6, r3, #1
 80007c6:	41b3      	sbcs	r3, r6
 80007c8:	2400      	movs	r4, #0
 80007ca:	4313      	orrs	r3, r2
 80007cc:	075a      	lsls	r2, r3, #29
 80007ce:	d004      	beq.n	80007da <__aeabi_fsub+0xba>
 80007d0:	220f      	movs	r2, #15
 80007d2:	401a      	ands	r2, r3
 80007d4:	2a04      	cmp	r2, #4
 80007d6:	d000      	beq.n	80007da <__aeabi_fsub+0xba>
 80007d8:	3304      	adds	r3, #4
 80007da:	015a      	lsls	r2, r3, #5
 80007dc:	d400      	bmi.n	80007e0 <__aeabi_fsub+0xc0>
 80007de:	e0d6      	b.n	800098e <__aeabi_fsub+0x26e>
 80007e0:	1c62      	adds	r2, r4, #1
 80007e2:	2cfe      	cmp	r4, #254	; 0xfe
 80007e4:	d100      	bne.n	80007e8 <__aeabi_fsub+0xc8>
 80007e6:	e0da      	b.n	800099e <__aeabi_fsub+0x27e>
 80007e8:	019b      	lsls	r3, r3, #6
 80007ea:	0a5f      	lsrs	r7, r3, #9
 80007ec:	b2d0      	uxtb	r0, r2
 80007ee:	05c0      	lsls	r0, r0, #23
 80007f0:	4338      	orrs	r0, r7
 80007f2:	07ed      	lsls	r5, r5, #31
 80007f4:	4328      	orrs	r0, r5
 80007f6:	bce0      	pop	{r5, r6, r7}
 80007f8:	46ba      	mov	sl, r7
 80007fa:	46b1      	mov	r9, r6
 80007fc:	46a8      	mov	r8, r5
 80007fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000800:	1ba2      	subs	r2, r4, r6
 8000802:	4691      	mov	r9, r2
 8000804:	2a00      	cmp	r2, #0
 8000806:	dd63      	ble.n	80008d0 <__aeabi_fsub+0x1b0>
 8000808:	2e00      	cmp	r6, #0
 800080a:	d100      	bne.n	800080e <__aeabi_fsub+0xee>
 800080c:	e099      	b.n	8000942 <__aeabi_fsub+0x222>
 800080e:	2cff      	cmp	r4, #255	; 0xff
 8000810:	d03c      	beq.n	800088c <__aeabi_fsub+0x16c>
 8000812:	2380      	movs	r3, #128	; 0x80
 8000814:	4652      	mov	r2, sl
 8000816:	04db      	lsls	r3, r3, #19
 8000818:	431a      	orrs	r2, r3
 800081a:	4692      	mov	sl, r2
 800081c:	464a      	mov	r2, r9
 800081e:	2301      	movs	r3, #1
 8000820:	2a1b      	cmp	r2, #27
 8000822:	dc08      	bgt.n	8000836 <__aeabi_fsub+0x116>
 8000824:	4653      	mov	r3, sl
 8000826:	2120      	movs	r1, #32
 8000828:	40d3      	lsrs	r3, r2
 800082a:	1a89      	subs	r1, r1, r2
 800082c:	4652      	mov	r2, sl
 800082e:	408a      	lsls	r2, r1
 8000830:	1e51      	subs	r1, r2, #1
 8000832:	418a      	sbcs	r2, r1
 8000834:	4313      	orrs	r3, r2
 8000836:	4463      	add	r3, ip
 8000838:	015a      	lsls	r2, r3, #5
 800083a:	d400      	bmi.n	800083e <__aeabi_fsub+0x11e>
 800083c:	e0a4      	b.n	8000988 <__aeabi_fsub+0x268>
 800083e:	3401      	adds	r4, #1
 8000840:	2cff      	cmp	r4, #255	; 0xff
 8000842:	d100      	bne.n	8000846 <__aeabi_fsub+0x126>
 8000844:	e0ab      	b.n	800099e <__aeabi_fsub+0x27e>
 8000846:	2201      	movs	r2, #1
 8000848:	4997      	ldr	r1, [pc, #604]	; (8000aa8 <__aeabi_fsub+0x388>)
 800084a:	401a      	ands	r2, r3
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	400b      	ands	r3, r1
 8000850:	4313      	orrs	r3, r2
 8000852:	e7bb      	b.n	80007cc <__aeabi_fsub+0xac>
 8000854:	2a00      	cmp	r2, #0
 8000856:	d032      	beq.n	80008be <__aeabi_fsub+0x19e>
 8000858:	428d      	cmp	r5, r1
 800085a:	d035      	beq.n	80008c8 <__aeabi_fsub+0x1a8>
 800085c:	22ff      	movs	r2, #255	; 0xff
 800085e:	4252      	negs	r2, r2
 8000860:	4691      	mov	r9, r2
 8000862:	44a1      	add	r9, r4
 8000864:	464a      	mov	r2, r9
 8000866:	2a00      	cmp	r2, #0
 8000868:	d051      	beq.n	800090e <__aeabi_fsub+0x1ee>
 800086a:	1b30      	subs	r0, r6, r4
 800086c:	2c00      	cmp	r4, #0
 800086e:	d000      	beq.n	8000872 <__aeabi_fsub+0x152>
 8000870:	e09c      	b.n	80009ac <__aeabi_fsub+0x28c>
 8000872:	4663      	mov	r3, ip
 8000874:	2b00      	cmp	r3, #0
 8000876:	d100      	bne.n	800087a <__aeabi_fsub+0x15a>
 8000878:	e0df      	b.n	8000a3a <__aeabi_fsub+0x31a>
 800087a:	3801      	subs	r0, #1
 800087c:	2800      	cmp	r0, #0
 800087e:	d100      	bne.n	8000882 <__aeabi_fsub+0x162>
 8000880:	e0f7      	b.n	8000a72 <__aeabi_fsub+0x352>
 8000882:	2eff      	cmp	r6, #255	; 0xff
 8000884:	d000      	beq.n	8000888 <__aeabi_fsub+0x168>
 8000886:	e099      	b.n	80009bc <__aeabi_fsub+0x29c>
 8000888:	000d      	movs	r5, r1
 800088a:	4643      	mov	r3, r8
 800088c:	2b00      	cmp	r3, #0
 800088e:	d100      	bne.n	8000892 <__aeabi_fsub+0x172>
 8000890:	e085      	b.n	800099e <__aeabi_fsub+0x27e>
 8000892:	2780      	movs	r7, #128	; 0x80
 8000894:	03ff      	lsls	r7, r7, #15
 8000896:	431f      	orrs	r7, r3
 8000898:	027f      	lsls	r7, r7, #9
 800089a:	20ff      	movs	r0, #255	; 0xff
 800089c:	0a7f      	lsrs	r7, r7, #9
 800089e:	e7a6      	b.n	80007ee <__aeabi_fsub+0xce>
 80008a0:	4652      	mov	r2, sl
 80008a2:	2a00      	cmp	r2, #0
 80008a4:	d074      	beq.n	8000990 <__aeabi_fsub+0x270>
 80008a6:	2201      	movs	r2, #1
 80008a8:	4252      	negs	r2, r2
 80008aa:	4690      	mov	r8, r2
 80008ac:	44c1      	add	r9, r8
 80008ae:	464a      	mov	r2, r9
 80008b0:	2a00      	cmp	r2, #0
 80008b2:	d100      	bne.n	80008b6 <__aeabi_fsub+0x196>
 80008b4:	e0c8      	b.n	8000a48 <__aeabi_fsub+0x328>
 80008b6:	2cff      	cmp	r4, #255	; 0xff
 80008b8:	d000      	beq.n	80008bc <__aeabi_fsub+0x19c>
 80008ba:	e75f      	b.n	800077c <__aeabi_fsub+0x5c>
 80008bc:	e7e6      	b.n	800088c <__aeabi_fsub+0x16c>
 80008be:	2201      	movs	r2, #1
 80008c0:	4051      	eors	r1, r2
 80008c2:	42a9      	cmp	r1, r5
 80008c4:	d000      	beq.n	80008c8 <__aeabi_fsub+0x1a8>
 80008c6:	e749      	b.n	800075c <__aeabi_fsub+0x3c>
 80008c8:	22ff      	movs	r2, #255	; 0xff
 80008ca:	4252      	negs	r2, r2
 80008cc:	4691      	mov	r9, r2
 80008ce:	44a1      	add	r9, r4
 80008d0:	464a      	mov	r2, r9
 80008d2:	2a00      	cmp	r2, #0
 80008d4:	d043      	beq.n	800095e <__aeabi_fsub+0x23e>
 80008d6:	1b31      	subs	r1, r6, r4
 80008d8:	2c00      	cmp	r4, #0
 80008da:	d100      	bne.n	80008de <__aeabi_fsub+0x1be>
 80008dc:	e08c      	b.n	80009f8 <__aeabi_fsub+0x2d8>
 80008de:	2eff      	cmp	r6, #255	; 0xff
 80008e0:	d100      	bne.n	80008e4 <__aeabi_fsub+0x1c4>
 80008e2:	e092      	b.n	8000a0a <__aeabi_fsub+0x2ea>
 80008e4:	2380      	movs	r3, #128	; 0x80
 80008e6:	4662      	mov	r2, ip
 80008e8:	04db      	lsls	r3, r3, #19
 80008ea:	431a      	orrs	r2, r3
 80008ec:	4694      	mov	ip, r2
 80008ee:	2301      	movs	r3, #1
 80008f0:	291b      	cmp	r1, #27
 80008f2:	dc09      	bgt.n	8000908 <__aeabi_fsub+0x1e8>
 80008f4:	2020      	movs	r0, #32
 80008f6:	4663      	mov	r3, ip
 80008f8:	4662      	mov	r2, ip
 80008fa:	40cb      	lsrs	r3, r1
 80008fc:	1a41      	subs	r1, r0, r1
 80008fe:	408a      	lsls	r2, r1
 8000900:	0011      	movs	r1, r2
 8000902:	1e48      	subs	r0, r1, #1
 8000904:	4181      	sbcs	r1, r0
 8000906:	430b      	orrs	r3, r1
 8000908:	0034      	movs	r4, r6
 800090a:	4453      	add	r3, sl
 800090c:	e794      	b.n	8000838 <__aeabi_fsub+0x118>
 800090e:	22fe      	movs	r2, #254	; 0xfe
 8000910:	1c66      	adds	r6, r4, #1
 8000912:	4232      	tst	r2, r6
 8000914:	d164      	bne.n	80009e0 <__aeabi_fsub+0x2c0>
 8000916:	2c00      	cmp	r4, #0
 8000918:	d000      	beq.n	800091c <__aeabi_fsub+0x1fc>
 800091a:	e082      	b.n	8000a22 <__aeabi_fsub+0x302>
 800091c:	4663      	mov	r3, ip
 800091e:	2b00      	cmp	r3, #0
 8000920:	d100      	bne.n	8000924 <__aeabi_fsub+0x204>
 8000922:	e0ab      	b.n	8000a7c <__aeabi_fsub+0x35c>
 8000924:	4653      	mov	r3, sl
 8000926:	2b00      	cmp	r3, #0
 8000928:	d100      	bne.n	800092c <__aeabi_fsub+0x20c>
 800092a:	e760      	b.n	80007ee <__aeabi_fsub+0xce>
 800092c:	4663      	mov	r3, ip
 800092e:	4652      	mov	r2, sl
 8000930:	1a9b      	subs	r3, r3, r2
 8000932:	015a      	lsls	r2, r3, #5
 8000934:	d400      	bmi.n	8000938 <__aeabi_fsub+0x218>
 8000936:	e0aa      	b.n	8000a8e <__aeabi_fsub+0x36e>
 8000938:	4663      	mov	r3, ip
 800093a:	4652      	mov	r2, sl
 800093c:	000d      	movs	r5, r1
 800093e:	1ad3      	subs	r3, r2, r3
 8000940:	e744      	b.n	80007cc <__aeabi_fsub+0xac>
 8000942:	4652      	mov	r2, sl
 8000944:	2a00      	cmp	r2, #0
 8000946:	d023      	beq.n	8000990 <__aeabi_fsub+0x270>
 8000948:	2201      	movs	r2, #1
 800094a:	4252      	negs	r2, r2
 800094c:	4690      	mov	r8, r2
 800094e:	44c1      	add	r9, r8
 8000950:	464a      	mov	r2, r9
 8000952:	2a00      	cmp	r2, #0
 8000954:	d075      	beq.n	8000a42 <__aeabi_fsub+0x322>
 8000956:	2cff      	cmp	r4, #255	; 0xff
 8000958:	d000      	beq.n	800095c <__aeabi_fsub+0x23c>
 800095a:	e75f      	b.n	800081c <__aeabi_fsub+0xfc>
 800095c:	e796      	b.n	800088c <__aeabi_fsub+0x16c>
 800095e:	26fe      	movs	r6, #254	; 0xfe
 8000960:	3401      	adds	r4, #1
 8000962:	4226      	tst	r6, r4
 8000964:	d153      	bne.n	8000a0e <__aeabi_fsub+0x2ee>
 8000966:	2800      	cmp	r0, #0
 8000968:	d172      	bne.n	8000a50 <__aeabi_fsub+0x330>
 800096a:	4663      	mov	r3, ip
 800096c:	2b00      	cmp	r3, #0
 800096e:	d100      	bne.n	8000972 <__aeabi_fsub+0x252>
 8000970:	e093      	b.n	8000a9a <__aeabi_fsub+0x37a>
 8000972:	4653      	mov	r3, sl
 8000974:	2b00      	cmp	r3, #0
 8000976:	d100      	bne.n	800097a <__aeabi_fsub+0x25a>
 8000978:	e739      	b.n	80007ee <__aeabi_fsub+0xce>
 800097a:	4463      	add	r3, ip
 800097c:	2400      	movs	r4, #0
 800097e:	015a      	lsls	r2, r3, #5
 8000980:	d502      	bpl.n	8000988 <__aeabi_fsub+0x268>
 8000982:	4a4a      	ldr	r2, [pc, #296]	; (8000aac <__aeabi_fsub+0x38c>)
 8000984:	3401      	adds	r4, #1
 8000986:	4013      	ands	r3, r2
 8000988:	075a      	lsls	r2, r3, #29
 800098a:	d000      	beq.n	800098e <__aeabi_fsub+0x26e>
 800098c:	e720      	b.n	80007d0 <__aeabi_fsub+0xb0>
 800098e:	08db      	lsrs	r3, r3, #3
 8000990:	2cff      	cmp	r4, #255	; 0xff
 8000992:	d100      	bne.n	8000996 <__aeabi_fsub+0x276>
 8000994:	e77a      	b.n	800088c <__aeabi_fsub+0x16c>
 8000996:	025b      	lsls	r3, r3, #9
 8000998:	0a5f      	lsrs	r7, r3, #9
 800099a:	b2e0      	uxtb	r0, r4
 800099c:	e727      	b.n	80007ee <__aeabi_fsub+0xce>
 800099e:	20ff      	movs	r0, #255	; 0xff
 80009a0:	2700      	movs	r7, #0
 80009a2:	e724      	b.n	80007ee <__aeabi_fsub+0xce>
 80009a4:	4b41      	ldr	r3, [pc, #260]	; (8000aac <__aeabi_fsub+0x38c>)
 80009a6:	1a24      	subs	r4, r4, r0
 80009a8:	4033      	ands	r3, r6
 80009aa:	e70f      	b.n	80007cc <__aeabi_fsub+0xac>
 80009ac:	2eff      	cmp	r6, #255	; 0xff
 80009ae:	d100      	bne.n	80009b2 <__aeabi_fsub+0x292>
 80009b0:	e76a      	b.n	8000888 <__aeabi_fsub+0x168>
 80009b2:	2380      	movs	r3, #128	; 0x80
 80009b4:	4662      	mov	r2, ip
 80009b6:	04db      	lsls	r3, r3, #19
 80009b8:	431a      	orrs	r2, r3
 80009ba:	4694      	mov	ip, r2
 80009bc:	2301      	movs	r3, #1
 80009be:	281b      	cmp	r0, #27
 80009c0:	dc09      	bgt.n	80009d6 <__aeabi_fsub+0x2b6>
 80009c2:	2420      	movs	r4, #32
 80009c4:	4663      	mov	r3, ip
 80009c6:	4662      	mov	r2, ip
 80009c8:	40c3      	lsrs	r3, r0
 80009ca:	1a20      	subs	r0, r4, r0
 80009cc:	4082      	lsls	r2, r0
 80009ce:	0010      	movs	r0, r2
 80009d0:	1e44      	subs	r4, r0, #1
 80009d2:	41a0      	sbcs	r0, r4
 80009d4:	4303      	orrs	r3, r0
 80009d6:	4652      	mov	r2, sl
 80009d8:	000d      	movs	r5, r1
 80009da:	0034      	movs	r4, r6
 80009dc:	1ad3      	subs	r3, r2, r3
 80009de:	e6dc      	b.n	800079a <__aeabi_fsub+0x7a>
 80009e0:	4663      	mov	r3, ip
 80009e2:	4652      	mov	r2, sl
 80009e4:	1a9e      	subs	r6, r3, r2
 80009e6:	0173      	lsls	r3, r6, #5
 80009e8:	d417      	bmi.n	8000a1a <__aeabi_fsub+0x2fa>
 80009ea:	2e00      	cmp	r6, #0
 80009ec:	d000      	beq.n	80009f0 <__aeabi_fsub+0x2d0>
 80009ee:	e6d9      	b.n	80007a4 <__aeabi_fsub+0x84>
 80009f0:	2500      	movs	r5, #0
 80009f2:	2000      	movs	r0, #0
 80009f4:	2700      	movs	r7, #0
 80009f6:	e6fa      	b.n	80007ee <__aeabi_fsub+0xce>
 80009f8:	4663      	mov	r3, ip
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d044      	beq.n	8000a88 <__aeabi_fsub+0x368>
 80009fe:	3901      	subs	r1, #1
 8000a00:	2900      	cmp	r1, #0
 8000a02:	d04c      	beq.n	8000a9e <__aeabi_fsub+0x37e>
 8000a04:	2eff      	cmp	r6, #255	; 0xff
 8000a06:	d000      	beq.n	8000a0a <__aeabi_fsub+0x2ea>
 8000a08:	e771      	b.n	80008ee <__aeabi_fsub+0x1ce>
 8000a0a:	4643      	mov	r3, r8
 8000a0c:	e73e      	b.n	800088c <__aeabi_fsub+0x16c>
 8000a0e:	2cff      	cmp	r4, #255	; 0xff
 8000a10:	d0c5      	beq.n	800099e <__aeabi_fsub+0x27e>
 8000a12:	4652      	mov	r2, sl
 8000a14:	4462      	add	r2, ip
 8000a16:	0853      	lsrs	r3, r2, #1
 8000a18:	e7b6      	b.n	8000988 <__aeabi_fsub+0x268>
 8000a1a:	4663      	mov	r3, ip
 8000a1c:	000d      	movs	r5, r1
 8000a1e:	1ad6      	subs	r6, r2, r3
 8000a20:	e6c0      	b.n	80007a4 <__aeabi_fsub+0x84>
 8000a22:	4662      	mov	r2, ip
 8000a24:	2a00      	cmp	r2, #0
 8000a26:	d116      	bne.n	8000a56 <__aeabi_fsub+0x336>
 8000a28:	4653      	mov	r3, sl
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d000      	beq.n	8000a30 <__aeabi_fsub+0x310>
 8000a2e:	e72b      	b.n	8000888 <__aeabi_fsub+0x168>
 8000a30:	2780      	movs	r7, #128	; 0x80
 8000a32:	2500      	movs	r5, #0
 8000a34:	20ff      	movs	r0, #255	; 0xff
 8000a36:	03ff      	lsls	r7, r7, #15
 8000a38:	e6d9      	b.n	80007ee <__aeabi_fsub+0xce>
 8000a3a:	000d      	movs	r5, r1
 8000a3c:	4643      	mov	r3, r8
 8000a3e:	0034      	movs	r4, r6
 8000a40:	e7a6      	b.n	8000990 <__aeabi_fsub+0x270>
 8000a42:	4653      	mov	r3, sl
 8000a44:	4463      	add	r3, ip
 8000a46:	e6f7      	b.n	8000838 <__aeabi_fsub+0x118>
 8000a48:	4663      	mov	r3, ip
 8000a4a:	4652      	mov	r2, sl
 8000a4c:	1a9b      	subs	r3, r3, r2
 8000a4e:	e6a4      	b.n	800079a <__aeabi_fsub+0x7a>
 8000a50:	4662      	mov	r2, ip
 8000a52:	2a00      	cmp	r2, #0
 8000a54:	d0d9      	beq.n	8000a0a <__aeabi_fsub+0x2ea>
 8000a56:	4652      	mov	r2, sl
 8000a58:	2a00      	cmp	r2, #0
 8000a5a:	d100      	bne.n	8000a5e <__aeabi_fsub+0x33e>
 8000a5c:	e716      	b.n	800088c <__aeabi_fsub+0x16c>
 8000a5e:	2280      	movs	r2, #128	; 0x80
 8000a60:	03d2      	lsls	r2, r2, #15
 8000a62:	4213      	tst	r3, r2
 8000a64:	d100      	bne.n	8000a68 <__aeabi_fsub+0x348>
 8000a66:	e711      	b.n	800088c <__aeabi_fsub+0x16c>
 8000a68:	4640      	mov	r0, r8
 8000a6a:	4210      	tst	r0, r2
 8000a6c:	d000      	beq.n	8000a70 <__aeabi_fsub+0x350>
 8000a6e:	e70d      	b.n	800088c <__aeabi_fsub+0x16c>
 8000a70:	e70a      	b.n	8000888 <__aeabi_fsub+0x168>
 8000a72:	4652      	mov	r2, sl
 8000a74:	000d      	movs	r5, r1
 8000a76:	0034      	movs	r4, r6
 8000a78:	1ad3      	subs	r3, r2, r3
 8000a7a:	e68e      	b.n	800079a <__aeabi_fsub+0x7a>
 8000a7c:	4653      	mov	r3, sl
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d008      	beq.n	8000a94 <__aeabi_fsub+0x374>
 8000a82:	000d      	movs	r5, r1
 8000a84:	4647      	mov	r7, r8
 8000a86:	e6b2      	b.n	80007ee <__aeabi_fsub+0xce>
 8000a88:	4643      	mov	r3, r8
 8000a8a:	0034      	movs	r4, r6
 8000a8c:	e780      	b.n	8000990 <__aeabi_fsub+0x270>
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d000      	beq.n	8000a94 <__aeabi_fsub+0x374>
 8000a92:	e779      	b.n	8000988 <__aeabi_fsub+0x268>
 8000a94:	2500      	movs	r5, #0
 8000a96:	2700      	movs	r7, #0
 8000a98:	e6a9      	b.n	80007ee <__aeabi_fsub+0xce>
 8000a9a:	4647      	mov	r7, r8
 8000a9c:	e6a7      	b.n	80007ee <__aeabi_fsub+0xce>
 8000a9e:	4653      	mov	r3, sl
 8000aa0:	0034      	movs	r4, r6
 8000aa2:	4463      	add	r3, ip
 8000aa4:	e6c8      	b.n	8000838 <__aeabi_fsub+0x118>
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	7dffffff 	.word	0x7dffffff
 8000aac:	fbffffff 	.word	0xfbffffff

08000ab0 <__aeabi_ui2f>:
 8000ab0:	b570      	push	{r4, r5, r6, lr}
 8000ab2:	1e05      	subs	r5, r0, #0
 8000ab4:	d00e      	beq.n	8000ad4 <__aeabi_ui2f+0x24>
 8000ab6:	f001 fbdd 	bl	8002274 <__clzsi2>
 8000aba:	239e      	movs	r3, #158	; 0x9e
 8000abc:	0004      	movs	r4, r0
 8000abe:	1a1b      	subs	r3, r3, r0
 8000ac0:	2b96      	cmp	r3, #150	; 0x96
 8000ac2:	dc0c      	bgt.n	8000ade <__aeabi_ui2f+0x2e>
 8000ac4:	2808      	cmp	r0, #8
 8000ac6:	dd01      	ble.n	8000acc <__aeabi_ui2f+0x1c>
 8000ac8:	3c08      	subs	r4, #8
 8000aca:	40a5      	lsls	r5, r4
 8000acc:	026d      	lsls	r5, r5, #9
 8000ace:	0a6d      	lsrs	r5, r5, #9
 8000ad0:	b2d8      	uxtb	r0, r3
 8000ad2:	e001      	b.n	8000ad8 <__aeabi_ui2f+0x28>
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	2500      	movs	r5, #0
 8000ad8:	05c0      	lsls	r0, r0, #23
 8000ada:	4328      	orrs	r0, r5
 8000adc:	bd70      	pop	{r4, r5, r6, pc}
 8000ade:	2b99      	cmp	r3, #153	; 0x99
 8000ae0:	dd09      	ble.n	8000af6 <__aeabi_ui2f+0x46>
 8000ae2:	0002      	movs	r2, r0
 8000ae4:	0029      	movs	r1, r5
 8000ae6:	321b      	adds	r2, #27
 8000ae8:	4091      	lsls	r1, r2
 8000aea:	1e4a      	subs	r2, r1, #1
 8000aec:	4191      	sbcs	r1, r2
 8000aee:	2205      	movs	r2, #5
 8000af0:	1a12      	subs	r2, r2, r0
 8000af2:	40d5      	lsrs	r5, r2
 8000af4:	430d      	orrs	r5, r1
 8000af6:	2c05      	cmp	r4, #5
 8000af8:	dd01      	ble.n	8000afe <__aeabi_ui2f+0x4e>
 8000afa:	1f62      	subs	r2, r4, #5
 8000afc:	4095      	lsls	r5, r2
 8000afe:	0029      	movs	r1, r5
 8000b00:	4e08      	ldr	r6, [pc, #32]	; (8000b24 <__aeabi_ui2f+0x74>)
 8000b02:	4031      	ands	r1, r6
 8000b04:	076a      	lsls	r2, r5, #29
 8000b06:	d009      	beq.n	8000b1c <__aeabi_ui2f+0x6c>
 8000b08:	200f      	movs	r0, #15
 8000b0a:	4028      	ands	r0, r5
 8000b0c:	2804      	cmp	r0, #4
 8000b0e:	d005      	beq.n	8000b1c <__aeabi_ui2f+0x6c>
 8000b10:	3104      	adds	r1, #4
 8000b12:	014a      	lsls	r2, r1, #5
 8000b14:	d502      	bpl.n	8000b1c <__aeabi_ui2f+0x6c>
 8000b16:	239f      	movs	r3, #159	; 0x9f
 8000b18:	4031      	ands	r1, r6
 8000b1a:	1b1b      	subs	r3, r3, r4
 8000b1c:	0189      	lsls	r1, r1, #6
 8000b1e:	0a4d      	lsrs	r5, r1, #9
 8000b20:	b2d8      	uxtb	r0, r3
 8000b22:	e7d9      	b.n	8000ad8 <__aeabi_ui2f+0x28>
 8000b24:	fbffffff 	.word	0xfbffffff

08000b28 <__aeabi_dadd>:
 8000b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b2a:	464f      	mov	r7, r9
 8000b2c:	46d6      	mov	lr, sl
 8000b2e:	4646      	mov	r6, r8
 8000b30:	000d      	movs	r5, r1
 8000b32:	0001      	movs	r1, r0
 8000b34:	0018      	movs	r0, r3
 8000b36:	b5c0      	push	{r6, r7, lr}
 8000b38:	0017      	movs	r7, r2
 8000b3a:	032b      	lsls	r3, r5, #12
 8000b3c:	0a5a      	lsrs	r2, r3, #9
 8000b3e:	0f4b      	lsrs	r3, r1, #29
 8000b40:	4313      	orrs	r3, r2
 8000b42:	00ca      	lsls	r2, r1, #3
 8000b44:	4691      	mov	r9, r2
 8000b46:	0302      	lsls	r2, r0, #12
 8000b48:	006e      	lsls	r6, r5, #1
 8000b4a:	0041      	lsls	r1, r0, #1
 8000b4c:	0a52      	lsrs	r2, r2, #9
 8000b4e:	0fec      	lsrs	r4, r5, #31
 8000b50:	0f7d      	lsrs	r5, r7, #29
 8000b52:	4315      	orrs	r5, r2
 8000b54:	0d76      	lsrs	r6, r6, #21
 8000b56:	0d49      	lsrs	r1, r1, #21
 8000b58:	0fc0      	lsrs	r0, r0, #31
 8000b5a:	4682      	mov	sl, r0
 8000b5c:	46ac      	mov	ip, r5
 8000b5e:	00ff      	lsls	r7, r7, #3
 8000b60:	1a72      	subs	r2, r6, r1
 8000b62:	4284      	cmp	r4, r0
 8000b64:	d100      	bne.n	8000b68 <__aeabi_dadd+0x40>
 8000b66:	e098      	b.n	8000c9a <__aeabi_dadd+0x172>
 8000b68:	2a00      	cmp	r2, #0
 8000b6a:	dc00      	bgt.n	8000b6e <__aeabi_dadd+0x46>
 8000b6c:	e081      	b.n	8000c72 <__aeabi_dadd+0x14a>
 8000b6e:	2900      	cmp	r1, #0
 8000b70:	d100      	bne.n	8000b74 <__aeabi_dadd+0x4c>
 8000b72:	e0b6      	b.n	8000ce2 <__aeabi_dadd+0x1ba>
 8000b74:	49c9      	ldr	r1, [pc, #804]	; (8000e9c <__aeabi_dadd+0x374>)
 8000b76:	428e      	cmp	r6, r1
 8000b78:	d100      	bne.n	8000b7c <__aeabi_dadd+0x54>
 8000b7a:	e172      	b.n	8000e62 <__aeabi_dadd+0x33a>
 8000b7c:	2180      	movs	r1, #128	; 0x80
 8000b7e:	0028      	movs	r0, r5
 8000b80:	0409      	lsls	r1, r1, #16
 8000b82:	4308      	orrs	r0, r1
 8000b84:	4684      	mov	ip, r0
 8000b86:	2a38      	cmp	r2, #56	; 0x38
 8000b88:	dd00      	ble.n	8000b8c <__aeabi_dadd+0x64>
 8000b8a:	e15e      	b.n	8000e4a <__aeabi_dadd+0x322>
 8000b8c:	2a1f      	cmp	r2, #31
 8000b8e:	dd00      	ble.n	8000b92 <__aeabi_dadd+0x6a>
 8000b90:	e1ee      	b.n	8000f70 <__aeabi_dadd+0x448>
 8000b92:	2020      	movs	r0, #32
 8000b94:	0039      	movs	r1, r7
 8000b96:	4665      	mov	r5, ip
 8000b98:	1a80      	subs	r0, r0, r2
 8000b9a:	4087      	lsls	r7, r0
 8000b9c:	40d1      	lsrs	r1, r2
 8000b9e:	4085      	lsls	r5, r0
 8000ba0:	430d      	orrs	r5, r1
 8000ba2:	0039      	movs	r1, r7
 8000ba4:	1e4f      	subs	r7, r1, #1
 8000ba6:	41b9      	sbcs	r1, r7
 8000ba8:	4667      	mov	r7, ip
 8000baa:	40d7      	lsrs	r7, r2
 8000bac:	4329      	orrs	r1, r5
 8000bae:	1bdb      	subs	r3, r3, r7
 8000bb0:	464a      	mov	r2, r9
 8000bb2:	1a55      	subs	r5, r2, r1
 8000bb4:	45a9      	cmp	r9, r5
 8000bb6:	4189      	sbcs	r1, r1
 8000bb8:	4249      	negs	r1, r1
 8000bba:	1a5b      	subs	r3, r3, r1
 8000bbc:	4698      	mov	r8, r3
 8000bbe:	4643      	mov	r3, r8
 8000bc0:	021b      	lsls	r3, r3, #8
 8000bc2:	d400      	bmi.n	8000bc6 <__aeabi_dadd+0x9e>
 8000bc4:	e0cc      	b.n	8000d60 <__aeabi_dadd+0x238>
 8000bc6:	4643      	mov	r3, r8
 8000bc8:	025b      	lsls	r3, r3, #9
 8000bca:	0a5b      	lsrs	r3, r3, #9
 8000bcc:	4698      	mov	r8, r3
 8000bce:	4643      	mov	r3, r8
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d100      	bne.n	8000bd6 <__aeabi_dadd+0xae>
 8000bd4:	e12c      	b.n	8000e30 <__aeabi_dadd+0x308>
 8000bd6:	4640      	mov	r0, r8
 8000bd8:	f001 fb4c 	bl	8002274 <__clzsi2>
 8000bdc:	0001      	movs	r1, r0
 8000bde:	3908      	subs	r1, #8
 8000be0:	2220      	movs	r2, #32
 8000be2:	0028      	movs	r0, r5
 8000be4:	4643      	mov	r3, r8
 8000be6:	1a52      	subs	r2, r2, r1
 8000be8:	408b      	lsls	r3, r1
 8000bea:	40d0      	lsrs	r0, r2
 8000bec:	408d      	lsls	r5, r1
 8000bee:	4303      	orrs	r3, r0
 8000bf0:	428e      	cmp	r6, r1
 8000bf2:	dd00      	ble.n	8000bf6 <__aeabi_dadd+0xce>
 8000bf4:	e117      	b.n	8000e26 <__aeabi_dadd+0x2fe>
 8000bf6:	1b8e      	subs	r6, r1, r6
 8000bf8:	1c72      	adds	r2, r6, #1
 8000bfa:	2a1f      	cmp	r2, #31
 8000bfc:	dd00      	ble.n	8000c00 <__aeabi_dadd+0xd8>
 8000bfe:	e1a7      	b.n	8000f50 <__aeabi_dadd+0x428>
 8000c00:	2120      	movs	r1, #32
 8000c02:	0018      	movs	r0, r3
 8000c04:	002e      	movs	r6, r5
 8000c06:	1a89      	subs	r1, r1, r2
 8000c08:	408d      	lsls	r5, r1
 8000c0a:	4088      	lsls	r0, r1
 8000c0c:	40d6      	lsrs	r6, r2
 8000c0e:	40d3      	lsrs	r3, r2
 8000c10:	1e69      	subs	r1, r5, #1
 8000c12:	418d      	sbcs	r5, r1
 8000c14:	4330      	orrs	r0, r6
 8000c16:	4698      	mov	r8, r3
 8000c18:	2600      	movs	r6, #0
 8000c1a:	4305      	orrs	r5, r0
 8000c1c:	076b      	lsls	r3, r5, #29
 8000c1e:	d009      	beq.n	8000c34 <__aeabi_dadd+0x10c>
 8000c20:	230f      	movs	r3, #15
 8000c22:	402b      	ands	r3, r5
 8000c24:	2b04      	cmp	r3, #4
 8000c26:	d005      	beq.n	8000c34 <__aeabi_dadd+0x10c>
 8000c28:	1d2b      	adds	r3, r5, #4
 8000c2a:	42ab      	cmp	r3, r5
 8000c2c:	41ad      	sbcs	r5, r5
 8000c2e:	426d      	negs	r5, r5
 8000c30:	44a8      	add	r8, r5
 8000c32:	001d      	movs	r5, r3
 8000c34:	4643      	mov	r3, r8
 8000c36:	021b      	lsls	r3, r3, #8
 8000c38:	d400      	bmi.n	8000c3c <__aeabi_dadd+0x114>
 8000c3a:	e094      	b.n	8000d66 <__aeabi_dadd+0x23e>
 8000c3c:	4b97      	ldr	r3, [pc, #604]	; (8000e9c <__aeabi_dadd+0x374>)
 8000c3e:	1c72      	adds	r2, r6, #1
 8000c40:	429a      	cmp	r2, r3
 8000c42:	d100      	bne.n	8000c46 <__aeabi_dadd+0x11e>
 8000c44:	e09d      	b.n	8000d82 <__aeabi_dadd+0x25a>
 8000c46:	4641      	mov	r1, r8
 8000c48:	4b95      	ldr	r3, [pc, #596]	; (8000ea0 <__aeabi_dadd+0x378>)
 8000c4a:	08ed      	lsrs	r5, r5, #3
 8000c4c:	4019      	ands	r1, r3
 8000c4e:	000b      	movs	r3, r1
 8000c50:	0552      	lsls	r2, r2, #21
 8000c52:	0749      	lsls	r1, r1, #29
 8000c54:	025b      	lsls	r3, r3, #9
 8000c56:	4329      	orrs	r1, r5
 8000c58:	0b1b      	lsrs	r3, r3, #12
 8000c5a:	0d52      	lsrs	r2, r2, #21
 8000c5c:	0512      	lsls	r2, r2, #20
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	07e4      	lsls	r4, r4, #31
 8000c62:	4323      	orrs	r3, r4
 8000c64:	0008      	movs	r0, r1
 8000c66:	0019      	movs	r1, r3
 8000c68:	bce0      	pop	{r5, r6, r7}
 8000c6a:	46ba      	mov	sl, r7
 8000c6c:	46b1      	mov	r9, r6
 8000c6e:	46a8      	mov	r8, r5
 8000c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c72:	2a00      	cmp	r2, #0
 8000c74:	d043      	beq.n	8000cfe <__aeabi_dadd+0x1d6>
 8000c76:	1b8a      	subs	r2, r1, r6
 8000c78:	2e00      	cmp	r6, #0
 8000c7a:	d000      	beq.n	8000c7e <__aeabi_dadd+0x156>
 8000c7c:	e12a      	b.n	8000ed4 <__aeabi_dadd+0x3ac>
 8000c7e:	464c      	mov	r4, r9
 8000c80:	431c      	orrs	r4, r3
 8000c82:	d100      	bne.n	8000c86 <__aeabi_dadd+0x15e>
 8000c84:	e1d1      	b.n	800102a <__aeabi_dadd+0x502>
 8000c86:	1e54      	subs	r4, r2, #1
 8000c88:	2a01      	cmp	r2, #1
 8000c8a:	d100      	bne.n	8000c8e <__aeabi_dadd+0x166>
 8000c8c:	e21f      	b.n	80010ce <__aeabi_dadd+0x5a6>
 8000c8e:	4d83      	ldr	r5, [pc, #524]	; (8000e9c <__aeabi_dadd+0x374>)
 8000c90:	42aa      	cmp	r2, r5
 8000c92:	d100      	bne.n	8000c96 <__aeabi_dadd+0x16e>
 8000c94:	e272      	b.n	800117c <__aeabi_dadd+0x654>
 8000c96:	0022      	movs	r2, r4
 8000c98:	e123      	b.n	8000ee2 <__aeabi_dadd+0x3ba>
 8000c9a:	2a00      	cmp	r2, #0
 8000c9c:	dc00      	bgt.n	8000ca0 <__aeabi_dadd+0x178>
 8000c9e:	e098      	b.n	8000dd2 <__aeabi_dadd+0x2aa>
 8000ca0:	2900      	cmp	r1, #0
 8000ca2:	d042      	beq.n	8000d2a <__aeabi_dadd+0x202>
 8000ca4:	497d      	ldr	r1, [pc, #500]	; (8000e9c <__aeabi_dadd+0x374>)
 8000ca6:	428e      	cmp	r6, r1
 8000ca8:	d100      	bne.n	8000cac <__aeabi_dadd+0x184>
 8000caa:	e0da      	b.n	8000e62 <__aeabi_dadd+0x33a>
 8000cac:	2180      	movs	r1, #128	; 0x80
 8000cae:	0028      	movs	r0, r5
 8000cb0:	0409      	lsls	r1, r1, #16
 8000cb2:	4308      	orrs	r0, r1
 8000cb4:	4684      	mov	ip, r0
 8000cb6:	2a38      	cmp	r2, #56	; 0x38
 8000cb8:	dd00      	ble.n	8000cbc <__aeabi_dadd+0x194>
 8000cba:	e129      	b.n	8000f10 <__aeabi_dadd+0x3e8>
 8000cbc:	2a1f      	cmp	r2, #31
 8000cbe:	dc00      	bgt.n	8000cc2 <__aeabi_dadd+0x19a>
 8000cc0:	e187      	b.n	8000fd2 <__aeabi_dadd+0x4aa>
 8000cc2:	0011      	movs	r1, r2
 8000cc4:	4665      	mov	r5, ip
 8000cc6:	3920      	subs	r1, #32
 8000cc8:	40cd      	lsrs	r5, r1
 8000cca:	2a20      	cmp	r2, #32
 8000ccc:	d004      	beq.n	8000cd8 <__aeabi_dadd+0x1b0>
 8000cce:	2040      	movs	r0, #64	; 0x40
 8000cd0:	4661      	mov	r1, ip
 8000cd2:	1a82      	subs	r2, r0, r2
 8000cd4:	4091      	lsls	r1, r2
 8000cd6:	430f      	orrs	r7, r1
 8000cd8:	0039      	movs	r1, r7
 8000cda:	1e4f      	subs	r7, r1, #1
 8000cdc:	41b9      	sbcs	r1, r7
 8000cde:	430d      	orrs	r5, r1
 8000ce0:	e11b      	b.n	8000f1a <__aeabi_dadd+0x3f2>
 8000ce2:	0029      	movs	r1, r5
 8000ce4:	4339      	orrs	r1, r7
 8000ce6:	d100      	bne.n	8000cea <__aeabi_dadd+0x1c2>
 8000ce8:	e0b5      	b.n	8000e56 <__aeabi_dadd+0x32e>
 8000cea:	1e51      	subs	r1, r2, #1
 8000cec:	2a01      	cmp	r2, #1
 8000cee:	d100      	bne.n	8000cf2 <__aeabi_dadd+0x1ca>
 8000cf0:	e1ab      	b.n	800104a <__aeabi_dadd+0x522>
 8000cf2:	486a      	ldr	r0, [pc, #424]	; (8000e9c <__aeabi_dadd+0x374>)
 8000cf4:	4282      	cmp	r2, r0
 8000cf6:	d100      	bne.n	8000cfa <__aeabi_dadd+0x1d2>
 8000cf8:	e1b2      	b.n	8001060 <__aeabi_dadd+0x538>
 8000cfa:	000a      	movs	r2, r1
 8000cfc:	e743      	b.n	8000b86 <__aeabi_dadd+0x5e>
 8000cfe:	4969      	ldr	r1, [pc, #420]	; (8000ea4 <__aeabi_dadd+0x37c>)
 8000d00:	1c75      	adds	r5, r6, #1
 8000d02:	420d      	tst	r5, r1
 8000d04:	d000      	beq.n	8000d08 <__aeabi_dadd+0x1e0>
 8000d06:	e0cf      	b.n	8000ea8 <__aeabi_dadd+0x380>
 8000d08:	2e00      	cmp	r6, #0
 8000d0a:	d000      	beq.n	8000d0e <__aeabi_dadd+0x1e6>
 8000d0c:	e193      	b.n	8001036 <__aeabi_dadd+0x50e>
 8000d0e:	4649      	mov	r1, r9
 8000d10:	4319      	orrs	r1, r3
 8000d12:	d100      	bne.n	8000d16 <__aeabi_dadd+0x1ee>
 8000d14:	e1d1      	b.n	80010ba <__aeabi_dadd+0x592>
 8000d16:	4661      	mov	r1, ip
 8000d18:	4339      	orrs	r1, r7
 8000d1a:	d000      	beq.n	8000d1e <__aeabi_dadd+0x1f6>
 8000d1c:	e1e3      	b.n	80010e6 <__aeabi_dadd+0x5be>
 8000d1e:	4649      	mov	r1, r9
 8000d20:	0758      	lsls	r0, r3, #29
 8000d22:	08c9      	lsrs	r1, r1, #3
 8000d24:	4301      	orrs	r1, r0
 8000d26:	08db      	lsrs	r3, r3, #3
 8000d28:	e026      	b.n	8000d78 <__aeabi_dadd+0x250>
 8000d2a:	0029      	movs	r1, r5
 8000d2c:	4339      	orrs	r1, r7
 8000d2e:	d100      	bne.n	8000d32 <__aeabi_dadd+0x20a>
 8000d30:	e091      	b.n	8000e56 <__aeabi_dadd+0x32e>
 8000d32:	1e51      	subs	r1, r2, #1
 8000d34:	2a01      	cmp	r2, #1
 8000d36:	d005      	beq.n	8000d44 <__aeabi_dadd+0x21c>
 8000d38:	4858      	ldr	r0, [pc, #352]	; (8000e9c <__aeabi_dadd+0x374>)
 8000d3a:	4282      	cmp	r2, r0
 8000d3c:	d100      	bne.n	8000d40 <__aeabi_dadd+0x218>
 8000d3e:	e18f      	b.n	8001060 <__aeabi_dadd+0x538>
 8000d40:	000a      	movs	r2, r1
 8000d42:	e7b8      	b.n	8000cb6 <__aeabi_dadd+0x18e>
 8000d44:	003d      	movs	r5, r7
 8000d46:	444d      	add	r5, r9
 8000d48:	454d      	cmp	r5, r9
 8000d4a:	4189      	sbcs	r1, r1
 8000d4c:	4463      	add	r3, ip
 8000d4e:	4698      	mov	r8, r3
 8000d50:	4249      	negs	r1, r1
 8000d52:	4488      	add	r8, r1
 8000d54:	4643      	mov	r3, r8
 8000d56:	2602      	movs	r6, #2
 8000d58:	021b      	lsls	r3, r3, #8
 8000d5a:	d500      	bpl.n	8000d5e <__aeabi_dadd+0x236>
 8000d5c:	e0eb      	b.n	8000f36 <__aeabi_dadd+0x40e>
 8000d5e:	3e01      	subs	r6, #1
 8000d60:	076b      	lsls	r3, r5, #29
 8000d62:	d000      	beq.n	8000d66 <__aeabi_dadd+0x23e>
 8000d64:	e75c      	b.n	8000c20 <__aeabi_dadd+0xf8>
 8000d66:	4643      	mov	r3, r8
 8000d68:	08e9      	lsrs	r1, r5, #3
 8000d6a:	075a      	lsls	r2, r3, #29
 8000d6c:	4311      	orrs	r1, r2
 8000d6e:	0032      	movs	r2, r6
 8000d70:	08db      	lsrs	r3, r3, #3
 8000d72:	484a      	ldr	r0, [pc, #296]	; (8000e9c <__aeabi_dadd+0x374>)
 8000d74:	4282      	cmp	r2, r0
 8000d76:	d021      	beq.n	8000dbc <__aeabi_dadd+0x294>
 8000d78:	031b      	lsls	r3, r3, #12
 8000d7a:	0552      	lsls	r2, r2, #21
 8000d7c:	0b1b      	lsrs	r3, r3, #12
 8000d7e:	0d52      	lsrs	r2, r2, #21
 8000d80:	e76c      	b.n	8000c5c <__aeabi_dadd+0x134>
 8000d82:	2300      	movs	r3, #0
 8000d84:	2100      	movs	r1, #0
 8000d86:	e769      	b.n	8000c5c <__aeabi_dadd+0x134>
 8000d88:	002a      	movs	r2, r5
 8000d8a:	433a      	orrs	r2, r7
 8000d8c:	d069      	beq.n	8000e62 <__aeabi_dadd+0x33a>
 8000d8e:	464a      	mov	r2, r9
 8000d90:	0758      	lsls	r0, r3, #29
 8000d92:	08d1      	lsrs	r1, r2, #3
 8000d94:	08da      	lsrs	r2, r3, #3
 8000d96:	2380      	movs	r3, #128	; 0x80
 8000d98:	031b      	lsls	r3, r3, #12
 8000d9a:	4308      	orrs	r0, r1
 8000d9c:	421a      	tst	r2, r3
 8000d9e:	d007      	beq.n	8000db0 <__aeabi_dadd+0x288>
 8000da0:	0029      	movs	r1, r5
 8000da2:	08ed      	lsrs	r5, r5, #3
 8000da4:	421d      	tst	r5, r3
 8000da6:	d103      	bne.n	8000db0 <__aeabi_dadd+0x288>
 8000da8:	002a      	movs	r2, r5
 8000daa:	08ff      	lsrs	r7, r7, #3
 8000dac:	0748      	lsls	r0, r1, #29
 8000dae:	4338      	orrs	r0, r7
 8000db0:	0f43      	lsrs	r3, r0, #29
 8000db2:	00c1      	lsls	r1, r0, #3
 8000db4:	075b      	lsls	r3, r3, #29
 8000db6:	08c9      	lsrs	r1, r1, #3
 8000db8:	4319      	orrs	r1, r3
 8000dba:	0013      	movs	r3, r2
 8000dbc:	000a      	movs	r2, r1
 8000dbe:	431a      	orrs	r2, r3
 8000dc0:	d100      	bne.n	8000dc4 <__aeabi_dadd+0x29c>
 8000dc2:	e213      	b.n	80011ec <__aeabi_dadd+0x6c4>
 8000dc4:	2280      	movs	r2, #128	; 0x80
 8000dc6:	0312      	lsls	r2, r2, #12
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	031b      	lsls	r3, r3, #12
 8000dcc:	4a33      	ldr	r2, [pc, #204]	; (8000e9c <__aeabi_dadd+0x374>)
 8000dce:	0b1b      	lsrs	r3, r3, #12
 8000dd0:	e744      	b.n	8000c5c <__aeabi_dadd+0x134>
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d04b      	beq.n	8000e6e <__aeabi_dadd+0x346>
 8000dd6:	1b8a      	subs	r2, r1, r6
 8000dd8:	2e00      	cmp	r6, #0
 8000dda:	d100      	bne.n	8000dde <__aeabi_dadd+0x2b6>
 8000ddc:	e0e7      	b.n	8000fae <__aeabi_dadd+0x486>
 8000dde:	482f      	ldr	r0, [pc, #188]	; (8000e9c <__aeabi_dadd+0x374>)
 8000de0:	4281      	cmp	r1, r0
 8000de2:	d100      	bne.n	8000de6 <__aeabi_dadd+0x2be>
 8000de4:	e195      	b.n	8001112 <__aeabi_dadd+0x5ea>
 8000de6:	2080      	movs	r0, #128	; 0x80
 8000de8:	0400      	lsls	r0, r0, #16
 8000dea:	4303      	orrs	r3, r0
 8000dec:	2a38      	cmp	r2, #56	; 0x38
 8000dee:	dd00      	ble.n	8000df2 <__aeabi_dadd+0x2ca>
 8000df0:	e143      	b.n	800107a <__aeabi_dadd+0x552>
 8000df2:	2a1f      	cmp	r2, #31
 8000df4:	dd00      	ble.n	8000df8 <__aeabi_dadd+0x2d0>
 8000df6:	e1db      	b.n	80011b0 <__aeabi_dadd+0x688>
 8000df8:	2020      	movs	r0, #32
 8000dfa:	001d      	movs	r5, r3
 8000dfc:	464e      	mov	r6, r9
 8000dfe:	1a80      	subs	r0, r0, r2
 8000e00:	4085      	lsls	r5, r0
 8000e02:	40d6      	lsrs	r6, r2
 8000e04:	4335      	orrs	r5, r6
 8000e06:	464e      	mov	r6, r9
 8000e08:	4086      	lsls	r6, r0
 8000e0a:	0030      	movs	r0, r6
 8000e0c:	40d3      	lsrs	r3, r2
 8000e0e:	1e46      	subs	r6, r0, #1
 8000e10:	41b0      	sbcs	r0, r6
 8000e12:	449c      	add	ip, r3
 8000e14:	4305      	orrs	r5, r0
 8000e16:	19ed      	adds	r5, r5, r7
 8000e18:	42bd      	cmp	r5, r7
 8000e1a:	419b      	sbcs	r3, r3
 8000e1c:	425b      	negs	r3, r3
 8000e1e:	4463      	add	r3, ip
 8000e20:	4698      	mov	r8, r3
 8000e22:	000e      	movs	r6, r1
 8000e24:	e07f      	b.n	8000f26 <__aeabi_dadd+0x3fe>
 8000e26:	4a1e      	ldr	r2, [pc, #120]	; (8000ea0 <__aeabi_dadd+0x378>)
 8000e28:	1a76      	subs	r6, r6, r1
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	4698      	mov	r8, r3
 8000e2e:	e6f5      	b.n	8000c1c <__aeabi_dadd+0xf4>
 8000e30:	0028      	movs	r0, r5
 8000e32:	f001 fa1f 	bl	8002274 <__clzsi2>
 8000e36:	0001      	movs	r1, r0
 8000e38:	3118      	adds	r1, #24
 8000e3a:	291f      	cmp	r1, #31
 8000e3c:	dc00      	bgt.n	8000e40 <__aeabi_dadd+0x318>
 8000e3e:	e6cf      	b.n	8000be0 <__aeabi_dadd+0xb8>
 8000e40:	002b      	movs	r3, r5
 8000e42:	3808      	subs	r0, #8
 8000e44:	4083      	lsls	r3, r0
 8000e46:	2500      	movs	r5, #0
 8000e48:	e6d2      	b.n	8000bf0 <__aeabi_dadd+0xc8>
 8000e4a:	4662      	mov	r2, ip
 8000e4c:	433a      	orrs	r2, r7
 8000e4e:	0011      	movs	r1, r2
 8000e50:	1e4f      	subs	r7, r1, #1
 8000e52:	41b9      	sbcs	r1, r7
 8000e54:	e6ac      	b.n	8000bb0 <__aeabi_dadd+0x88>
 8000e56:	4649      	mov	r1, r9
 8000e58:	0758      	lsls	r0, r3, #29
 8000e5a:	08c9      	lsrs	r1, r1, #3
 8000e5c:	4301      	orrs	r1, r0
 8000e5e:	08db      	lsrs	r3, r3, #3
 8000e60:	e787      	b.n	8000d72 <__aeabi_dadd+0x24a>
 8000e62:	4649      	mov	r1, r9
 8000e64:	075a      	lsls	r2, r3, #29
 8000e66:	08c9      	lsrs	r1, r1, #3
 8000e68:	4311      	orrs	r1, r2
 8000e6a:	08db      	lsrs	r3, r3, #3
 8000e6c:	e7a6      	b.n	8000dbc <__aeabi_dadd+0x294>
 8000e6e:	490d      	ldr	r1, [pc, #52]	; (8000ea4 <__aeabi_dadd+0x37c>)
 8000e70:	1c70      	adds	r0, r6, #1
 8000e72:	4208      	tst	r0, r1
 8000e74:	d000      	beq.n	8000e78 <__aeabi_dadd+0x350>
 8000e76:	e0bb      	b.n	8000ff0 <__aeabi_dadd+0x4c8>
 8000e78:	2e00      	cmp	r6, #0
 8000e7a:	d000      	beq.n	8000e7e <__aeabi_dadd+0x356>
 8000e7c:	e114      	b.n	80010a8 <__aeabi_dadd+0x580>
 8000e7e:	4649      	mov	r1, r9
 8000e80:	4319      	orrs	r1, r3
 8000e82:	d100      	bne.n	8000e86 <__aeabi_dadd+0x35e>
 8000e84:	e175      	b.n	8001172 <__aeabi_dadd+0x64a>
 8000e86:	0029      	movs	r1, r5
 8000e88:	4339      	orrs	r1, r7
 8000e8a:	d000      	beq.n	8000e8e <__aeabi_dadd+0x366>
 8000e8c:	e17e      	b.n	800118c <__aeabi_dadd+0x664>
 8000e8e:	4649      	mov	r1, r9
 8000e90:	0758      	lsls	r0, r3, #29
 8000e92:	08c9      	lsrs	r1, r1, #3
 8000e94:	4301      	orrs	r1, r0
 8000e96:	08db      	lsrs	r3, r3, #3
 8000e98:	e76e      	b.n	8000d78 <__aeabi_dadd+0x250>
 8000e9a:	46c0      	nop			; (mov r8, r8)
 8000e9c:	000007ff 	.word	0x000007ff
 8000ea0:	ff7fffff 	.word	0xff7fffff
 8000ea4:	000007fe 	.word	0x000007fe
 8000ea8:	4649      	mov	r1, r9
 8000eaa:	1bcd      	subs	r5, r1, r7
 8000eac:	4661      	mov	r1, ip
 8000eae:	1a58      	subs	r0, r3, r1
 8000eb0:	45a9      	cmp	r9, r5
 8000eb2:	4189      	sbcs	r1, r1
 8000eb4:	4249      	negs	r1, r1
 8000eb6:	4688      	mov	r8, r1
 8000eb8:	0001      	movs	r1, r0
 8000eba:	4640      	mov	r0, r8
 8000ebc:	1a09      	subs	r1, r1, r0
 8000ebe:	4688      	mov	r8, r1
 8000ec0:	0209      	lsls	r1, r1, #8
 8000ec2:	d500      	bpl.n	8000ec6 <__aeabi_dadd+0x39e>
 8000ec4:	e0a6      	b.n	8001014 <__aeabi_dadd+0x4ec>
 8000ec6:	4641      	mov	r1, r8
 8000ec8:	4329      	orrs	r1, r5
 8000eca:	d000      	beq.n	8000ece <__aeabi_dadd+0x3a6>
 8000ecc:	e67f      	b.n	8000bce <__aeabi_dadd+0xa6>
 8000ece:	2300      	movs	r3, #0
 8000ed0:	2400      	movs	r4, #0
 8000ed2:	e751      	b.n	8000d78 <__aeabi_dadd+0x250>
 8000ed4:	4cc7      	ldr	r4, [pc, #796]	; (80011f4 <__aeabi_dadd+0x6cc>)
 8000ed6:	42a1      	cmp	r1, r4
 8000ed8:	d100      	bne.n	8000edc <__aeabi_dadd+0x3b4>
 8000eda:	e0c7      	b.n	800106c <__aeabi_dadd+0x544>
 8000edc:	2480      	movs	r4, #128	; 0x80
 8000ede:	0424      	lsls	r4, r4, #16
 8000ee0:	4323      	orrs	r3, r4
 8000ee2:	2a38      	cmp	r2, #56	; 0x38
 8000ee4:	dc54      	bgt.n	8000f90 <__aeabi_dadd+0x468>
 8000ee6:	2a1f      	cmp	r2, #31
 8000ee8:	dd00      	ble.n	8000eec <__aeabi_dadd+0x3c4>
 8000eea:	e0cc      	b.n	8001086 <__aeabi_dadd+0x55e>
 8000eec:	2420      	movs	r4, #32
 8000eee:	4648      	mov	r0, r9
 8000ef0:	1aa4      	subs	r4, r4, r2
 8000ef2:	001d      	movs	r5, r3
 8000ef4:	464e      	mov	r6, r9
 8000ef6:	40a0      	lsls	r0, r4
 8000ef8:	40d6      	lsrs	r6, r2
 8000efa:	40a5      	lsls	r5, r4
 8000efc:	0004      	movs	r4, r0
 8000efe:	40d3      	lsrs	r3, r2
 8000f00:	4662      	mov	r2, ip
 8000f02:	4335      	orrs	r5, r6
 8000f04:	1e66      	subs	r6, r4, #1
 8000f06:	41b4      	sbcs	r4, r6
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	469c      	mov	ip, r3
 8000f0c:	4325      	orrs	r5, r4
 8000f0e:	e044      	b.n	8000f9a <__aeabi_dadd+0x472>
 8000f10:	4662      	mov	r2, ip
 8000f12:	433a      	orrs	r2, r7
 8000f14:	0015      	movs	r5, r2
 8000f16:	1e6f      	subs	r7, r5, #1
 8000f18:	41bd      	sbcs	r5, r7
 8000f1a:	444d      	add	r5, r9
 8000f1c:	454d      	cmp	r5, r9
 8000f1e:	4189      	sbcs	r1, r1
 8000f20:	4249      	negs	r1, r1
 8000f22:	4688      	mov	r8, r1
 8000f24:	4498      	add	r8, r3
 8000f26:	4643      	mov	r3, r8
 8000f28:	021b      	lsls	r3, r3, #8
 8000f2a:	d400      	bmi.n	8000f2e <__aeabi_dadd+0x406>
 8000f2c:	e718      	b.n	8000d60 <__aeabi_dadd+0x238>
 8000f2e:	4bb1      	ldr	r3, [pc, #708]	; (80011f4 <__aeabi_dadd+0x6cc>)
 8000f30:	3601      	adds	r6, #1
 8000f32:	429e      	cmp	r6, r3
 8000f34:	d049      	beq.n	8000fca <__aeabi_dadd+0x4a2>
 8000f36:	4642      	mov	r2, r8
 8000f38:	4baf      	ldr	r3, [pc, #700]	; (80011f8 <__aeabi_dadd+0x6d0>)
 8000f3a:	2101      	movs	r1, #1
 8000f3c:	401a      	ands	r2, r3
 8000f3e:	0013      	movs	r3, r2
 8000f40:	086a      	lsrs	r2, r5, #1
 8000f42:	400d      	ands	r5, r1
 8000f44:	4315      	orrs	r5, r2
 8000f46:	07d9      	lsls	r1, r3, #31
 8000f48:	085b      	lsrs	r3, r3, #1
 8000f4a:	4698      	mov	r8, r3
 8000f4c:	430d      	orrs	r5, r1
 8000f4e:	e665      	b.n	8000c1c <__aeabi_dadd+0xf4>
 8000f50:	0018      	movs	r0, r3
 8000f52:	3e1f      	subs	r6, #31
 8000f54:	40f0      	lsrs	r0, r6
 8000f56:	2a20      	cmp	r2, #32
 8000f58:	d003      	beq.n	8000f62 <__aeabi_dadd+0x43a>
 8000f5a:	2140      	movs	r1, #64	; 0x40
 8000f5c:	1a8a      	subs	r2, r1, r2
 8000f5e:	4093      	lsls	r3, r2
 8000f60:	431d      	orrs	r5, r3
 8000f62:	1e69      	subs	r1, r5, #1
 8000f64:	418d      	sbcs	r5, r1
 8000f66:	2300      	movs	r3, #0
 8000f68:	2600      	movs	r6, #0
 8000f6a:	4698      	mov	r8, r3
 8000f6c:	4305      	orrs	r5, r0
 8000f6e:	e6f7      	b.n	8000d60 <__aeabi_dadd+0x238>
 8000f70:	0011      	movs	r1, r2
 8000f72:	4665      	mov	r5, ip
 8000f74:	3920      	subs	r1, #32
 8000f76:	40cd      	lsrs	r5, r1
 8000f78:	2a20      	cmp	r2, #32
 8000f7a:	d004      	beq.n	8000f86 <__aeabi_dadd+0x45e>
 8000f7c:	2040      	movs	r0, #64	; 0x40
 8000f7e:	4661      	mov	r1, ip
 8000f80:	1a82      	subs	r2, r0, r2
 8000f82:	4091      	lsls	r1, r2
 8000f84:	430f      	orrs	r7, r1
 8000f86:	0039      	movs	r1, r7
 8000f88:	1e4f      	subs	r7, r1, #1
 8000f8a:	41b9      	sbcs	r1, r7
 8000f8c:	4329      	orrs	r1, r5
 8000f8e:	e60f      	b.n	8000bb0 <__aeabi_dadd+0x88>
 8000f90:	464a      	mov	r2, r9
 8000f92:	4313      	orrs	r3, r2
 8000f94:	001d      	movs	r5, r3
 8000f96:	1e6b      	subs	r3, r5, #1
 8000f98:	419d      	sbcs	r5, r3
 8000f9a:	1b7d      	subs	r5, r7, r5
 8000f9c:	42af      	cmp	r7, r5
 8000f9e:	419b      	sbcs	r3, r3
 8000fa0:	4662      	mov	r2, ip
 8000fa2:	425b      	negs	r3, r3
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	4698      	mov	r8, r3
 8000fa8:	4654      	mov	r4, sl
 8000faa:	000e      	movs	r6, r1
 8000fac:	e607      	b.n	8000bbe <__aeabi_dadd+0x96>
 8000fae:	4648      	mov	r0, r9
 8000fb0:	4318      	orrs	r0, r3
 8000fb2:	d100      	bne.n	8000fb6 <__aeabi_dadd+0x48e>
 8000fb4:	e0b3      	b.n	800111e <__aeabi_dadd+0x5f6>
 8000fb6:	1e50      	subs	r0, r2, #1
 8000fb8:	2a01      	cmp	r2, #1
 8000fba:	d100      	bne.n	8000fbe <__aeabi_dadd+0x496>
 8000fbc:	e10d      	b.n	80011da <__aeabi_dadd+0x6b2>
 8000fbe:	4d8d      	ldr	r5, [pc, #564]	; (80011f4 <__aeabi_dadd+0x6cc>)
 8000fc0:	42aa      	cmp	r2, r5
 8000fc2:	d100      	bne.n	8000fc6 <__aeabi_dadd+0x49e>
 8000fc4:	e0a5      	b.n	8001112 <__aeabi_dadd+0x5ea>
 8000fc6:	0002      	movs	r2, r0
 8000fc8:	e710      	b.n	8000dec <__aeabi_dadd+0x2c4>
 8000fca:	0032      	movs	r2, r6
 8000fcc:	2300      	movs	r3, #0
 8000fce:	2100      	movs	r1, #0
 8000fd0:	e644      	b.n	8000c5c <__aeabi_dadd+0x134>
 8000fd2:	2120      	movs	r1, #32
 8000fd4:	0038      	movs	r0, r7
 8000fd6:	1a89      	subs	r1, r1, r2
 8000fd8:	4665      	mov	r5, ip
 8000fda:	408f      	lsls	r7, r1
 8000fdc:	408d      	lsls	r5, r1
 8000fde:	40d0      	lsrs	r0, r2
 8000fe0:	1e79      	subs	r1, r7, #1
 8000fe2:	418f      	sbcs	r7, r1
 8000fe4:	4305      	orrs	r5, r0
 8000fe6:	433d      	orrs	r5, r7
 8000fe8:	4667      	mov	r7, ip
 8000fea:	40d7      	lsrs	r7, r2
 8000fec:	19db      	adds	r3, r3, r7
 8000fee:	e794      	b.n	8000f1a <__aeabi_dadd+0x3f2>
 8000ff0:	4a80      	ldr	r2, [pc, #512]	; (80011f4 <__aeabi_dadd+0x6cc>)
 8000ff2:	4290      	cmp	r0, r2
 8000ff4:	d100      	bne.n	8000ff8 <__aeabi_dadd+0x4d0>
 8000ff6:	e0ec      	b.n	80011d2 <__aeabi_dadd+0x6aa>
 8000ff8:	0039      	movs	r1, r7
 8000ffa:	4449      	add	r1, r9
 8000ffc:	4549      	cmp	r1, r9
 8000ffe:	4192      	sbcs	r2, r2
 8001000:	4463      	add	r3, ip
 8001002:	4252      	negs	r2, r2
 8001004:	189b      	adds	r3, r3, r2
 8001006:	07dd      	lsls	r5, r3, #31
 8001008:	0849      	lsrs	r1, r1, #1
 800100a:	085b      	lsrs	r3, r3, #1
 800100c:	4698      	mov	r8, r3
 800100e:	0006      	movs	r6, r0
 8001010:	430d      	orrs	r5, r1
 8001012:	e6a5      	b.n	8000d60 <__aeabi_dadd+0x238>
 8001014:	464a      	mov	r2, r9
 8001016:	1abd      	subs	r5, r7, r2
 8001018:	42af      	cmp	r7, r5
 800101a:	4189      	sbcs	r1, r1
 800101c:	4662      	mov	r2, ip
 800101e:	4249      	negs	r1, r1
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	1a5b      	subs	r3, r3, r1
 8001024:	4698      	mov	r8, r3
 8001026:	4654      	mov	r4, sl
 8001028:	e5d1      	b.n	8000bce <__aeabi_dadd+0xa6>
 800102a:	076c      	lsls	r4, r5, #29
 800102c:	08f9      	lsrs	r1, r7, #3
 800102e:	4321      	orrs	r1, r4
 8001030:	08eb      	lsrs	r3, r5, #3
 8001032:	0004      	movs	r4, r0
 8001034:	e69d      	b.n	8000d72 <__aeabi_dadd+0x24a>
 8001036:	464a      	mov	r2, r9
 8001038:	431a      	orrs	r2, r3
 800103a:	d175      	bne.n	8001128 <__aeabi_dadd+0x600>
 800103c:	4661      	mov	r1, ip
 800103e:	4339      	orrs	r1, r7
 8001040:	d114      	bne.n	800106c <__aeabi_dadd+0x544>
 8001042:	2380      	movs	r3, #128	; 0x80
 8001044:	2400      	movs	r4, #0
 8001046:	031b      	lsls	r3, r3, #12
 8001048:	e6bc      	b.n	8000dc4 <__aeabi_dadd+0x29c>
 800104a:	464a      	mov	r2, r9
 800104c:	1bd5      	subs	r5, r2, r7
 800104e:	45a9      	cmp	r9, r5
 8001050:	4189      	sbcs	r1, r1
 8001052:	4662      	mov	r2, ip
 8001054:	4249      	negs	r1, r1
 8001056:	1a9b      	subs	r3, r3, r2
 8001058:	1a5b      	subs	r3, r3, r1
 800105a:	4698      	mov	r8, r3
 800105c:	2601      	movs	r6, #1
 800105e:	e5ae      	b.n	8000bbe <__aeabi_dadd+0x96>
 8001060:	464a      	mov	r2, r9
 8001062:	08d1      	lsrs	r1, r2, #3
 8001064:	075a      	lsls	r2, r3, #29
 8001066:	4311      	orrs	r1, r2
 8001068:	08db      	lsrs	r3, r3, #3
 800106a:	e6a7      	b.n	8000dbc <__aeabi_dadd+0x294>
 800106c:	4663      	mov	r3, ip
 800106e:	08f9      	lsrs	r1, r7, #3
 8001070:	075a      	lsls	r2, r3, #29
 8001072:	4654      	mov	r4, sl
 8001074:	4311      	orrs	r1, r2
 8001076:	08db      	lsrs	r3, r3, #3
 8001078:	e6a0      	b.n	8000dbc <__aeabi_dadd+0x294>
 800107a:	464a      	mov	r2, r9
 800107c:	4313      	orrs	r3, r2
 800107e:	001d      	movs	r5, r3
 8001080:	1e6b      	subs	r3, r5, #1
 8001082:	419d      	sbcs	r5, r3
 8001084:	e6c7      	b.n	8000e16 <__aeabi_dadd+0x2ee>
 8001086:	0014      	movs	r4, r2
 8001088:	001e      	movs	r6, r3
 800108a:	3c20      	subs	r4, #32
 800108c:	40e6      	lsrs	r6, r4
 800108e:	2a20      	cmp	r2, #32
 8001090:	d005      	beq.n	800109e <__aeabi_dadd+0x576>
 8001092:	2440      	movs	r4, #64	; 0x40
 8001094:	1aa2      	subs	r2, r4, r2
 8001096:	4093      	lsls	r3, r2
 8001098:	464a      	mov	r2, r9
 800109a:	431a      	orrs	r2, r3
 800109c:	4691      	mov	r9, r2
 800109e:	464d      	mov	r5, r9
 80010a0:	1e6b      	subs	r3, r5, #1
 80010a2:	419d      	sbcs	r5, r3
 80010a4:	4335      	orrs	r5, r6
 80010a6:	e778      	b.n	8000f9a <__aeabi_dadd+0x472>
 80010a8:	464a      	mov	r2, r9
 80010aa:	431a      	orrs	r2, r3
 80010ac:	d000      	beq.n	80010b0 <__aeabi_dadd+0x588>
 80010ae:	e66b      	b.n	8000d88 <__aeabi_dadd+0x260>
 80010b0:	076b      	lsls	r3, r5, #29
 80010b2:	08f9      	lsrs	r1, r7, #3
 80010b4:	4319      	orrs	r1, r3
 80010b6:	08eb      	lsrs	r3, r5, #3
 80010b8:	e680      	b.n	8000dbc <__aeabi_dadd+0x294>
 80010ba:	4661      	mov	r1, ip
 80010bc:	4339      	orrs	r1, r7
 80010be:	d054      	beq.n	800116a <__aeabi_dadd+0x642>
 80010c0:	4663      	mov	r3, ip
 80010c2:	08f9      	lsrs	r1, r7, #3
 80010c4:	075c      	lsls	r4, r3, #29
 80010c6:	4321      	orrs	r1, r4
 80010c8:	08db      	lsrs	r3, r3, #3
 80010ca:	0004      	movs	r4, r0
 80010cc:	e654      	b.n	8000d78 <__aeabi_dadd+0x250>
 80010ce:	464a      	mov	r2, r9
 80010d0:	1abd      	subs	r5, r7, r2
 80010d2:	42af      	cmp	r7, r5
 80010d4:	4189      	sbcs	r1, r1
 80010d6:	4662      	mov	r2, ip
 80010d8:	4249      	negs	r1, r1
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	1a5b      	subs	r3, r3, r1
 80010de:	4698      	mov	r8, r3
 80010e0:	0004      	movs	r4, r0
 80010e2:	2601      	movs	r6, #1
 80010e4:	e56b      	b.n	8000bbe <__aeabi_dadd+0x96>
 80010e6:	464a      	mov	r2, r9
 80010e8:	1bd5      	subs	r5, r2, r7
 80010ea:	45a9      	cmp	r9, r5
 80010ec:	4189      	sbcs	r1, r1
 80010ee:	4662      	mov	r2, ip
 80010f0:	4249      	negs	r1, r1
 80010f2:	1a9a      	subs	r2, r3, r2
 80010f4:	1a52      	subs	r2, r2, r1
 80010f6:	4690      	mov	r8, r2
 80010f8:	0212      	lsls	r2, r2, #8
 80010fa:	d532      	bpl.n	8001162 <__aeabi_dadd+0x63a>
 80010fc:	464a      	mov	r2, r9
 80010fe:	1abd      	subs	r5, r7, r2
 8001100:	42af      	cmp	r7, r5
 8001102:	4189      	sbcs	r1, r1
 8001104:	4662      	mov	r2, ip
 8001106:	4249      	negs	r1, r1
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	1a5b      	subs	r3, r3, r1
 800110c:	4698      	mov	r8, r3
 800110e:	0004      	movs	r4, r0
 8001110:	e584      	b.n	8000c1c <__aeabi_dadd+0xf4>
 8001112:	4663      	mov	r3, ip
 8001114:	08f9      	lsrs	r1, r7, #3
 8001116:	075a      	lsls	r2, r3, #29
 8001118:	4311      	orrs	r1, r2
 800111a:	08db      	lsrs	r3, r3, #3
 800111c:	e64e      	b.n	8000dbc <__aeabi_dadd+0x294>
 800111e:	08f9      	lsrs	r1, r7, #3
 8001120:	0768      	lsls	r0, r5, #29
 8001122:	4301      	orrs	r1, r0
 8001124:	08eb      	lsrs	r3, r5, #3
 8001126:	e624      	b.n	8000d72 <__aeabi_dadd+0x24a>
 8001128:	4662      	mov	r2, ip
 800112a:	433a      	orrs	r2, r7
 800112c:	d100      	bne.n	8001130 <__aeabi_dadd+0x608>
 800112e:	e698      	b.n	8000e62 <__aeabi_dadd+0x33a>
 8001130:	464a      	mov	r2, r9
 8001132:	08d1      	lsrs	r1, r2, #3
 8001134:	075a      	lsls	r2, r3, #29
 8001136:	4311      	orrs	r1, r2
 8001138:	08da      	lsrs	r2, r3, #3
 800113a:	2380      	movs	r3, #128	; 0x80
 800113c:	031b      	lsls	r3, r3, #12
 800113e:	421a      	tst	r2, r3
 8001140:	d008      	beq.n	8001154 <__aeabi_dadd+0x62c>
 8001142:	4660      	mov	r0, ip
 8001144:	08c5      	lsrs	r5, r0, #3
 8001146:	421d      	tst	r5, r3
 8001148:	d104      	bne.n	8001154 <__aeabi_dadd+0x62c>
 800114a:	4654      	mov	r4, sl
 800114c:	002a      	movs	r2, r5
 800114e:	08f9      	lsrs	r1, r7, #3
 8001150:	0743      	lsls	r3, r0, #29
 8001152:	4319      	orrs	r1, r3
 8001154:	0f4b      	lsrs	r3, r1, #29
 8001156:	00c9      	lsls	r1, r1, #3
 8001158:	075b      	lsls	r3, r3, #29
 800115a:	08c9      	lsrs	r1, r1, #3
 800115c:	4319      	orrs	r1, r3
 800115e:	0013      	movs	r3, r2
 8001160:	e62c      	b.n	8000dbc <__aeabi_dadd+0x294>
 8001162:	4641      	mov	r1, r8
 8001164:	4329      	orrs	r1, r5
 8001166:	d000      	beq.n	800116a <__aeabi_dadd+0x642>
 8001168:	e5fa      	b.n	8000d60 <__aeabi_dadd+0x238>
 800116a:	2300      	movs	r3, #0
 800116c:	000a      	movs	r2, r1
 800116e:	2400      	movs	r4, #0
 8001170:	e602      	b.n	8000d78 <__aeabi_dadd+0x250>
 8001172:	076b      	lsls	r3, r5, #29
 8001174:	08f9      	lsrs	r1, r7, #3
 8001176:	4319      	orrs	r1, r3
 8001178:	08eb      	lsrs	r3, r5, #3
 800117a:	e5fd      	b.n	8000d78 <__aeabi_dadd+0x250>
 800117c:	4663      	mov	r3, ip
 800117e:	08f9      	lsrs	r1, r7, #3
 8001180:	075b      	lsls	r3, r3, #29
 8001182:	4319      	orrs	r1, r3
 8001184:	4663      	mov	r3, ip
 8001186:	0004      	movs	r4, r0
 8001188:	08db      	lsrs	r3, r3, #3
 800118a:	e617      	b.n	8000dbc <__aeabi_dadd+0x294>
 800118c:	003d      	movs	r5, r7
 800118e:	444d      	add	r5, r9
 8001190:	4463      	add	r3, ip
 8001192:	454d      	cmp	r5, r9
 8001194:	4189      	sbcs	r1, r1
 8001196:	4698      	mov	r8, r3
 8001198:	4249      	negs	r1, r1
 800119a:	4488      	add	r8, r1
 800119c:	4643      	mov	r3, r8
 800119e:	021b      	lsls	r3, r3, #8
 80011a0:	d400      	bmi.n	80011a4 <__aeabi_dadd+0x67c>
 80011a2:	e5dd      	b.n	8000d60 <__aeabi_dadd+0x238>
 80011a4:	4642      	mov	r2, r8
 80011a6:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <__aeabi_dadd+0x6d0>)
 80011a8:	2601      	movs	r6, #1
 80011aa:	401a      	ands	r2, r3
 80011ac:	4690      	mov	r8, r2
 80011ae:	e5d7      	b.n	8000d60 <__aeabi_dadd+0x238>
 80011b0:	0010      	movs	r0, r2
 80011b2:	001e      	movs	r6, r3
 80011b4:	3820      	subs	r0, #32
 80011b6:	40c6      	lsrs	r6, r0
 80011b8:	2a20      	cmp	r2, #32
 80011ba:	d005      	beq.n	80011c8 <__aeabi_dadd+0x6a0>
 80011bc:	2040      	movs	r0, #64	; 0x40
 80011be:	1a82      	subs	r2, r0, r2
 80011c0:	4093      	lsls	r3, r2
 80011c2:	464a      	mov	r2, r9
 80011c4:	431a      	orrs	r2, r3
 80011c6:	4691      	mov	r9, r2
 80011c8:	464d      	mov	r5, r9
 80011ca:	1e6b      	subs	r3, r5, #1
 80011cc:	419d      	sbcs	r5, r3
 80011ce:	4335      	orrs	r5, r6
 80011d0:	e621      	b.n	8000e16 <__aeabi_dadd+0x2ee>
 80011d2:	0002      	movs	r2, r0
 80011d4:	2300      	movs	r3, #0
 80011d6:	2100      	movs	r1, #0
 80011d8:	e540      	b.n	8000c5c <__aeabi_dadd+0x134>
 80011da:	464a      	mov	r2, r9
 80011dc:	19d5      	adds	r5, r2, r7
 80011de:	42bd      	cmp	r5, r7
 80011e0:	4189      	sbcs	r1, r1
 80011e2:	4463      	add	r3, ip
 80011e4:	4698      	mov	r8, r3
 80011e6:	4249      	negs	r1, r1
 80011e8:	4488      	add	r8, r1
 80011ea:	e5b3      	b.n	8000d54 <__aeabi_dadd+0x22c>
 80011ec:	2100      	movs	r1, #0
 80011ee:	4a01      	ldr	r2, [pc, #4]	; (80011f4 <__aeabi_dadd+0x6cc>)
 80011f0:	000b      	movs	r3, r1
 80011f2:	e533      	b.n	8000c5c <__aeabi_dadd+0x134>
 80011f4:	000007ff 	.word	0x000007ff
 80011f8:	ff7fffff 	.word	0xff7fffff

080011fc <__aeabi_ddiv>:
 80011fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011fe:	4657      	mov	r7, sl
 8001200:	464e      	mov	r6, r9
 8001202:	4645      	mov	r5, r8
 8001204:	46de      	mov	lr, fp
 8001206:	b5e0      	push	{r5, r6, r7, lr}
 8001208:	4681      	mov	r9, r0
 800120a:	0005      	movs	r5, r0
 800120c:	030c      	lsls	r4, r1, #12
 800120e:	0048      	lsls	r0, r1, #1
 8001210:	4692      	mov	sl, r2
 8001212:	001f      	movs	r7, r3
 8001214:	b085      	sub	sp, #20
 8001216:	0b24      	lsrs	r4, r4, #12
 8001218:	0d40      	lsrs	r0, r0, #21
 800121a:	0fce      	lsrs	r6, r1, #31
 800121c:	2800      	cmp	r0, #0
 800121e:	d059      	beq.n	80012d4 <__aeabi_ddiv+0xd8>
 8001220:	4b87      	ldr	r3, [pc, #540]	; (8001440 <__aeabi_ddiv+0x244>)
 8001222:	4298      	cmp	r0, r3
 8001224:	d100      	bne.n	8001228 <__aeabi_ddiv+0x2c>
 8001226:	e098      	b.n	800135a <__aeabi_ddiv+0x15e>
 8001228:	0f6b      	lsrs	r3, r5, #29
 800122a:	00e4      	lsls	r4, r4, #3
 800122c:	431c      	orrs	r4, r3
 800122e:	2380      	movs	r3, #128	; 0x80
 8001230:	041b      	lsls	r3, r3, #16
 8001232:	4323      	orrs	r3, r4
 8001234:	4698      	mov	r8, r3
 8001236:	4b83      	ldr	r3, [pc, #524]	; (8001444 <__aeabi_ddiv+0x248>)
 8001238:	00ed      	lsls	r5, r5, #3
 800123a:	469b      	mov	fp, r3
 800123c:	2300      	movs	r3, #0
 800123e:	4699      	mov	r9, r3
 8001240:	4483      	add	fp, r0
 8001242:	9300      	str	r3, [sp, #0]
 8001244:	033c      	lsls	r4, r7, #12
 8001246:	007b      	lsls	r3, r7, #1
 8001248:	4650      	mov	r0, sl
 800124a:	0b24      	lsrs	r4, r4, #12
 800124c:	0d5b      	lsrs	r3, r3, #21
 800124e:	0fff      	lsrs	r7, r7, #31
 8001250:	2b00      	cmp	r3, #0
 8001252:	d067      	beq.n	8001324 <__aeabi_ddiv+0x128>
 8001254:	4a7a      	ldr	r2, [pc, #488]	; (8001440 <__aeabi_ddiv+0x244>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d018      	beq.n	800128c <__aeabi_ddiv+0x90>
 800125a:	497a      	ldr	r1, [pc, #488]	; (8001444 <__aeabi_ddiv+0x248>)
 800125c:	0f42      	lsrs	r2, r0, #29
 800125e:	468c      	mov	ip, r1
 8001260:	00e4      	lsls	r4, r4, #3
 8001262:	4659      	mov	r1, fp
 8001264:	4314      	orrs	r4, r2
 8001266:	2280      	movs	r2, #128	; 0x80
 8001268:	4463      	add	r3, ip
 800126a:	0412      	lsls	r2, r2, #16
 800126c:	1acb      	subs	r3, r1, r3
 800126e:	4314      	orrs	r4, r2
 8001270:	469b      	mov	fp, r3
 8001272:	00c2      	lsls	r2, r0, #3
 8001274:	2000      	movs	r0, #0
 8001276:	0033      	movs	r3, r6
 8001278:	407b      	eors	r3, r7
 800127a:	469a      	mov	sl, r3
 800127c:	464b      	mov	r3, r9
 800127e:	2b0f      	cmp	r3, #15
 8001280:	d900      	bls.n	8001284 <__aeabi_ddiv+0x88>
 8001282:	e0ef      	b.n	8001464 <__aeabi_ddiv+0x268>
 8001284:	4970      	ldr	r1, [pc, #448]	; (8001448 <__aeabi_ddiv+0x24c>)
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	58cb      	ldr	r3, [r1, r3]
 800128a:	469f      	mov	pc, r3
 800128c:	4b6f      	ldr	r3, [pc, #444]	; (800144c <__aeabi_ddiv+0x250>)
 800128e:	4652      	mov	r2, sl
 8001290:	469c      	mov	ip, r3
 8001292:	4322      	orrs	r2, r4
 8001294:	44e3      	add	fp, ip
 8001296:	2a00      	cmp	r2, #0
 8001298:	d000      	beq.n	800129c <__aeabi_ddiv+0xa0>
 800129a:	e095      	b.n	80013c8 <__aeabi_ddiv+0x1cc>
 800129c:	4649      	mov	r1, r9
 800129e:	2302      	movs	r3, #2
 80012a0:	4319      	orrs	r1, r3
 80012a2:	4689      	mov	r9, r1
 80012a4:	2400      	movs	r4, #0
 80012a6:	2002      	movs	r0, #2
 80012a8:	e7e5      	b.n	8001276 <__aeabi_ddiv+0x7a>
 80012aa:	2300      	movs	r3, #0
 80012ac:	2400      	movs	r4, #0
 80012ae:	2500      	movs	r5, #0
 80012b0:	4652      	mov	r2, sl
 80012b2:	051b      	lsls	r3, r3, #20
 80012b4:	4323      	orrs	r3, r4
 80012b6:	07d2      	lsls	r2, r2, #31
 80012b8:	4313      	orrs	r3, r2
 80012ba:	0028      	movs	r0, r5
 80012bc:	0019      	movs	r1, r3
 80012be:	b005      	add	sp, #20
 80012c0:	bcf0      	pop	{r4, r5, r6, r7}
 80012c2:	46bb      	mov	fp, r7
 80012c4:	46b2      	mov	sl, r6
 80012c6:	46a9      	mov	r9, r5
 80012c8:	46a0      	mov	r8, r4
 80012ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012cc:	2400      	movs	r4, #0
 80012ce:	2500      	movs	r5, #0
 80012d0:	4b5b      	ldr	r3, [pc, #364]	; (8001440 <__aeabi_ddiv+0x244>)
 80012d2:	e7ed      	b.n	80012b0 <__aeabi_ddiv+0xb4>
 80012d4:	464b      	mov	r3, r9
 80012d6:	4323      	orrs	r3, r4
 80012d8:	4698      	mov	r8, r3
 80012da:	d100      	bne.n	80012de <__aeabi_ddiv+0xe2>
 80012dc:	e089      	b.n	80013f2 <__aeabi_ddiv+0x1f6>
 80012de:	2c00      	cmp	r4, #0
 80012e0:	d100      	bne.n	80012e4 <__aeabi_ddiv+0xe8>
 80012e2:	e1e0      	b.n	80016a6 <__aeabi_ddiv+0x4aa>
 80012e4:	0020      	movs	r0, r4
 80012e6:	f000 ffc5 	bl	8002274 <__clzsi2>
 80012ea:	0001      	movs	r1, r0
 80012ec:	0002      	movs	r2, r0
 80012ee:	390b      	subs	r1, #11
 80012f0:	231d      	movs	r3, #29
 80012f2:	1a5b      	subs	r3, r3, r1
 80012f4:	4649      	mov	r1, r9
 80012f6:	0010      	movs	r0, r2
 80012f8:	40d9      	lsrs	r1, r3
 80012fa:	3808      	subs	r0, #8
 80012fc:	4084      	lsls	r4, r0
 80012fe:	000b      	movs	r3, r1
 8001300:	464d      	mov	r5, r9
 8001302:	4323      	orrs	r3, r4
 8001304:	4698      	mov	r8, r3
 8001306:	4085      	lsls	r5, r0
 8001308:	4851      	ldr	r0, [pc, #324]	; (8001450 <__aeabi_ddiv+0x254>)
 800130a:	033c      	lsls	r4, r7, #12
 800130c:	1a83      	subs	r3, r0, r2
 800130e:	469b      	mov	fp, r3
 8001310:	2300      	movs	r3, #0
 8001312:	4699      	mov	r9, r3
 8001314:	9300      	str	r3, [sp, #0]
 8001316:	007b      	lsls	r3, r7, #1
 8001318:	4650      	mov	r0, sl
 800131a:	0b24      	lsrs	r4, r4, #12
 800131c:	0d5b      	lsrs	r3, r3, #21
 800131e:	0fff      	lsrs	r7, r7, #31
 8001320:	2b00      	cmp	r3, #0
 8001322:	d197      	bne.n	8001254 <__aeabi_ddiv+0x58>
 8001324:	4652      	mov	r2, sl
 8001326:	4322      	orrs	r2, r4
 8001328:	d055      	beq.n	80013d6 <__aeabi_ddiv+0x1da>
 800132a:	2c00      	cmp	r4, #0
 800132c:	d100      	bne.n	8001330 <__aeabi_ddiv+0x134>
 800132e:	e1ca      	b.n	80016c6 <__aeabi_ddiv+0x4ca>
 8001330:	0020      	movs	r0, r4
 8001332:	f000 ff9f 	bl	8002274 <__clzsi2>
 8001336:	0002      	movs	r2, r0
 8001338:	3a0b      	subs	r2, #11
 800133a:	231d      	movs	r3, #29
 800133c:	0001      	movs	r1, r0
 800133e:	1a9b      	subs	r3, r3, r2
 8001340:	4652      	mov	r2, sl
 8001342:	3908      	subs	r1, #8
 8001344:	40da      	lsrs	r2, r3
 8001346:	408c      	lsls	r4, r1
 8001348:	4314      	orrs	r4, r2
 800134a:	4652      	mov	r2, sl
 800134c:	408a      	lsls	r2, r1
 800134e:	4b41      	ldr	r3, [pc, #260]	; (8001454 <__aeabi_ddiv+0x258>)
 8001350:	4458      	add	r0, fp
 8001352:	469b      	mov	fp, r3
 8001354:	4483      	add	fp, r0
 8001356:	2000      	movs	r0, #0
 8001358:	e78d      	b.n	8001276 <__aeabi_ddiv+0x7a>
 800135a:	464b      	mov	r3, r9
 800135c:	4323      	orrs	r3, r4
 800135e:	4698      	mov	r8, r3
 8001360:	d140      	bne.n	80013e4 <__aeabi_ddiv+0x1e8>
 8001362:	2308      	movs	r3, #8
 8001364:	4699      	mov	r9, r3
 8001366:	3b06      	subs	r3, #6
 8001368:	2500      	movs	r5, #0
 800136a:	4683      	mov	fp, r0
 800136c:	9300      	str	r3, [sp, #0]
 800136e:	e769      	b.n	8001244 <__aeabi_ddiv+0x48>
 8001370:	46b2      	mov	sl, r6
 8001372:	9b00      	ldr	r3, [sp, #0]
 8001374:	2b02      	cmp	r3, #2
 8001376:	d0a9      	beq.n	80012cc <__aeabi_ddiv+0xd0>
 8001378:	2b03      	cmp	r3, #3
 800137a:	d100      	bne.n	800137e <__aeabi_ddiv+0x182>
 800137c:	e211      	b.n	80017a2 <__aeabi_ddiv+0x5a6>
 800137e:	2b01      	cmp	r3, #1
 8001380:	d093      	beq.n	80012aa <__aeabi_ddiv+0xae>
 8001382:	4a35      	ldr	r2, [pc, #212]	; (8001458 <__aeabi_ddiv+0x25c>)
 8001384:	445a      	add	r2, fp
 8001386:	2a00      	cmp	r2, #0
 8001388:	dc00      	bgt.n	800138c <__aeabi_ddiv+0x190>
 800138a:	e13c      	b.n	8001606 <__aeabi_ddiv+0x40a>
 800138c:	076b      	lsls	r3, r5, #29
 800138e:	d000      	beq.n	8001392 <__aeabi_ddiv+0x196>
 8001390:	e1a7      	b.n	80016e2 <__aeabi_ddiv+0x4e6>
 8001392:	08ed      	lsrs	r5, r5, #3
 8001394:	4643      	mov	r3, r8
 8001396:	01db      	lsls	r3, r3, #7
 8001398:	d506      	bpl.n	80013a8 <__aeabi_ddiv+0x1ac>
 800139a:	4642      	mov	r2, r8
 800139c:	4b2f      	ldr	r3, [pc, #188]	; (800145c <__aeabi_ddiv+0x260>)
 800139e:	401a      	ands	r2, r3
 80013a0:	4690      	mov	r8, r2
 80013a2:	2280      	movs	r2, #128	; 0x80
 80013a4:	00d2      	lsls	r2, r2, #3
 80013a6:	445a      	add	r2, fp
 80013a8:	4b2d      	ldr	r3, [pc, #180]	; (8001460 <__aeabi_ddiv+0x264>)
 80013aa:	429a      	cmp	r2, r3
 80013ac:	dc8e      	bgt.n	80012cc <__aeabi_ddiv+0xd0>
 80013ae:	4643      	mov	r3, r8
 80013b0:	0552      	lsls	r2, r2, #21
 80013b2:	0758      	lsls	r0, r3, #29
 80013b4:	025c      	lsls	r4, r3, #9
 80013b6:	4305      	orrs	r5, r0
 80013b8:	0b24      	lsrs	r4, r4, #12
 80013ba:	0d53      	lsrs	r3, r2, #21
 80013bc:	e778      	b.n	80012b0 <__aeabi_ddiv+0xb4>
 80013be:	46ba      	mov	sl, r7
 80013c0:	46a0      	mov	r8, r4
 80013c2:	0015      	movs	r5, r2
 80013c4:	9000      	str	r0, [sp, #0]
 80013c6:	e7d4      	b.n	8001372 <__aeabi_ddiv+0x176>
 80013c8:	464a      	mov	r2, r9
 80013ca:	2303      	movs	r3, #3
 80013cc:	431a      	orrs	r2, r3
 80013ce:	4691      	mov	r9, r2
 80013d0:	2003      	movs	r0, #3
 80013d2:	4652      	mov	r2, sl
 80013d4:	e74f      	b.n	8001276 <__aeabi_ddiv+0x7a>
 80013d6:	4649      	mov	r1, r9
 80013d8:	2301      	movs	r3, #1
 80013da:	4319      	orrs	r1, r3
 80013dc:	4689      	mov	r9, r1
 80013de:	2400      	movs	r4, #0
 80013e0:	2001      	movs	r0, #1
 80013e2:	e748      	b.n	8001276 <__aeabi_ddiv+0x7a>
 80013e4:	230c      	movs	r3, #12
 80013e6:	4699      	mov	r9, r3
 80013e8:	3b09      	subs	r3, #9
 80013ea:	46a0      	mov	r8, r4
 80013ec:	4683      	mov	fp, r0
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	e728      	b.n	8001244 <__aeabi_ddiv+0x48>
 80013f2:	2304      	movs	r3, #4
 80013f4:	4699      	mov	r9, r3
 80013f6:	2300      	movs	r3, #0
 80013f8:	469b      	mov	fp, r3
 80013fa:	3301      	adds	r3, #1
 80013fc:	2500      	movs	r5, #0
 80013fe:	9300      	str	r3, [sp, #0]
 8001400:	e720      	b.n	8001244 <__aeabi_ddiv+0x48>
 8001402:	2300      	movs	r3, #0
 8001404:	2480      	movs	r4, #128	; 0x80
 8001406:	469a      	mov	sl, r3
 8001408:	2500      	movs	r5, #0
 800140a:	4b0d      	ldr	r3, [pc, #52]	; (8001440 <__aeabi_ddiv+0x244>)
 800140c:	0324      	lsls	r4, r4, #12
 800140e:	e74f      	b.n	80012b0 <__aeabi_ddiv+0xb4>
 8001410:	2380      	movs	r3, #128	; 0x80
 8001412:	4641      	mov	r1, r8
 8001414:	031b      	lsls	r3, r3, #12
 8001416:	4219      	tst	r1, r3
 8001418:	d008      	beq.n	800142c <__aeabi_ddiv+0x230>
 800141a:	421c      	tst	r4, r3
 800141c:	d106      	bne.n	800142c <__aeabi_ddiv+0x230>
 800141e:	431c      	orrs	r4, r3
 8001420:	0324      	lsls	r4, r4, #12
 8001422:	46ba      	mov	sl, r7
 8001424:	0015      	movs	r5, r2
 8001426:	4b06      	ldr	r3, [pc, #24]	; (8001440 <__aeabi_ddiv+0x244>)
 8001428:	0b24      	lsrs	r4, r4, #12
 800142a:	e741      	b.n	80012b0 <__aeabi_ddiv+0xb4>
 800142c:	2480      	movs	r4, #128	; 0x80
 800142e:	4643      	mov	r3, r8
 8001430:	0324      	lsls	r4, r4, #12
 8001432:	431c      	orrs	r4, r3
 8001434:	0324      	lsls	r4, r4, #12
 8001436:	46b2      	mov	sl, r6
 8001438:	4b01      	ldr	r3, [pc, #4]	; (8001440 <__aeabi_ddiv+0x244>)
 800143a:	0b24      	lsrs	r4, r4, #12
 800143c:	e738      	b.n	80012b0 <__aeabi_ddiv+0xb4>
 800143e:	46c0      	nop			; (mov r8, r8)
 8001440:	000007ff 	.word	0x000007ff
 8001444:	fffffc01 	.word	0xfffffc01
 8001448:	0800f20c 	.word	0x0800f20c
 800144c:	fffff801 	.word	0xfffff801
 8001450:	fffffc0d 	.word	0xfffffc0d
 8001454:	000003f3 	.word	0x000003f3
 8001458:	000003ff 	.word	0x000003ff
 800145c:	feffffff 	.word	0xfeffffff
 8001460:	000007fe 	.word	0x000007fe
 8001464:	4544      	cmp	r4, r8
 8001466:	d200      	bcs.n	800146a <__aeabi_ddiv+0x26e>
 8001468:	e116      	b.n	8001698 <__aeabi_ddiv+0x49c>
 800146a:	d100      	bne.n	800146e <__aeabi_ddiv+0x272>
 800146c:	e111      	b.n	8001692 <__aeabi_ddiv+0x496>
 800146e:	2301      	movs	r3, #1
 8001470:	425b      	negs	r3, r3
 8001472:	469c      	mov	ip, r3
 8001474:	002e      	movs	r6, r5
 8001476:	4640      	mov	r0, r8
 8001478:	2500      	movs	r5, #0
 800147a:	44e3      	add	fp, ip
 800147c:	0223      	lsls	r3, r4, #8
 800147e:	0e14      	lsrs	r4, r2, #24
 8001480:	431c      	orrs	r4, r3
 8001482:	0c1b      	lsrs	r3, r3, #16
 8001484:	4699      	mov	r9, r3
 8001486:	0423      	lsls	r3, r4, #16
 8001488:	0c1f      	lsrs	r7, r3, #16
 800148a:	0212      	lsls	r2, r2, #8
 800148c:	4649      	mov	r1, r9
 800148e:	9200      	str	r2, [sp, #0]
 8001490:	9701      	str	r7, [sp, #4]
 8001492:	f7fe fee5 	bl	8000260 <__aeabi_uidivmod>
 8001496:	0002      	movs	r2, r0
 8001498:	437a      	muls	r2, r7
 800149a:	040b      	lsls	r3, r1, #16
 800149c:	0c31      	lsrs	r1, r6, #16
 800149e:	4680      	mov	r8, r0
 80014a0:	4319      	orrs	r1, r3
 80014a2:	428a      	cmp	r2, r1
 80014a4:	d90b      	bls.n	80014be <__aeabi_ddiv+0x2c2>
 80014a6:	2301      	movs	r3, #1
 80014a8:	425b      	negs	r3, r3
 80014aa:	469c      	mov	ip, r3
 80014ac:	1909      	adds	r1, r1, r4
 80014ae:	44e0      	add	r8, ip
 80014b0:	428c      	cmp	r4, r1
 80014b2:	d804      	bhi.n	80014be <__aeabi_ddiv+0x2c2>
 80014b4:	428a      	cmp	r2, r1
 80014b6:	d902      	bls.n	80014be <__aeabi_ddiv+0x2c2>
 80014b8:	1e83      	subs	r3, r0, #2
 80014ba:	4698      	mov	r8, r3
 80014bc:	1909      	adds	r1, r1, r4
 80014be:	1a88      	subs	r0, r1, r2
 80014c0:	4649      	mov	r1, r9
 80014c2:	f7fe fecd 	bl	8000260 <__aeabi_uidivmod>
 80014c6:	0409      	lsls	r1, r1, #16
 80014c8:	468c      	mov	ip, r1
 80014ca:	0431      	lsls	r1, r6, #16
 80014cc:	4666      	mov	r6, ip
 80014ce:	9a01      	ldr	r2, [sp, #4]
 80014d0:	0c09      	lsrs	r1, r1, #16
 80014d2:	4342      	muls	r2, r0
 80014d4:	0003      	movs	r3, r0
 80014d6:	4331      	orrs	r1, r6
 80014d8:	428a      	cmp	r2, r1
 80014da:	d904      	bls.n	80014e6 <__aeabi_ddiv+0x2ea>
 80014dc:	1909      	adds	r1, r1, r4
 80014de:	3b01      	subs	r3, #1
 80014e0:	428c      	cmp	r4, r1
 80014e2:	d800      	bhi.n	80014e6 <__aeabi_ddiv+0x2ea>
 80014e4:	e111      	b.n	800170a <__aeabi_ddiv+0x50e>
 80014e6:	1a89      	subs	r1, r1, r2
 80014e8:	4642      	mov	r2, r8
 80014ea:	9e00      	ldr	r6, [sp, #0]
 80014ec:	0412      	lsls	r2, r2, #16
 80014ee:	431a      	orrs	r2, r3
 80014f0:	0c33      	lsrs	r3, r6, #16
 80014f2:	001f      	movs	r7, r3
 80014f4:	0c10      	lsrs	r0, r2, #16
 80014f6:	4690      	mov	r8, r2
 80014f8:	9302      	str	r3, [sp, #8]
 80014fa:	0413      	lsls	r3, r2, #16
 80014fc:	0432      	lsls	r2, r6, #16
 80014fe:	0c16      	lsrs	r6, r2, #16
 8001500:	0032      	movs	r2, r6
 8001502:	0c1b      	lsrs	r3, r3, #16
 8001504:	435a      	muls	r2, r3
 8001506:	9603      	str	r6, [sp, #12]
 8001508:	437b      	muls	r3, r7
 800150a:	4346      	muls	r6, r0
 800150c:	4378      	muls	r0, r7
 800150e:	0c17      	lsrs	r7, r2, #16
 8001510:	46bc      	mov	ip, r7
 8001512:	199b      	adds	r3, r3, r6
 8001514:	4463      	add	r3, ip
 8001516:	429e      	cmp	r6, r3
 8001518:	d903      	bls.n	8001522 <__aeabi_ddiv+0x326>
 800151a:	2680      	movs	r6, #128	; 0x80
 800151c:	0276      	lsls	r6, r6, #9
 800151e:	46b4      	mov	ip, r6
 8001520:	4460      	add	r0, ip
 8001522:	0c1e      	lsrs	r6, r3, #16
 8001524:	1830      	adds	r0, r6, r0
 8001526:	0416      	lsls	r6, r2, #16
 8001528:	041b      	lsls	r3, r3, #16
 800152a:	0c36      	lsrs	r6, r6, #16
 800152c:	199e      	adds	r6, r3, r6
 800152e:	4281      	cmp	r1, r0
 8001530:	d200      	bcs.n	8001534 <__aeabi_ddiv+0x338>
 8001532:	e09c      	b.n	800166e <__aeabi_ddiv+0x472>
 8001534:	d100      	bne.n	8001538 <__aeabi_ddiv+0x33c>
 8001536:	e097      	b.n	8001668 <__aeabi_ddiv+0x46c>
 8001538:	1bae      	subs	r6, r5, r6
 800153a:	1a09      	subs	r1, r1, r0
 800153c:	42b5      	cmp	r5, r6
 800153e:	4180      	sbcs	r0, r0
 8001540:	4240      	negs	r0, r0
 8001542:	1a08      	subs	r0, r1, r0
 8001544:	4284      	cmp	r4, r0
 8001546:	d100      	bne.n	800154a <__aeabi_ddiv+0x34e>
 8001548:	e111      	b.n	800176e <__aeabi_ddiv+0x572>
 800154a:	4649      	mov	r1, r9
 800154c:	f7fe fe88 	bl	8000260 <__aeabi_uidivmod>
 8001550:	9a01      	ldr	r2, [sp, #4]
 8001552:	040b      	lsls	r3, r1, #16
 8001554:	4342      	muls	r2, r0
 8001556:	0c31      	lsrs	r1, r6, #16
 8001558:	0005      	movs	r5, r0
 800155a:	4319      	orrs	r1, r3
 800155c:	428a      	cmp	r2, r1
 800155e:	d907      	bls.n	8001570 <__aeabi_ddiv+0x374>
 8001560:	1909      	adds	r1, r1, r4
 8001562:	3d01      	subs	r5, #1
 8001564:	428c      	cmp	r4, r1
 8001566:	d803      	bhi.n	8001570 <__aeabi_ddiv+0x374>
 8001568:	428a      	cmp	r2, r1
 800156a:	d901      	bls.n	8001570 <__aeabi_ddiv+0x374>
 800156c:	1e85      	subs	r5, r0, #2
 800156e:	1909      	adds	r1, r1, r4
 8001570:	1a88      	subs	r0, r1, r2
 8001572:	4649      	mov	r1, r9
 8001574:	f7fe fe74 	bl	8000260 <__aeabi_uidivmod>
 8001578:	0409      	lsls	r1, r1, #16
 800157a:	468c      	mov	ip, r1
 800157c:	0431      	lsls	r1, r6, #16
 800157e:	4666      	mov	r6, ip
 8001580:	9a01      	ldr	r2, [sp, #4]
 8001582:	0c09      	lsrs	r1, r1, #16
 8001584:	4342      	muls	r2, r0
 8001586:	0003      	movs	r3, r0
 8001588:	4331      	orrs	r1, r6
 800158a:	428a      	cmp	r2, r1
 800158c:	d907      	bls.n	800159e <__aeabi_ddiv+0x3a2>
 800158e:	1909      	adds	r1, r1, r4
 8001590:	3b01      	subs	r3, #1
 8001592:	428c      	cmp	r4, r1
 8001594:	d803      	bhi.n	800159e <__aeabi_ddiv+0x3a2>
 8001596:	428a      	cmp	r2, r1
 8001598:	d901      	bls.n	800159e <__aeabi_ddiv+0x3a2>
 800159a:	1e83      	subs	r3, r0, #2
 800159c:	1909      	adds	r1, r1, r4
 800159e:	9e03      	ldr	r6, [sp, #12]
 80015a0:	1a89      	subs	r1, r1, r2
 80015a2:	0032      	movs	r2, r6
 80015a4:	042d      	lsls	r5, r5, #16
 80015a6:	431d      	orrs	r5, r3
 80015a8:	9f02      	ldr	r7, [sp, #8]
 80015aa:	042b      	lsls	r3, r5, #16
 80015ac:	0c1b      	lsrs	r3, r3, #16
 80015ae:	435a      	muls	r2, r3
 80015b0:	437b      	muls	r3, r7
 80015b2:	469c      	mov	ip, r3
 80015b4:	0c28      	lsrs	r0, r5, #16
 80015b6:	4346      	muls	r6, r0
 80015b8:	0c13      	lsrs	r3, r2, #16
 80015ba:	44b4      	add	ip, r6
 80015bc:	4463      	add	r3, ip
 80015be:	4378      	muls	r0, r7
 80015c0:	429e      	cmp	r6, r3
 80015c2:	d903      	bls.n	80015cc <__aeabi_ddiv+0x3d0>
 80015c4:	2680      	movs	r6, #128	; 0x80
 80015c6:	0276      	lsls	r6, r6, #9
 80015c8:	46b4      	mov	ip, r6
 80015ca:	4460      	add	r0, ip
 80015cc:	0c1e      	lsrs	r6, r3, #16
 80015ce:	0412      	lsls	r2, r2, #16
 80015d0:	041b      	lsls	r3, r3, #16
 80015d2:	0c12      	lsrs	r2, r2, #16
 80015d4:	1830      	adds	r0, r6, r0
 80015d6:	189b      	adds	r3, r3, r2
 80015d8:	4281      	cmp	r1, r0
 80015da:	d306      	bcc.n	80015ea <__aeabi_ddiv+0x3ee>
 80015dc:	d002      	beq.n	80015e4 <__aeabi_ddiv+0x3e8>
 80015de:	2301      	movs	r3, #1
 80015e0:	431d      	orrs	r5, r3
 80015e2:	e6ce      	b.n	8001382 <__aeabi_ddiv+0x186>
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d100      	bne.n	80015ea <__aeabi_ddiv+0x3ee>
 80015e8:	e6cb      	b.n	8001382 <__aeabi_ddiv+0x186>
 80015ea:	1861      	adds	r1, r4, r1
 80015ec:	1e6e      	subs	r6, r5, #1
 80015ee:	42a1      	cmp	r1, r4
 80015f0:	d200      	bcs.n	80015f4 <__aeabi_ddiv+0x3f8>
 80015f2:	e0a4      	b.n	800173e <__aeabi_ddiv+0x542>
 80015f4:	4281      	cmp	r1, r0
 80015f6:	d200      	bcs.n	80015fa <__aeabi_ddiv+0x3fe>
 80015f8:	e0c9      	b.n	800178e <__aeabi_ddiv+0x592>
 80015fa:	d100      	bne.n	80015fe <__aeabi_ddiv+0x402>
 80015fc:	e0d9      	b.n	80017b2 <__aeabi_ddiv+0x5b6>
 80015fe:	0035      	movs	r5, r6
 8001600:	e7ed      	b.n	80015de <__aeabi_ddiv+0x3e2>
 8001602:	2501      	movs	r5, #1
 8001604:	426d      	negs	r5, r5
 8001606:	2101      	movs	r1, #1
 8001608:	1a89      	subs	r1, r1, r2
 800160a:	2938      	cmp	r1, #56	; 0x38
 800160c:	dd00      	ble.n	8001610 <__aeabi_ddiv+0x414>
 800160e:	e64c      	b.n	80012aa <__aeabi_ddiv+0xae>
 8001610:	291f      	cmp	r1, #31
 8001612:	dc00      	bgt.n	8001616 <__aeabi_ddiv+0x41a>
 8001614:	e07f      	b.n	8001716 <__aeabi_ddiv+0x51a>
 8001616:	231f      	movs	r3, #31
 8001618:	425b      	negs	r3, r3
 800161a:	1a9a      	subs	r2, r3, r2
 800161c:	4643      	mov	r3, r8
 800161e:	40d3      	lsrs	r3, r2
 8001620:	2920      	cmp	r1, #32
 8001622:	d004      	beq.n	800162e <__aeabi_ddiv+0x432>
 8001624:	4644      	mov	r4, r8
 8001626:	4a65      	ldr	r2, [pc, #404]	; (80017bc <__aeabi_ddiv+0x5c0>)
 8001628:	445a      	add	r2, fp
 800162a:	4094      	lsls	r4, r2
 800162c:	4325      	orrs	r5, r4
 800162e:	1e6a      	subs	r2, r5, #1
 8001630:	4195      	sbcs	r5, r2
 8001632:	2207      	movs	r2, #7
 8001634:	432b      	orrs	r3, r5
 8001636:	0015      	movs	r5, r2
 8001638:	2400      	movs	r4, #0
 800163a:	401d      	ands	r5, r3
 800163c:	421a      	tst	r2, r3
 800163e:	d100      	bne.n	8001642 <__aeabi_ddiv+0x446>
 8001640:	e0a1      	b.n	8001786 <__aeabi_ddiv+0x58a>
 8001642:	220f      	movs	r2, #15
 8001644:	2400      	movs	r4, #0
 8001646:	401a      	ands	r2, r3
 8001648:	2a04      	cmp	r2, #4
 800164a:	d100      	bne.n	800164e <__aeabi_ddiv+0x452>
 800164c:	e098      	b.n	8001780 <__aeabi_ddiv+0x584>
 800164e:	1d1a      	adds	r2, r3, #4
 8001650:	429a      	cmp	r2, r3
 8001652:	419b      	sbcs	r3, r3
 8001654:	425b      	negs	r3, r3
 8001656:	18e4      	adds	r4, r4, r3
 8001658:	0013      	movs	r3, r2
 800165a:	0222      	lsls	r2, r4, #8
 800165c:	d400      	bmi.n	8001660 <__aeabi_ddiv+0x464>
 800165e:	e08f      	b.n	8001780 <__aeabi_ddiv+0x584>
 8001660:	2301      	movs	r3, #1
 8001662:	2400      	movs	r4, #0
 8001664:	2500      	movs	r5, #0
 8001666:	e623      	b.n	80012b0 <__aeabi_ddiv+0xb4>
 8001668:	42b5      	cmp	r5, r6
 800166a:	d300      	bcc.n	800166e <__aeabi_ddiv+0x472>
 800166c:	e764      	b.n	8001538 <__aeabi_ddiv+0x33c>
 800166e:	4643      	mov	r3, r8
 8001670:	1e5a      	subs	r2, r3, #1
 8001672:	9b00      	ldr	r3, [sp, #0]
 8001674:	469c      	mov	ip, r3
 8001676:	4465      	add	r5, ip
 8001678:	001f      	movs	r7, r3
 800167a:	429d      	cmp	r5, r3
 800167c:	419b      	sbcs	r3, r3
 800167e:	425b      	negs	r3, r3
 8001680:	191b      	adds	r3, r3, r4
 8001682:	18c9      	adds	r1, r1, r3
 8001684:	428c      	cmp	r4, r1
 8001686:	d23a      	bcs.n	80016fe <__aeabi_ddiv+0x502>
 8001688:	4288      	cmp	r0, r1
 800168a:	d863      	bhi.n	8001754 <__aeabi_ddiv+0x558>
 800168c:	d060      	beq.n	8001750 <__aeabi_ddiv+0x554>
 800168e:	4690      	mov	r8, r2
 8001690:	e752      	b.n	8001538 <__aeabi_ddiv+0x33c>
 8001692:	42aa      	cmp	r2, r5
 8001694:	d900      	bls.n	8001698 <__aeabi_ddiv+0x49c>
 8001696:	e6ea      	b.n	800146e <__aeabi_ddiv+0x272>
 8001698:	4643      	mov	r3, r8
 800169a:	07de      	lsls	r6, r3, #31
 800169c:	0858      	lsrs	r0, r3, #1
 800169e:	086b      	lsrs	r3, r5, #1
 80016a0:	431e      	orrs	r6, r3
 80016a2:	07ed      	lsls	r5, r5, #31
 80016a4:	e6ea      	b.n	800147c <__aeabi_ddiv+0x280>
 80016a6:	4648      	mov	r0, r9
 80016a8:	f000 fde4 	bl	8002274 <__clzsi2>
 80016ac:	0001      	movs	r1, r0
 80016ae:	0002      	movs	r2, r0
 80016b0:	3115      	adds	r1, #21
 80016b2:	3220      	adds	r2, #32
 80016b4:	291c      	cmp	r1, #28
 80016b6:	dc00      	bgt.n	80016ba <__aeabi_ddiv+0x4be>
 80016b8:	e61a      	b.n	80012f0 <__aeabi_ddiv+0xf4>
 80016ba:	464b      	mov	r3, r9
 80016bc:	3808      	subs	r0, #8
 80016be:	4083      	lsls	r3, r0
 80016c0:	2500      	movs	r5, #0
 80016c2:	4698      	mov	r8, r3
 80016c4:	e620      	b.n	8001308 <__aeabi_ddiv+0x10c>
 80016c6:	f000 fdd5 	bl	8002274 <__clzsi2>
 80016ca:	0003      	movs	r3, r0
 80016cc:	001a      	movs	r2, r3
 80016ce:	3215      	adds	r2, #21
 80016d0:	3020      	adds	r0, #32
 80016d2:	2a1c      	cmp	r2, #28
 80016d4:	dc00      	bgt.n	80016d8 <__aeabi_ddiv+0x4dc>
 80016d6:	e630      	b.n	800133a <__aeabi_ddiv+0x13e>
 80016d8:	4654      	mov	r4, sl
 80016da:	3b08      	subs	r3, #8
 80016dc:	2200      	movs	r2, #0
 80016de:	409c      	lsls	r4, r3
 80016e0:	e635      	b.n	800134e <__aeabi_ddiv+0x152>
 80016e2:	230f      	movs	r3, #15
 80016e4:	402b      	ands	r3, r5
 80016e6:	2b04      	cmp	r3, #4
 80016e8:	d100      	bne.n	80016ec <__aeabi_ddiv+0x4f0>
 80016ea:	e652      	b.n	8001392 <__aeabi_ddiv+0x196>
 80016ec:	2305      	movs	r3, #5
 80016ee:	425b      	negs	r3, r3
 80016f0:	42ab      	cmp	r3, r5
 80016f2:	419b      	sbcs	r3, r3
 80016f4:	3504      	adds	r5, #4
 80016f6:	425b      	negs	r3, r3
 80016f8:	08ed      	lsrs	r5, r5, #3
 80016fa:	4498      	add	r8, r3
 80016fc:	e64a      	b.n	8001394 <__aeabi_ddiv+0x198>
 80016fe:	428c      	cmp	r4, r1
 8001700:	d1c5      	bne.n	800168e <__aeabi_ddiv+0x492>
 8001702:	42af      	cmp	r7, r5
 8001704:	d9c0      	bls.n	8001688 <__aeabi_ddiv+0x48c>
 8001706:	4690      	mov	r8, r2
 8001708:	e716      	b.n	8001538 <__aeabi_ddiv+0x33c>
 800170a:	428a      	cmp	r2, r1
 800170c:	d800      	bhi.n	8001710 <__aeabi_ddiv+0x514>
 800170e:	e6ea      	b.n	80014e6 <__aeabi_ddiv+0x2ea>
 8001710:	1e83      	subs	r3, r0, #2
 8001712:	1909      	adds	r1, r1, r4
 8001714:	e6e7      	b.n	80014e6 <__aeabi_ddiv+0x2ea>
 8001716:	4a2a      	ldr	r2, [pc, #168]	; (80017c0 <__aeabi_ddiv+0x5c4>)
 8001718:	0028      	movs	r0, r5
 800171a:	445a      	add	r2, fp
 800171c:	4643      	mov	r3, r8
 800171e:	4095      	lsls	r5, r2
 8001720:	4093      	lsls	r3, r2
 8001722:	40c8      	lsrs	r0, r1
 8001724:	1e6a      	subs	r2, r5, #1
 8001726:	4195      	sbcs	r5, r2
 8001728:	4644      	mov	r4, r8
 800172a:	4303      	orrs	r3, r0
 800172c:	432b      	orrs	r3, r5
 800172e:	40cc      	lsrs	r4, r1
 8001730:	075a      	lsls	r2, r3, #29
 8001732:	d092      	beq.n	800165a <__aeabi_ddiv+0x45e>
 8001734:	220f      	movs	r2, #15
 8001736:	401a      	ands	r2, r3
 8001738:	2a04      	cmp	r2, #4
 800173a:	d188      	bne.n	800164e <__aeabi_ddiv+0x452>
 800173c:	e78d      	b.n	800165a <__aeabi_ddiv+0x45e>
 800173e:	0035      	movs	r5, r6
 8001740:	4281      	cmp	r1, r0
 8001742:	d000      	beq.n	8001746 <__aeabi_ddiv+0x54a>
 8001744:	e74b      	b.n	80015de <__aeabi_ddiv+0x3e2>
 8001746:	9a00      	ldr	r2, [sp, #0]
 8001748:	4293      	cmp	r3, r2
 800174a:	d000      	beq.n	800174e <__aeabi_ddiv+0x552>
 800174c:	e747      	b.n	80015de <__aeabi_ddiv+0x3e2>
 800174e:	e618      	b.n	8001382 <__aeabi_ddiv+0x186>
 8001750:	42ae      	cmp	r6, r5
 8001752:	d99c      	bls.n	800168e <__aeabi_ddiv+0x492>
 8001754:	2302      	movs	r3, #2
 8001756:	425b      	negs	r3, r3
 8001758:	469c      	mov	ip, r3
 800175a:	9b00      	ldr	r3, [sp, #0]
 800175c:	44e0      	add	r8, ip
 800175e:	469c      	mov	ip, r3
 8001760:	4465      	add	r5, ip
 8001762:	429d      	cmp	r5, r3
 8001764:	419b      	sbcs	r3, r3
 8001766:	425b      	negs	r3, r3
 8001768:	191b      	adds	r3, r3, r4
 800176a:	18c9      	adds	r1, r1, r3
 800176c:	e6e4      	b.n	8001538 <__aeabi_ddiv+0x33c>
 800176e:	4a15      	ldr	r2, [pc, #84]	; (80017c4 <__aeabi_ddiv+0x5c8>)
 8001770:	445a      	add	r2, fp
 8001772:	2a00      	cmp	r2, #0
 8001774:	dc00      	bgt.n	8001778 <__aeabi_ddiv+0x57c>
 8001776:	e744      	b.n	8001602 <__aeabi_ddiv+0x406>
 8001778:	2301      	movs	r3, #1
 800177a:	2500      	movs	r5, #0
 800177c:	4498      	add	r8, r3
 800177e:	e609      	b.n	8001394 <__aeabi_ddiv+0x198>
 8001780:	0765      	lsls	r5, r4, #29
 8001782:	0264      	lsls	r4, r4, #9
 8001784:	0b24      	lsrs	r4, r4, #12
 8001786:	08db      	lsrs	r3, r3, #3
 8001788:	431d      	orrs	r5, r3
 800178a:	2300      	movs	r3, #0
 800178c:	e590      	b.n	80012b0 <__aeabi_ddiv+0xb4>
 800178e:	9e00      	ldr	r6, [sp, #0]
 8001790:	3d02      	subs	r5, #2
 8001792:	0072      	lsls	r2, r6, #1
 8001794:	42b2      	cmp	r2, r6
 8001796:	41bf      	sbcs	r7, r7
 8001798:	427f      	negs	r7, r7
 800179a:	193c      	adds	r4, r7, r4
 800179c:	1909      	adds	r1, r1, r4
 800179e:	9200      	str	r2, [sp, #0]
 80017a0:	e7ce      	b.n	8001740 <__aeabi_ddiv+0x544>
 80017a2:	2480      	movs	r4, #128	; 0x80
 80017a4:	4643      	mov	r3, r8
 80017a6:	0324      	lsls	r4, r4, #12
 80017a8:	431c      	orrs	r4, r3
 80017aa:	0324      	lsls	r4, r4, #12
 80017ac:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <__aeabi_ddiv+0x5cc>)
 80017ae:	0b24      	lsrs	r4, r4, #12
 80017b0:	e57e      	b.n	80012b0 <__aeabi_ddiv+0xb4>
 80017b2:	9a00      	ldr	r2, [sp, #0]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d3ea      	bcc.n	800178e <__aeabi_ddiv+0x592>
 80017b8:	0035      	movs	r5, r6
 80017ba:	e7c4      	b.n	8001746 <__aeabi_ddiv+0x54a>
 80017bc:	0000043e 	.word	0x0000043e
 80017c0:	0000041e 	.word	0x0000041e
 80017c4:	000003ff 	.word	0x000003ff
 80017c8:	000007ff 	.word	0x000007ff

080017cc <__eqdf2>:
 80017cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ce:	464f      	mov	r7, r9
 80017d0:	4646      	mov	r6, r8
 80017d2:	46d6      	mov	lr, sl
 80017d4:	4694      	mov	ip, r2
 80017d6:	4691      	mov	r9, r2
 80017d8:	031a      	lsls	r2, r3, #12
 80017da:	0b12      	lsrs	r2, r2, #12
 80017dc:	4d18      	ldr	r5, [pc, #96]	; (8001840 <__eqdf2+0x74>)
 80017de:	b5c0      	push	{r6, r7, lr}
 80017e0:	004c      	lsls	r4, r1, #1
 80017e2:	030f      	lsls	r7, r1, #12
 80017e4:	4692      	mov	sl, r2
 80017e6:	005a      	lsls	r2, r3, #1
 80017e8:	0006      	movs	r6, r0
 80017ea:	4680      	mov	r8, r0
 80017ec:	0b3f      	lsrs	r7, r7, #12
 80017ee:	2001      	movs	r0, #1
 80017f0:	0d64      	lsrs	r4, r4, #21
 80017f2:	0fc9      	lsrs	r1, r1, #31
 80017f4:	0d52      	lsrs	r2, r2, #21
 80017f6:	0fdb      	lsrs	r3, r3, #31
 80017f8:	42ac      	cmp	r4, r5
 80017fa:	d00a      	beq.n	8001812 <__eqdf2+0x46>
 80017fc:	42aa      	cmp	r2, r5
 80017fe:	d003      	beq.n	8001808 <__eqdf2+0x3c>
 8001800:	4294      	cmp	r4, r2
 8001802:	d101      	bne.n	8001808 <__eqdf2+0x3c>
 8001804:	4557      	cmp	r7, sl
 8001806:	d00d      	beq.n	8001824 <__eqdf2+0x58>
 8001808:	bce0      	pop	{r5, r6, r7}
 800180a:	46ba      	mov	sl, r7
 800180c:	46b1      	mov	r9, r6
 800180e:	46a8      	mov	r8, r5
 8001810:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001812:	003d      	movs	r5, r7
 8001814:	4335      	orrs	r5, r6
 8001816:	d1f7      	bne.n	8001808 <__eqdf2+0x3c>
 8001818:	42a2      	cmp	r2, r4
 800181a:	d1f5      	bne.n	8001808 <__eqdf2+0x3c>
 800181c:	4652      	mov	r2, sl
 800181e:	4665      	mov	r5, ip
 8001820:	432a      	orrs	r2, r5
 8001822:	d1f1      	bne.n	8001808 <__eqdf2+0x3c>
 8001824:	2001      	movs	r0, #1
 8001826:	45c8      	cmp	r8, r9
 8001828:	d1ee      	bne.n	8001808 <__eqdf2+0x3c>
 800182a:	4299      	cmp	r1, r3
 800182c:	d006      	beq.n	800183c <__eqdf2+0x70>
 800182e:	2c00      	cmp	r4, #0
 8001830:	d1ea      	bne.n	8001808 <__eqdf2+0x3c>
 8001832:	433e      	orrs	r6, r7
 8001834:	0030      	movs	r0, r6
 8001836:	1e46      	subs	r6, r0, #1
 8001838:	41b0      	sbcs	r0, r6
 800183a:	e7e5      	b.n	8001808 <__eqdf2+0x3c>
 800183c:	2000      	movs	r0, #0
 800183e:	e7e3      	b.n	8001808 <__eqdf2+0x3c>
 8001840:	000007ff 	.word	0x000007ff

08001844 <__gedf2>:
 8001844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001846:	464e      	mov	r6, r9
 8001848:	4645      	mov	r5, r8
 800184a:	4657      	mov	r7, sl
 800184c:	46de      	mov	lr, fp
 800184e:	0004      	movs	r4, r0
 8001850:	0018      	movs	r0, r3
 8001852:	b5e0      	push	{r5, r6, r7, lr}
 8001854:	0016      	movs	r6, r2
 8001856:	031b      	lsls	r3, r3, #12
 8001858:	0b1b      	lsrs	r3, r3, #12
 800185a:	4d32      	ldr	r5, [pc, #200]	; (8001924 <__gedf2+0xe0>)
 800185c:	030f      	lsls	r7, r1, #12
 800185e:	004a      	lsls	r2, r1, #1
 8001860:	4699      	mov	r9, r3
 8001862:	0043      	lsls	r3, r0, #1
 8001864:	46a4      	mov	ip, r4
 8001866:	46b0      	mov	r8, r6
 8001868:	0b3f      	lsrs	r7, r7, #12
 800186a:	0d52      	lsrs	r2, r2, #21
 800186c:	0fc9      	lsrs	r1, r1, #31
 800186e:	0d5b      	lsrs	r3, r3, #21
 8001870:	0fc0      	lsrs	r0, r0, #31
 8001872:	42aa      	cmp	r2, r5
 8001874:	d029      	beq.n	80018ca <__gedf2+0x86>
 8001876:	42ab      	cmp	r3, r5
 8001878:	d018      	beq.n	80018ac <__gedf2+0x68>
 800187a:	2a00      	cmp	r2, #0
 800187c:	d12a      	bne.n	80018d4 <__gedf2+0x90>
 800187e:	433c      	orrs	r4, r7
 8001880:	46a3      	mov	fp, r4
 8001882:	4265      	negs	r5, r4
 8001884:	4165      	adcs	r5, r4
 8001886:	2b00      	cmp	r3, #0
 8001888:	d102      	bne.n	8001890 <__gedf2+0x4c>
 800188a:	464c      	mov	r4, r9
 800188c:	4326      	orrs	r6, r4
 800188e:	d027      	beq.n	80018e0 <__gedf2+0x9c>
 8001890:	2d00      	cmp	r5, #0
 8001892:	d115      	bne.n	80018c0 <__gedf2+0x7c>
 8001894:	4281      	cmp	r1, r0
 8001896:	d028      	beq.n	80018ea <__gedf2+0xa6>
 8001898:	2002      	movs	r0, #2
 800189a:	3901      	subs	r1, #1
 800189c:	4008      	ands	r0, r1
 800189e:	3801      	subs	r0, #1
 80018a0:	bcf0      	pop	{r4, r5, r6, r7}
 80018a2:	46bb      	mov	fp, r7
 80018a4:	46b2      	mov	sl, r6
 80018a6:	46a9      	mov	r9, r5
 80018a8:	46a0      	mov	r8, r4
 80018aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018ac:	464d      	mov	r5, r9
 80018ae:	432e      	orrs	r6, r5
 80018b0:	d12f      	bne.n	8001912 <__gedf2+0xce>
 80018b2:	2a00      	cmp	r2, #0
 80018b4:	d1ee      	bne.n	8001894 <__gedf2+0x50>
 80018b6:	433c      	orrs	r4, r7
 80018b8:	4265      	negs	r5, r4
 80018ba:	4165      	adcs	r5, r4
 80018bc:	2d00      	cmp	r5, #0
 80018be:	d0e9      	beq.n	8001894 <__gedf2+0x50>
 80018c0:	2800      	cmp	r0, #0
 80018c2:	d1ed      	bne.n	80018a0 <__gedf2+0x5c>
 80018c4:	2001      	movs	r0, #1
 80018c6:	4240      	negs	r0, r0
 80018c8:	e7ea      	b.n	80018a0 <__gedf2+0x5c>
 80018ca:	003d      	movs	r5, r7
 80018cc:	4325      	orrs	r5, r4
 80018ce:	d120      	bne.n	8001912 <__gedf2+0xce>
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d0eb      	beq.n	80018ac <__gedf2+0x68>
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d1dd      	bne.n	8001894 <__gedf2+0x50>
 80018d8:	464c      	mov	r4, r9
 80018da:	4326      	orrs	r6, r4
 80018dc:	d1da      	bne.n	8001894 <__gedf2+0x50>
 80018de:	e7db      	b.n	8001898 <__gedf2+0x54>
 80018e0:	465b      	mov	r3, fp
 80018e2:	2000      	movs	r0, #0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d0db      	beq.n	80018a0 <__gedf2+0x5c>
 80018e8:	e7d6      	b.n	8001898 <__gedf2+0x54>
 80018ea:	429a      	cmp	r2, r3
 80018ec:	dc0a      	bgt.n	8001904 <__gedf2+0xc0>
 80018ee:	dbe7      	blt.n	80018c0 <__gedf2+0x7c>
 80018f0:	454f      	cmp	r7, r9
 80018f2:	d8d1      	bhi.n	8001898 <__gedf2+0x54>
 80018f4:	d010      	beq.n	8001918 <__gedf2+0xd4>
 80018f6:	2000      	movs	r0, #0
 80018f8:	454f      	cmp	r7, r9
 80018fa:	d2d1      	bcs.n	80018a0 <__gedf2+0x5c>
 80018fc:	2900      	cmp	r1, #0
 80018fe:	d0e1      	beq.n	80018c4 <__gedf2+0x80>
 8001900:	0008      	movs	r0, r1
 8001902:	e7cd      	b.n	80018a0 <__gedf2+0x5c>
 8001904:	4243      	negs	r3, r0
 8001906:	4158      	adcs	r0, r3
 8001908:	2302      	movs	r3, #2
 800190a:	4240      	negs	r0, r0
 800190c:	4018      	ands	r0, r3
 800190e:	3801      	subs	r0, #1
 8001910:	e7c6      	b.n	80018a0 <__gedf2+0x5c>
 8001912:	2002      	movs	r0, #2
 8001914:	4240      	negs	r0, r0
 8001916:	e7c3      	b.n	80018a0 <__gedf2+0x5c>
 8001918:	45c4      	cmp	ip, r8
 800191a:	d8bd      	bhi.n	8001898 <__gedf2+0x54>
 800191c:	2000      	movs	r0, #0
 800191e:	45c4      	cmp	ip, r8
 8001920:	d2be      	bcs.n	80018a0 <__gedf2+0x5c>
 8001922:	e7eb      	b.n	80018fc <__gedf2+0xb8>
 8001924:	000007ff 	.word	0x000007ff

08001928 <__ledf2>:
 8001928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800192a:	464e      	mov	r6, r9
 800192c:	4645      	mov	r5, r8
 800192e:	4657      	mov	r7, sl
 8001930:	46de      	mov	lr, fp
 8001932:	0004      	movs	r4, r0
 8001934:	0018      	movs	r0, r3
 8001936:	b5e0      	push	{r5, r6, r7, lr}
 8001938:	0016      	movs	r6, r2
 800193a:	031b      	lsls	r3, r3, #12
 800193c:	0b1b      	lsrs	r3, r3, #12
 800193e:	4d31      	ldr	r5, [pc, #196]	; (8001a04 <__ledf2+0xdc>)
 8001940:	030f      	lsls	r7, r1, #12
 8001942:	004a      	lsls	r2, r1, #1
 8001944:	4699      	mov	r9, r3
 8001946:	0043      	lsls	r3, r0, #1
 8001948:	46a4      	mov	ip, r4
 800194a:	46b0      	mov	r8, r6
 800194c:	0b3f      	lsrs	r7, r7, #12
 800194e:	0d52      	lsrs	r2, r2, #21
 8001950:	0fc9      	lsrs	r1, r1, #31
 8001952:	0d5b      	lsrs	r3, r3, #21
 8001954:	0fc0      	lsrs	r0, r0, #31
 8001956:	42aa      	cmp	r2, r5
 8001958:	d011      	beq.n	800197e <__ledf2+0x56>
 800195a:	42ab      	cmp	r3, r5
 800195c:	d014      	beq.n	8001988 <__ledf2+0x60>
 800195e:	2a00      	cmp	r2, #0
 8001960:	d12f      	bne.n	80019c2 <__ledf2+0x9a>
 8001962:	433c      	orrs	r4, r7
 8001964:	46a3      	mov	fp, r4
 8001966:	4265      	negs	r5, r4
 8001968:	4165      	adcs	r5, r4
 800196a:	2b00      	cmp	r3, #0
 800196c:	d114      	bne.n	8001998 <__ledf2+0x70>
 800196e:	464c      	mov	r4, r9
 8001970:	4326      	orrs	r6, r4
 8001972:	d111      	bne.n	8001998 <__ledf2+0x70>
 8001974:	465b      	mov	r3, fp
 8001976:	2000      	movs	r0, #0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d017      	beq.n	80019ac <__ledf2+0x84>
 800197c:	e010      	b.n	80019a0 <__ledf2+0x78>
 800197e:	003d      	movs	r5, r7
 8001980:	4325      	orrs	r5, r4
 8001982:	d112      	bne.n	80019aa <__ledf2+0x82>
 8001984:	4293      	cmp	r3, r2
 8001986:	d11c      	bne.n	80019c2 <__ledf2+0x9a>
 8001988:	464d      	mov	r5, r9
 800198a:	432e      	orrs	r6, r5
 800198c:	d10d      	bne.n	80019aa <__ledf2+0x82>
 800198e:	2a00      	cmp	r2, #0
 8001990:	d104      	bne.n	800199c <__ledf2+0x74>
 8001992:	433c      	orrs	r4, r7
 8001994:	4265      	negs	r5, r4
 8001996:	4165      	adcs	r5, r4
 8001998:	2d00      	cmp	r5, #0
 800199a:	d10d      	bne.n	80019b8 <__ledf2+0x90>
 800199c:	4281      	cmp	r1, r0
 800199e:	d016      	beq.n	80019ce <__ledf2+0xa6>
 80019a0:	2002      	movs	r0, #2
 80019a2:	3901      	subs	r1, #1
 80019a4:	4008      	ands	r0, r1
 80019a6:	3801      	subs	r0, #1
 80019a8:	e000      	b.n	80019ac <__ledf2+0x84>
 80019aa:	2002      	movs	r0, #2
 80019ac:	bcf0      	pop	{r4, r5, r6, r7}
 80019ae:	46bb      	mov	fp, r7
 80019b0:	46b2      	mov	sl, r6
 80019b2:	46a9      	mov	r9, r5
 80019b4:	46a0      	mov	r8, r4
 80019b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019b8:	2800      	cmp	r0, #0
 80019ba:	d1f7      	bne.n	80019ac <__ledf2+0x84>
 80019bc:	2001      	movs	r0, #1
 80019be:	4240      	negs	r0, r0
 80019c0:	e7f4      	b.n	80019ac <__ledf2+0x84>
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1ea      	bne.n	800199c <__ledf2+0x74>
 80019c6:	464c      	mov	r4, r9
 80019c8:	4326      	orrs	r6, r4
 80019ca:	d1e7      	bne.n	800199c <__ledf2+0x74>
 80019cc:	e7e8      	b.n	80019a0 <__ledf2+0x78>
 80019ce:	429a      	cmp	r2, r3
 80019d0:	dd06      	ble.n	80019e0 <__ledf2+0xb8>
 80019d2:	4243      	negs	r3, r0
 80019d4:	4158      	adcs	r0, r3
 80019d6:	2302      	movs	r3, #2
 80019d8:	4240      	negs	r0, r0
 80019da:	4018      	ands	r0, r3
 80019dc:	3801      	subs	r0, #1
 80019de:	e7e5      	b.n	80019ac <__ledf2+0x84>
 80019e0:	429a      	cmp	r2, r3
 80019e2:	dbe9      	blt.n	80019b8 <__ledf2+0x90>
 80019e4:	454f      	cmp	r7, r9
 80019e6:	d8db      	bhi.n	80019a0 <__ledf2+0x78>
 80019e8:	d006      	beq.n	80019f8 <__ledf2+0xd0>
 80019ea:	2000      	movs	r0, #0
 80019ec:	454f      	cmp	r7, r9
 80019ee:	d2dd      	bcs.n	80019ac <__ledf2+0x84>
 80019f0:	2900      	cmp	r1, #0
 80019f2:	d0e3      	beq.n	80019bc <__ledf2+0x94>
 80019f4:	0008      	movs	r0, r1
 80019f6:	e7d9      	b.n	80019ac <__ledf2+0x84>
 80019f8:	45c4      	cmp	ip, r8
 80019fa:	d8d1      	bhi.n	80019a0 <__ledf2+0x78>
 80019fc:	2000      	movs	r0, #0
 80019fe:	45c4      	cmp	ip, r8
 8001a00:	d2d4      	bcs.n	80019ac <__ledf2+0x84>
 8001a02:	e7f5      	b.n	80019f0 <__ledf2+0xc8>
 8001a04:	000007ff 	.word	0x000007ff

08001a08 <__aeabi_dsub>:
 8001a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a0a:	4657      	mov	r7, sl
 8001a0c:	464e      	mov	r6, r9
 8001a0e:	4645      	mov	r5, r8
 8001a10:	46de      	mov	lr, fp
 8001a12:	0004      	movs	r4, r0
 8001a14:	b5e0      	push	{r5, r6, r7, lr}
 8001a16:	001f      	movs	r7, r3
 8001a18:	0010      	movs	r0, r2
 8001a1a:	030b      	lsls	r3, r1, #12
 8001a1c:	0f62      	lsrs	r2, r4, #29
 8001a1e:	004e      	lsls	r6, r1, #1
 8001a20:	0fcd      	lsrs	r5, r1, #31
 8001a22:	0a5b      	lsrs	r3, r3, #9
 8001a24:	0339      	lsls	r1, r7, #12
 8001a26:	4313      	orrs	r3, r2
 8001a28:	0a49      	lsrs	r1, r1, #9
 8001a2a:	00e2      	lsls	r2, r4, #3
 8001a2c:	0f44      	lsrs	r4, r0, #29
 8001a2e:	4321      	orrs	r1, r4
 8001a30:	4cc2      	ldr	r4, [pc, #776]	; (8001d3c <__aeabi_dsub+0x334>)
 8001a32:	4691      	mov	r9, r2
 8001a34:	4692      	mov	sl, r2
 8001a36:	00c0      	lsls	r0, r0, #3
 8001a38:	007a      	lsls	r2, r7, #1
 8001a3a:	4680      	mov	r8, r0
 8001a3c:	0d76      	lsrs	r6, r6, #21
 8001a3e:	0d52      	lsrs	r2, r2, #21
 8001a40:	0fff      	lsrs	r7, r7, #31
 8001a42:	42a2      	cmp	r2, r4
 8001a44:	d100      	bne.n	8001a48 <__aeabi_dsub+0x40>
 8001a46:	e0b4      	b.n	8001bb2 <__aeabi_dsub+0x1aa>
 8001a48:	2401      	movs	r4, #1
 8001a4a:	4067      	eors	r7, r4
 8001a4c:	46bb      	mov	fp, r7
 8001a4e:	42bd      	cmp	r5, r7
 8001a50:	d100      	bne.n	8001a54 <__aeabi_dsub+0x4c>
 8001a52:	e088      	b.n	8001b66 <__aeabi_dsub+0x15e>
 8001a54:	1ab4      	subs	r4, r6, r2
 8001a56:	46a4      	mov	ip, r4
 8001a58:	2c00      	cmp	r4, #0
 8001a5a:	dc00      	bgt.n	8001a5e <__aeabi_dsub+0x56>
 8001a5c:	e0b2      	b.n	8001bc4 <__aeabi_dsub+0x1bc>
 8001a5e:	2a00      	cmp	r2, #0
 8001a60:	d100      	bne.n	8001a64 <__aeabi_dsub+0x5c>
 8001a62:	e0c5      	b.n	8001bf0 <__aeabi_dsub+0x1e8>
 8001a64:	4ab5      	ldr	r2, [pc, #724]	; (8001d3c <__aeabi_dsub+0x334>)
 8001a66:	4296      	cmp	r6, r2
 8001a68:	d100      	bne.n	8001a6c <__aeabi_dsub+0x64>
 8001a6a:	e28b      	b.n	8001f84 <__aeabi_dsub+0x57c>
 8001a6c:	2280      	movs	r2, #128	; 0x80
 8001a6e:	0412      	lsls	r2, r2, #16
 8001a70:	4311      	orrs	r1, r2
 8001a72:	4662      	mov	r2, ip
 8001a74:	2a38      	cmp	r2, #56	; 0x38
 8001a76:	dd00      	ble.n	8001a7a <__aeabi_dsub+0x72>
 8001a78:	e1a1      	b.n	8001dbe <__aeabi_dsub+0x3b6>
 8001a7a:	2a1f      	cmp	r2, #31
 8001a7c:	dd00      	ble.n	8001a80 <__aeabi_dsub+0x78>
 8001a7e:	e216      	b.n	8001eae <__aeabi_dsub+0x4a6>
 8001a80:	2720      	movs	r7, #32
 8001a82:	000c      	movs	r4, r1
 8001a84:	1abf      	subs	r7, r7, r2
 8001a86:	40bc      	lsls	r4, r7
 8001a88:	0002      	movs	r2, r0
 8001a8a:	46a0      	mov	r8, r4
 8001a8c:	4664      	mov	r4, ip
 8001a8e:	40b8      	lsls	r0, r7
 8001a90:	40e2      	lsrs	r2, r4
 8001a92:	4644      	mov	r4, r8
 8001a94:	4314      	orrs	r4, r2
 8001a96:	0002      	movs	r2, r0
 8001a98:	1e50      	subs	r0, r2, #1
 8001a9a:	4182      	sbcs	r2, r0
 8001a9c:	4660      	mov	r0, ip
 8001a9e:	40c1      	lsrs	r1, r0
 8001aa0:	4322      	orrs	r2, r4
 8001aa2:	1a5b      	subs	r3, r3, r1
 8001aa4:	4649      	mov	r1, r9
 8001aa6:	1a8c      	subs	r4, r1, r2
 8001aa8:	45a1      	cmp	r9, r4
 8001aaa:	4192      	sbcs	r2, r2
 8001aac:	4252      	negs	r2, r2
 8001aae:	1a9b      	subs	r3, r3, r2
 8001ab0:	4698      	mov	r8, r3
 8001ab2:	4643      	mov	r3, r8
 8001ab4:	021b      	lsls	r3, r3, #8
 8001ab6:	d400      	bmi.n	8001aba <__aeabi_dsub+0xb2>
 8001ab8:	e117      	b.n	8001cea <__aeabi_dsub+0x2e2>
 8001aba:	4643      	mov	r3, r8
 8001abc:	025b      	lsls	r3, r3, #9
 8001abe:	0a5b      	lsrs	r3, r3, #9
 8001ac0:	4698      	mov	r8, r3
 8001ac2:	4643      	mov	r3, r8
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d100      	bne.n	8001aca <__aeabi_dsub+0xc2>
 8001ac8:	e16c      	b.n	8001da4 <__aeabi_dsub+0x39c>
 8001aca:	4640      	mov	r0, r8
 8001acc:	f000 fbd2 	bl	8002274 <__clzsi2>
 8001ad0:	0002      	movs	r2, r0
 8001ad2:	3a08      	subs	r2, #8
 8001ad4:	2120      	movs	r1, #32
 8001ad6:	0020      	movs	r0, r4
 8001ad8:	4643      	mov	r3, r8
 8001ada:	1a89      	subs	r1, r1, r2
 8001adc:	4093      	lsls	r3, r2
 8001ade:	40c8      	lsrs	r0, r1
 8001ae0:	4094      	lsls	r4, r2
 8001ae2:	4303      	orrs	r3, r0
 8001ae4:	4296      	cmp	r6, r2
 8001ae6:	dd00      	ble.n	8001aea <__aeabi_dsub+0xe2>
 8001ae8:	e157      	b.n	8001d9a <__aeabi_dsub+0x392>
 8001aea:	1b96      	subs	r6, r2, r6
 8001aec:	1c71      	adds	r1, r6, #1
 8001aee:	291f      	cmp	r1, #31
 8001af0:	dd00      	ble.n	8001af4 <__aeabi_dsub+0xec>
 8001af2:	e1cb      	b.n	8001e8c <__aeabi_dsub+0x484>
 8001af4:	2220      	movs	r2, #32
 8001af6:	0018      	movs	r0, r3
 8001af8:	0026      	movs	r6, r4
 8001afa:	1a52      	subs	r2, r2, r1
 8001afc:	4094      	lsls	r4, r2
 8001afe:	4090      	lsls	r0, r2
 8001b00:	40ce      	lsrs	r6, r1
 8001b02:	40cb      	lsrs	r3, r1
 8001b04:	1e62      	subs	r2, r4, #1
 8001b06:	4194      	sbcs	r4, r2
 8001b08:	4330      	orrs	r0, r6
 8001b0a:	4698      	mov	r8, r3
 8001b0c:	2600      	movs	r6, #0
 8001b0e:	4304      	orrs	r4, r0
 8001b10:	0763      	lsls	r3, r4, #29
 8001b12:	d009      	beq.n	8001b28 <__aeabi_dsub+0x120>
 8001b14:	230f      	movs	r3, #15
 8001b16:	4023      	ands	r3, r4
 8001b18:	2b04      	cmp	r3, #4
 8001b1a:	d005      	beq.n	8001b28 <__aeabi_dsub+0x120>
 8001b1c:	1d23      	adds	r3, r4, #4
 8001b1e:	42a3      	cmp	r3, r4
 8001b20:	41a4      	sbcs	r4, r4
 8001b22:	4264      	negs	r4, r4
 8001b24:	44a0      	add	r8, r4
 8001b26:	001c      	movs	r4, r3
 8001b28:	4643      	mov	r3, r8
 8001b2a:	021b      	lsls	r3, r3, #8
 8001b2c:	d400      	bmi.n	8001b30 <__aeabi_dsub+0x128>
 8001b2e:	e0df      	b.n	8001cf0 <__aeabi_dsub+0x2e8>
 8001b30:	4b82      	ldr	r3, [pc, #520]	; (8001d3c <__aeabi_dsub+0x334>)
 8001b32:	3601      	adds	r6, #1
 8001b34:	429e      	cmp	r6, r3
 8001b36:	d100      	bne.n	8001b3a <__aeabi_dsub+0x132>
 8001b38:	e0fb      	b.n	8001d32 <__aeabi_dsub+0x32a>
 8001b3a:	4642      	mov	r2, r8
 8001b3c:	4b80      	ldr	r3, [pc, #512]	; (8001d40 <__aeabi_dsub+0x338>)
 8001b3e:	08e4      	lsrs	r4, r4, #3
 8001b40:	401a      	ands	r2, r3
 8001b42:	0013      	movs	r3, r2
 8001b44:	0571      	lsls	r1, r6, #21
 8001b46:	0752      	lsls	r2, r2, #29
 8001b48:	025b      	lsls	r3, r3, #9
 8001b4a:	4322      	orrs	r2, r4
 8001b4c:	0b1b      	lsrs	r3, r3, #12
 8001b4e:	0d49      	lsrs	r1, r1, #21
 8001b50:	0509      	lsls	r1, r1, #20
 8001b52:	07ed      	lsls	r5, r5, #31
 8001b54:	4319      	orrs	r1, r3
 8001b56:	4329      	orrs	r1, r5
 8001b58:	0010      	movs	r0, r2
 8001b5a:	bcf0      	pop	{r4, r5, r6, r7}
 8001b5c:	46bb      	mov	fp, r7
 8001b5e:	46b2      	mov	sl, r6
 8001b60:	46a9      	mov	r9, r5
 8001b62:	46a0      	mov	r8, r4
 8001b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001b66:	1ab4      	subs	r4, r6, r2
 8001b68:	46a4      	mov	ip, r4
 8001b6a:	2c00      	cmp	r4, #0
 8001b6c:	dd58      	ble.n	8001c20 <__aeabi_dsub+0x218>
 8001b6e:	2a00      	cmp	r2, #0
 8001b70:	d100      	bne.n	8001b74 <__aeabi_dsub+0x16c>
 8001b72:	e09e      	b.n	8001cb2 <__aeabi_dsub+0x2aa>
 8001b74:	4a71      	ldr	r2, [pc, #452]	; (8001d3c <__aeabi_dsub+0x334>)
 8001b76:	4296      	cmp	r6, r2
 8001b78:	d100      	bne.n	8001b7c <__aeabi_dsub+0x174>
 8001b7a:	e13b      	b.n	8001df4 <__aeabi_dsub+0x3ec>
 8001b7c:	2280      	movs	r2, #128	; 0x80
 8001b7e:	0412      	lsls	r2, r2, #16
 8001b80:	4311      	orrs	r1, r2
 8001b82:	4662      	mov	r2, ip
 8001b84:	2a38      	cmp	r2, #56	; 0x38
 8001b86:	dd00      	ble.n	8001b8a <__aeabi_dsub+0x182>
 8001b88:	e0c1      	b.n	8001d0e <__aeabi_dsub+0x306>
 8001b8a:	2a1f      	cmp	r2, #31
 8001b8c:	dc00      	bgt.n	8001b90 <__aeabi_dsub+0x188>
 8001b8e:	e1bb      	b.n	8001f08 <__aeabi_dsub+0x500>
 8001b90:	000c      	movs	r4, r1
 8001b92:	3a20      	subs	r2, #32
 8001b94:	40d4      	lsrs	r4, r2
 8001b96:	0022      	movs	r2, r4
 8001b98:	4664      	mov	r4, ip
 8001b9a:	2c20      	cmp	r4, #32
 8001b9c:	d004      	beq.n	8001ba8 <__aeabi_dsub+0x1a0>
 8001b9e:	2740      	movs	r7, #64	; 0x40
 8001ba0:	1b3f      	subs	r7, r7, r4
 8001ba2:	40b9      	lsls	r1, r7
 8001ba4:	4308      	orrs	r0, r1
 8001ba6:	4680      	mov	r8, r0
 8001ba8:	4644      	mov	r4, r8
 8001baa:	1e61      	subs	r1, r4, #1
 8001bac:	418c      	sbcs	r4, r1
 8001bae:	4314      	orrs	r4, r2
 8001bb0:	e0b1      	b.n	8001d16 <__aeabi_dsub+0x30e>
 8001bb2:	000c      	movs	r4, r1
 8001bb4:	4304      	orrs	r4, r0
 8001bb6:	d02a      	beq.n	8001c0e <__aeabi_dsub+0x206>
 8001bb8:	46bb      	mov	fp, r7
 8001bba:	42bd      	cmp	r5, r7
 8001bbc:	d02d      	beq.n	8001c1a <__aeabi_dsub+0x212>
 8001bbe:	4c61      	ldr	r4, [pc, #388]	; (8001d44 <__aeabi_dsub+0x33c>)
 8001bc0:	46a4      	mov	ip, r4
 8001bc2:	44b4      	add	ip, r6
 8001bc4:	4664      	mov	r4, ip
 8001bc6:	2c00      	cmp	r4, #0
 8001bc8:	d05c      	beq.n	8001c84 <__aeabi_dsub+0x27c>
 8001bca:	1b94      	subs	r4, r2, r6
 8001bcc:	46a4      	mov	ip, r4
 8001bce:	2e00      	cmp	r6, #0
 8001bd0:	d000      	beq.n	8001bd4 <__aeabi_dsub+0x1cc>
 8001bd2:	e115      	b.n	8001e00 <__aeabi_dsub+0x3f8>
 8001bd4:	464d      	mov	r5, r9
 8001bd6:	431d      	orrs	r5, r3
 8001bd8:	d100      	bne.n	8001bdc <__aeabi_dsub+0x1d4>
 8001bda:	e1c3      	b.n	8001f64 <__aeabi_dsub+0x55c>
 8001bdc:	1e65      	subs	r5, r4, #1
 8001bde:	2c01      	cmp	r4, #1
 8001be0:	d100      	bne.n	8001be4 <__aeabi_dsub+0x1dc>
 8001be2:	e20c      	b.n	8001ffe <__aeabi_dsub+0x5f6>
 8001be4:	4e55      	ldr	r6, [pc, #340]	; (8001d3c <__aeabi_dsub+0x334>)
 8001be6:	42b4      	cmp	r4, r6
 8001be8:	d100      	bne.n	8001bec <__aeabi_dsub+0x1e4>
 8001bea:	e1f8      	b.n	8001fde <__aeabi_dsub+0x5d6>
 8001bec:	46ac      	mov	ip, r5
 8001bee:	e10e      	b.n	8001e0e <__aeabi_dsub+0x406>
 8001bf0:	000a      	movs	r2, r1
 8001bf2:	4302      	orrs	r2, r0
 8001bf4:	d100      	bne.n	8001bf8 <__aeabi_dsub+0x1f0>
 8001bf6:	e136      	b.n	8001e66 <__aeabi_dsub+0x45e>
 8001bf8:	0022      	movs	r2, r4
 8001bfa:	3a01      	subs	r2, #1
 8001bfc:	2c01      	cmp	r4, #1
 8001bfe:	d100      	bne.n	8001c02 <__aeabi_dsub+0x1fa>
 8001c00:	e1c6      	b.n	8001f90 <__aeabi_dsub+0x588>
 8001c02:	4c4e      	ldr	r4, [pc, #312]	; (8001d3c <__aeabi_dsub+0x334>)
 8001c04:	45a4      	cmp	ip, r4
 8001c06:	d100      	bne.n	8001c0a <__aeabi_dsub+0x202>
 8001c08:	e0f4      	b.n	8001df4 <__aeabi_dsub+0x3ec>
 8001c0a:	4694      	mov	ip, r2
 8001c0c:	e731      	b.n	8001a72 <__aeabi_dsub+0x6a>
 8001c0e:	2401      	movs	r4, #1
 8001c10:	4067      	eors	r7, r4
 8001c12:	46bb      	mov	fp, r7
 8001c14:	42bd      	cmp	r5, r7
 8001c16:	d000      	beq.n	8001c1a <__aeabi_dsub+0x212>
 8001c18:	e71c      	b.n	8001a54 <__aeabi_dsub+0x4c>
 8001c1a:	4c4a      	ldr	r4, [pc, #296]	; (8001d44 <__aeabi_dsub+0x33c>)
 8001c1c:	46a4      	mov	ip, r4
 8001c1e:	44b4      	add	ip, r6
 8001c20:	4664      	mov	r4, ip
 8001c22:	2c00      	cmp	r4, #0
 8001c24:	d100      	bne.n	8001c28 <__aeabi_dsub+0x220>
 8001c26:	e0cf      	b.n	8001dc8 <__aeabi_dsub+0x3c0>
 8001c28:	1b94      	subs	r4, r2, r6
 8001c2a:	46a4      	mov	ip, r4
 8001c2c:	2e00      	cmp	r6, #0
 8001c2e:	d100      	bne.n	8001c32 <__aeabi_dsub+0x22a>
 8001c30:	e15c      	b.n	8001eec <__aeabi_dsub+0x4e4>
 8001c32:	4e42      	ldr	r6, [pc, #264]	; (8001d3c <__aeabi_dsub+0x334>)
 8001c34:	42b2      	cmp	r2, r6
 8001c36:	d100      	bne.n	8001c3a <__aeabi_dsub+0x232>
 8001c38:	e1ec      	b.n	8002014 <__aeabi_dsub+0x60c>
 8001c3a:	2680      	movs	r6, #128	; 0x80
 8001c3c:	0436      	lsls	r6, r6, #16
 8001c3e:	4333      	orrs	r3, r6
 8001c40:	4664      	mov	r4, ip
 8001c42:	2c38      	cmp	r4, #56	; 0x38
 8001c44:	dd00      	ble.n	8001c48 <__aeabi_dsub+0x240>
 8001c46:	e1b3      	b.n	8001fb0 <__aeabi_dsub+0x5a8>
 8001c48:	2c1f      	cmp	r4, #31
 8001c4a:	dd00      	ble.n	8001c4e <__aeabi_dsub+0x246>
 8001c4c:	e238      	b.n	80020c0 <__aeabi_dsub+0x6b8>
 8001c4e:	2620      	movs	r6, #32
 8001c50:	1b36      	subs	r6, r6, r4
 8001c52:	001c      	movs	r4, r3
 8001c54:	40b4      	lsls	r4, r6
 8001c56:	464f      	mov	r7, r9
 8001c58:	46a0      	mov	r8, r4
 8001c5a:	4664      	mov	r4, ip
 8001c5c:	40e7      	lsrs	r7, r4
 8001c5e:	4644      	mov	r4, r8
 8001c60:	433c      	orrs	r4, r7
 8001c62:	464f      	mov	r7, r9
 8001c64:	40b7      	lsls	r7, r6
 8001c66:	003e      	movs	r6, r7
 8001c68:	1e77      	subs	r7, r6, #1
 8001c6a:	41be      	sbcs	r6, r7
 8001c6c:	4334      	orrs	r4, r6
 8001c6e:	4666      	mov	r6, ip
 8001c70:	40f3      	lsrs	r3, r6
 8001c72:	18c9      	adds	r1, r1, r3
 8001c74:	1824      	adds	r4, r4, r0
 8001c76:	4284      	cmp	r4, r0
 8001c78:	419b      	sbcs	r3, r3
 8001c7a:	425b      	negs	r3, r3
 8001c7c:	4698      	mov	r8, r3
 8001c7e:	0016      	movs	r6, r2
 8001c80:	4488      	add	r8, r1
 8001c82:	e04e      	b.n	8001d22 <__aeabi_dsub+0x31a>
 8001c84:	4a30      	ldr	r2, [pc, #192]	; (8001d48 <__aeabi_dsub+0x340>)
 8001c86:	1c74      	adds	r4, r6, #1
 8001c88:	4214      	tst	r4, r2
 8001c8a:	d000      	beq.n	8001c8e <__aeabi_dsub+0x286>
 8001c8c:	e0d6      	b.n	8001e3c <__aeabi_dsub+0x434>
 8001c8e:	464a      	mov	r2, r9
 8001c90:	431a      	orrs	r2, r3
 8001c92:	2e00      	cmp	r6, #0
 8001c94:	d000      	beq.n	8001c98 <__aeabi_dsub+0x290>
 8001c96:	e15b      	b.n	8001f50 <__aeabi_dsub+0x548>
 8001c98:	2a00      	cmp	r2, #0
 8001c9a:	d100      	bne.n	8001c9e <__aeabi_dsub+0x296>
 8001c9c:	e1a5      	b.n	8001fea <__aeabi_dsub+0x5e2>
 8001c9e:	000a      	movs	r2, r1
 8001ca0:	4302      	orrs	r2, r0
 8001ca2:	d000      	beq.n	8001ca6 <__aeabi_dsub+0x29e>
 8001ca4:	e1bb      	b.n	800201e <__aeabi_dsub+0x616>
 8001ca6:	464a      	mov	r2, r9
 8001ca8:	0759      	lsls	r1, r3, #29
 8001caa:	08d2      	lsrs	r2, r2, #3
 8001cac:	430a      	orrs	r2, r1
 8001cae:	08db      	lsrs	r3, r3, #3
 8001cb0:	e027      	b.n	8001d02 <__aeabi_dsub+0x2fa>
 8001cb2:	000a      	movs	r2, r1
 8001cb4:	4302      	orrs	r2, r0
 8001cb6:	d100      	bne.n	8001cba <__aeabi_dsub+0x2b2>
 8001cb8:	e174      	b.n	8001fa4 <__aeabi_dsub+0x59c>
 8001cba:	0022      	movs	r2, r4
 8001cbc:	3a01      	subs	r2, #1
 8001cbe:	2c01      	cmp	r4, #1
 8001cc0:	d005      	beq.n	8001cce <__aeabi_dsub+0x2c6>
 8001cc2:	4c1e      	ldr	r4, [pc, #120]	; (8001d3c <__aeabi_dsub+0x334>)
 8001cc4:	45a4      	cmp	ip, r4
 8001cc6:	d100      	bne.n	8001cca <__aeabi_dsub+0x2c2>
 8001cc8:	e094      	b.n	8001df4 <__aeabi_dsub+0x3ec>
 8001cca:	4694      	mov	ip, r2
 8001ccc:	e759      	b.n	8001b82 <__aeabi_dsub+0x17a>
 8001cce:	4448      	add	r0, r9
 8001cd0:	4548      	cmp	r0, r9
 8001cd2:	4192      	sbcs	r2, r2
 8001cd4:	185b      	adds	r3, r3, r1
 8001cd6:	4698      	mov	r8, r3
 8001cd8:	0004      	movs	r4, r0
 8001cda:	4252      	negs	r2, r2
 8001cdc:	4490      	add	r8, r2
 8001cde:	4643      	mov	r3, r8
 8001ce0:	2602      	movs	r6, #2
 8001ce2:	021b      	lsls	r3, r3, #8
 8001ce4:	d500      	bpl.n	8001ce8 <__aeabi_dsub+0x2e0>
 8001ce6:	e0c4      	b.n	8001e72 <__aeabi_dsub+0x46a>
 8001ce8:	3e01      	subs	r6, #1
 8001cea:	0763      	lsls	r3, r4, #29
 8001cec:	d000      	beq.n	8001cf0 <__aeabi_dsub+0x2e8>
 8001cee:	e711      	b.n	8001b14 <__aeabi_dsub+0x10c>
 8001cf0:	4643      	mov	r3, r8
 8001cf2:	46b4      	mov	ip, r6
 8001cf4:	0759      	lsls	r1, r3, #29
 8001cf6:	08e2      	lsrs	r2, r4, #3
 8001cf8:	430a      	orrs	r2, r1
 8001cfa:	08db      	lsrs	r3, r3, #3
 8001cfc:	490f      	ldr	r1, [pc, #60]	; (8001d3c <__aeabi_dsub+0x334>)
 8001cfe:	458c      	cmp	ip, r1
 8001d00:	d040      	beq.n	8001d84 <__aeabi_dsub+0x37c>
 8001d02:	4661      	mov	r1, ip
 8001d04:	031b      	lsls	r3, r3, #12
 8001d06:	0549      	lsls	r1, r1, #21
 8001d08:	0b1b      	lsrs	r3, r3, #12
 8001d0a:	0d49      	lsrs	r1, r1, #21
 8001d0c:	e720      	b.n	8001b50 <__aeabi_dsub+0x148>
 8001d0e:	4301      	orrs	r1, r0
 8001d10:	000c      	movs	r4, r1
 8001d12:	1e61      	subs	r1, r4, #1
 8001d14:	418c      	sbcs	r4, r1
 8001d16:	444c      	add	r4, r9
 8001d18:	454c      	cmp	r4, r9
 8001d1a:	4192      	sbcs	r2, r2
 8001d1c:	4252      	negs	r2, r2
 8001d1e:	4690      	mov	r8, r2
 8001d20:	4498      	add	r8, r3
 8001d22:	4643      	mov	r3, r8
 8001d24:	021b      	lsls	r3, r3, #8
 8001d26:	d5e0      	bpl.n	8001cea <__aeabi_dsub+0x2e2>
 8001d28:	4b04      	ldr	r3, [pc, #16]	; (8001d3c <__aeabi_dsub+0x334>)
 8001d2a:	3601      	adds	r6, #1
 8001d2c:	429e      	cmp	r6, r3
 8001d2e:	d000      	beq.n	8001d32 <__aeabi_dsub+0x32a>
 8001d30:	e09f      	b.n	8001e72 <__aeabi_dsub+0x46a>
 8001d32:	0031      	movs	r1, r6
 8001d34:	2300      	movs	r3, #0
 8001d36:	2200      	movs	r2, #0
 8001d38:	e70a      	b.n	8001b50 <__aeabi_dsub+0x148>
 8001d3a:	46c0      	nop			; (mov r8, r8)
 8001d3c:	000007ff 	.word	0x000007ff
 8001d40:	ff7fffff 	.word	0xff7fffff
 8001d44:	fffff801 	.word	0xfffff801
 8001d48:	000007fe 	.word	0x000007fe
 8001d4c:	2a00      	cmp	r2, #0
 8001d4e:	d100      	bne.n	8001d52 <__aeabi_dsub+0x34a>
 8001d50:	e160      	b.n	8002014 <__aeabi_dsub+0x60c>
 8001d52:	000a      	movs	r2, r1
 8001d54:	4302      	orrs	r2, r0
 8001d56:	d04d      	beq.n	8001df4 <__aeabi_dsub+0x3ec>
 8001d58:	464a      	mov	r2, r9
 8001d5a:	075c      	lsls	r4, r3, #29
 8001d5c:	08d2      	lsrs	r2, r2, #3
 8001d5e:	4322      	orrs	r2, r4
 8001d60:	2480      	movs	r4, #128	; 0x80
 8001d62:	08db      	lsrs	r3, r3, #3
 8001d64:	0324      	lsls	r4, r4, #12
 8001d66:	4223      	tst	r3, r4
 8001d68:	d007      	beq.n	8001d7a <__aeabi_dsub+0x372>
 8001d6a:	08ce      	lsrs	r6, r1, #3
 8001d6c:	4226      	tst	r6, r4
 8001d6e:	d104      	bne.n	8001d7a <__aeabi_dsub+0x372>
 8001d70:	465d      	mov	r5, fp
 8001d72:	0033      	movs	r3, r6
 8001d74:	08c2      	lsrs	r2, r0, #3
 8001d76:	0749      	lsls	r1, r1, #29
 8001d78:	430a      	orrs	r2, r1
 8001d7a:	0f51      	lsrs	r1, r2, #29
 8001d7c:	00d2      	lsls	r2, r2, #3
 8001d7e:	08d2      	lsrs	r2, r2, #3
 8001d80:	0749      	lsls	r1, r1, #29
 8001d82:	430a      	orrs	r2, r1
 8001d84:	0011      	movs	r1, r2
 8001d86:	4319      	orrs	r1, r3
 8001d88:	d100      	bne.n	8001d8c <__aeabi_dsub+0x384>
 8001d8a:	e1c8      	b.n	800211e <__aeabi_dsub+0x716>
 8001d8c:	2180      	movs	r1, #128	; 0x80
 8001d8e:	0309      	lsls	r1, r1, #12
 8001d90:	430b      	orrs	r3, r1
 8001d92:	031b      	lsls	r3, r3, #12
 8001d94:	49d5      	ldr	r1, [pc, #852]	; (80020ec <__aeabi_dsub+0x6e4>)
 8001d96:	0b1b      	lsrs	r3, r3, #12
 8001d98:	e6da      	b.n	8001b50 <__aeabi_dsub+0x148>
 8001d9a:	49d5      	ldr	r1, [pc, #852]	; (80020f0 <__aeabi_dsub+0x6e8>)
 8001d9c:	1ab6      	subs	r6, r6, r2
 8001d9e:	400b      	ands	r3, r1
 8001da0:	4698      	mov	r8, r3
 8001da2:	e6b5      	b.n	8001b10 <__aeabi_dsub+0x108>
 8001da4:	0020      	movs	r0, r4
 8001da6:	f000 fa65 	bl	8002274 <__clzsi2>
 8001daa:	0002      	movs	r2, r0
 8001dac:	3218      	adds	r2, #24
 8001dae:	2a1f      	cmp	r2, #31
 8001db0:	dc00      	bgt.n	8001db4 <__aeabi_dsub+0x3ac>
 8001db2:	e68f      	b.n	8001ad4 <__aeabi_dsub+0xcc>
 8001db4:	0023      	movs	r3, r4
 8001db6:	3808      	subs	r0, #8
 8001db8:	4083      	lsls	r3, r0
 8001dba:	2400      	movs	r4, #0
 8001dbc:	e692      	b.n	8001ae4 <__aeabi_dsub+0xdc>
 8001dbe:	4308      	orrs	r0, r1
 8001dc0:	0002      	movs	r2, r0
 8001dc2:	1e50      	subs	r0, r2, #1
 8001dc4:	4182      	sbcs	r2, r0
 8001dc6:	e66d      	b.n	8001aa4 <__aeabi_dsub+0x9c>
 8001dc8:	4cca      	ldr	r4, [pc, #808]	; (80020f4 <__aeabi_dsub+0x6ec>)
 8001dca:	1c72      	adds	r2, r6, #1
 8001dcc:	4222      	tst	r2, r4
 8001dce:	d000      	beq.n	8001dd2 <__aeabi_dsub+0x3ca>
 8001dd0:	e0ad      	b.n	8001f2e <__aeabi_dsub+0x526>
 8001dd2:	464a      	mov	r2, r9
 8001dd4:	431a      	orrs	r2, r3
 8001dd6:	2e00      	cmp	r6, #0
 8001dd8:	d1b8      	bne.n	8001d4c <__aeabi_dsub+0x344>
 8001dda:	2a00      	cmp	r2, #0
 8001ddc:	d100      	bne.n	8001de0 <__aeabi_dsub+0x3d8>
 8001dde:	e158      	b.n	8002092 <__aeabi_dsub+0x68a>
 8001de0:	000a      	movs	r2, r1
 8001de2:	4302      	orrs	r2, r0
 8001de4:	d000      	beq.n	8001de8 <__aeabi_dsub+0x3e0>
 8001de6:	e159      	b.n	800209c <__aeabi_dsub+0x694>
 8001de8:	464a      	mov	r2, r9
 8001dea:	0759      	lsls	r1, r3, #29
 8001dec:	08d2      	lsrs	r2, r2, #3
 8001dee:	430a      	orrs	r2, r1
 8001df0:	08db      	lsrs	r3, r3, #3
 8001df2:	e786      	b.n	8001d02 <__aeabi_dsub+0x2fa>
 8001df4:	464a      	mov	r2, r9
 8001df6:	0759      	lsls	r1, r3, #29
 8001df8:	08d2      	lsrs	r2, r2, #3
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	08db      	lsrs	r3, r3, #3
 8001dfe:	e7c1      	b.n	8001d84 <__aeabi_dsub+0x37c>
 8001e00:	4dba      	ldr	r5, [pc, #744]	; (80020ec <__aeabi_dsub+0x6e4>)
 8001e02:	42aa      	cmp	r2, r5
 8001e04:	d100      	bne.n	8001e08 <__aeabi_dsub+0x400>
 8001e06:	e11e      	b.n	8002046 <__aeabi_dsub+0x63e>
 8001e08:	2580      	movs	r5, #128	; 0x80
 8001e0a:	042d      	lsls	r5, r5, #16
 8001e0c:	432b      	orrs	r3, r5
 8001e0e:	4664      	mov	r4, ip
 8001e10:	2c38      	cmp	r4, #56	; 0x38
 8001e12:	dc5d      	bgt.n	8001ed0 <__aeabi_dsub+0x4c8>
 8001e14:	2c1f      	cmp	r4, #31
 8001e16:	dd00      	ble.n	8001e1a <__aeabi_dsub+0x412>
 8001e18:	e0d0      	b.n	8001fbc <__aeabi_dsub+0x5b4>
 8001e1a:	2520      	movs	r5, #32
 8001e1c:	4667      	mov	r7, ip
 8001e1e:	1b2d      	subs	r5, r5, r4
 8001e20:	464e      	mov	r6, r9
 8001e22:	001c      	movs	r4, r3
 8001e24:	40fe      	lsrs	r6, r7
 8001e26:	40ac      	lsls	r4, r5
 8001e28:	4334      	orrs	r4, r6
 8001e2a:	464e      	mov	r6, r9
 8001e2c:	40ae      	lsls	r6, r5
 8001e2e:	0035      	movs	r5, r6
 8001e30:	40fb      	lsrs	r3, r7
 8001e32:	1e6e      	subs	r6, r5, #1
 8001e34:	41b5      	sbcs	r5, r6
 8001e36:	1ac9      	subs	r1, r1, r3
 8001e38:	432c      	orrs	r4, r5
 8001e3a:	e04e      	b.n	8001eda <__aeabi_dsub+0x4d2>
 8001e3c:	464a      	mov	r2, r9
 8001e3e:	1a14      	subs	r4, r2, r0
 8001e40:	45a1      	cmp	r9, r4
 8001e42:	4192      	sbcs	r2, r2
 8001e44:	4252      	negs	r2, r2
 8001e46:	4690      	mov	r8, r2
 8001e48:	1a5f      	subs	r7, r3, r1
 8001e4a:	003a      	movs	r2, r7
 8001e4c:	4647      	mov	r7, r8
 8001e4e:	1bd2      	subs	r2, r2, r7
 8001e50:	4690      	mov	r8, r2
 8001e52:	0212      	lsls	r2, r2, #8
 8001e54:	d500      	bpl.n	8001e58 <__aeabi_dsub+0x450>
 8001e56:	e08b      	b.n	8001f70 <__aeabi_dsub+0x568>
 8001e58:	4642      	mov	r2, r8
 8001e5a:	4322      	orrs	r2, r4
 8001e5c:	d000      	beq.n	8001e60 <__aeabi_dsub+0x458>
 8001e5e:	e630      	b.n	8001ac2 <__aeabi_dsub+0xba>
 8001e60:	2300      	movs	r3, #0
 8001e62:	2500      	movs	r5, #0
 8001e64:	e74d      	b.n	8001d02 <__aeabi_dsub+0x2fa>
 8001e66:	464a      	mov	r2, r9
 8001e68:	0759      	lsls	r1, r3, #29
 8001e6a:	08d2      	lsrs	r2, r2, #3
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	08db      	lsrs	r3, r3, #3
 8001e70:	e744      	b.n	8001cfc <__aeabi_dsub+0x2f4>
 8001e72:	4642      	mov	r2, r8
 8001e74:	4b9e      	ldr	r3, [pc, #632]	; (80020f0 <__aeabi_dsub+0x6e8>)
 8001e76:	0861      	lsrs	r1, r4, #1
 8001e78:	401a      	ands	r2, r3
 8001e7a:	0013      	movs	r3, r2
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	4014      	ands	r4, r2
 8001e80:	430c      	orrs	r4, r1
 8001e82:	07da      	lsls	r2, r3, #31
 8001e84:	085b      	lsrs	r3, r3, #1
 8001e86:	4698      	mov	r8, r3
 8001e88:	4314      	orrs	r4, r2
 8001e8a:	e641      	b.n	8001b10 <__aeabi_dsub+0x108>
 8001e8c:	001a      	movs	r2, r3
 8001e8e:	3e1f      	subs	r6, #31
 8001e90:	40f2      	lsrs	r2, r6
 8001e92:	0016      	movs	r6, r2
 8001e94:	2920      	cmp	r1, #32
 8001e96:	d003      	beq.n	8001ea0 <__aeabi_dsub+0x498>
 8001e98:	2240      	movs	r2, #64	; 0x40
 8001e9a:	1a51      	subs	r1, r2, r1
 8001e9c:	408b      	lsls	r3, r1
 8001e9e:	431c      	orrs	r4, r3
 8001ea0:	1e62      	subs	r2, r4, #1
 8001ea2:	4194      	sbcs	r4, r2
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	4334      	orrs	r4, r6
 8001ea8:	4698      	mov	r8, r3
 8001eaa:	2600      	movs	r6, #0
 8001eac:	e71d      	b.n	8001cea <__aeabi_dsub+0x2e2>
 8001eae:	000c      	movs	r4, r1
 8001eb0:	3a20      	subs	r2, #32
 8001eb2:	40d4      	lsrs	r4, r2
 8001eb4:	0022      	movs	r2, r4
 8001eb6:	4664      	mov	r4, ip
 8001eb8:	2c20      	cmp	r4, #32
 8001eba:	d004      	beq.n	8001ec6 <__aeabi_dsub+0x4be>
 8001ebc:	2740      	movs	r7, #64	; 0x40
 8001ebe:	1b3f      	subs	r7, r7, r4
 8001ec0:	40b9      	lsls	r1, r7
 8001ec2:	4308      	orrs	r0, r1
 8001ec4:	4680      	mov	r8, r0
 8001ec6:	4644      	mov	r4, r8
 8001ec8:	1e61      	subs	r1, r4, #1
 8001eca:	418c      	sbcs	r4, r1
 8001ecc:	4322      	orrs	r2, r4
 8001ece:	e5e9      	b.n	8001aa4 <__aeabi_dsub+0x9c>
 8001ed0:	464c      	mov	r4, r9
 8001ed2:	4323      	orrs	r3, r4
 8001ed4:	001c      	movs	r4, r3
 8001ed6:	1e63      	subs	r3, r4, #1
 8001ed8:	419c      	sbcs	r4, r3
 8001eda:	1b04      	subs	r4, r0, r4
 8001edc:	42a0      	cmp	r0, r4
 8001ede:	419b      	sbcs	r3, r3
 8001ee0:	425b      	negs	r3, r3
 8001ee2:	1acb      	subs	r3, r1, r3
 8001ee4:	4698      	mov	r8, r3
 8001ee6:	465d      	mov	r5, fp
 8001ee8:	0016      	movs	r6, r2
 8001eea:	e5e2      	b.n	8001ab2 <__aeabi_dsub+0xaa>
 8001eec:	464e      	mov	r6, r9
 8001eee:	431e      	orrs	r6, r3
 8001ef0:	d100      	bne.n	8001ef4 <__aeabi_dsub+0x4ec>
 8001ef2:	e0ae      	b.n	8002052 <__aeabi_dsub+0x64a>
 8001ef4:	1e66      	subs	r6, r4, #1
 8001ef6:	2c01      	cmp	r4, #1
 8001ef8:	d100      	bne.n	8001efc <__aeabi_dsub+0x4f4>
 8001efa:	e0fd      	b.n	80020f8 <__aeabi_dsub+0x6f0>
 8001efc:	4f7b      	ldr	r7, [pc, #492]	; (80020ec <__aeabi_dsub+0x6e4>)
 8001efe:	42bc      	cmp	r4, r7
 8001f00:	d100      	bne.n	8001f04 <__aeabi_dsub+0x4fc>
 8001f02:	e107      	b.n	8002114 <__aeabi_dsub+0x70c>
 8001f04:	46b4      	mov	ip, r6
 8001f06:	e69b      	b.n	8001c40 <__aeabi_dsub+0x238>
 8001f08:	4664      	mov	r4, ip
 8001f0a:	2220      	movs	r2, #32
 8001f0c:	1b12      	subs	r2, r2, r4
 8001f0e:	000c      	movs	r4, r1
 8001f10:	4094      	lsls	r4, r2
 8001f12:	0007      	movs	r7, r0
 8001f14:	4090      	lsls	r0, r2
 8001f16:	46a0      	mov	r8, r4
 8001f18:	4664      	mov	r4, ip
 8001f1a:	1e42      	subs	r2, r0, #1
 8001f1c:	4190      	sbcs	r0, r2
 8001f1e:	4662      	mov	r2, ip
 8001f20:	40e7      	lsrs	r7, r4
 8001f22:	4644      	mov	r4, r8
 8001f24:	40d1      	lsrs	r1, r2
 8001f26:	433c      	orrs	r4, r7
 8001f28:	4304      	orrs	r4, r0
 8001f2a:	185b      	adds	r3, r3, r1
 8001f2c:	e6f3      	b.n	8001d16 <__aeabi_dsub+0x30e>
 8001f2e:	4c6f      	ldr	r4, [pc, #444]	; (80020ec <__aeabi_dsub+0x6e4>)
 8001f30:	42a2      	cmp	r2, r4
 8001f32:	d100      	bne.n	8001f36 <__aeabi_dsub+0x52e>
 8001f34:	e0d5      	b.n	80020e2 <__aeabi_dsub+0x6da>
 8001f36:	4448      	add	r0, r9
 8001f38:	185b      	adds	r3, r3, r1
 8001f3a:	4548      	cmp	r0, r9
 8001f3c:	4189      	sbcs	r1, r1
 8001f3e:	4249      	negs	r1, r1
 8001f40:	185b      	adds	r3, r3, r1
 8001f42:	07dc      	lsls	r4, r3, #31
 8001f44:	0840      	lsrs	r0, r0, #1
 8001f46:	085b      	lsrs	r3, r3, #1
 8001f48:	4698      	mov	r8, r3
 8001f4a:	0016      	movs	r6, r2
 8001f4c:	4304      	orrs	r4, r0
 8001f4e:	e6cc      	b.n	8001cea <__aeabi_dsub+0x2e2>
 8001f50:	2a00      	cmp	r2, #0
 8001f52:	d000      	beq.n	8001f56 <__aeabi_dsub+0x54e>
 8001f54:	e082      	b.n	800205c <__aeabi_dsub+0x654>
 8001f56:	000a      	movs	r2, r1
 8001f58:	4302      	orrs	r2, r0
 8001f5a:	d140      	bne.n	8001fde <__aeabi_dsub+0x5d6>
 8001f5c:	2380      	movs	r3, #128	; 0x80
 8001f5e:	2500      	movs	r5, #0
 8001f60:	031b      	lsls	r3, r3, #12
 8001f62:	e713      	b.n	8001d8c <__aeabi_dsub+0x384>
 8001f64:	074b      	lsls	r3, r1, #29
 8001f66:	08c2      	lsrs	r2, r0, #3
 8001f68:	431a      	orrs	r2, r3
 8001f6a:	465d      	mov	r5, fp
 8001f6c:	08cb      	lsrs	r3, r1, #3
 8001f6e:	e6c5      	b.n	8001cfc <__aeabi_dsub+0x2f4>
 8001f70:	464a      	mov	r2, r9
 8001f72:	1a84      	subs	r4, r0, r2
 8001f74:	42a0      	cmp	r0, r4
 8001f76:	4192      	sbcs	r2, r2
 8001f78:	1acb      	subs	r3, r1, r3
 8001f7a:	4252      	negs	r2, r2
 8001f7c:	1a9b      	subs	r3, r3, r2
 8001f7e:	4698      	mov	r8, r3
 8001f80:	465d      	mov	r5, fp
 8001f82:	e59e      	b.n	8001ac2 <__aeabi_dsub+0xba>
 8001f84:	464a      	mov	r2, r9
 8001f86:	0759      	lsls	r1, r3, #29
 8001f88:	08d2      	lsrs	r2, r2, #3
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	08db      	lsrs	r3, r3, #3
 8001f8e:	e6f9      	b.n	8001d84 <__aeabi_dsub+0x37c>
 8001f90:	464a      	mov	r2, r9
 8001f92:	1a14      	subs	r4, r2, r0
 8001f94:	45a1      	cmp	r9, r4
 8001f96:	4192      	sbcs	r2, r2
 8001f98:	1a5b      	subs	r3, r3, r1
 8001f9a:	4252      	negs	r2, r2
 8001f9c:	1a9b      	subs	r3, r3, r2
 8001f9e:	4698      	mov	r8, r3
 8001fa0:	2601      	movs	r6, #1
 8001fa2:	e586      	b.n	8001ab2 <__aeabi_dsub+0xaa>
 8001fa4:	464a      	mov	r2, r9
 8001fa6:	0759      	lsls	r1, r3, #29
 8001fa8:	08d2      	lsrs	r2, r2, #3
 8001faa:	430a      	orrs	r2, r1
 8001fac:	08db      	lsrs	r3, r3, #3
 8001fae:	e6a5      	b.n	8001cfc <__aeabi_dsub+0x2f4>
 8001fb0:	464c      	mov	r4, r9
 8001fb2:	4323      	orrs	r3, r4
 8001fb4:	001c      	movs	r4, r3
 8001fb6:	1e63      	subs	r3, r4, #1
 8001fb8:	419c      	sbcs	r4, r3
 8001fba:	e65b      	b.n	8001c74 <__aeabi_dsub+0x26c>
 8001fbc:	4665      	mov	r5, ip
 8001fbe:	001e      	movs	r6, r3
 8001fc0:	3d20      	subs	r5, #32
 8001fc2:	40ee      	lsrs	r6, r5
 8001fc4:	2c20      	cmp	r4, #32
 8001fc6:	d005      	beq.n	8001fd4 <__aeabi_dsub+0x5cc>
 8001fc8:	2540      	movs	r5, #64	; 0x40
 8001fca:	1b2d      	subs	r5, r5, r4
 8001fcc:	40ab      	lsls	r3, r5
 8001fce:	464c      	mov	r4, r9
 8001fd0:	431c      	orrs	r4, r3
 8001fd2:	46a2      	mov	sl, r4
 8001fd4:	4654      	mov	r4, sl
 8001fd6:	1e63      	subs	r3, r4, #1
 8001fd8:	419c      	sbcs	r4, r3
 8001fda:	4334      	orrs	r4, r6
 8001fdc:	e77d      	b.n	8001eda <__aeabi_dsub+0x4d2>
 8001fde:	074b      	lsls	r3, r1, #29
 8001fe0:	08c2      	lsrs	r2, r0, #3
 8001fe2:	431a      	orrs	r2, r3
 8001fe4:	465d      	mov	r5, fp
 8001fe6:	08cb      	lsrs	r3, r1, #3
 8001fe8:	e6cc      	b.n	8001d84 <__aeabi_dsub+0x37c>
 8001fea:	000a      	movs	r2, r1
 8001fec:	4302      	orrs	r2, r0
 8001fee:	d100      	bne.n	8001ff2 <__aeabi_dsub+0x5ea>
 8001ff0:	e736      	b.n	8001e60 <__aeabi_dsub+0x458>
 8001ff2:	074b      	lsls	r3, r1, #29
 8001ff4:	08c2      	lsrs	r2, r0, #3
 8001ff6:	431a      	orrs	r2, r3
 8001ff8:	465d      	mov	r5, fp
 8001ffa:	08cb      	lsrs	r3, r1, #3
 8001ffc:	e681      	b.n	8001d02 <__aeabi_dsub+0x2fa>
 8001ffe:	464a      	mov	r2, r9
 8002000:	1a84      	subs	r4, r0, r2
 8002002:	42a0      	cmp	r0, r4
 8002004:	4192      	sbcs	r2, r2
 8002006:	1acb      	subs	r3, r1, r3
 8002008:	4252      	negs	r2, r2
 800200a:	1a9b      	subs	r3, r3, r2
 800200c:	4698      	mov	r8, r3
 800200e:	465d      	mov	r5, fp
 8002010:	2601      	movs	r6, #1
 8002012:	e54e      	b.n	8001ab2 <__aeabi_dsub+0xaa>
 8002014:	074b      	lsls	r3, r1, #29
 8002016:	08c2      	lsrs	r2, r0, #3
 8002018:	431a      	orrs	r2, r3
 800201a:	08cb      	lsrs	r3, r1, #3
 800201c:	e6b2      	b.n	8001d84 <__aeabi_dsub+0x37c>
 800201e:	464a      	mov	r2, r9
 8002020:	1a14      	subs	r4, r2, r0
 8002022:	45a1      	cmp	r9, r4
 8002024:	4192      	sbcs	r2, r2
 8002026:	1a5f      	subs	r7, r3, r1
 8002028:	4252      	negs	r2, r2
 800202a:	1aba      	subs	r2, r7, r2
 800202c:	4690      	mov	r8, r2
 800202e:	0212      	lsls	r2, r2, #8
 8002030:	d56b      	bpl.n	800210a <__aeabi_dsub+0x702>
 8002032:	464a      	mov	r2, r9
 8002034:	1a84      	subs	r4, r0, r2
 8002036:	42a0      	cmp	r0, r4
 8002038:	4192      	sbcs	r2, r2
 800203a:	1acb      	subs	r3, r1, r3
 800203c:	4252      	negs	r2, r2
 800203e:	1a9b      	subs	r3, r3, r2
 8002040:	4698      	mov	r8, r3
 8002042:	465d      	mov	r5, fp
 8002044:	e564      	b.n	8001b10 <__aeabi_dsub+0x108>
 8002046:	074b      	lsls	r3, r1, #29
 8002048:	08c2      	lsrs	r2, r0, #3
 800204a:	431a      	orrs	r2, r3
 800204c:	465d      	mov	r5, fp
 800204e:	08cb      	lsrs	r3, r1, #3
 8002050:	e698      	b.n	8001d84 <__aeabi_dsub+0x37c>
 8002052:	074b      	lsls	r3, r1, #29
 8002054:	08c2      	lsrs	r2, r0, #3
 8002056:	431a      	orrs	r2, r3
 8002058:	08cb      	lsrs	r3, r1, #3
 800205a:	e64f      	b.n	8001cfc <__aeabi_dsub+0x2f4>
 800205c:	000a      	movs	r2, r1
 800205e:	4302      	orrs	r2, r0
 8002060:	d090      	beq.n	8001f84 <__aeabi_dsub+0x57c>
 8002062:	464a      	mov	r2, r9
 8002064:	075c      	lsls	r4, r3, #29
 8002066:	08d2      	lsrs	r2, r2, #3
 8002068:	4314      	orrs	r4, r2
 800206a:	2280      	movs	r2, #128	; 0x80
 800206c:	08db      	lsrs	r3, r3, #3
 800206e:	0312      	lsls	r2, r2, #12
 8002070:	4213      	tst	r3, r2
 8002072:	d008      	beq.n	8002086 <__aeabi_dsub+0x67e>
 8002074:	08ce      	lsrs	r6, r1, #3
 8002076:	4216      	tst	r6, r2
 8002078:	d105      	bne.n	8002086 <__aeabi_dsub+0x67e>
 800207a:	08c0      	lsrs	r0, r0, #3
 800207c:	0749      	lsls	r1, r1, #29
 800207e:	4308      	orrs	r0, r1
 8002080:	0004      	movs	r4, r0
 8002082:	465d      	mov	r5, fp
 8002084:	0033      	movs	r3, r6
 8002086:	0f61      	lsrs	r1, r4, #29
 8002088:	00e2      	lsls	r2, r4, #3
 800208a:	0749      	lsls	r1, r1, #29
 800208c:	08d2      	lsrs	r2, r2, #3
 800208e:	430a      	orrs	r2, r1
 8002090:	e678      	b.n	8001d84 <__aeabi_dsub+0x37c>
 8002092:	074b      	lsls	r3, r1, #29
 8002094:	08c2      	lsrs	r2, r0, #3
 8002096:	431a      	orrs	r2, r3
 8002098:	08cb      	lsrs	r3, r1, #3
 800209a:	e632      	b.n	8001d02 <__aeabi_dsub+0x2fa>
 800209c:	4448      	add	r0, r9
 800209e:	185b      	adds	r3, r3, r1
 80020a0:	4548      	cmp	r0, r9
 80020a2:	4192      	sbcs	r2, r2
 80020a4:	4698      	mov	r8, r3
 80020a6:	4252      	negs	r2, r2
 80020a8:	4490      	add	r8, r2
 80020aa:	4643      	mov	r3, r8
 80020ac:	0004      	movs	r4, r0
 80020ae:	021b      	lsls	r3, r3, #8
 80020b0:	d400      	bmi.n	80020b4 <__aeabi_dsub+0x6ac>
 80020b2:	e61a      	b.n	8001cea <__aeabi_dsub+0x2e2>
 80020b4:	4642      	mov	r2, r8
 80020b6:	4b0e      	ldr	r3, [pc, #56]	; (80020f0 <__aeabi_dsub+0x6e8>)
 80020b8:	2601      	movs	r6, #1
 80020ba:	401a      	ands	r2, r3
 80020bc:	4690      	mov	r8, r2
 80020be:	e614      	b.n	8001cea <__aeabi_dsub+0x2e2>
 80020c0:	4666      	mov	r6, ip
 80020c2:	001f      	movs	r7, r3
 80020c4:	3e20      	subs	r6, #32
 80020c6:	40f7      	lsrs	r7, r6
 80020c8:	2c20      	cmp	r4, #32
 80020ca:	d005      	beq.n	80020d8 <__aeabi_dsub+0x6d0>
 80020cc:	2640      	movs	r6, #64	; 0x40
 80020ce:	1b36      	subs	r6, r6, r4
 80020d0:	40b3      	lsls	r3, r6
 80020d2:	464c      	mov	r4, r9
 80020d4:	431c      	orrs	r4, r3
 80020d6:	46a2      	mov	sl, r4
 80020d8:	4654      	mov	r4, sl
 80020da:	1e63      	subs	r3, r4, #1
 80020dc:	419c      	sbcs	r4, r3
 80020de:	433c      	orrs	r4, r7
 80020e0:	e5c8      	b.n	8001c74 <__aeabi_dsub+0x26c>
 80020e2:	0011      	movs	r1, r2
 80020e4:	2300      	movs	r3, #0
 80020e6:	2200      	movs	r2, #0
 80020e8:	e532      	b.n	8001b50 <__aeabi_dsub+0x148>
 80020ea:	46c0      	nop			; (mov r8, r8)
 80020ec:	000007ff 	.word	0x000007ff
 80020f0:	ff7fffff 	.word	0xff7fffff
 80020f4:	000007fe 	.word	0x000007fe
 80020f8:	464a      	mov	r2, r9
 80020fa:	1814      	adds	r4, r2, r0
 80020fc:	4284      	cmp	r4, r0
 80020fe:	4192      	sbcs	r2, r2
 8002100:	185b      	adds	r3, r3, r1
 8002102:	4698      	mov	r8, r3
 8002104:	4252      	negs	r2, r2
 8002106:	4490      	add	r8, r2
 8002108:	e5e9      	b.n	8001cde <__aeabi_dsub+0x2d6>
 800210a:	4642      	mov	r2, r8
 800210c:	4322      	orrs	r2, r4
 800210e:	d100      	bne.n	8002112 <__aeabi_dsub+0x70a>
 8002110:	e6a6      	b.n	8001e60 <__aeabi_dsub+0x458>
 8002112:	e5ea      	b.n	8001cea <__aeabi_dsub+0x2e2>
 8002114:	074b      	lsls	r3, r1, #29
 8002116:	08c2      	lsrs	r2, r0, #3
 8002118:	431a      	orrs	r2, r3
 800211a:	08cb      	lsrs	r3, r1, #3
 800211c:	e632      	b.n	8001d84 <__aeabi_dsub+0x37c>
 800211e:	2200      	movs	r2, #0
 8002120:	4901      	ldr	r1, [pc, #4]	; (8002128 <__aeabi_dsub+0x720>)
 8002122:	0013      	movs	r3, r2
 8002124:	e514      	b.n	8001b50 <__aeabi_dsub+0x148>
 8002126:	46c0      	nop			; (mov r8, r8)
 8002128:	000007ff 	.word	0x000007ff

0800212c <__aeabi_d2iz>:
 800212c:	000a      	movs	r2, r1
 800212e:	b530      	push	{r4, r5, lr}
 8002130:	4c13      	ldr	r4, [pc, #76]	; (8002180 <__aeabi_d2iz+0x54>)
 8002132:	0053      	lsls	r3, r2, #1
 8002134:	0309      	lsls	r1, r1, #12
 8002136:	0005      	movs	r5, r0
 8002138:	0b09      	lsrs	r1, r1, #12
 800213a:	2000      	movs	r0, #0
 800213c:	0d5b      	lsrs	r3, r3, #21
 800213e:	0fd2      	lsrs	r2, r2, #31
 8002140:	42a3      	cmp	r3, r4
 8002142:	dd04      	ble.n	800214e <__aeabi_d2iz+0x22>
 8002144:	480f      	ldr	r0, [pc, #60]	; (8002184 <__aeabi_d2iz+0x58>)
 8002146:	4283      	cmp	r3, r0
 8002148:	dd02      	ble.n	8002150 <__aeabi_d2iz+0x24>
 800214a:	4b0f      	ldr	r3, [pc, #60]	; (8002188 <__aeabi_d2iz+0x5c>)
 800214c:	18d0      	adds	r0, r2, r3
 800214e:	bd30      	pop	{r4, r5, pc}
 8002150:	2080      	movs	r0, #128	; 0x80
 8002152:	0340      	lsls	r0, r0, #13
 8002154:	4301      	orrs	r1, r0
 8002156:	480d      	ldr	r0, [pc, #52]	; (800218c <__aeabi_d2iz+0x60>)
 8002158:	1ac0      	subs	r0, r0, r3
 800215a:	281f      	cmp	r0, #31
 800215c:	dd08      	ble.n	8002170 <__aeabi_d2iz+0x44>
 800215e:	480c      	ldr	r0, [pc, #48]	; (8002190 <__aeabi_d2iz+0x64>)
 8002160:	1ac3      	subs	r3, r0, r3
 8002162:	40d9      	lsrs	r1, r3
 8002164:	000b      	movs	r3, r1
 8002166:	4258      	negs	r0, r3
 8002168:	2a00      	cmp	r2, #0
 800216a:	d1f0      	bne.n	800214e <__aeabi_d2iz+0x22>
 800216c:	0018      	movs	r0, r3
 800216e:	e7ee      	b.n	800214e <__aeabi_d2iz+0x22>
 8002170:	4c08      	ldr	r4, [pc, #32]	; (8002194 <__aeabi_d2iz+0x68>)
 8002172:	40c5      	lsrs	r5, r0
 8002174:	46a4      	mov	ip, r4
 8002176:	4463      	add	r3, ip
 8002178:	4099      	lsls	r1, r3
 800217a:	000b      	movs	r3, r1
 800217c:	432b      	orrs	r3, r5
 800217e:	e7f2      	b.n	8002166 <__aeabi_d2iz+0x3a>
 8002180:	000003fe 	.word	0x000003fe
 8002184:	0000041d 	.word	0x0000041d
 8002188:	7fffffff 	.word	0x7fffffff
 800218c:	00000433 	.word	0x00000433
 8002190:	00000413 	.word	0x00000413
 8002194:	fffffbed 	.word	0xfffffbed

08002198 <__aeabi_ui2d>:
 8002198:	b510      	push	{r4, lr}
 800219a:	1e04      	subs	r4, r0, #0
 800219c:	d010      	beq.n	80021c0 <__aeabi_ui2d+0x28>
 800219e:	f000 f869 	bl	8002274 <__clzsi2>
 80021a2:	4b0f      	ldr	r3, [pc, #60]	; (80021e0 <__aeabi_ui2d+0x48>)
 80021a4:	1a1b      	subs	r3, r3, r0
 80021a6:	280a      	cmp	r0, #10
 80021a8:	dc11      	bgt.n	80021ce <__aeabi_ui2d+0x36>
 80021aa:	220b      	movs	r2, #11
 80021ac:	0021      	movs	r1, r4
 80021ae:	1a12      	subs	r2, r2, r0
 80021b0:	40d1      	lsrs	r1, r2
 80021b2:	3015      	adds	r0, #21
 80021b4:	030a      	lsls	r2, r1, #12
 80021b6:	055b      	lsls	r3, r3, #21
 80021b8:	4084      	lsls	r4, r0
 80021ba:	0b12      	lsrs	r2, r2, #12
 80021bc:	0d5b      	lsrs	r3, r3, #21
 80021be:	e001      	b.n	80021c4 <__aeabi_ui2d+0x2c>
 80021c0:	2300      	movs	r3, #0
 80021c2:	2200      	movs	r2, #0
 80021c4:	051b      	lsls	r3, r3, #20
 80021c6:	4313      	orrs	r3, r2
 80021c8:	0020      	movs	r0, r4
 80021ca:	0019      	movs	r1, r3
 80021cc:	bd10      	pop	{r4, pc}
 80021ce:	0022      	movs	r2, r4
 80021d0:	380b      	subs	r0, #11
 80021d2:	4082      	lsls	r2, r0
 80021d4:	055b      	lsls	r3, r3, #21
 80021d6:	0312      	lsls	r2, r2, #12
 80021d8:	2400      	movs	r4, #0
 80021da:	0b12      	lsrs	r2, r2, #12
 80021dc:	0d5b      	lsrs	r3, r3, #21
 80021de:	e7f1      	b.n	80021c4 <__aeabi_ui2d+0x2c>
 80021e0:	0000041e 	.word	0x0000041e

080021e4 <__aeabi_f2d>:
 80021e4:	b570      	push	{r4, r5, r6, lr}
 80021e6:	0043      	lsls	r3, r0, #1
 80021e8:	0246      	lsls	r6, r0, #9
 80021ea:	0fc4      	lsrs	r4, r0, #31
 80021ec:	20fe      	movs	r0, #254	; 0xfe
 80021ee:	0e1b      	lsrs	r3, r3, #24
 80021f0:	1c59      	adds	r1, r3, #1
 80021f2:	0a75      	lsrs	r5, r6, #9
 80021f4:	4208      	tst	r0, r1
 80021f6:	d00c      	beq.n	8002212 <__aeabi_f2d+0x2e>
 80021f8:	22e0      	movs	r2, #224	; 0xe0
 80021fa:	0092      	lsls	r2, r2, #2
 80021fc:	4694      	mov	ip, r2
 80021fe:	076d      	lsls	r5, r5, #29
 8002200:	0b36      	lsrs	r6, r6, #12
 8002202:	4463      	add	r3, ip
 8002204:	051b      	lsls	r3, r3, #20
 8002206:	4333      	orrs	r3, r6
 8002208:	07e4      	lsls	r4, r4, #31
 800220a:	4323      	orrs	r3, r4
 800220c:	0028      	movs	r0, r5
 800220e:	0019      	movs	r1, r3
 8002210:	bd70      	pop	{r4, r5, r6, pc}
 8002212:	2b00      	cmp	r3, #0
 8002214:	d114      	bne.n	8002240 <__aeabi_f2d+0x5c>
 8002216:	2d00      	cmp	r5, #0
 8002218:	d01b      	beq.n	8002252 <__aeabi_f2d+0x6e>
 800221a:	0028      	movs	r0, r5
 800221c:	f000 f82a 	bl	8002274 <__clzsi2>
 8002220:	280a      	cmp	r0, #10
 8002222:	dc1c      	bgt.n	800225e <__aeabi_f2d+0x7a>
 8002224:	230b      	movs	r3, #11
 8002226:	002a      	movs	r2, r5
 8002228:	1a1b      	subs	r3, r3, r0
 800222a:	40da      	lsrs	r2, r3
 800222c:	0003      	movs	r3, r0
 800222e:	3315      	adds	r3, #21
 8002230:	409d      	lsls	r5, r3
 8002232:	4b0e      	ldr	r3, [pc, #56]	; (800226c <__aeabi_f2d+0x88>)
 8002234:	0312      	lsls	r2, r2, #12
 8002236:	1a1b      	subs	r3, r3, r0
 8002238:	055b      	lsls	r3, r3, #21
 800223a:	0b16      	lsrs	r6, r2, #12
 800223c:	0d5b      	lsrs	r3, r3, #21
 800223e:	e7e1      	b.n	8002204 <__aeabi_f2d+0x20>
 8002240:	2d00      	cmp	r5, #0
 8002242:	d009      	beq.n	8002258 <__aeabi_f2d+0x74>
 8002244:	0b32      	lsrs	r2, r6, #12
 8002246:	2680      	movs	r6, #128	; 0x80
 8002248:	0336      	lsls	r6, r6, #12
 800224a:	4b09      	ldr	r3, [pc, #36]	; (8002270 <__aeabi_f2d+0x8c>)
 800224c:	076d      	lsls	r5, r5, #29
 800224e:	4316      	orrs	r6, r2
 8002250:	e7d8      	b.n	8002204 <__aeabi_f2d+0x20>
 8002252:	2300      	movs	r3, #0
 8002254:	2600      	movs	r6, #0
 8002256:	e7d5      	b.n	8002204 <__aeabi_f2d+0x20>
 8002258:	2600      	movs	r6, #0
 800225a:	4b05      	ldr	r3, [pc, #20]	; (8002270 <__aeabi_f2d+0x8c>)
 800225c:	e7d2      	b.n	8002204 <__aeabi_f2d+0x20>
 800225e:	0003      	movs	r3, r0
 8002260:	002a      	movs	r2, r5
 8002262:	3b0b      	subs	r3, #11
 8002264:	409a      	lsls	r2, r3
 8002266:	2500      	movs	r5, #0
 8002268:	e7e3      	b.n	8002232 <__aeabi_f2d+0x4e>
 800226a:	46c0      	nop			; (mov r8, r8)
 800226c:	00000389 	.word	0x00000389
 8002270:	000007ff 	.word	0x000007ff

08002274 <__clzsi2>:
 8002274:	211c      	movs	r1, #28
 8002276:	2301      	movs	r3, #1
 8002278:	041b      	lsls	r3, r3, #16
 800227a:	4298      	cmp	r0, r3
 800227c:	d301      	bcc.n	8002282 <__clzsi2+0xe>
 800227e:	0c00      	lsrs	r0, r0, #16
 8002280:	3910      	subs	r1, #16
 8002282:	0a1b      	lsrs	r3, r3, #8
 8002284:	4298      	cmp	r0, r3
 8002286:	d301      	bcc.n	800228c <__clzsi2+0x18>
 8002288:	0a00      	lsrs	r0, r0, #8
 800228a:	3908      	subs	r1, #8
 800228c:	091b      	lsrs	r3, r3, #4
 800228e:	4298      	cmp	r0, r3
 8002290:	d301      	bcc.n	8002296 <__clzsi2+0x22>
 8002292:	0900      	lsrs	r0, r0, #4
 8002294:	3904      	subs	r1, #4
 8002296:	a202      	add	r2, pc, #8	; (adr r2, 80022a0 <__clzsi2+0x2c>)
 8002298:	5c10      	ldrb	r0, [r2, r0]
 800229a:	1840      	adds	r0, r0, r1
 800229c:	4770      	bx	lr
 800229e:	46c0      	nop			; (mov r8, r8)
 80022a0:	02020304 	.word	0x02020304
 80022a4:	01010101 	.word	0x01010101
	...

080022b0 <__clzdi2>:
 80022b0:	b510      	push	{r4, lr}
 80022b2:	2900      	cmp	r1, #0
 80022b4:	d103      	bne.n	80022be <__clzdi2+0xe>
 80022b6:	f7ff ffdd 	bl	8002274 <__clzsi2>
 80022ba:	3020      	adds	r0, #32
 80022bc:	e002      	b.n	80022c4 <__clzdi2+0x14>
 80022be:	1c08      	adds	r0, r1, #0
 80022c0:	f7ff ffd8 	bl	8002274 <__clzsi2>
 80022c4:	bd10      	pop	{r4, pc}
 80022c6:	46c0      	nop			; (mov r8, r8)

080022c8 <MX_ADC_Init>:
  hadc1.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc1.Init.LowPowerAutoPowerOff  = DISABLE;
  hadc1.Init.LowPowerFrequencyMode = ENABLE;
  hadc1.Init.LowPowerAutoWait      = DISABLE;
  hadc1.Init.Resolution            = ADC_RESOLUTION_12B;
  hadc1.Init.SamplingTime          = ADC_SAMPLETIME_160CYCLES_5;
 80022c8:	2107      	movs	r1, #7
  hadc1.Init.LowPowerFrequencyMode = ENABLE;
 80022ca:	2201      	movs	r2, #1
{
 80022cc:	b510      	push	{r4, lr}
  hadc1.Init.OversamplingMode      = DISABLE;
 80022ce:	4c13      	ldr	r4, [pc, #76]	; (800231c <MX_ADC_Init+0x54>)
 80022d0:	2300      	movs	r3, #0
  hadc1.Init.SamplingTime          = ADC_SAMPLETIME_160CYCLES_5;
 80022d2:	63a1      	str	r1, [r4, #56]	; 0x38
  hadc1.Instance  = ADC1;
 80022d4:	4912      	ldr	r1, [pc, #72]	; (8002320 <MX_ADC_Init+0x58>)
  hadc1.Init.LowPowerFrequencyMode = ENABLE;
 80022d6:	6362      	str	r2, [r4, #52]	; 0x34
  hadc1.Init.ScanConvMode          = ADC_SCAN_DIRECTION_FORWARD;
 80022d8:	6122      	str	r2, [r4, #16]
  hadc1.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
  hadc1.Init.ContinuousConvMode    = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 80022da:	3203      	adds	r2, #3
  hadc1.Instance  = ADC1;
 80022dc:	6021      	str	r1, [r4, #0]
  hadc1.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 80022de:	6162      	str	r2, [r4, #20]
  hadc1.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 80022e0:	2180      	movs	r1, #128	; 0x80
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80022e2:	0022      	movs	r2, r4
  hadc1.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 80022e4:	0609      	lsls	r1, r1, #24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80022e6:	322c      	adds	r2, #44	; 0x2c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80022e8:	0020      	movs	r0, r4
  hadc1.Init.ContinuousConvMode    = DISABLE;
 80022ea:	8423      	strh	r3, [r4, #32]
  hadc1.Init.OversamplingMode      = DISABLE;
 80022ec:	63e3      	str	r3, [r4, #60]	; 0x3c
  hadc1.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80022ee:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc1.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 80022f0:	6061      	str	r1, [r4, #4]
  hadc1.Init.Resolution            = ADC_RESOLUTION_12B;
 80022f2:	60a3      	str	r3, [r4, #8]
  hadc1.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 80022f4:	60e3      	str	r3, [r4, #12]
  hadc1.Init.LowPowerAutoWait      = DISABLE;
 80022f6:	61a3      	str	r3, [r4, #24]
  hadc1.Init.LowPowerAutoPowerOff  = DISABLE;
 80022f8:	61e3      	str	r3, [r4, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80022fa:	7013      	strb	r3, [r2, #0]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80022fc:	f002 f8ce 	bl	800449c <HAL_ADC_Init>
 8002300:	2800      	cmp	r0, #0
 8002302:	d001      	beq.n	8002308 <MX_ADC_Init+0x40>
  {
    Error_Handler();
 8002304:	f000 f93a 	bl	800257c <Error_Handler>
  }

  if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 8002308:	2100      	movs	r1, #0
 800230a:	0020      	movs	r0, r4
 800230c:	f002 faf4 	bl	80048f8 <HAL_ADCEx_Calibration_Start>
 8002310:	2800      	cmp	r0, #0
 8002312:	d001      	beq.n	8002318 <MX_ADC_Init+0x50>
  {
    Error_Handler();
 8002314:	f000 f932 	bl	800257c <Error_Handler>
  }
}
 8002318:	bd10      	pop	{r4, pc}
 800231a:	46c0      	nop			; (mov r8, r8)
 800231c:	20001424 	.word	0x20001424
 8002320:	40012400 	.word	0x40012400

08002324 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle)
{

  if (adcHandle->Instance == ADC1)
 8002324:	4b05      	ldr	r3, [pc, #20]	; (800233c <HAL_ADC_MspInit+0x18>)
 8002326:	6802      	ldr	r2, [r0, #0]
 8002328:	429a      	cmp	r2, r3
 800232a:	d105      	bne.n	8002338 <HAL_ADC_MspInit+0x14>
  {
    /* USER CODE BEGIN ADC_MspInit 0 */

    /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800232c:	2380      	movs	r3, #128	; 0x80
 800232e:	4a04      	ldr	r2, [pc, #16]	; (8002340 <HAL_ADC_MspInit+0x1c>)
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8002334:	430b      	orrs	r3, r1
 8002336:	6353      	str	r3, [r2, #52]	; 0x34
    /* USER CODE BEGIN ADC_MspInit 1 */

    /* USER CODE END ADC_MspInit 1 */
  }
}
 8002338:	4770      	bx	lr
 800233a:	46c0      	nop			; (mov r8, r8)
 800233c:	40012400 	.word	0x40012400
 8002340:	40021000 	.word	0x40021000

08002344 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef *adcHandle)
{

  if (adcHandle->Instance == ADC1)
 8002344:	4b08      	ldr	r3, [pc, #32]	; (8002368 <HAL_ADC_MspDeInit+0x24>)
 8002346:	6802      	ldr	r2, [r0, #0]
 8002348:	429a      	cmp	r2, r3
 800234a:	d10c      	bne.n	8002366 <HAL_ADC_MspDeInit+0x22>
  {
    /* USER CODE BEGIN ADC_MspDeInit 0 */

    /* USER CODE END ADC_MspDeInit 0 */

    __HAL_RCC_ADC1_FORCE_RESET();
 800234c:	2280      	movs	r2, #128	; 0x80
 800234e:	4b07      	ldr	r3, [pc, #28]	; (800236c <HAL_ADC_MspDeInit+0x28>)
 8002350:	0092      	lsls	r2, r2, #2
 8002352:	6a59      	ldr	r1, [r3, #36]	; 0x24
    __HAL_RCC_ADC1_RELEASE_RESET();
 8002354:	4806      	ldr	r0, [pc, #24]	; (8002370 <HAL_ADC_MspDeInit+0x2c>)
    __HAL_RCC_ADC1_FORCE_RESET();
 8002356:	430a      	orrs	r2, r1
 8002358:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_RCC_ADC1_RELEASE_RESET();
 800235a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800235c:	4001      	ands	r1, r0
 800235e:	6259      	str	r1, [r3, #36]	; 0x24
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 8002360:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002362:	4002      	ands	r2, r0
 8002364:	635a      	str	r2, [r3, #52]	; 0x34
    /* USER CODE BEGIN ADC_MspDeInit 1 */

    /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8002366:	4770      	bx	lr
 8002368:	40012400 	.word	0x40012400
 800236c:	40021000 	.word	0x40021000
 8002370:	fffffdff 	.word	0xfffffdff

08002374 <SYS_InitMeasurement>:
void SYS_InitMeasurement(void)
{
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc1.Instance = ADC1;
 8002374:	4b01      	ldr	r3, [pc, #4]	; (800237c <SYS_InitMeasurement+0x8>)
 8002376:	4a02      	ldr	r2, [pc, #8]	; (8002380 <SYS_InitMeasurement+0xc>)
 8002378:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 800237a:	4770      	bx	lr
 800237c:	20001424 	.word	0x20001424
 8002380:	40012400 	.word	0x40012400

08002384 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

uint32_t ADC_ReadChannels(uint32_t channel)
{
 8002384:	b573      	push	{r0, r1, r4, r5, r6, lr}
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
  ADC_ChannelConfTypeDef sConfig = {0};
 8002386:	2208      	movs	r2, #8
 8002388:	2100      	movs	r1, #0
{
 800238a:	0006      	movs	r6, r0
  ADC_ChannelConfTypeDef sConfig = {0};
 800238c:	4668      	mov	r0, sp
 800238e:	f00c fe88 	bl	800f0a2 <memset>

  MX_ADC_Init();
 8002392:	f7ff ff99 	bl	80022c8 <MX_ADC_Init>

  /* wait the the Vrefint used by adc is set */
  while (__HAL_PWR_GET_FLAG(PWR_FLAG_VREFINTRDY) == RESET) {};
 8002396:	2308      	movs	r3, #8
 8002398:	491f      	ldr	r1, [pc, #124]	; (8002418 <ADC_ReadChannels+0x94>)
 800239a:	684a      	ldr	r2, [r1, #4]
 800239c:	421a      	tst	r2, r3
 800239e:	d0fc      	beq.n	800239a <ADC_ReadChannels+0x16>

  __HAL_RCC_ADC1_CLK_ENABLE();
 80023a0:	2380      	movs	r3, #128	; 0x80
 80023a2:	4d1e      	ldr	r5, [pc, #120]	; (800241c <ADC_ReadChannels+0x98>)

  /*calibrate ADC if any calibraiton hardware*/
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80023a4:	4c1e      	ldr	r4, [pc, #120]	; (8002420 <ADC_ReadChannels+0x9c>)
  __HAL_RCC_ADC1_CLK_ENABLE();
 80023a6:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4313      	orrs	r3, r2
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80023ac:	2100      	movs	r1, #0
  __HAL_RCC_ADC1_CLK_ENABLE();
 80023ae:	636b      	str	r3, [r5, #52]	; 0x34
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80023b0:	0020      	movs	r0, r4
 80023b2:	f002 faa1 	bl	80048f8 <HAL_ADCEx_Calibration_Start>

  /* Deselects all channels*/
  sConfig.Channel = ADC_CHANNEL_MASK;
 80023b6:	4b1b      	ldr	r3, [pc, #108]	; (8002424 <ADC_ReadChannels+0xa0>)
  sConfig.Rank = ADC_RANK_NONE;
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80023b8:	4669      	mov	r1, sp
  sConfig.Channel = ADC_CHANNEL_MASK;
 80023ba:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_RANK_NONE;
 80023bc:	4b1a      	ldr	r3, [pc, #104]	; (8002428 <ADC_ReadChannels+0xa4>)
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80023be:	0020      	movs	r0, r4
  sConfig.Rank = ADC_RANK_NONE;
 80023c0:	9301      	str	r3, [sp, #4]
  HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80023c2:	f002 fa45 	bl	8004850 <HAL_ADC_ConfigChannel>

  /* Configure Regular Channel */
  sConfig.Channel = channel;
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80023c6:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023c8:	4669      	mov	r1, sp
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80023ca:	015b      	lsls	r3, r3, #5
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023cc:	0020      	movs	r0, r4
  sConfig.Channel = channel;
 80023ce:	9600      	str	r6, [sp, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80023d0:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023d2:	f002 fa3d 	bl	8004850 <HAL_ADC_ConfigChannel>
 80023d6:	2800      	cmp	r0, #0
 80023d8:	d001      	beq.n	80023de <ADC_ReadChannels+0x5a>
  {
    Error_Handler();
 80023da:	f000 f8cf 	bl	800257c <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc1) != HAL_OK)
 80023de:	0020      	movs	r0, r4
 80023e0:	f002 f98a 	bl	80046f8 <HAL_ADC_Start>
 80023e4:	2800      	cmp	r0, #0
 80023e6:	d001      	beq.n	80023ec <ADC_ReadChannels+0x68>
  {
    /* Start Error */
    Error_Handler();
 80023e8:	f000 f8c8 	bl	800257c <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80023ec:	2101      	movs	r1, #1
 80023ee:	0020      	movs	r0, r4
 80023f0:	4249      	negs	r1, r1
 80023f2:	f002 f9cb 	bl	800478c <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc1) ;   /* it calls also ADC_Disable() */
 80023f6:	0020      	movs	r0, r4
 80023f8:	f002 f9aa 	bl	8004750 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc1);
 80023fc:	0020      	movs	r0, r4
 80023fe:	f002 fa23 	bl	8004848 <HAL_ADC_GetValue>
 8002402:	0006      	movs	r6, r0

  HAL_ADC_DeInit(&hadc1);
 8002404:	0020      	movs	r0, r4
 8002406:	f002 f923 	bl	8004650 <HAL_ADC_DeInit>

  __HAL_RCC_ADC1_CLK_DISABLE();
 800240a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800240c:	4a07      	ldr	r2, [pc, #28]	; (800242c <ADC_ReadChannels+0xa8>)

  return ADCxConvertedValues;
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 800240e:	0030      	movs	r0, r6
  __HAL_RCC_ADC1_CLK_DISABLE();
 8002410:	4013      	ands	r3, r2
 8002412:	636b      	str	r3, [r5, #52]	; 0x34
}
 8002414:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8002416:	46c0      	nop			; (mov r8, r8)
 8002418:	40007000 	.word	0x40007000
 800241c:	40021000 	.word	0x40021000
 8002420:	20001424 	.word	0x20001424
 8002424:	0007ffff 	.word	0x0007ffff
 8002428:	00001001 	.word	0x00001001
 800242c:	fffffdff 	.word	0xfffffdff

08002430 <SYS_GetBatteryLevel>:
{
 8002430:	b510      	push	{r4, lr}
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8002432:	4808      	ldr	r0, [pc, #32]	; (8002454 <SYS_GetBatteryLevel+0x24>)
 8002434:	f7ff ffa6 	bl	8002384 <ADC_ReadChannels>
 8002438:	0001      	movs	r1, r0
    batteryLevelmV = 0;
 800243a:	2000      	movs	r0, #0
  if (measuredLevel == 0){
 800243c:	4281      	cmp	r1, r0
 800243e:	d008      	beq.n	8002452 <SYS_GetBatteryLevel+0x22>
	  tmp = ((uint32_t) VDDA_VREFINT_CAL * (*VREFINT_CAL));
 8002440:	4b05      	ldr	r3, [pc, #20]	; (8002458 <SYS_GetBatteryLevel+0x28>)
 8002442:	4806      	ldr	r0, [pc, #24]	; (800245c <SYS_GetBatteryLevel+0x2c>)
 8002444:	881b      	ldrh	r3, [r3, #0]
 8002446:	4343      	muls	r3, r0
	  tmp += measuredLevel/2;
 8002448:	0848      	lsrs	r0, r1, #1
 800244a:	18c0      	adds	r0, r0, r3
    batteryLevelmV = (tmp / measuredLevel);
 800244c:	f7fd fe82 	bl	8000154 <__udivsi3>
 8002450:	b280      	uxth	r0, r0
}
 8002452:	bd10      	pop	{r4, pc}
 8002454:	44020000 	.word	0x44020000
 8002458:	1ff80078 	.word	0x1ff80078
 800245c:	00000bb8 	.word	0x00000bb8

08002460 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002460:	b507      	push	{r0, r1, r2, lr}

  /* DMA controller clock enable */

  __HAL_RCC_DMA1_CLK_ENABLE();
 8002462:	2001      	movs	r0, #1
 8002464:	4a08      	ldr	r2, [pc, #32]	; (8002488 <MX_DMA_Init+0x28>)
 8002466:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002468:	4301      	orrs	r1, r0
 800246a:	6311      	str	r1, [r2, #48]	; 0x30
 800246c:	6b13      	ldr	r3, [r2, #48]	; 0x30

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 800246e:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002470:	4003      	ands	r3, r0
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8002472:	0011      	movs	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002474:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8002476:	300a      	adds	r0, #10
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002478:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 800247a:	f002 fa8d 	bl	8004998 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 800247e:	200b      	movs	r0, #11
 8002480:	f002 fab4 	bl	80049ec <HAL_NVIC_EnableIRQ>

}
 8002484:	bd07      	pop	{r0, r1, r2, pc}
 8002486:	46c0      	nop			; (mov r8, r8)
 8002488:	40021000 	.word	0x40021000

0800248c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800248c:	b510      	push	{r4, lr}
 800248e:	b092      	sub	sp, #72	; 0x48
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002490:	221c      	movs	r2, #28
 8002492:	2100      	movs	r1, #0
 8002494:	a807      	add	r0, sp, #28
 8002496:	f00c fe04 	bl	800f0a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800249a:	2214      	movs	r2, #20
 800249c:	2100      	movs	r1, #0
 800249e:	4668      	mov	r0, sp
 80024a0:	f00c fdff 	bl	800f0a2 <memset>

  /* Enable HSE Oscillator and Activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSEState            = RCC_HSE_OFF;
 80024a4:	2300      	movs	r3, #0
 80024a6:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;//RCC_PLL_OFF;//RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;
 80024a8:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL          = RCC_PLLMUL_6;//RCC_PLLMUL_3;//RCC_PLLMUL_6;
 80024aa:	2380      	movs	r3, #128	; 0x80
 80024ac:	031b      	lsls	r3, r3, #12
 80024ae:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 80024b0:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 80024b2:	2202      	movs	r2, #2
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 80024b4:	2101      	movs	r1, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024b6:	2410      	movs	r4, #16
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 80024b8:	041b      	lsls	r3, r3, #16

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024ba:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 80024bc:	9205      	str	r2, [sp, #20]
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 80024be:	9108      	str	r1, [sp, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024c0:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;//RCC_PLL_OFF;//RCC_PLL_ON;
 80024c2:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 80024c4:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024c6:	f003 fb0f 	bl	8005ae8 <HAL_RCC_OscConfig>
 80024ca:	2800      	cmp	r0, #0
 80024cc:	d000      	beq.n	80024d0 <SystemClock_Config+0x44>
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while (1)
 80024ce:	e7fe      	b.n	80024ce <SystemClock_Config+0x42>
  __HAL_RCC_PWR_CLK_ENABLE();
 80024d0:	2380      	movs	r3, #128	; 0x80
 80024d2:	4a12      	ldr	r2, [pc, #72]	; (800251c <SystemClock_Config+0x90>)
 80024d4:	055b      	lsls	r3, r3, #21
 80024d6:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80024d8:	430b      	orrs	r3, r1
 80024da:	6393      	str	r3, [r2, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80024dc:	4b10      	ldr	r3, [pc, #64]	; (8002520 <SystemClock_Config+0x94>)
 80024de:	4911      	ldr	r1, [pc, #68]	; (8002524 <SystemClock_Config+0x98>)
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	4011      	ands	r1, r2
 80024e4:	2280      	movs	r2, #128	; 0x80
 80024e6:	0112      	lsls	r2, r2, #4
 80024e8:	430a      	orrs	r2, r1
 80024ea:	601a      	str	r2, [r3, #0]
  while (__HAL_PWR_GET_FLAG(PWR_FLAG_VOS) != RESET) {};
 80024ec:	6859      	ldr	r1, [r3, #4]
 80024ee:	000a      	movs	r2, r1
 80024f0:	4022      	ands	r2, r4
 80024f2:	4221      	tst	r1, r4
 80024f4:	d1fa      	bne.n	80024ec <SystemClock_Config+0x60>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80024f6:	230f      	movs	r3, #15
 80024f8:	9300      	str	r3, [sp, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;//RCC_SYSCLKSOURCE_HSI;//RCC_SYSCLKSOURCE_PLLCLK;
 80024fa:	3b0c      	subs	r3, #12
 80024fc:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 80024fe:	23e0      	movs	r3, #224	; 0xe0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002500:	2101      	movs	r1, #1
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8002502:	00db      	lsls	r3, r3, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002504:	4668      	mov	r0, sp
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002506:	9202      	str	r2, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV16;
 8002508:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800250a:	9204      	str	r2, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800250c:	f003 fd34 	bl	8005f78 <HAL_RCC_ClockConfig>
 8002510:	2800      	cmp	r0, #0
 8002512:	d000      	beq.n	8002516 <SystemClock_Config+0x8a>
  while (1)
 8002514:	e7fe      	b.n	8002514 <SystemClock_Config+0x88>
}
 8002516:	b012      	add	sp, #72	; 0x48
 8002518:	bd10      	pop	{r4, pc}
 800251a:	46c0      	nop			; (mov r8, r8)
 800251c:	40021000 	.word	0x40021000
 8002520:	40007000 	.word	0x40007000
 8002524:	ffffe7ff 	.word	0xffffe7ff

08002528 <main>:
{
 8002528:	b510      	push	{r4, lr}
  HAL_Init();
 800252a:	f001 fed9 	bl	80042e0 <HAL_Init>
  SystemClock_Config();//SystemLowClock_Config();//SystemClock_Config();
 800252e:	f7ff ffad 	bl	800248c <SystemClock_Config>
  hwwdg.Instance = WWDG;
 8002532:	4c10      	ldr	r4, [pc, #64]	; (8002574 <main+0x4c>)
 8002534:	4b10      	ldr	r3, [pc, #64]	; (8002578 <main+0x50>)
  HAL_WWDG_Init(&hwwdg);
 8002536:	0020      	movs	r0, r4
  hwwdg.Instance = WWDG;
 8002538:	6023      	str	r3, [r4, #0]
  hwwdg.Init.EWIMode = WWDG_EWI_DISABLE;
 800253a:	2300      	movs	r3, #0
 800253c:	6123      	str	r3, [r4, #16]
  hwwdg.Init.Prescaler = WWDG_PRESCALER_8;
 800253e:	3381      	adds	r3, #129	; 0x81
 8002540:	33ff      	adds	r3, #255	; 0xff
 8002542:	6063      	str	r3, [r4, #4]
  hwwdg.Init.Window = WWDG_CFR_W;
 8002544:	3b02      	subs	r3, #2
 8002546:	3bff      	subs	r3, #255	; 0xff
 8002548:	60a3      	str	r3, [r4, #8]
  hwwdg.Init.Counter = WWDG_CR_T;
 800254a:	60e3      	str	r3, [r4, #12]
  HAL_WWDG_Init(&hwwdg);
 800254c:	f005 f97a 	bl	8007844 <HAL_WWDG_Init>
 MX_LoRaWAN_Init();
 8002550:	f005 f992 	bl	8007878 <MX_LoRaWAN_Init>
 TxAppInit();
 8002554:	f001 fabc 	bl	8003ad0 <TxAppInit>
    MX_LoRaWAN_Process();
 8002558:	f005 f992 	bl	8007880 <MX_LoRaWAN_Process>
    if(getInterruptFlag() == 1)
 800255c:	f001 f9e0 	bl	8003920 <getInterruptFlag>
 8002560:	2801      	cmp	r0, #1
 8002562:	d103      	bne.n	800256c <main+0x44>
    	tratarInterrupcao();
 8002564:	f001 f9e8 	bl	8003938 <tratarInterrupcao>
    	resetInterruptFlag();
 8002568:	f001 f9e0 	bl	800392c <resetInterruptFlag>
    HAL_WWDG_Refresh(&hwwdg);
 800256c:	0020      	movs	r0, r4
 800256e:	f005 f97e 	bl	800786e <HAL_WWDG_Refresh>
    MX_LoRaWAN_Process();
 8002572:	e7f1      	b.n	8002558 <main+0x30>
 8002574:	200014c8 	.word	0x200014c8
 8002578:	40002c00 	.word	0x40002c00

0800257c <Error_Handler>:
  while (1)
 800257c:	e7fe      	b.n	800257c <Error_Handler>
	...

08002580 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002580:	b530      	push	{r4, r5, lr}
  RTC_TimeTypeDef sTime = {0};
  RTC_DateTypeDef sDate = {0};
 8002582:	2400      	movs	r4, #0
{
 8002584:	b091      	sub	sp, #68	; 0x44
  RTC_TimeTypeDef sTime = {0};
 8002586:	2214      	movs	r2, #20
 8002588:	2100      	movs	r1, #0
 800258a:	a801      	add	r0, sp, #4
 800258c:	f00c fd89 	bl	800f0a2 <memset>
  RTC_AlarmTypeDef sAlarm = {0};
 8002590:	2228      	movs	r2, #40	; 0x28
 8002592:	0021      	movs	r1, r4
 8002594:	a806      	add	r0, sp, #24
  RTC_DateTypeDef sDate = {0};
 8002596:	9400      	str	r4, [sp, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8002598:	f00c fd83 	bl	800f0a2 <memset>

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800259c:	4d24      	ldr	r5, [pc, #144]	; (8002630 <MX_RTC_Init+0xb0>)
 800259e:	4b25      	ldr	r3, [pc, #148]	; (8002634 <MX_RTC_Init+0xb4>)
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;

  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80025a0:	0028      	movs	r0, r5
  hrtc.Instance = RTC;
 80025a2:	602b      	str	r3, [r5, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 80025a4:	231f      	movs	r3, #31
 80025a6:	60ab      	str	r3, [r5, #8]
  hrtc.Init.SynchPrediv = RTC_PREDIV_S;
 80025a8:	4b23      	ldr	r3, [pc, #140]	; (8002638 <MX_RTC_Init+0xb8>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80025aa:	606c      	str	r4, [r5, #4]
  hrtc.Init.SynchPrediv = RTC_PREDIV_S;
 80025ac:	60eb      	str	r3, [r5, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80025ae:	612c      	str	r4, [r5, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80025b0:	616c      	str	r4, [r5, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80025b2:	61ac      	str	r4, [r5, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80025b4:	61ec      	str	r4, [r5, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80025b6:	f003 ff59 	bl	800646c <HAL_RTC_Init>
 80025ba:	42a0      	cmp	r0, r4
 80025bc:	d001      	beq.n	80025c2 <MX_RTC_Init+0x42>
  {
    Error_Handler();
 80025be:	f7ff ffdd 	bl	800257c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80025c2:	466b      	mov	r3, sp
  sTime.Minutes = 0;
  sTime.Seconds = 0;
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80025c4:	2200      	movs	r2, #0
 80025c6:	0028      	movs	r0, r5
  sTime.Hours = 0;
 80025c8:	809c      	strh	r4, [r3, #4]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80025ca:	a901      	add	r1, sp, #4
  sTime.Seconds = 0;
 80025cc:	719c      	strb	r4, [r3, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80025ce:	9404      	str	r4, [sp, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80025d0:	9405      	str	r4, [sp, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80025d2:	f003 ffb3 	bl	800653c <HAL_RTC_SetTime>
 80025d6:	2800      	cmp	r0, #0
 80025d8:	d001      	beq.n	80025de <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 80025da:	f7ff ffcf 	bl	800257c <Error_Handler>
  }

  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80025de:	4b17      	ldr	r3, [pc, #92]	; (800263c <MX_RTC_Init+0xbc>)
  sDate.Month = RTC_MONTH_JANUARY;
  sDate.Date = 1;
  sDate.Year = 0;

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80025e0:	2200      	movs	r2, #0
 80025e2:	4669      	mov	r1, sp
 80025e4:	0028      	movs	r0, r5
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80025e6:	9300      	str	r3, [sp, #0]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80025e8:	f004 f82e 	bl	8006648 <HAL_RTC_SetDate>
 80025ec:	2800      	cmp	r0, #0
 80025ee:	d001      	beq.n	80025f4 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 80025f0:	f7ff ffc4 	bl	800257c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 80025f4:	2200      	movs	r2, #0
 80025f6:	466b      	mov	r3, sp
 80025f8:	831a      	strh	r2, [r3, #24]
  sAlarm.AlarmTime.Minutes = 0;
  sAlarm.AlarmTime.Seconds = 0;
 80025fa:	769a      	strb	r2, [r3, #26]
  sAlarm.AlarmTime.SubSeconds = 0;
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_SS14_10;
 80025fc:	23a0      	movs	r3, #160	; 0xa0
 80025fe:	051b      	lsls	r3, r3, #20
 8002600:	930c      	str	r3, [sp, #48]	; 0x30
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
  sAlarm.AlarmDateWeekDay = 30;
 8002602:	2319      	movs	r3, #25
 8002604:	211e      	movs	r1, #30
 8002606:	446b      	add	r3, sp
 8002608:	77d9      	strb	r1, [r3, #31]
  sAlarm.Alarm = RTC_ALARM_A;
 800260a:	2380      	movs	r3, #128	; 0x80
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800260c:	0028      	movs	r0, r5
  sAlarm.Alarm = RTC_ALARM_A;
 800260e:	005b      	lsls	r3, r3, #1
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8002610:	a906      	add	r1, sp, #24
  sAlarm.AlarmTime.SubSeconds = 0;
 8002612:	9207      	str	r2, [sp, #28]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002614:	9209      	str	r2, [sp, #36]	; 0x24
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002616:	920a      	str	r2, [sp, #40]	; 0x28
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002618:	920b      	str	r2, [sp, #44]	; 0x2c
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800261a:	920d      	str	r2, [sp, #52]	; 0x34
  sAlarm.Alarm = RTC_ALARM_A;
 800261c:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800261e:	f004 f87f 	bl	8006720 <HAL_RTC_SetAlarm_IT>
 8002622:	2800      	cmp	r0, #0
 8002624:	d001      	beq.n	800262a <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8002626:	f7ff ffa9 	bl	800257c <Error_Handler>
  }

}
 800262a:	b011      	add	sp, #68	; 0x44
 800262c:	bd30      	pop	{r4, r5, pc}
 800262e:	46c0      	nop			; (mov r8, r8)
 8002630:	200014dc 	.word	0x200014dc
 8002634:	40002800 	.word	0x40002800
 8002638:	000003ff 	.word	0x000003ff
 800263c:	00010101 	.word	0x00010101

08002640 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef *rtcHandle)
{
 8002640:	b510      	push	{r4, lr}
 8002642:	0004      	movs	r4, r0
 8002644:	b08e      	sub	sp, #56	; 0x38

  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002646:	2234      	movs	r2, #52	; 0x34
 8002648:	2100      	movs	r1, #0
 800264a:	a801      	add	r0, sp, #4
 800264c:	f00c fd29 	bl	800f0a2 <memset>
  if (rtcHandle->Instance == RTC)
 8002650:	4b11      	ldr	r3, [pc, #68]	; (8002698 <HAL_RTC_MspInit+0x58>)
 8002652:	6822      	ldr	r2, [r4, #0]
 8002654:	429a      	cmp	r2, r3
 8002656:	d11c      	bne.n	8002692 <HAL_RTC_MspInit+0x52>
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /** Initializes the peripherals clocks
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 8002658:	2304      	movs	r3, #4
 800265a:	9301      	str	r3, [sp, #4]
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800265c:	33fc      	adds	r3, #252	; 0xfc
 800265e:	9303      	str	r3, [sp, #12]
    RCC_OscInitStruct.LSIState = RCC_LSI_OFF;
 8002660:	2300      	movs	r3, #0
    RCC_OscInitStruct.HSEState = RCC_HSE_OFF;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002662:	a801      	add	r0, sp, #4
    RCC_OscInitStruct.LSIState = RCC_LSI_OFF;
 8002664:	9306      	str	r3, [sp, #24]
    RCC_OscInitStruct.HSEState = RCC_HSE_OFF;
 8002666:	9302      	str	r3, [sp, #8]
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002668:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800266a:	f003 fa3d 	bl	8005ae8 <HAL_RCC_OscConfig>
 800266e:	2800      	cmp	r0, #0
 8002670:	d001      	beq.n	8002676 <HAL_RTC_MspInit+0x36>
    {
      Error_Handler();
 8002672:	f7ff ff83 	bl	800257c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002676:	2380      	movs	r3, #128	; 0x80
 8002678:	4a08      	ldr	r2, [pc, #32]	; (800269c <HAL_RTC_MspInit+0x5c>)
 800267a:	02db      	lsls	r3, r3, #11
 800267c:	6d11      	ldr	r1, [r2, #80]	; 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 800267e:	2002      	movs	r0, #2
    __HAL_RCC_RTC_ENABLE();
 8002680:	430b      	orrs	r3, r1
 8002682:	6513      	str	r3, [r2, #80]	; 0x50
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8002684:	2200      	movs	r2, #0
 8002686:	0011      	movs	r1, r2
 8002688:	f002 f986 	bl	8004998 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800268c:	2002      	movs	r0, #2
 800268e:	f002 f9ad 	bl	80049ec <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN RTC_MspInit 1 */

    /* USER CODE END RTC_MspInit 1 */
  }
}
 8002692:	b00e      	add	sp, #56	; 0x38
 8002694:	bd10      	pop	{r4, pc}
 8002696:	46c0      	nop			; (mov r8, r8)
 8002698:	40002800 	.word	0x40002800
 800269c:	40021000 	.word	0x40021000

080026a0 <RTC_IF_GetTimerContext>:

uint32_t RTC_IF_GetTimerContext(void)
{
  RTC_IF_DBG_PRINTF("RTC_IF_GetTimerContext=%d\n\r", RtcTimerContext.Rtc_Time);
  /*return time context*/
  return (uint32_t) RtcTimerContext.Rtc_Time;
 80026a0:	4b01      	ldr	r3, [pc, #4]	; (80026a8 <RTC_IF_GetTimerContext+0x8>)
 80026a2:	6818      	ldr	r0, [r3, #0]
}
 80026a4:	4770      	bx	lr
 80026a6:	46c0      	nop			; (mov r8, r8)
 80026a8:	200001d8 	.word	0x200001d8

080026ac <RTC_IF_GetMinimumTimeout>:
}

uint32_t RTC_IF_GetMinimumTimeout(void)
{
  return (MIN_ALARM_DELAY);
}
 80026ac:	2003      	movs	r0, #3
 80026ae:	4770      	bx	lr

080026b0 <RTC_IF_Convert_ms2Tick>:

uint32_t RTC_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 80026b0:	b510      	push	{r4, lr}
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 80026b2:	0e41      	lsrs	r1, r0, #25
 80026b4:	227d      	movs	r2, #125	; 0x7d
 80026b6:	2300      	movs	r3, #0
 80026b8:	01c0      	lsls	r0, r0, #7
 80026ba:	f7fd feff 	bl	80004bc <__aeabi_uldivmod>
}
 80026be:	bd10      	pop	{r4, pc}

080026c0 <RTC_IF_Convert_Tick2ms>:

uint32_t RTC_IF_Convert_Tick2ms(uint32_t tick)
{
 80026c0:	b510      	push	{r4, lr}
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 80026c2:	227d      	movs	r2, #125	; 0x7d
 80026c4:	2300      	movs	r3, #0
 80026c6:	2100      	movs	r1, #0
 80026c8:	f7fd ff18 	bl	80004fc <__aeabi_lmul>
 80026cc:	0649      	lsls	r1, r1, #25
 80026ce:	09c0      	lsrs	r0, r0, #7
 80026d0:	4308      	orrs	r0, r1
}
 80026d2:	bd10      	pop	{r4, pc}

080026d4 <RTC_IF_StopTimer>:
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 80026d4:	4806      	ldr	r0, [pc, #24]	; (80026f0 <RTC_IF_StopTimer+0x1c>)
 80026d6:	4b07      	ldr	r3, [pc, #28]	; (80026f4 <RTC_IF_StopTimer+0x20>)
 80026d8:	6801      	ldr	r1, [r0, #0]
{
 80026da:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 80026dc:	68ca      	ldr	r2, [r1, #12]
 80026de:	b2d2      	uxtb	r2, r2
 80026e0:	4313      	orrs	r3, r2
 80026e2:	60cb      	str	r3, [r1, #12]
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80026e4:	2180      	movs	r1, #128	; 0x80
 80026e6:	0049      	lsls	r1, r1, #1
 80026e8:	f003 fdf8 	bl	80062dc <HAL_RTC_DeactivateAlarm>
}
 80026ec:	2000      	movs	r0, #0
 80026ee:	bd10      	pop	{r4, pc}
 80026f0:	200014dc 	.word	0x200014dc
 80026f4:	fffffe7f 	.word	0xfffffe7f

080026f8 <RTC_GetCalendarValue>:
  * @param pointer to RTC_DateStruct
  * @param pointer to RTC_TimeStruct
  * @retval time in ticks
  */
static uint32_t RTC_GetCalendarValue(RTC_DateTypeDef *RTC_DateStruct, RTC_TimeTypeDef *RTC_TimeStruct)
{
 80026f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t calendarValue = 0;
  uint32_t first_read;
  uint32_t correction;

  /* Get Time and Date*/
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 80026fa:	4e25      	ldr	r6, [pc, #148]	; (8002790 <RTC_GetCalendarValue+0x98>)
{
 80026fc:	0005      	movs	r5, r0
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 80026fe:	2200      	movs	r2, #0
 8002700:	0030      	movs	r0, r6
{
 8002702:	000c      	movs	r4, r1
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 8002704:	f004 f8ec 	bl	80068e0 <HAL_RTC_GetTime>
  * @param  RTCx RTC Instance
  * @retval Sub second value (number between 0 and 65535)
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8002708:	4f22      	ldr	r7, [pc, #136]	; (8002794 <RTC_GetCalendarValue+0x9c>)

  /* make sure it is correct due to asynchronus nature of RTC*/
  do
  {
    first_read = LL_RTC_TIME_GetSubSecond(RTC);
    HAL_RTC_GetDate(&hrtc, RTC_DateStruct, RTC_FORMAT_BIN);
 800270a:	2200      	movs	r2, #0
 800270c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800270e:	0029      	movs	r1, r5
 8002710:	0030      	movs	r0, r6
 8002712:	9301      	str	r3, [sp, #4]
 8002714:	f004 f90e 	bl	8006934 <HAL_RTC_GetDate>
    HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 8002718:	2200      	movs	r2, #0
 800271a:	0021      	movs	r1, r4
 800271c:	0030      	movs	r0, r6
 800271e:	f004 f8df 	bl	80068e0 <HAL_RTC_GetTime>
 8002722:	466b      	mov	r3, sp
 8002724:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002726:	889b      	ldrh	r3, [r3, #4]
 8002728:	b292      	uxth	r2, r2

  } while (first_read != LL_RTC_TIME_GetSubSecond(RTC));
 800272a:	429a      	cmp	r2, r3
 800272c:	d1ec      	bne.n	8002708 <RTC_GetCalendarValue+0x10>

  /* calculte amount of elapsed days since 01/01/2000 */
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);

  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 800272e:	2103      	movs	r1, #3
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 8002730:	78ea      	ldrb	r2, [r5, #3]
 8002732:	4e19      	ldr	r6, [pc, #100]	; (8002798 <RTC_GetCalendarValue+0xa0>)

  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8002734:	786f      	ldrb	r7, [r5, #1]
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 8002736:	4356      	muls	r6, r2
  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 8002738:	400a      	ands	r2, r1
 800273a:	4253      	negs	r3, r2
 800273c:	4153      	adcs	r3, r2
 800273e:	4a17      	ldr	r2, [pc, #92]	; (800279c <RTC_GetCalendarValue+0xa4>)
 8002740:	425b      	negs	r3, r3
 8002742:	4013      	ands	r3, r2
 8002744:	4a16      	ldr	r2, [pc, #88]	; (80027a0 <RTC_GetCalendarValue+0xa8>)
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8002746:	3f01      	subs	r7, #1
  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 8002748:	189b      	adds	r3, r3, r2
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 800274a:	223d      	movs	r2, #61	; 0x3d
 800274c:	437a      	muls	r2, r7
                         2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 800274e:	007f      	lsls	r7, r7, #1
 8002750:	40fb      	lsrs	r3, r7
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8002752:	3201      	adds	r2, #1
 8002754:	0fd0      	lsrs	r0, r2, #31
 8002756:	1882      	adds	r2, r0, r2

  calendarValue += (RTC_DateStruct->Date - 1);
 8002758:	78a8      	ldrb	r0, [r5, #2]
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 800275a:	3603      	adds	r6, #3
 800275c:	3801      	subs	r0, #1
 800275e:	08b6      	lsrs	r6, r6, #2
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8002760:	1052      	asrs	r2, r2, #1
 8002762:	1986      	adds	r6, r0, r6
 8002764:	1996      	adds	r6, r2, r6

  /* convert from days to seconds */
  calendarValue *= SECONDS_IN_1DAY;
 8002766:	480f      	ldr	r0, [pc, #60]	; (80027a4 <RTC_GetCalendarValue+0xac>)
                         2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 8002768:	400b      	ands	r3, r1
  calendarValue += (RTC_DateStruct->Date - 1);
 800276a:	1af3      	subs	r3, r6, r3
  calendarValue *= SECONDS_IN_1DAY;
 800276c:	4343      	muls	r3, r0

  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
                    ((uint32_t)RTC_TimeStruct->Hours * SECONDS_IN_1HOUR)) ;
 800276e:	20e1      	movs	r0, #225	; 0xe1
 8002770:	7822      	ldrb	r2, [r4, #0]
 8002772:	0100      	lsls	r0, r0, #4
 8002774:	4350      	muls	r0, r2
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 8002776:	223c      	movs	r2, #60	; 0x3c
 8002778:	7861      	ldrb	r1, [r4, #1]
 800277a:	434a      	muls	r2, r1
 800277c:	1880      	adds	r0, r0, r2
  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
 800277e:	78a2      	ldrb	r2, [r4, #2]
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 8002780:	1880      	adds	r0, r0, r2
  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
 8002782:	18c0      	adds	r0, r0, r3

  calendarValue = (calendarValue << RTC_N_PREDIV_S) + (RTC_PREDIV_S - RTC_TimeStruct->SubSeconds);
 8002784:	6863      	ldr	r3, [r4, #4]
 8002786:	0280      	lsls	r0, r0, #10
 8002788:	1ac0      	subs	r0, r0, r3
 800278a:	4b07      	ldr	r3, [pc, #28]	; (80027a8 <RTC_GetCalendarValue+0xb0>)
 800278c:	18c0      	adds	r0, r0, r3

  return (calendarValue);
}
 800278e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002790:	200014dc 	.word	0x200014dc
 8002794:	40002800 	.word	0x40002800
 8002798:	000005b5 	.word	0x000005b5
 800279c:	ffaaaab0 	.word	0xffaaaab0
 80027a0:	0099aaa0 	.word	0x0099aaa0
 80027a4:	00015180 	.word	0x00015180
 80027a8:	000003ff 	.word	0x000003ff

080027ac <RTC_IF_SetTimerContext>:
{
 80027ac:	b510      	push	{r4, lr}
  RtcTimerContext.Rtc_Time = RTC_GetCalendarValue(&RtcTimerContext.RTC_Calndr_Date, &RtcTimerContext.RTC_Calndr_Time);
 80027ae:	4c04      	ldr	r4, [pc, #16]	; (80027c0 <RTC_IF_SetTimerContext+0x14>)
 80027b0:	0020      	movs	r0, r4
 80027b2:	1d21      	adds	r1, r4, #4
 80027b4:	3018      	adds	r0, #24
 80027b6:	f7ff ff9f 	bl	80026f8 <RTC_GetCalendarValue>
 80027ba:	6020      	str	r0, [r4, #0]
}
 80027bc:	bd10      	pop	{r4, pc}
 80027be:	46c0      	nop			; (mov r8, r8)
 80027c0:	200001d8 	.word	0x200001d8

080027c4 <RTC_IF_GetTimerElapsedTime>:
{
 80027c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t CalendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 80027c6:	4668      	mov	r0, sp
 80027c8:	a901      	add	r1, sp, #4
 80027ca:	f7ff ff95 	bl	80026f8 <RTC_GetCalendarValue>
  return ((uint32_t)(CalendarValue - RtcTimerContext.Rtc_Time));
 80027ce:	4b02      	ldr	r3, [pc, #8]	; (80027d8 <RTC_IF_GetTimerElapsedTime+0x14>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	1ac0      	subs	r0, r0, r3
}
 80027d4:	b007      	add	sp, #28
 80027d6:	bd00      	pop	{pc}
 80027d8:	200001d8 	.word	0x200001d8

080027dc <RTC_IF_StartTimer>:
{
 80027dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027de:	b087      	sub	sp, #28
 80027e0:	0006      	movs	r6, r0
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - RTC_IF_GetTimerElapsedTime())))
 80027e2:	f7ff ffef 	bl	80027c4 <RTC_IF_GetTimerElapsedTime>
    UTIL_LPM_SetStopMode((1 << CFG_LPM_RTC_Id), UTIL_LPM_ENABLE);
 80027e6:	2100      	movs	r1, #0
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - RTC_IF_GetTimerElapsedTime())))
 80027e8:	1a30      	subs	r0, r6, r0
 80027ea:	2803      	cmp	r0, #3
 80027ec:	d800      	bhi.n	80027f0 <RTC_IF_StartTimer+0x14>
    UTIL_LPM_SetStopMode((1 << CFG_LPM_RTC_Id), UTIL_LPM_DISABLE);
 80027ee:	2101      	movs	r1, #1
 80027f0:	2002      	movs	r0, #2
 80027f2:	f00b fe41 	bl	800e478 <UTIL_LPM_SetStopMode>
  if (UTIL_LPM_GetMode() == UTIL_LPM_STOPMODE)
 80027f6:	f00b fe6b 	bl	800e4d0 <UTIL_LPM_GetMode>
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 80027fa:	4b3d      	ldr	r3, [pc, #244]	; (80028f0 <RTC_IF_StartTimer+0x114>)
 80027fc:	795a      	ldrb	r2, [r3, #5]
 80027fe:	689f      	ldr	r7, [r3, #8]
 8002800:	9200      	str	r2, [sp, #0]
 8002802:	799a      	ldrb	r2, [r3, #6]
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 8002804:	7e9c      	ldrb	r4, [r3, #26]
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 8002806:	9201      	str	r2, [sp, #4]
 8002808:	79da      	ldrb	r2, [r3, #7]
 800280a:	791d      	ldrb	r5, [r3, #4]
 800280c:	9202      	str	r2, [sp, #8]
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 800280e:	7e5a      	ldrb	r2, [r3, #25]
 8002810:	7edb      	ldrb	r3, [r3, #27]
 8002812:	9203      	str	r2, [sp, #12]
 8002814:	9304      	str	r3, [sp, #16]
  RTC_IF_StopTimer();
 8002816:	f7ff ff5d 	bl	80026d4 <RTC_IF_StopTimer>
  rtcAlarmSubSeconds =  RTC_PREDIV_S - RTC_TimeStruct.SubSeconds;
 800281a:	4a36      	ldr	r2, [pc, #216]	; (80028f4 <RTC_IF_StartTimer+0x118>)
  rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 800281c:	05b3      	lsls	r3, r6, #22
  rtcAlarmSubSeconds =  RTC_PREDIV_S - RTC_TimeStruct.SubSeconds;
 800281e:	1bd7      	subs	r7, r2, r7
  rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 8002820:	0d9b      	lsrs	r3, r3, #22
 8002822:	18fb      	adds	r3, r7, r3
 8002824:	9205      	str	r2, [sp, #20]
  while (timeoutValue >= SECONDS_IN_1DAY)
 8002826:	4a34      	ldr	r2, [pc, #208]	; (80028f8 <RTC_IF_StartTimer+0x11c>)
  rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 8002828:	b29b      	uxth	r3, r3
  timeoutValue >>= RTC_N_PREDIV_S;  /* convert timeout  in seconds */
 800282a:	0ab6      	lsrs	r6, r6, #10
  rtcAlarmDays =  RTC_DateStruct.Date;
 800282c:	b2a0      	uxth	r0, r4
  while (timeoutValue >= SECONDS_IN_1DAY)
 800282e:	4296      	cmp	r6, r2
 8002830:	d83f      	bhi.n	80028b2 <RTC_IF_StartTimer+0xd6>
  while (timeoutValue >= SECONDS_IN_1HOUR)
 8002832:	22e1      	movs	r2, #225	; 0xe1
  rtcAlarmHours = RTC_TimeStruct.Hours;
 8002834:	b2ad      	uxth	r5, r5
  while (timeoutValue >= SECONDS_IN_1HOUR)
 8002836:	0112      	lsls	r2, r2, #4
 8002838:	4296      	cmp	r6, r2
 800283a:	d23f      	bcs.n	80028bc <RTC_IF_StartTimer+0xe0>
  rtcAlarmMinutes = RTC_TimeStruct.Minutes;
 800283c:	466a      	mov	r2, sp
 800283e:	8817      	ldrh	r7, [r2, #0]
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 8002840:	2e3b      	cmp	r6, #59	; 0x3b
 8002842:	d840      	bhi.n	80028c6 <RTC_IF_StartTimer+0xea>
  while (rtcAlarmSubSeconds >= (RTC_PREDIV_S + 1))
 8002844:	0a9a      	lsrs	r2, r3, #10
 8002846:	0294      	lsls	r4, r2, #10
 8002848:	1b1c      	subs	r4, r3, r4
 800284a:	9b01      	ldr	r3, [sp, #4]
 800284c:	b2a4      	uxth	r4, r4
 800284e:	18d2      	adds	r2, r2, r3
 8002850:	1996      	adds	r6, r2, r6
 8002852:	b2b6      	uxth	r6, r6
  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 8002854:	2e3b      	cmp	r6, #59	; 0x3b
 8002856:	d83a      	bhi.n	80028ce <RTC_IF_StartTimer+0xf2>
  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 8002858:	2f3b      	cmp	r7, #59	; 0x3b
 800285a:	d83d      	bhi.n	80028d8 <RTC_IF_StartTimer+0xfc>
  while (rtcAlarmHours >= HOURS_IN_1DAY)
 800285c:	2d17      	cmp	r5, #23
 800285e:	d840      	bhi.n	80028e2 <RTC_IF_StartTimer+0x106>
  if (RTC_DateStruct.Year % 4 == 0)
 8002860:	9b03      	ldr	r3, [sp, #12]
 8002862:	9a04      	ldr	r2, [sp, #16]
 8002864:	3b01      	subs	r3, #1
 8002866:	0792      	lsls	r2, r2, #30
 8002868:	d140      	bne.n	80028ec <RTC_IF_StartTimer+0x110>
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 800286a:	4a24      	ldr	r2, [pc, #144]	; (80028fc <RTC_IF_StartTimer+0x120>)
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 800286c:	5cd1      	ldrb	r1, [r2, r3]
 800286e:	4288      	cmp	r0, r1
 8002870:	d902      	bls.n	8002878 <RTC_IF_StartTimer+0x9c>
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 8002872:	f7fd fddf 	bl	8000434 <__aeabi_idivmod>
 8002876:	b288      	uxth	r0, r1
  RTC_AlarmStructure.AlarmTime.SubSeconds = RTC_PREDIV_S - rtcAlarmSubSeconds;
 8002878:	9b05      	ldr	r3, [sp, #20]
 800287a:	4921      	ldr	r1, [pc, #132]	; (8002900 <RTC_IF_StartTimer+0x124>)
 800287c:	1b1c      	subs	r4, r3, r4
  RTC_AlarmStructure.AlarmSubSecondMask  = RTC_ALARMSUBSECONDMASK;
 800287e:	23a0      	movs	r3, #160	; 0xa0
 8002880:	051b      	lsls	r3, r3, #20
 8002882:	618b      	str	r3, [r1, #24]
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 8002884:	1c4b      	adds	r3, r1, #1
 8002886:	77d8      	strb	r0, [r3, #31]
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 8002888:	9b02      	ldr	r3, [sp, #8]
  RTC_AlarmStructure.AlarmTime.SubSeconds = RTC_PREDIV_S - rtcAlarmSubSeconds;
 800288a:	604c      	str	r4, [r1, #4]
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 800288c:	70cb      	strb	r3, [r1, #3]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800288e:	2400      	movs	r4, #0
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 8002890:	2380      	movs	r3, #128	; 0x80
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 8002892:	0022      	movs	r2, r4
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 8002894:	005b      	lsls	r3, r3, #1
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 8002896:	481b      	ldr	r0, [pc, #108]	; (8002904 <RTC_IF_StartTimer+0x128>)
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 8002898:	708e      	strb	r6, [r1, #2]
  RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
 800289a:	704f      	strb	r7, [r1, #1]
  RTC_AlarmStructure.AlarmTime.Hours   = rtcAlarmHours;
 800289c:	700d      	strb	r5, [r1, #0]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800289e:	61cc      	str	r4, [r1, #28]
  RTC_AlarmStructure.AlarmMask       = RTC_ALARMMASK_NONE;
 80028a0:	614c      	str	r4, [r1, #20]
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 80028a2:	624b      	str	r3, [r1, #36]	; 0x24
  RTC_AlarmStructure.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80028a4:	60cc      	str	r4, [r1, #12]
  RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80028a6:	610c      	str	r4, [r1, #16]
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 80028a8:	f003 ff3a 	bl	8006720 <HAL_RTC_SetAlarm_IT>
}
 80028ac:	0020      	movs	r0, r4
 80028ae:	b007      	add	sp, #28
 80028b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    timeoutValue -= SECONDS_IN_1DAY;
 80028b2:	4915      	ldr	r1, [pc, #84]	; (8002908 <RTC_IF_StartTimer+0x12c>)
    rtcAlarmDays++;
 80028b4:	3001      	adds	r0, #1
    timeoutValue -= SECONDS_IN_1DAY;
 80028b6:	1876      	adds	r6, r6, r1
    rtcAlarmDays++;
 80028b8:	b280      	uxth	r0, r0
 80028ba:	e7b8      	b.n	800282e <RTC_IF_StartTimer+0x52>
    timeoutValue -= SECONDS_IN_1HOUR;
 80028bc:	4913      	ldr	r1, [pc, #76]	; (800290c <RTC_IF_StartTimer+0x130>)
    rtcAlarmHours++;
 80028be:	3501      	adds	r5, #1
    timeoutValue -= SECONDS_IN_1HOUR;
 80028c0:	1876      	adds	r6, r6, r1
    rtcAlarmHours++;
 80028c2:	b2ad      	uxth	r5, r5
 80028c4:	e7b8      	b.n	8002838 <RTC_IF_StartTimer+0x5c>
    rtcAlarmMinutes++;
 80028c6:	3701      	adds	r7, #1
    timeoutValue -= SECONDS_IN_1MINUTE;
 80028c8:	3e3c      	subs	r6, #60	; 0x3c
    rtcAlarmMinutes++;
 80028ca:	b2bf      	uxth	r7, r7
 80028cc:	e7b8      	b.n	8002840 <RTC_IF_StartTimer+0x64>
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 80028ce:	3e3c      	subs	r6, #60	; 0x3c
    rtcAlarmMinutes++;
 80028d0:	3701      	adds	r7, #1
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 80028d2:	b2b6      	uxth	r6, r6
    rtcAlarmMinutes++;
 80028d4:	b2bf      	uxth	r7, r7
 80028d6:	e7bd      	b.n	8002854 <RTC_IF_StartTimer+0x78>
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 80028d8:	3f3c      	subs	r7, #60	; 0x3c
    rtcAlarmHours++;
 80028da:	3501      	adds	r5, #1
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 80028dc:	b2bf      	uxth	r7, r7
    rtcAlarmHours++;
 80028de:	b2ad      	uxth	r5, r5
 80028e0:	e7ba      	b.n	8002858 <RTC_IF_StartTimer+0x7c>
    rtcAlarmHours -= HOURS_IN_1DAY;
 80028e2:	3d18      	subs	r5, #24
    rtcAlarmDays++;
 80028e4:	3001      	adds	r0, #1
    rtcAlarmHours -= HOURS_IN_1DAY;
 80028e6:	b2ad      	uxth	r5, r5
    rtcAlarmDays++;
 80028e8:	b280      	uxth	r0, r0
 80028ea:	e7b7      	b.n	800285c <RTC_IF_StartTimer+0x80>
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 80028ec:	4a08      	ldr	r2, [pc, #32]	; (8002910 <RTC_IF_StartTimer+0x134>)
 80028ee:	e7bd      	b.n	800286c <RTC_IF_StartTimer+0x90>
 80028f0:	200001d8 	.word	0x200001d8
 80028f4:	000003ff 	.word	0x000003ff
 80028f8:	0001517f 	.word	0x0001517f
 80028fc:	0800f258 	.word	0x0800f258
 8002900:	200001ac 	.word	0x200001ac
 8002904:	200014dc 	.word	0x200014dc
 8002908:	fffeae80 	.word	0xfffeae80
 800290c:	fffff1f0 	.word	0xfffff1f0
 8002910:	0800f24c 	.word	0x0800f24c

08002914 <RTC_IF_GetTime>:
{
 8002914:	b530      	push	{r4, r5, lr}
 8002916:	b087      	sub	sp, #28
 8002918:	0005      	movs	r5, r0
  uint64_t calendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 800291a:	a901      	add	r1, sp, #4
 800291c:	4668      	mov	r0, sp
 800291e:	f7ff feeb 	bl	80026f8 <RTC_GetCalendarValue>
 8002922:	0004      	movs	r4, r0
  ticks = (uint32_t) calendarValue & RTC_PREDIV_S;
 8002924:	0580      	lsls	r0, r0, #22
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 8002926:	227d      	movs	r2, #125	; 0x7d
 8002928:	2300      	movs	r3, #0
 800292a:	2100      	movs	r1, #0
  ticks = (uint32_t) calendarValue & RTC_PREDIV_S;
 800292c:	0d80      	lsrs	r0, r0, #22
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 800292e:	f7fd fde5 	bl	80004fc <__aeabi_lmul>
 8002932:	09c0      	lsrs	r0, r0, #7
  *mSeconds = RTC_IF_Convert_Tick2ms(ticks);
 8002934:	8028      	strh	r0, [r5, #0]
  uint32_t seconds = (uint32_t)(calendarValue >> RTC_N_PREDIV_S);
 8002936:	0aa0      	lsrs	r0, r4, #10
}
 8002938:	b007      	add	sp, #28
 800293a:	bd30      	pop	{r4, r5, pc}

0800293c <RTC_IF_BkUp_Write_Seconds>:
{
 800293c:	b510      	push	{r4, lr}
 800293e:	0002      	movs	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002940:	2100      	movs	r1, #0
 8002942:	4802      	ldr	r0, [pc, #8]	; (800294c <RTC_IF_BkUp_Write_Seconds+0x10>)
 8002944:	f004 f818 	bl	8006978 <HAL_RTCEx_BKUPWrite>
}
 8002948:	bd10      	pop	{r4, pc}
 800294a:	46c0      	nop			; (mov r8, r8)
 800294c:	200014dc 	.word	0x200014dc

08002950 <RTC_IF_BkUp_Write_SubSeconds>:
{
 8002950:	b510      	push	{r4, lr}
 8002952:	0002      	movs	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002954:	2101      	movs	r1, #1
 8002956:	4802      	ldr	r0, [pc, #8]	; (8002960 <RTC_IF_BkUp_Write_SubSeconds+0x10>)
 8002958:	f004 f80e 	bl	8006978 <HAL_RTCEx_BKUPWrite>
}
 800295c:	bd10      	pop	{r4, pc}
 800295e:	46c0      	nop			; (mov r8, r8)
 8002960:	200014dc 	.word	0x200014dc

08002964 <RTC_IF_BkUp_Read_Seconds>:
{
 8002964:	b510      	push	{r4, lr}
  return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8002966:	2100      	movs	r1, #0
 8002968:	4801      	ldr	r0, [pc, #4]	; (8002970 <RTC_IF_BkUp_Read_Seconds+0xc>)
 800296a:	f004 f80b 	bl	8006984 <HAL_RTCEx_BKUPRead>
}
 800296e:	bd10      	pop	{r4, pc}
 8002970:	200014dc 	.word	0x200014dc

08002974 <RTC_IF_BkUp_Read_SubSeconds>:
{
 8002974:	b510      	push	{r4, lr}
  return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8002976:	2101      	movs	r1, #1
 8002978:	4801      	ldr	r0, [pc, #4]	; (8002980 <RTC_IF_BkUp_Read_SubSeconds+0xc>)
 800297a:	f004 f803 	bl	8006984 <HAL_RTCEx_BKUPRead>
}
 800297e:	bd10      	pop	{r4, pc}
 8002980:	200014dc 	.word	0x200014dc

08002984 <RTC_IF_Init>:
{
 8002984:	b530      	push	{r4, r5, lr}
  if (RTC_Initalized == false)
 8002986:	4c11      	ldr	r4, [pc, #68]	; (80029cc <RTC_IF_Init+0x48>)
{
 8002988:	b089      	sub	sp, #36	; 0x24
  if (RTC_Initalized == false)
 800298a:	7823      	ldrb	r3, [r4, #0]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d119      	bne.n	80029c4 <RTC_IF_Init+0x40>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002990:	3320      	adds	r3, #32
 8002992:	9301      	str	r3, [sp, #4]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002994:	2380      	movs	r3, #128	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002996:	a801      	add	r0, sp, #4
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8002998:	025b      	lsls	r3, r3, #9
 800299a:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800299c:	f003 fbda 	bl	8006154 <HAL_RCCEx_PeriphCLKConfig>
 80029a0:	2800      	cmp	r0, #0
 80029a2:	d000      	beq.n	80029a6 <RTC_IF_Init+0x22>
      while (1);
 80029a4:	e7fe      	b.n	80029a4 <RTC_IF_Init+0x20>
    MX_RTC_Init();
 80029a6:	f7ff fdeb 	bl	8002580 <MX_RTC_Init>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80029aa:	2180      	movs	r1, #128	; 0x80
 80029ac:	4d08      	ldr	r5, [pc, #32]	; (80029d0 <RTC_IF_Init+0x4c>)
 80029ae:	0049      	lsls	r1, r1, #1
 80029b0:	0028      	movs	r0, r5
 80029b2:	f003 fc93 	bl	80062dc <HAL_RTC_DeactivateAlarm>
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 80029b6:	0028      	movs	r0, r5
 80029b8:	f003 ffea 	bl	8006990 <HAL_RTCEx_EnableBypassShadow>
    RTC_IF_SetTimerContext();
 80029bc:	f7ff fef6 	bl	80027ac <RTC_IF_SetTimerContext>
    RTC_Initalized = true;
 80029c0:	2301      	movs	r3, #1
 80029c2:	7023      	strb	r3, [r4, #0]
}
 80029c4:	2000      	movs	r0, #0
 80029c6:	b009      	add	sp, #36	; 0x24
 80029c8:	bd30      	pop	{r4, r5, pc}
 80029ca:	46c0      	nop			; (mov r8, r8)
 80029cc:	200001d4 	.word	0x200001d4
 80029d0:	200014dc 	.word	0x200014dc

080029d4 <RTC_IF_GetTimerValue>:
{
 80029d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t CalendarValue = 0;
 80029d6:	2000      	movs	r0, #0
  if (RTC_Initalized == true)
 80029d8:	4b04      	ldr	r3, [pc, #16]	; (80029ec <RTC_IF_GetTimerValue+0x18>)
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	4283      	cmp	r3, r0
 80029de:	d003      	beq.n	80029e8 <RTC_IF_GetTimerValue+0x14>
    CalendarValue = (uint32_t) RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 80029e0:	4668      	mov	r0, sp
 80029e2:	a901      	add	r1, sp, #4
 80029e4:	f7ff fe88 	bl	80026f8 <RTC_GetCalendarValue>
}
 80029e8:	b007      	add	sp, #28
 80029ea:	bd00      	pop	{pc}
 80029ec:	200001d4 	.word	0x200001d4

080029f0 <RTC_IF_DelayMs>:
{
 80029f0:	b570      	push	{r4, r5, r6, lr}
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 80029f2:	227d      	movs	r2, #125	; 0x7d
 80029f4:	2300      	movs	r3, #0
 80029f6:	0e41      	lsrs	r1, r0, #25
 80029f8:	01c0      	lsls	r0, r0, #7
 80029fa:	f7fd fd5f 	bl	80004bc <__aeabi_uldivmod>
 80029fe:	0004      	movs	r4, r0
  timeout = RTC_IF_GetTimerValue();
 8002a00:	f7ff ffe8 	bl	80029d4 <RTC_IF_GetTimerValue>
 8002a04:	0005      	movs	r5, r0
  while (((RTC_IF_GetTimerValue() - timeout)) < delayValue)
 8002a06:	f7ff ffe5 	bl	80029d4 <RTC_IF_GetTimerValue>
 8002a0a:	1b40      	subs	r0, r0, r5
 8002a0c:	42a0      	cmp	r0, r4
 8002a0e:	d300      	bcc.n	8002a12 <RTC_IF_DelayMs+0x22>
}
 8002a10:	bd70      	pop	{r4, r5, r6, pc}
    __NOP();
 8002a12:	46c0      	nop			; (mov r8, r8)
 8002a14:	e7f7      	b.n	8002a06 <RTC_IF_DelayMs+0x16>

08002a16 <HAL_RTC_AlarmAEventCallback>:
{
 8002a16:	b510      	push	{r4, lr}
  UTIL_TIMER_IRQ_Handler();
 8002a18:	f00c f964 	bl	800ece4 <UTIL_TIMER_IRQ_Handler>
}
 8002a1c:	bd10      	pop	{r4, pc}

08002a1e <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8002a1e:	4770      	bx	lr

08002a20 <PWR_EnterStopMode>:

  /* USER CODE END ExitOffMode_1 */
}

void PWR_EnterStopMode(void)
{
 8002a20:	b510      	push	{r4, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a22:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8002a26:	b672      	cpsid	i
  UTILS_ENTER_CRITICAL_SECTION();

  Sx_Board_IoDeInit();
 8002a28:	f001 fb7e 	bl	8004128 <SX1262DVK1CAS_RADIO_IoDeInit>
//  HAL_ADC_MspDeInit(&hadc1);
  //APP_LOG(TS_ON, VLEVEL_M, "\r\nAntes de SystemLowClock_Config\r\n");
  //SystemClock_Config();
  //APP_LOG(TS_ON, VLEVEL_M, "\r\nDepois de SystemLowClock_Config\r\n");
  /*clear wake up flag*/
  SET_BIT(PWR->CR, PWR_CR_CWUF);
 8002a2c:	2304      	movs	r3, #4
 8002a2e:	4a05      	ldr	r2, [pc, #20]	; (8002a44 <PWR_EnterStopMode+0x24>)
 8002a30:	6811      	ldr	r1, [r2, #0]
 8002a32:	430b      	orrs	r3, r1
 8002a34:	6013      	str	r3, [r2, #0]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a36:	f384 8810 	msr	PRIMASK, r4

  UTILS_EXIT_CRITICAL_SECTION();

  /* Enter Stop Mode */
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	0008      	movs	r0, r1
 8002a3e:	f002 ffbf 	bl	80059c0 <HAL_PWR_EnterSTOPMode>
}
 8002a42:	bd10      	pop	{r4, pc}
 8002a44:	40007000 	.word	0x40007000

08002a48 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8002a48:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a4a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8002a4e:	b672      	cpsid	i
	//APP_LOG(TS_OFF, VLEVEL_M, "\nA\n");
  UTILS_ENTER_CRITICAL_SECTION();
  //APP_LOG(TS_OFF, VLEVEL_M, "\r\nExitStopMode 1\r\n");
  /* After wake-up from STOP reconfigure the system clock */
  /* Enable HSI */
  __HAL_RCC_HSI_ENABLE();//__HAL_RCC_MSI_ENABLE();//__HAL_RCC_HSI_ENABLE();
 8002a50:	2201      	movs	r2, #1
 8002a52:	4b10      	ldr	r3, [pc, #64]	; (8002a94 <PWR_ExitStopMode+0x4c>)
 8002a54:	6819      	ldr	r1, [r3, #0]
 8002a56:	430a      	orrs	r2, r1
 8002a58:	601a      	str	r2, [r3, #0]
  /* Wait till HSI is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {}//while (__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET) {}//while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {}
 8002a5a:	2204      	movs	r2, #4
 8002a5c:	6819      	ldr	r1, [r3, #0]
 8002a5e:	4211      	tst	r1, r2
 8002a60:	d0fc      	beq.n	8002a5c <PWR_ExitStopMode+0x14>
  //APP_LOG(TS_OFF, VLEVEL_M, "\r\nExitStopMode 2\r\n");
  //__HAL_RCC_MSI_ENABLE();
  //while (__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET) {}
  //APP_LOG(TS_OFF, VLEVEL_M, "\r\nExitStopMode 3\r\n");
  /* Enable PLL */
  __HAL_RCC_PLL_ENABLE();
 8002a62:	2280      	movs	r2, #128	; 0x80
 8002a64:	6819      	ldr	r1, [r3, #0]
 8002a66:	0452      	lsls	r2, r2, #17
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	601a      	str	r2, [r3, #0]
  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {}
 8002a6c:	2280      	movs	r2, #128	; 0x80
 8002a6e:	0492      	lsls	r2, r2, #18
 8002a70:	6819      	ldr	r1, [r3, #0]
 8002a72:	4211      	tst	r1, r2
 8002a74:	d0fc      	beq.n	8002a70 <PWR_ExitStopMode+0x28>

  /* Select PLL as system clock source */
  __HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_PLLCLK);//__HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_HSI);//__HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_MSI);//__HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_PLLCLK);
 8002a76:	2203      	movs	r2, #3
 8002a78:	68d9      	ldr	r1, [r3, #12]
 8002a7a:	430a      	orrs	r2, r1

  /* Wait till PLL is used as system clock source */
  while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {};//while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI) {}//while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI) {}//while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {}
 8002a7c:	210c      	movs	r1, #12
  __HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_PLLCLK);//__HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_HSI);//__HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_MSI);//__HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_PLLCLK);
 8002a7e:	60da      	str	r2, [r3, #12]
  while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {};//while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI) {}//while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI) {}//while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {}
 8002a80:	68da      	ldr	r2, [r3, #12]
 8002a82:	400a      	ands	r2, r1
 8002a84:	2a0c      	cmp	r2, #12
 8002a86:	d1fb      	bne.n	8002a80 <PWR_ExitStopMode+0x38>

  //SystemClock_Config();
 // APP_LOG(TS_OFF, VLEVEL_M, "\r\nExitStopMode 4\r\n");
  /* initializes the peripherals */
  Sx_Board_IoInit();
 8002a88:	f001 fac2 	bl	8004010 <SX1262DVK1CAS_RADIO_IoInit>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a8c:	f384 8810 	msr	PRIMASK, r4

  //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
  UTILS_EXIT_CRITICAL_SECTION();
  //APP_LOG(TS_OFF, VLEVEL_M, "\nB\n");
}
 8002a90:	bd10      	pop	{r4, pc}
 8002a92:	46c0      	nop			; (mov r8, r8)
 8002a94:	40021000 	.word	0x40021000

08002a98 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8002a98:	b510      	push	{r4, lr}
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	2000      	movs	r0, #0
 8002a9e:	f002 ff57 	bl	8005950 <HAL_PWR_EnterSLEEPMode>
}
 8002aa2:	bd10      	pop	{r4, pc}

08002aa4 <PWR_ExitSleepMode>:
 8002aa4:	4770      	bx	lr

08002aa6 <PWR_ExitOffMode>:
 8002aa6:	4770      	bx	lr

08002aa8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002aa8:	2380      	movs	r3, #128	; 0x80
 8002aaa:	4a09      	ldr	r2, [pc, #36]	; (8002ad0 <HAL_MspInit+0x28>)
 8002aac:	055b      	lsls	r3, r3, #21
 8002aae:	6b91      	ldr	r1, [r2, #56]	; 0x38
{
 8002ab0:	b510      	push	{r4, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ab2:	430b      	orrs	r3, r1
 8002ab4:	6393      	str	r3, [r2, #56]	; 0x38

  /* Disable the Power Voltage Detector */
  HAL_PWR_DisablePVD();
 8002ab6:	f002 ff43 	bl	8005940 <HAL_PWR_DisablePVD>

  /* Enables the Ultra Low Power mode */
  HAL_PWREx_EnableUltraLowPower();
 8002aba:	f002 ffc3 	bl	8005a44 <HAL_PWREx_EnableUltraLowPower>

  __HAL_FLASH_SLEEP_POWERDOWN_ENABLE();
 8002abe:	2308      	movs	r3, #8
 8002ac0:	4a04      	ldr	r2, [pc, #16]	; (8002ad4 <HAL_MspInit+0x2c>)
 8002ac2:	6811      	ldr	r1, [r2, #0]
 8002ac4:	430b      	orrs	r3, r1
 8002ac6:	6013      	str	r3, [r2, #0]
   */
  DBG(__HAL_FLASH_SLEEP_POWERDOWN_DISABLE(););

#ifdef ENABLE_FAST_WAKEUP
  /*Enable fast wakeUp*/
  HAL_PWREx_EnableFastWakeUp();
 8002ac8:	f002 ffb2 	bl	8005a30 <HAL_PWREx_EnableFastWakeUp>
#endif

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002acc:	bd10      	pop	{r4, pc}
 8002ace:	46c0      	nop			; (mov r8, r8)
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	40022000 	.word	0x40022000

08002ad8 <HAL_WWDG_MspInit>:
* @param hwwdg: WWDG handle pointer
* @retval None
*/
void HAL_WWDG_MspInit(WWDG_HandleTypeDef* hwwdg)
{
  if(hwwdg->Instance==WWDG)
 8002ad8:	4b05      	ldr	r3, [pc, #20]	; (8002af0 <HAL_WWDG_MspInit+0x18>)
 8002ada:	6802      	ldr	r2, [r0, #0]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d105      	bne.n	8002aec <HAL_WWDG_MspInit+0x14>
  {
  /* USER CODE BEGIN WWDG_MspInit 0 */

  /* USER CODE END WWDG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_WWDG_CLK_ENABLE();
 8002ae0:	2380      	movs	r3, #128	; 0x80
 8002ae2:	4a04      	ldr	r2, [pc, #16]	; (8002af4 <HAL_WWDG_MspInit+0x1c>)
 8002ae4:	011b      	lsls	r3, r3, #4
 8002ae6:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8002ae8:	430b      	orrs	r3, r1
 8002aea:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN WWDG_MspInit 1 */

  /* USER CODE END WWDG_MspInit 1 */
  }

}
 8002aec:	4770      	bx	lr
 8002aee:	46c0      	nop			; (mov r8, r8)
 8002af0:	40002c00 	.word	0x40002c00
 8002af4:	40021000 	.word	0x40021000

08002af8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002af8:	b510      	push	{r4, lr}
 8002afa:	0004      	movs	r4, r0
 8002afc:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002afe:	2214      	movs	r2, #20
 8002b00:	2100      	movs	r1, #0
 8002b02:	a801      	add	r0, sp, #4
 8002b04:	f00c facd 	bl	800f0a2 <memset>
  if(hi2c->Instance==I2C1)
 8002b08:	4b10      	ldr	r3, [pc, #64]	; (8002b4c <HAL_I2C_MspInit+0x54>)
 8002b0a:	6822      	ldr	r2, [r4, #0]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d11a      	bne.n	8002b46 <HAL_I2C_MspInit+0x4e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b10:	2102      	movs	r1, #2
 8002b12:	4c0f      	ldr	r4, [pc, #60]	; (8002b50 <HAL_I2C_MspInit+0x58>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b14:	480f      	ldr	r0, [pc, #60]	; (8002b54 <HAL_I2C_MspInit+0x5c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b16:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002b18:	430a      	orrs	r2, r1
 8002b1a:	62e2      	str	r2, [r4, #44]	; 0x2c
 8002b1c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b1e:	2203      	movs	r2, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b20:	400b      	ands	r3, r1
 8002b22:	9300      	str	r3, [sp, #0]
 8002b24:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002b26:	23c0      	movs	r3, #192	; 0xc0
 8002b28:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b2a:	3bae      	subs	r3, #174	; 0xae
 8002b2c:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b2e:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b30:	3b11      	subs	r3, #17
 8002b32:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b34:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8002b36:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b38:	f002 fa7c 	bl	8005034 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002b3c:	2380      	movs	r3, #128	; 0x80
 8002b3e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002b40:	039b      	lsls	r3, r3, #14
 8002b42:	4313      	orrs	r3, r2
 8002b44:	63a3      	str	r3, [r4, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002b46:	b006      	add	sp, #24
 8002b48:	bd10      	pop	{r4, pc}
 8002b4a:	46c0      	nop			; (mov r8, r8)
 8002b4c:	40005400 	.word	0x40005400
 8002b50:	40021000 	.word	0x40021000
 8002b54:	50000400 	.word	0x50000400

08002b58 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002b58:	4770      	bx	lr

08002b5a <HardFault_Handler>:

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
    __NOP();
 8002b5a:	46c0      	nop			; (mov r8, r8)
  while (1)
 8002b5c:	e7fd      	b.n	8002b5a <HardFault_Handler>

08002b5e <SVC_Handler>:
 8002b5e:	4770      	bx	lr

08002b60 <PendSV_Handler>:
 8002b60:	4770      	bx	lr

08002b62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b62:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b64:	f001 fbd0 	bl	8004308 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b68:	bd10      	pop	{r4, pc}

08002b6a <EXTI0_1_IRQHandler>:
 8002b6a:	4770      	bx	lr

08002b6c <EXTI2_3_IRQHandler>:
 8002b6c:	4770      	bx	lr
	...

08002b70 <EXTI4_15_IRQHandler>:
  HAL_EXTI_IRQHandler(&H_EXTI_3);
#endif
}

void EXTI4_15_IRQHandler(void)
{
 8002b70:	b510      	push	{r4, lr}
  HAL_EXTI_IRQHandler(&H_EXTI_15);
 8002b72:	4809      	ldr	r0, [pc, #36]	; (8002b98 <EXTI4_15_IRQHandler+0x28>)
 8002b74:	f002 f8fa 	bl	8004d6c <HAL_EXTI_IRQHandler>
	HAL_EXTI_IRQHandler(&H_APP_EXTI_6);
 8002b78:	4808      	ldr	r0, [pc, #32]	; (8002b9c <EXTI4_15_IRQHandler+0x2c>)
 8002b7a:	f002 f8f7 	bl	8004d6c <HAL_EXTI_IRQHandler>
	HAL_EXTI_IRQHandler(&H_APP_EXTI_7);
 8002b7e:	4808      	ldr	r0, [pc, #32]	; (8002ba0 <EXTI4_15_IRQHandler+0x30>)
 8002b80:	f002 f8f4 	bl	8004d6c <HAL_EXTI_IRQHandler>
	HAL_EXTI_IRQHandler(&H_APP_EXTI_8);
 8002b84:	4807      	ldr	r0, [pc, #28]	; (8002ba4 <EXTI4_15_IRQHandler+0x34>)
 8002b86:	f002 f8f1 	bl	8004d6c <HAL_EXTI_IRQHandler>
	HAL_EXTI_IRQHandler(&H_APP_EXTI_13);
 8002b8a:	4807      	ldr	r0, [pc, #28]	; (8002ba8 <EXTI4_15_IRQHandler+0x38>)
 8002b8c:	f002 f8ee 	bl	8004d6c <HAL_EXTI_IRQHandler>
	HAL_EXTI_IRQHandler(&H_APP_EXTI_14);
 8002b90:	4806      	ldr	r0, [pc, #24]	; (8002bac <EXTI4_15_IRQHandler+0x3c>)
 8002b92:	f002 f8eb 	bl	8004d6c <HAL_EXTI_IRQHandler>
#endif

#if (defined(CMWX1ZZABZ0XX))
  HAL_EXTI_IRQHandler(&H_EXTI_13);
#endif
}
 8002b96:	bd10      	pop	{r4, pc}
 8002b98:	20001730 	.word	0x20001730
 8002b9c:	20001554 	.word	0x20001554
 8002ba0:	20001544 	.word	0x20001544
 8002ba4:	2000154c 	.word	0x2000154c
 8002ba8:	2000153c 	.word	0x2000153c
 8002bac:	20001534 	.word	0x20001534

08002bb0 <DMA1_Channel4_5_6_7_IRQHandler>:

void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8002bb0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
	  HAL_DMA_IRQHandler(husart2.hdmatx);
 8002bb2:	4b02      	ldr	r3, [pc, #8]	; (8002bbc <DMA1_Channel4_5_6_7_IRQHandler+0xc>)
 8002bb4:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8002bb6:	f002 f82e 	bl	8004c16 <HAL_DMA_IRQHandler>
  //HAL_DMA_IRQHandler(&hdma_rx);
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8002bba:	bd10      	pop	{r4, pc}
 8002bbc:	2000165c 	.word	0x2000165c

08002bc0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8002bc0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&husart2);
 8002bc2:	4802      	ldr	r0, [pc, #8]	; (8002bcc <USART2_IRQHandler+0xc>)
 8002bc4:	f004 f9b0 	bl	8006f28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002bc8:	bd10      	pop	{r4, pc}
 8002bca:	46c0      	nop			; (mov r8, r8)
 8002bcc:	2000165c 	.word	0x2000165c

08002bd0 <RTC_IRQHandler>:



void RTC_IRQHandler(void)
{
 8002bd0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002bd2:	4802      	ldr	r0, [pc, #8]	; (8002bdc <RTC_IRQHandler+0xc>)
 8002bd4:	f003 fbe4 	bl	80063a0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002bd8:	bd10      	pop	{r4, pc}
 8002bda:	46c0      	nop			; (mov r8, r8)
 8002bdc:	200014dc 	.word	0x200014dc

08002be0 <PVD_IRQHandler>:

/* USER CODE BEGIN 1 */
void PVD_IRQHandler(void){
 8002be0:	b510      	push	{r4, lr}
	HAL_PWR_PVD_IRQHandler();
 8002be2:	f002 ff17 	bl	8005a14 <HAL_PWR_PVD_IRQHandler>
}
 8002be6:	bd10      	pop	{r4, pc}

08002be8 <tiny_snprintf_like.constprop.0>:
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
 8002be8:	b40c      	push	{r2, r3}
 8002bea:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8002bec:	2110      	movs	r1, #16
  va_start(vaArgs, strFormat);
 8002bee:	ab05      	add	r3, sp, #20
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8002bf0:	4a03      	ldr	r2, [pc, #12]	; (8002c00 <tiny_snprintf_like.constprop.0+0x18>)
  va_start(vaArgs, strFormat);
 8002bf2:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8002bf4:	f00b fd52 	bl	800e69c <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8002bf8:	b003      	add	sp, #12
 8002bfa:	bc08      	pop	{r3}
 8002bfc:	b002      	add	sp, #8
 8002bfe:	4718      	bx	r3
 8002c00:	0800f2bc 	.word	0x0800f2bc

08002c04 <TimestampNow>:
{
 8002c04:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8002c06:	0004      	movs	r4, r0
  SysTime_t curtime = SysTimeGet();
 8002c08:	ae02      	add	r6, sp, #8
 8002c0a:	0030      	movs	r0, r6
{
 8002c0c:	000d      	movs	r5, r1
  SysTime_t curtime = SysTimeGet();
 8002c0e:	f00b fd07 	bl	800e620 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8002c12:	2204      	movs	r2, #4
 8002c14:	5eb3      	ldrsh	r3, [r6, r2]
 8002c16:	2110      	movs	r1, #16
 8002c18:	0020      	movs	r0, r4
 8002c1a:	4a05      	ldr	r2, [pc, #20]	; (8002c30 <TimestampNow+0x2c>)
 8002c1c:	9300      	str	r3, [sp, #0]
 8002c1e:	9b02      	ldr	r3, [sp, #8]
 8002c20:	f7ff ffe2 	bl	8002be8 <tiny_snprintf_like.constprop.0>
  *size = strlen((char *)buff);
 8002c24:	0020      	movs	r0, r4
 8002c26:	f7fd fa6f 	bl	8000108 <strlen>
 8002c2a:	8028      	strh	r0, [r5, #0]
}
 8002c2c:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 8002c2e:	46c0      	nop			; (mov r8, r8)
 8002c30:	0800f2bc 	.word	0x0800f2bc

08002c34 <SystemApp_Init>:
{
 8002c34:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c36:	2501      	movs	r5, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c38:	2702      	movs	r7, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c3a:	2604      	movs	r6, #4
{
 8002c3c:	b08b      	sub	sp, #44	; 0x2c
  UTIL_TIMER_Init();
 8002c3e:	f00b ff19 	bl	800ea74 <UTIL_TIMER_Init>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c42:	2208      	movs	r2, #8
 8002c44:	2100      	movs	r1, #0
 8002c46:	a808      	add	r0, sp, #32
 8002c48:	f00c fa2b 	bl	800f0a2 <memset>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c4c:	2280      	movs	r2, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c4e:	4c2c      	ldr	r4, [pc, #176]	; (8002d00 <SystemApp_Init+0xcc>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c50:	20a0      	movs	r0, #160	; 0xa0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c52:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c54:	a905      	add	r1, sp, #20
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c56:	432b      	orrs	r3, r5
 8002c58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002c5a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c5c:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c5e:	402b      	ands	r3, r5
 8002c60:	9301      	str	r3, [sp, #4]
 8002c62:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c64:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002c66:	433b      	orrs	r3, r7
 8002c68:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002c6a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002c6c:	403b      	ands	r3, r7
 8002c6e:	9302      	str	r3, [sp, #8]
 8002c70:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c72:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002c74:	4333      	orrs	r3, r6
 8002c76:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002c78:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002c7a:	4033      	ands	r3, r6
 8002c7c:	9303      	str	r3, [sp, #12]
 8002c7e:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c80:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002c82:	4313      	orrs	r3, r2
 8002c84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002c86:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002c88:	4013      	ands	r3, r2
 8002c8a:	9304      	str	r3, [sp, #16]
 8002c8c:	9b04      	ldr	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c92:	2300      	movs	r3, #0
 8002c94:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pin = GPIO_PIN_All & (~(GPIO_PIN_13 | GPIO_PIN_14));
 8002c96:	4b1b      	ldr	r3, [pc, #108]	; (8002d04 <SystemApp_Init+0xd0>)
 8002c98:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c9a:	f002 f9cb 	bl	8005034 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 8002c9e:	4b1a      	ldr	r3, [pc, #104]	; (8002d08 <SystemApp_Init+0xd4>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ca0:	a905      	add	r1, sp, #20
 8002ca2:	481a      	ldr	r0, [pc, #104]	; (8002d0c <SystemApp_Init+0xd8>)
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 8002ca4:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ca6:	f002 f9c5 	bl	8005034 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002caa:	a905      	add	r1, sp, #20
 8002cac:	4818      	ldr	r0, [pc, #96]	; (8002d10 <SystemApp_Init+0xdc>)
 8002cae:	f002 f9c1 	bl	8005034 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002cb2:	a905      	add	r1, sp, #20
 8002cb4:	4817      	ldr	r0, [pc, #92]	; (8002d14 <SystemApp_Init+0xe0>)
 8002cb6:	f002 f9bd 	bl	8005034 <HAL_GPIO_Init>
  __HAL_RCC_GPIOH_CLK_DISABLE();
 8002cba:	2280      	movs	r2, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_DISABLE();
 8002cbc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002cbe:	43ab      	bics	r3, r5
 8002cc0:	62e3      	str	r3, [r4, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_DISABLE();
 8002cc2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002cc4:	43bb      	bics	r3, r7
 8002cc6:	62e3      	str	r3, [r4, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_DISABLE();
 8002cc8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002cca:	43b3      	bics	r3, r6
 8002ccc:	62e3      	str	r3, [r4, #44]	; 0x2c
  __HAL_RCC_GPIOH_CLK_DISABLE();
 8002cce:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002cd0:	4393      	bics	r3, r2
 8002cd2:	62e3      	str	r3, [r4, #44]	; 0x2c
  UTIL_ADV_TRACE_Init();
 8002cd4:	f00c f898 	bl	800ee08 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8002cd8:	480f      	ldr	r0, [pc, #60]	; (8002d18 <SystemApp_Init+0xe4>)
 8002cda:	f00c f8b7 	bl	800ee4c <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8002cde:	0028      	movs	r0, r5
 8002ce0:	f00c f8ba 	bl	800ee58 <UTIL_ADV_TRACE_SetVerboseLevel>
  SYS_InitMeasurement();
 8002ce4:	f7ff fb46 	bl	8002374 <SYS_InitMeasurement>
  Sx_Board_Bus_Init();
 8002ce8:	f001 fad0 	bl	800428c <SX1262DVK1CAS_RADIO_Bus_Init>
  Sx_Board_IoInit();
 8002cec:	f001 f990 	bl	8004010 <SX1262DVK1CAS_RADIO_IoInit>
  UTIL_LPM_Init();
 8002cf0:	f00b fbb8 	bl	800e464 <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8002cf4:	0029      	movs	r1, r5
 8002cf6:	0028      	movs	r0, r5
 8002cf8:	f00b fbd4 	bl	800e4a4 <UTIL_LPM_SetOffMode>
}
 8002cfc:	b00b      	add	sp, #44	; 0x2c
 8002cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d00:	40021000 	.word	0x40021000
 8002d04:	00009fff 	.word	0x00009fff
 8002d08:	0000ffff 	.word	0x0000ffff
 8002d0c:	50000400 	.word	0x50000400
 8002d10:	50000800 	.word	0x50000800
 8002d14:	50001c00 	.word	0x50001c00
 8002d18:	08002c05 	.word	0x08002c05

08002d1c <UTIL_SEQ_Idle>:
{
 8002d1c:	b510      	push	{r4, lr}
  UTIL_LPM_EnterLowPower();
 8002d1e:	f00b fbeb 	bl	800e4f8 <UTIL_LPM_EnterLowPower>
}
 8002d22:	bd10      	pop	{r4, pc}

08002d24 <GetBatteryLevel>:
{
 8002d24:	b513      	push	{r0, r1, r4, lr}
  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8002d26:	f7ff fb83 	bl	8002430 <SYS_GetBatteryLevel>
  batteryLevel = batteryLevelmV/100;
 8002d2a:	2164      	movs	r1, #100	; 0x64
 8002d2c:	f7fd fa12 	bl	8000154 <__udivsi3>
 8002d30:	b2c4      	uxtb	r4, r0
  APP_LOG(TS_ON, VLEVEL_M, "VDDA= %d\r\n", batteryLevel);
 8002d32:	2201      	movs	r2, #1
 8002d34:	2100      	movs	r1, #0
 8002d36:	4b03      	ldr	r3, [pc, #12]	; (8002d44 <GetBatteryLevel+0x20>)
 8002d38:	9400      	str	r4, [sp, #0]
 8002d3a:	2002      	movs	r0, #2
 8002d3c:	f00c f8d4 	bl	800eee8 <UTIL_ADV_TRACE_COND_FSend>
}
 8002d40:	0020      	movs	r0, r4
 8002d42:	bd16      	pop	{r1, r2, r4, pc}
 8002d44:	0800f2c5 	.word	0x0800f2c5

08002d48 <GetTemperatureLevel>:
}
 8002d48:	2000      	movs	r0, #0
 8002d4a:	4770      	bx	lr

08002d4c <GetUniqueId>:
void GetUniqueId(uint8_t *id){
 8002d4c:	b570      	push	{r4, r5, r6, lr}
 8002d4e:	1e04      	subs	r4, r0, #0
  if(id == NULL){
 8002d50:	d016      	beq.n	8002d80 <GetUniqueId+0x34>
  uid.words[0] = HAL_GetUIDw0();
 8002d52:	f001 fae5 	bl	8004320 <HAL_GetUIDw0>
 8002d56:	0005      	movs	r5, r0
  uid.words[1] = HAL_GetUIDw1();
 8002d58:	f001 fae8 	bl	800432c <HAL_GetUIDw1>
  uid.words[2] = HAL_GetUIDw2();
 8002d5c:	f001 faec 	bl	8004338 <HAL_GetUIDw2>
  id[0] = uid.words[0] >> 24;
 8002d60:	0e2b      	lsrs	r3, r5, #24
 8002d62:	7023      	strb	r3, [r4, #0]
  id[1] = uid.words[0] >> 16;
 8002d64:	0c2b      	lsrs	r3, r5, #16
 8002d66:	7063      	strb	r3, [r4, #1]
  id[2] = uid.words[0] >> 8;
 8002d68:	0a2b      	lsrs	r3, r5, #8
 8002d6a:	70a3      	strb	r3, [r4, #2]
  id[4] = devaddr >> 24;
 8002d6c:	4b05      	ldr	r3, [pc, #20]	; (8002d84 <GetUniqueId+0x38>)
  id[3] = uid.words[0];
 8002d6e:	70e5      	strb	r5, [r4, #3]
  id[4] = devaddr >> 24;
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	0e1a      	lsrs	r2, r3, #24
 8002d74:	7122      	strb	r2, [r4, #4]
  id[5] = devaddr >> 16;
 8002d76:	0c1a      	lsrs	r2, r3, #16
 8002d78:	7162      	strb	r2, [r4, #5]
  id[6] = devaddr >> 8;
 8002d7a:	0a1a      	lsrs	r2, r3, #8
 8002d7c:	71a2      	strb	r2, [r4, #6]
  id[7] = devaddr;
 8002d7e:	71e3      	strb	r3, [r4, #7]
}
 8002d80:	bd70      	pop	{r4, r5, r6, pc}
 8002d82:	46c0      	nop			; (mov r8, r8)
 8002d84:	20001500 	.word	0x20001500

08002d88 <SetDevAddr>:
	devaddr = daddr;
 8002d88:	4b01      	ldr	r3, [pc, #4]	; (8002d90 <SetDevAddr+0x8>)
 8002d8a:	6018      	str	r0, [r3, #0]
}
 8002d8c:	4770      	bx	lr
 8002d8e:	46c0      	nop			; (mov r8, r8)
 8002d90:	20001500 	.word	0x20001500

08002d94 <GetDevAddr>:
	return devaddr;
 8002d94:	4b01      	ldr	r3, [pc, #4]	; (8002d9c <GetDevAddr+0x8>)
 8002d96:	6818      	ldr	r0, [r3, #0]
}
 8002d98:	4770      	bx	lr
 8002d9a:	46c0      	nop			; (mov r8, r8)
 8002d9c:	20001500 	.word	0x20001500

08002da0 <UTIL_ADV_TRACE_PreSendHook>:
{
 8002da0:	b510      	push	{r4, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8002da2:	2101      	movs	r1, #1
 8002da4:	2004      	movs	r0, #4
 8002da6:	f00b fb67 	bl	800e478 <UTIL_LPM_SetStopMode>
}
 8002daa:	bd10      	pop	{r4, pc}

08002dac <UTIL_ADV_TRACE_PostSendHook>:
{
 8002dac:	b510      	push	{r4, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8002dae:	2100      	movs	r1, #0
 8002db0:	2004      	movs	r0, #4
 8002db2:	f00b fb61 	bl	800e478 <UTIL_LPM_SetStopMode>
}
 8002db6:	bd10      	pop	{r4, pc}

08002db8 <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8002db8:	2000      	movs	r0, #0
 8002dba:	4770      	bx	lr

08002dbc <HAL_GetTick>:
  * @brief Provide a tick value in millisecond measured using RTC
  * @note This function overwrites the __weak one from HAL
  * @retval tick value
  */
uint32_t HAL_GetTick(void)
{
 8002dbc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return RTC_IF_GetTimerValue();
 8002dbe:	f7ff fe09 	bl	80029d4 <RTC_IF_GetTimerValue>
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
}
 8002dc2:	bd10      	pop	{r4, pc}

08002dc4 <HAL_Delay>:
  * @brief This function provides delay (in ms)
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8002dc4:	b507      	push	{r0, r1, r2, lr}
 8002dc6:	9001      	str	r0, [sp, #4]
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  RTC_IF_DelayMs(Delay);   /* based on RTC */
 8002dc8:	9801      	ldr	r0, [sp, #4]
 8002dca:	f7ff fe11 	bl	80029f0 <RTC_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8002dce:	bd07      	pop	{r0, r1, r2, pc}

08002dd0 <OnP2PRxDone>:
}

/*
 * Callback de Recepcao P2P *nao usado
 */
static void OnP2PRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr){
 8002dd0:	b510      	push	{r4, lr}
  //APP_LOG(TS_ON, VLEVEL_L, "OnRxDone\n\r");
  //APP_LOG(TS_ON, VLEVEL_L,  "RssiValue=%d dBm, SnrValue=%d\n\r", rssi, snr);
  Radio.Sleep();
 8002dd2:	4b02      	ldr	r3, [pc, #8]	; (8002ddc <OnP2PRxDone+0xc>)
 8002dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd6:	4798      	blx	r3
}
 8002dd8:	bd10      	pop	{r4, pc}
 8002dda:	46c0      	nop			; (mov r8, r8)
 8002ddc:	0800fd8c 	.word	0x0800fd8c

08002de0 <OnP2PRxTimeout>:
}

/*
 * Callback para timeout de recepcao P2P *nao usado
 */
static void OnP2PRxTimeout(void){
 8002de0:	b510      	push	{r4, lr}
  //APP_LOG(TS_ON, VLEVEL_L,  "OnRxTimeout\n\r");
  Radio.Sleep();
 8002de2:	4b02      	ldr	r3, [pc, #8]	; (8002dec <OnP2PRxTimeout+0xc>)
 8002de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de6:	4798      	blx	r3
}
 8002de8:	bd10      	pop	{r4, pc}
 8002dea:	46c0      	nop			; (mov r8, r8)
 8002dec:	0800fd8c 	.word	0x0800fd8c

08002df0 <OnP2PRxError>:
 8002df0:	b510      	push	{r4, lr}
 8002df2:	f7ff fff5 	bl	8002de0 <OnP2PRxTimeout>
 8002df6:	bd10      	pop	{r4, pc}

08002df8 <OnTxData>:

/*
 * Callback para transmissao LoRaWAN finalizada
 */
static void OnTxData(LmHandlerTxParams_t *params){
	app.stt.lora_state = LORA_IDLE;
 8002df8:	2200      	movs	r2, #0
 8002dfa:	4b01      	ldr	r3, [pc, #4]	; (8002e00 <OnTxData+0x8>)
 8002dfc:	719a      	strb	r2, [r3, #6]
}
 8002dfe:	4770      	bx	lr
 8002e00:	20000038 	.word	0x20000038

08002e04 <OnJoinRequest>:
/*
 * Callback para Join LoRaWAN *nao usado
 */
static void OnJoinRequest(LmHandlerJoinParams_t *joinParams){

}
 8002e04:	4770      	bx	lr
	...

08002e08 <ReadInput4>:
void ReadInput4(void){
 8002e08:	b510      	push	{r4, lr}
	HAL_EXTI_ClearPending(&hApp_DIO_exti[4], EXTI_TRIGGER_RISING_FALLING);
 8002e0a:	2103      	movs	r1, #3
 8002e0c:	4801      	ldr	r0, [pc, #4]	; (8002e14 <ReadInput4+0xc>)
 8002e0e:	f001 ffbf 	bl	8004d90 <HAL_EXTI_ClearPending>
}
 8002e12:	bd10      	pop	{r4, pc}
 8002e14:	20001554 	.word	0x20001554

08002e18 <ReadInput1>:
	flagInterrupt = 1;
 8002e18:	2201      	movs	r2, #1
void ReadInput1(void){
 8002e1a:	b510      	push	{r4, lr}
	flagInterrupt = 1;
 8002e1c:	4b03      	ldr	r3, [pc, #12]	; (8002e2c <ReadInput1+0x14>)
	HAL_EXTI_ClearPending(&hApp_DIO_exti[1], EXTI_TRIGGER_RISING_FALLING);
 8002e1e:	2103      	movs	r1, #3
 8002e20:	4803      	ldr	r0, [pc, #12]	; (8002e30 <ReadInput1+0x18>)
	flagInterrupt = 1;
 8002e22:	601a      	str	r2, [r3, #0]
	HAL_EXTI_ClearPending(&hApp_DIO_exti[1], EXTI_TRIGGER_RISING_FALLING);
 8002e24:	f001 ffb4 	bl	8004d90 <HAL_EXTI_ClearPending>
}
 8002e28:	bd10      	pop	{r4, pc}
 8002e2a:	46c0      	nop			; (mov r8, r8)
 8002e2c:	20000310 	.word	0x20000310
 8002e30:	2000153c 	.word	0x2000153c

08002e34 <OnP2PTxTimeout>:
	APP_LOG(TS_ON, VLEVEL_L,  "OnTxTimeout\n\r");
 8002e34:	2201      	movs	r2, #1
static void OnP2PTxTimeout(void){
 8002e36:	b510      	push	{r4, lr}
	APP_LOG(TS_ON, VLEVEL_L,  "OnTxTimeout\n\r");
 8002e38:	0010      	movs	r0, r2
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	4b04      	ldr	r3, [pc, #16]	; (8002e50 <OnP2PTxTimeout+0x1c>)
 8002e3e:	f00c f853 	bl	800eee8 <UTIL_ADV_TRACE_COND_FSend>
	Radio.Sleep();
 8002e42:	4b04      	ldr	r3, [pc, #16]	; (8002e54 <OnP2PTxTimeout+0x20>)
 8002e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e46:	4798      	blx	r3
	app.stt.lora_state = LORA_IDLE;
 8002e48:	2200      	movs	r2, #0
 8002e4a:	4b03      	ldr	r3, [pc, #12]	; (8002e58 <OnP2PTxTimeout+0x24>)
 8002e4c:	719a      	strb	r2, [r3, #6]
}
 8002e4e:	bd10      	pop	{r4, pc}
 8002e50:	0800f2d0 	.word	0x0800f2d0
 8002e54:	0800fd8c 	.word	0x0800fd8c
 8002e58:	20000038 	.word	0x20000038

08002e5c <OnRxData>:
	APP_LOG(TS_OFF, VLEVEL_L, "Downlink recebido. Rssi: %d\r\n", params->Rssi);
 8002e5c:	2303      	movs	r3, #3
static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params){
 8002e5e:	b507      	push	{r0, r1, r2, lr}
	APP_LOG(TS_OFF, VLEVEL_L, "Downlink recebido. Rssi: %d\r\n", params->Rssi);
 8002e60:	2200      	movs	r2, #0
 8002e62:	56cb      	ldrsb	r3, [r1, r3]
 8002e64:	2001      	movs	r0, #1
 8002e66:	9300      	str	r3, [sp, #0]
 8002e68:	0011      	movs	r1, r2
 8002e6a:	4b02      	ldr	r3, [pc, #8]	; (8002e74 <OnRxData+0x18>)
 8002e6c:	f00c f83c 	bl	800eee8 <UTIL_ADV_TRACE_COND_FSend>
}
 8002e70:	bd07      	pop	{r0, r1, r2, pc}
 8002e72:	46c0      	nop			; (mov r8, r8)
 8002e74:	0800f2de 	.word	0x0800f2de

08002e78 <OnMacProcessNotify>:

/*
 * Callback para interrupcoes LoRaWAN
 */
static void OnMacProcessNotify(void){
 8002e78:	b510      	push	{r4, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	2001      	movs	r0, #1
 8002e7e:	f00b fd3b 	bl	800e8f8 <UTIL_SEQ_SetTask>
}
 8002e82:	bd10      	pop	{r4, pc}

08002e84 <OnP2PTxDone>:
static void OnP2PTxDone(void){
 8002e84:	b537      	push	{r0, r1, r2, r4, r5, lr}
  APP_LOG(TS_ON, VLEVEL_L, "OnTxDone\n\r");
 8002e86:	2201      	movs	r2, #1
 8002e88:	4b0f      	ldr	r3, [pc, #60]	; (8002ec8 <OnP2PTxDone+0x44>)
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	0010      	movs	r0, r2
 8002e8e:	f00c f82b 	bl	800eee8 <UTIL_ADV_TRACE_COND_FSend>
  app.stt.tx_cnt++;
 8002e92:	4c0e      	ldr	r4, [pc, #56]	; (8002ecc <OnP2PTxDone+0x48>)
 8002e94:	4d0e      	ldr	r5, [pc, #56]	; (8002ed0 <OnP2PTxDone+0x4c>)
 8002e96:	8863      	ldrh	r3, [r4, #2]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	8063      	strh	r3, [r4, #2]
  if(app.stt.tx_cnt >= SEND_TIMES){
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d005      	beq.n	8002eae <OnP2PTxDone+0x2a>
	Radio.Sleep();
 8002ea2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8002ea4:	9301      	str	r3, [sp, #4]
 8002ea6:	4798      	blx	r3
	app.stt.lora_state = LORA_IDLE;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	71a3      	strb	r3, [r4, #6]
}
 8002eac:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
	Radio.SetChannel(P2P_RF_FREQUENCY);
 8002eae:	68eb      	ldr	r3, [r5, #12]
 8002eb0:	4808      	ldr	r0, [pc, #32]	; (8002ed4 <OnP2PTxDone+0x50>)
 8002eb2:	9301      	str	r3, [sp, #4]
 8002eb4:	4798      	blx	r3
	Radio.Send(&LoRaBuffer[2], LoRaBufferSize-2);
 8002eb6:	4b08      	ldr	r3, [pc, #32]	; (8002ed8 <OnP2PTxDone+0x54>)
 8002eb8:	4808      	ldr	r0, [pc, #32]	; (8002edc <OnP2PTxDone+0x58>)
 8002eba:	8819      	ldrh	r1, [r3, #0]
 8002ebc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8002ebe:	3902      	subs	r1, #2
 8002ec0:	b2c9      	uxtb	r1, r1
 8002ec2:	9301      	str	r3, [sp, #4]
 8002ec4:	4798      	blx	r3
}
 8002ec6:	e7f1      	b.n	8002eac <OnP2PTxDone+0x28>
 8002ec8:	0800f2fc 	.word	0x0800f2fc
 8002ecc:	20000038 	.word	0x20000038
 8002ed0:	0800fd8c 	.word	0x0800fd8c
 8002ed4:	3689cac0 	.word	0x3689cac0
 8002ed8:	20000036 	.word	0x20000036
 8002edc:	2000155e 	.word	0x2000155e

08002ee0 <SendTxData>:
static void SendTxData(void){
 8002ee0:	b507      	push	{r0, r1, r2, lr}
	UTIL_TIMER_Time_t nextTxIn = 0;
 8002ee2:	2100      	movs	r1, #0
	if (LORAMAC_HANDLER_SUCCESS == LmHandlerSend(&AppData, LORAWAN_DEFAULT_CONFIRMED_MSG_STATE, &nextTxIn, false)){
 8002ee4:	4806      	ldr	r0, [pc, #24]	; (8002f00 <SendTxData+0x20>)
 8002ee6:	000b      	movs	r3, r1
 8002ee8:	aa01      	add	r2, sp, #4
	UTIL_TIMER_Time_t nextTxIn = 0;
 8002eea:	9101      	str	r1, [sp, #4]
	if (LORAMAC_HANDLER_SUCCESS == LmHandlerSend(&AppData, LORAWAN_DEFAULT_CONFIRMED_MSG_STATE, &nextTxIn, false)){
 8002eec:	f005 fcbe 	bl	800886c <LmHandlerSend>
 8002ef0:	1e01      	subs	r1, r0, #0
 8002ef2:	d104      	bne.n	8002efe <SendTxData+0x1e>
		APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	4b03      	ldr	r3, [pc, #12]	; (8002f04 <SendTxData+0x24>)
 8002ef8:	0010      	movs	r0, r2
 8002efa:	f00b fff5 	bl	800eee8 <UTIL_ADV_TRACE_COND_FSend>
}
 8002efe:	bd07      	pop	{r0, r1, r2, pc}
 8002f00:	20000000 	.word	0x20000000
 8002f04:	0800f307 	.word	0x0800f307

08002f08 <FXOS8700CQReadAccelMagnData.constprop.0>:
	HAL_I2C_Mem_Read(I2Cx, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_STATUS, 1, &Buffer, FXOS8700CQ_READ_LEN, i2c_timeout);
 8002f08:	23fa      	movs	r3, #250	; 0xfa
static void FXOS8700CQReadAccelMagnData(I2C_HandleTypeDef *I2Cx)
 8002f0a:	b510      	push	{r4, lr}
	HAL_I2C_Mem_Read(I2Cx, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_STATUS, 1, &Buffer, FXOS8700CQ_READ_LEN, i2c_timeout);
 8002f0c:	005b      	lsls	r3, r3, #1
static void FXOS8700CQReadAccelMagnData(I2C_HandleTypeDef *I2Cx)
 8002f0e:	b088      	sub	sp, #32
	HAL_I2C_Mem_Read(I2Cx, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_STATUS, 1, &Buffer, FXOS8700CQ_READ_LEN, i2c_timeout);
 8002f10:	9302      	str	r3, [sp, #8]
 8002f12:	3be8      	subs	r3, #232	; 0xe8
 8002f14:	ac04      	add	r4, sp, #16
 8002f16:	3bff      	subs	r3, #255	; 0xff
 8002f18:	9301      	str	r3, [sp, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	213c      	movs	r1, #60	; 0x3c
 8002f1e:	9400      	str	r4, [sp, #0]
 8002f20:	3b0c      	subs	r3, #12
 8002f22:	480a      	ldr	r0, [pc, #40]	; (8002f4c <FXOS8700CQReadAccelMagnData.constprop.0+0x44>)
 8002f24:	f002 fc2a 	bl	800577c <HAL_I2C_Mem_Read>
	MAG.x = (Buffer[7] << 8) | Buffer[8];
 8002f28:	79e1      	ldrb	r1, [r4, #7]
 8002f2a:	7a22      	ldrb	r2, [r4, #8]
 8002f2c:	4b08      	ldr	r3, [pc, #32]	; (8002f50 <FXOS8700CQReadAccelMagnData.constprop.0+0x48>)
 8002f2e:	0209      	lsls	r1, r1, #8
 8002f30:	430a      	orrs	r2, r1
 8002f32:	801a      	strh	r2, [r3, #0]
	MAG.y = (Buffer[9] << 8) | Buffer[10];
 8002f34:	7a61      	ldrb	r1, [r4, #9]
 8002f36:	7aa2      	ldrb	r2, [r4, #10]
 8002f38:	0209      	lsls	r1, r1, #8
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	805a      	strh	r2, [r3, #2]
	MAG.z = (Buffer[11] << 8) | Buffer[12];
 8002f3e:	7ae1      	ldrb	r1, [r4, #11]
 8002f40:	7b22      	ldrb	r2, [r4, #12]
 8002f42:	0209      	lsls	r1, r1, #8
 8002f44:	430a      	orrs	r2, r1
 8002f46:	809a      	strh	r2, [r3, #4]
}
 8002f48:	b008      	add	sp, #32
 8002f4a:	bd10      	pop	{r4, pc}
 8002f4c:	20000314 	.word	0x20000314
 8002f50:	200002e6 	.word	0x200002e6

08002f54 <FXOS8700CQInit.constprop.0>:
static uint8_t FXOS8700CQInit(I2C_HandleTypeDef *I2Cx)
 8002f54:	b5f0      	push	{r4, r5, r6, r7, lr}
	HAL_I2C_Mem_Read(I2Cx, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_WHOAMI, 1, &check, 1, i2c_timeout);
 8002f56:	27fa      	movs	r7, #250	; 0xfa
 8002f58:	2516      	movs	r5, #22
 8002f5a:	2401      	movs	r4, #1
static uint8_t FXOS8700CQInit(I2C_HandleTypeDef *I2Cx)
 8002f5c:	b087      	sub	sp, #28
	HAL_I2C_Mem_Read(I2Cx, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_WHOAMI, 1, &check, 1, i2c_timeout);
 8002f5e:	4e25      	ldr	r6, [pc, #148]	; (8002ff4 <FXOS8700CQInit.constprop.0+0xa0>)
 8002f60:	446d      	add	r5, sp
 8002f62:	007f      	lsls	r7, r7, #1
 8002f64:	0023      	movs	r3, r4
 8002f66:	220d      	movs	r2, #13
 8002f68:	213c      	movs	r1, #60	; 0x3c
 8002f6a:	0030      	movs	r0, r6
 8002f6c:	9702      	str	r7, [sp, #8]
 8002f6e:	9401      	str	r4, [sp, #4]
 8002f70:	9500      	str	r5, [sp, #0]
 8002f72:	f002 fc03 	bl	800577c <HAL_I2C_Mem_Read>
	if(check == FXOS8700CQ_WHOAMI_VAL)
 8002f76:	782b      	ldrb	r3, [r5, #0]
 8002f78:	2bc7      	cmp	r3, #199	; 0xc7
 8002f7a:	d138      	bne.n	8002fee <FXOS8700CQInit.constprop.0+0x9a>
		databyte = 0x00;
 8002f7c:	2517      	movs	r5, #23
 8002f7e:	2300      	movs	r3, #0
 8002f80:	446d      	add	r5, sp
 8002f82:	702b      	strb	r3, [r5, #0]
		HAL_I2C_Mem_Write(I2Cx, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_CTRL_REG1, 1, &databyte, 1, i2c_timeout);
 8002f84:	222a      	movs	r2, #42	; 0x2a
 8002f86:	0023      	movs	r3, r4
 8002f88:	213c      	movs	r1, #60	; 0x3c
 8002f8a:	9401      	str	r4, [sp, #4]
 8002f8c:	0030      	movs	r0, r6
 8002f8e:	9702      	str	r7, [sp, #8]
 8002f90:	9500      	str	r5, [sp, #0]
 8002f92:	f002 fb15 	bl	80055c0 <HAL_I2C_Mem_Write>
		databyte = 0x1F;
 8002f96:	231f      	movs	r3, #31
		HAL_I2C_Mem_Write(I2Cx, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_M_CTRL_REG1, 1, &databyte, 1, i2c_timeout);
 8002f98:	225b      	movs	r2, #91	; 0x5b
		databyte = 0x1F;
 8002f9a:	702b      	strb	r3, [r5, #0]
		HAL_I2C_Mem_Write(I2Cx, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_M_CTRL_REG1, 1, &databyte, 1, i2c_timeout);
 8002f9c:	213c      	movs	r1, #60	; 0x3c
 8002f9e:	0023      	movs	r3, r4
 8002fa0:	9401      	str	r4, [sp, #4]
 8002fa2:	0030      	movs	r0, r6
 8002fa4:	9702      	str	r7, [sp, #8]
 8002fa6:	9500      	str	r5, [sp, #0]
 8002fa8:	f002 fb0a 	bl	80055c0 <HAL_I2C_Mem_Write>
		databyte = 0x20;
 8002fac:	2320      	movs	r3, #32
		HAL_I2C_Mem_Write(I2Cx, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_M_CTRL_REG2, 1, &databyte, 1, i2c_timeout);
 8002fae:	225c      	movs	r2, #92	; 0x5c
		databyte = 0x20;
 8002fb0:	702b      	strb	r3, [r5, #0]
		HAL_I2C_Mem_Write(I2Cx, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_M_CTRL_REG2, 1, &databyte, 1, i2c_timeout);
 8002fb2:	213c      	movs	r1, #60	; 0x3c
 8002fb4:	0023      	movs	r3, r4
 8002fb6:	9401      	str	r4, [sp, #4]
 8002fb8:	0030      	movs	r0, r6
 8002fba:	9702      	str	r7, [sp, #8]
 8002fbc:	9500      	str	r5, [sp, #0]
 8002fbe:	f002 faff 	bl	80055c0 <HAL_I2C_Mem_Write>
		databyte = 0x01;
 8002fc2:	702c      	strb	r4, [r5, #0]
		HAL_I2C_Mem_Write(I2Cx, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_XYZ_DATA_CFG, 1, &databyte, 1, i2c_timeout);
 8002fc4:	0023      	movs	r3, r4
 8002fc6:	220e      	movs	r2, #14
 8002fc8:	213c      	movs	r1, #60	; 0x3c
 8002fca:	9401      	str	r4, [sp, #4]
 8002fcc:	0030      	movs	r0, r6
 8002fce:	9702      	str	r7, [sp, #8]
 8002fd0:	9500      	str	r5, [sp, #0]
 8002fd2:	f002 faf5 	bl	80055c0 <HAL_I2C_Mem_Write>
		databyte =  0x0D;
 8002fd6:	230d      	movs	r3, #13
		HAL_I2C_Mem_Write(I2Cx, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_CTRL_REG1, 1, &databyte, 1, i2c_timeout);
 8002fd8:	222a      	movs	r2, #42	; 0x2a
		databyte =  0x0D;
 8002fda:	702b      	strb	r3, [r5, #0]
		HAL_I2C_Mem_Write(I2Cx, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_CTRL_REG1, 1, &databyte, 1, i2c_timeout);
 8002fdc:	213c      	movs	r1, #60	; 0x3c
 8002fde:	0023      	movs	r3, r4
 8002fe0:	9401      	str	r4, [sp, #4]
 8002fe2:	0030      	movs	r0, r6
 8002fe4:	9702      	str	r7, [sp, #8]
 8002fe6:	9500      	str	r5, [sp, #0]
 8002fe8:	f002 faea 	bl	80055c0 <HAL_I2C_Mem_Write>
	return ret;
 8002fec:	2400      	movs	r4, #0
}
 8002fee:	0020      	movs	r0, r4
 8002ff0:	b007      	add	sp, #28
 8002ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ff4:	20000314 	.word	0x20000314

08002ff8 <FXOS8700CQStandby>:
{
 8002ff8:	b5f0      	push	{r4, r5, r6, r7, lr}
	HAL_I2C_Mem_Read(I2Cx, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_CTRL_REG1, 1, &CTRL_REG1_Data, 1, i2c_timeout);
 8002ffa:	27fa      	movs	r7, #250	; 0xfa
 8002ffc:	2617      	movs	r6, #23
 8002ffe:	2401      	movs	r4, #1
{
 8003000:	0005      	movs	r5, r0
 8003002:	b087      	sub	sp, #28
	HAL_I2C_Mem_Read(I2Cx, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_CTRL_REG1, 1, &CTRL_REG1_Data, 1, i2c_timeout);
 8003004:	446e      	add	r6, sp
 8003006:	007f      	lsls	r7, r7, #1
 8003008:	0023      	movs	r3, r4
 800300a:	222a      	movs	r2, #42	; 0x2a
 800300c:	213c      	movs	r1, #60	; 0x3c
 800300e:	9702      	str	r7, [sp, #8]
 8003010:	9401      	str	r4, [sp, #4]
 8003012:	9600      	str	r6, [sp, #0]
 8003014:	f002 fbb2 	bl	800577c <HAL_I2C_Mem_Read>
	CTRL_REG1_Data = CTRL_REG1_Data & ~(0x01); // Limpar o bit Active 0x01
 8003018:	7833      	ldrb	r3, [r6, #0]
	HAL_I2C_Mem_Write(I2Cx, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_CTRL_REG1, 1, &CTRL_REG1_Data, 1, i2c_timeout);
 800301a:	222a      	movs	r2, #42	; 0x2a
	CTRL_REG1_Data = CTRL_REG1_Data & ~(0x01); // Limpar o bit Active 0x01
 800301c:	43a3      	bics	r3, r4
 800301e:	7033      	strb	r3, [r6, #0]
	HAL_I2C_Mem_Write(I2Cx, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_CTRL_REG1, 1, &CTRL_REG1_Data, 1, i2c_timeout);
 8003020:	213c      	movs	r1, #60	; 0x3c
 8003022:	0023      	movs	r3, r4
 8003024:	0028      	movs	r0, r5
 8003026:	9702      	str	r7, [sp, #8]
 8003028:	9401      	str	r4, [sp, #4]
 800302a:	9600      	str	r6, [sp, #0]
 800302c:	f002 fac8 	bl	80055c0 <HAL_I2C_Mem_Write>
}
 8003030:	b007      	add	sp, #28
 8003032:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003034 <FXOS8700CQActive>:
{
 8003034:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_I2C_Mem_Read(I2Cx, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_CTRL_REG1, 1, &CTRL_REG1_Data, 1, i2c_timeout);
 8003036:	27fa      	movs	r7, #250	; 0xfa
 8003038:	2617      	movs	r6, #23
 800303a:	2401      	movs	r4, #1
{
 800303c:	0005      	movs	r5, r0
 800303e:	b087      	sub	sp, #28
  HAL_I2C_Mem_Read(I2Cx, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_CTRL_REG1, 1, &CTRL_REG1_Data, 1, i2c_timeout);
 8003040:	446e      	add	r6, sp
 8003042:	007f      	lsls	r7, r7, #1
 8003044:	0023      	movs	r3, r4
 8003046:	222a      	movs	r2, #42	; 0x2a
 8003048:	213c      	movs	r1, #60	; 0x3c
 800304a:	9702      	str	r7, [sp, #8]
 800304c:	9401      	str	r4, [sp, #4]
 800304e:	9600      	str	r6, [sp, #0]
 8003050:	f002 fb94 	bl	800577c <HAL_I2C_Mem_Read>
  CTRL_REG1_Data = CTRL_REG1_Data | 0x01; // Limpar o bit Active
 8003054:	7833      	ldrb	r3, [r6, #0]
  HAL_I2C_Mem_Write(I2Cx, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_CTRL_REG1, 1, &CTRL_REG1_Data, 1, i2c_timeout);
 8003056:	222a      	movs	r2, #42	; 0x2a
  CTRL_REG1_Data = CTRL_REG1_Data | 0x01; // Limpar o bit Active
 8003058:	4323      	orrs	r3, r4
 800305a:	7033      	strb	r3, [r6, #0]
  HAL_I2C_Mem_Write(I2Cx, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_CTRL_REG1, 1, &CTRL_REG1_Data, 1, i2c_timeout);
 800305c:	213c      	movs	r1, #60	; 0x3c
 800305e:	0023      	movs	r3, r4
 8003060:	0028      	movs	r0, r5
 8003062:	9702      	str	r7, [sp, #8]
 8003064:	9401      	str	r4, [sp, #4]
 8003066:	9600      	str	r6, [sp, #0]
 8003068:	f002 faaa 	bl	80055c0 <HAL_I2C_Mem_Write>
}
 800306c:	b007      	add	sp, #28
 800306e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003070 <FXOS8700CQReset>:
{
 8003070:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t value = 0x40;
 8003072:	2617      	movs	r6, #23
	HAL_I2C_Mem_Write(I2Cx, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_CTRL_REG2, 1, &value, 1, i2c_timeout);
 8003074:	27fa      	movs	r7, #250	; 0xfa
 8003076:	2501      	movs	r5, #1
	uint8_t value = 0x40;
 8003078:	2340      	movs	r3, #64	; 0x40
{
 800307a:	0004      	movs	r4, r0
 800307c:	b087      	sub	sp, #28
	uint8_t value = 0x40;
 800307e:	446e      	add	r6, sp
	HAL_I2C_Mem_Write(I2Cx, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_CTRL_REG2, 1, &value, 1, i2c_timeout);
 8003080:	007f      	lsls	r7, r7, #1
	uint8_t value = 0x40;
 8003082:	7033      	strb	r3, [r6, #0]
	HAL_I2C_Mem_Write(I2Cx, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_CTRL_REG2, 1, &value, 1, i2c_timeout);
 8003084:	222b      	movs	r2, #43	; 0x2b
 8003086:	002b      	movs	r3, r5
 8003088:	213c      	movs	r1, #60	; 0x3c
 800308a:	9702      	str	r7, [sp, #8]
 800308c:	9501      	str	r5, [sp, #4]
 800308e:	9600      	str	r6, [sp, #0]
 8003090:	f002 fa96 	bl	80055c0 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(I2Cx, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_M_CTRL_REG2, 1, &value, 1, i2c_timeout);
 8003094:	002b      	movs	r3, r5
 8003096:	225c      	movs	r2, #92	; 0x5c
 8003098:	213c      	movs	r1, #60	; 0x3c
 800309a:	0020      	movs	r0, r4
 800309c:	9702      	str	r7, [sp, #8]
 800309e:	9501      	str	r5, [sp, #4]
 80030a0:	9600      	str	r6, [sp, #0]
 80030a2:	f002 fa8d 	bl	80055c0 <HAL_I2C_Mem_Write>
}
 80030a6:	b007      	add	sp, #28
 80030a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080030ac <FXOS8700CQInitSleep.constprop.0>:
static uint8_t FXOS8700CQInitSleep(I2C_HandleTypeDef *I2Cx, int threshold, uint8_t type)
 80030ac:	b5f0      	push	{r4, r5, r6, r7, lr}
	FXOS8700CQReset(I2Cx);
 80030ae:	4f56      	ldr	r7, [pc, #344]	; (8003208 <FXOS8700CQInitSleep.constprop.0+0x15c>)
static uint8_t FXOS8700CQInitSleep(I2C_HandleTypeDef *I2Cx, int threshold, uint8_t type)
 80030b0:	b089      	sub	sp, #36	; 0x24
 80030b2:	0006      	movs	r6, r0
	FXOS8700CQReset(I2Cx);
 80030b4:	0038      	movs	r0, r7
static uint8_t FXOS8700CQInitSleep(I2C_HandleTypeDef *I2Cx, int threshold, uint8_t type)
 80030b6:	9105      	str	r1, [sp, #20]
	FXOS8700CQReset(I2Cx);
 80030b8:	f7ff ffda 	bl	8003070 <FXOS8700CQReset>
	HAL_I2C_Mem_Read(I2Cx, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_WHOAMI, 1, &check, 1, i2c_timeout);
 80030bc:	23fa      	movs	r3, #250	; 0xfa
 80030be:	2416      	movs	r4, #22
 80030c0:	2501      	movs	r5, #1
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	9302      	str	r3, [sp, #8]
 80030c6:	ab02      	add	r3, sp, #8
 80030c8:	18e4      	adds	r4, r4, r3
 80030ca:	220d      	movs	r2, #13
 80030cc:	002b      	movs	r3, r5
 80030ce:	213c      	movs	r1, #60	; 0x3c
 80030d0:	0038      	movs	r0, r7
 80030d2:	9501      	str	r5, [sp, #4]
 80030d4:	9400      	str	r4, [sp, #0]
 80030d6:	f002 fb51 	bl	800577c <HAL_I2C_Mem_Read>
	if(check == FXOS8700CQ_WHOAMI_VAL)
 80030da:	7823      	ldrb	r3, [r4, #0]
	uint8_t ret = 1;
 80030dc:	0028      	movs	r0, r5
	if(check == FXOS8700CQ_WHOAMI_VAL)
 80030de:	2bc7      	cmp	r3, #199	; 0xc7
 80030e0:	d000      	beq.n	80030e4 <FXOS8700CQInitSleep.constprop.0+0x38>
 80030e2:	e08f      	b.n	8003204 <FXOS8700CQInitSleep.constprop.0+0x158>
		databyte = HighByteThreshold; //MSB de 1000
 80030e4:	2417      	movs	r4, #23
		FXOS8700CQStandby(I2Cx);
 80030e6:	0038      	movs	r0, r7
 80030e8:	f7ff ff86 	bl	8002ff8 <FXOS8700CQStandby>
		HAL_Delay(1);
 80030ec:	0028      	movs	r0, r5
 80030ee:	f7ff fe69 	bl	8002dc4 <HAL_Delay>
		databyte = HighByteThreshold; //MSB de 1000
 80030f2:	ab02      	add	r3, sp, #8
 80030f4:	18e4      	adds	r4, r4, r3
		HAL_I2C_Mem_Write(I2Cx, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_INTERRUPT_X_MSB_REG, 1, &databyte, 1, i2c_timeout);
 80030f6:	23fa      	movs	r3, #250	; 0xfa
	uint8_t HighByteThreshold = (uint8_t)((threshold >> 8) & 0xFF);
 80030f8:	1236      	asrs	r6, r6, #8
 80030fa:	b2f6      	uxtb	r6, r6
		HAL_I2C_Mem_Write(I2Cx, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_INTERRUPT_X_MSB_REG, 1, &databyte, 1, i2c_timeout);
 80030fc:	005b      	lsls	r3, r3, #1
		databyte = HighByteThreshold; //MSB de 1000
 80030fe:	7026      	strb	r6, [r4, #0]
		HAL_I2C_Mem_Write(I2Cx, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_INTERRUPT_X_MSB_REG, 1, &databyte, 1, i2c_timeout);
 8003100:	2254      	movs	r2, #84	; 0x54
 8003102:	213c      	movs	r1, #60	; 0x3c
 8003104:	9302      	str	r3, [sp, #8]
 8003106:	0038      	movs	r0, r7
 8003108:	002b      	movs	r3, r5
 800310a:	9501      	str	r5, [sp, #4]
 800310c:	9400      	str	r4, [sp, #0]
 800310e:	f002 fa57 	bl	80055c0 <HAL_I2C_Mem_Write>
		HAL_I2C_Mem_Write(I2Cx, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_INTERRUPT_X_LSB_REG, 1, &databyte, 1, i2c_timeout);
 8003112:	23fa      	movs	r3, #250	; 0xfa
 8003114:	005b      	lsls	r3, r3, #1
		databyte = LowByteThreshold; //LSB de 1000
 8003116:	7026      	strb	r6, [r4, #0]
		HAL_I2C_Mem_Write(I2Cx, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_INTERRUPT_X_LSB_REG, 1, &databyte, 1, i2c_timeout);
 8003118:	2255      	movs	r2, #85	; 0x55
 800311a:	9302      	str	r3, [sp, #8]
 800311c:	213c      	movs	r1, #60	; 0x3c
 800311e:	002b      	movs	r3, r5
 8003120:	0038      	movs	r0, r7
 8003122:	9501      	str	r5, [sp, #4]
 8003124:	9400      	str	r4, [sp, #0]
 8003126:	f002 fa4b 	bl	80055c0 <HAL_I2C_Mem_Write>
		if(type == INTERRUPT_MAIOR_QUE)
 800312a:	9a05      	ldr	r2, [sp, #20]
			databyte = 0xCF; //Valor maior que -> 0xCF. Valor menor que 0x8F
 800312c:	23cf      	movs	r3, #207	; 0xcf
		if(type == INTERRUPT_MAIOR_QUE)
 800312e:	2a06      	cmp	r2, #6
 8003130:	d000      	beq.n	8003134 <FXOS8700CQInitSleep.constprop.0+0x88>
			databyte = 0x8F; //Valor maior que -> 0xCF. Valor menor que 0x8F
 8003132:	3b40      	subs	r3, #64	; 0x40
		HAL_I2C_Mem_Write(I2Cx, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_THRESHOLD_CFG_REG, 1, &databyte, 1, i2c_timeout);
 8003134:	27fa      	movs	r7, #250	; 0xfa
 8003136:	2501      	movs	r5, #1
 8003138:	4e33      	ldr	r6, [pc, #204]	; (8003208 <FXOS8700CQInitSleep.constprop.0+0x15c>)
 800313a:	007f      	lsls	r7, r7, #1
 800313c:	7023      	strb	r3, [r4, #0]
 800313e:	2252      	movs	r2, #82	; 0x52
 8003140:	002b      	movs	r3, r5
 8003142:	213c      	movs	r1, #60	; 0x3c
 8003144:	0030      	movs	r0, r6
 8003146:	9702      	str	r7, [sp, #8]
 8003148:	9501      	str	r5, [sp, #4]
 800314a:	9400      	str	r4, [sp, #0]
 800314c:	f002 fa38 	bl	80055c0 <HAL_I2C_Mem_Write>
		databyte = 0x01; //0x0D (1040ms)//0x01; 80ms//Original 0x0A (800 ms)
 8003150:	7025      	strb	r5, [r4, #0]
		HAL_I2C_Mem_Write(I2Cx, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_THRESHOLD_DBC_COUNTER_REG, 1, &databyte, 1, i2c_timeout);
 8003152:	002b      	movs	r3, r5
 8003154:	225a      	movs	r2, #90	; 0x5a
 8003156:	213c      	movs	r1, #60	; 0x3c
 8003158:	0030      	movs	r0, r6
 800315a:	9702      	str	r7, [sp, #8]
 800315c:	9501      	str	r5, [sp, #4]
 800315e:	9400      	str	r4, [sp, #0]
 8003160:	f002 fa2e 	bl	80055c0 <HAL_I2C_Mem_Write>
		databyte = 0x01;//Original -> 0x1D
 8003164:	7025      	strb	r5, [r4, #0]
		HAL_I2C_Mem_Write(I2Cx, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_M_CTRL_REG1, 1, &databyte, 1, i2c_timeout);
 8003166:	002b      	movs	r3, r5
 8003168:	225b      	movs	r2, #91	; 0x5b
 800316a:	213c      	movs	r1, #60	; 0x3c
 800316c:	0030      	movs	r0, r6
 800316e:	9702      	str	r7, [sp, #8]
 8003170:	9501      	str	r5, [sp, #4]
 8003172:	9400      	str	r4, [sp, #0]
 8003174:	f002 fa24 	bl	80055c0 <HAL_I2C_Mem_Write>
		databyte = 0x00;
 8003178:	2300      	movs	r3, #0
		HAL_I2C_Mem_Write(I2Cx, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_CTRL_REG3, 1, &databyte, 1, i2c_timeout);
 800317a:	222c      	movs	r2, #44	; 0x2c
		databyte = 0x00;
 800317c:	7023      	strb	r3, [r4, #0]
		HAL_I2C_Mem_Write(I2Cx, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_CTRL_REG3, 1, &databyte, 1, i2c_timeout);
 800317e:	213c      	movs	r1, #60	; 0x3c
 8003180:	002b      	movs	r3, r5
 8003182:	0030      	movs	r0, r6
 8003184:	9702      	str	r7, [sp, #8]
 8003186:	9501      	str	r5, [sp, #4]
 8003188:	9400      	str	r4, [sp, #0]
 800318a:	f002 fa19 	bl	80055c0 <HAL_I2C_Mem_Write>
		databyte = 0x04;
 800318e:	2304      	movs	r3, #4
		HAL_I2C_Mem_Write(I2Cx, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_CTRL_REG2, 1, &databyte, 1, i2c_timeout);
 8003190:	222b      	movs	r2, #43	; 0x2b
		databyte = 0x04;
 8003192:	7023      	strb	r3, [r4, #0]
		HAL_I2C_Mem_Write(I2Cx, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_CTRL_REG2, 1, &databyte, 1, i2c_timeout);
 8003194:	213c      	movs	r1, #60	; 0x3c
 8003196:	002b      	movs	r3, r5
 8003198:	0030      	movs	r0, r6
 800319a:	9702      	str	r7, [sp, #8]
 800319c:	9501      	str	r5, [sp, #4]
 800319e:	9400      	str	r4, [sp, #0]
 80031a0:	f002 fa0e 	bl	80055c0 <HAL_I2C_Mem_Write>
		databyte = 0x03;//0x03; (1s)//0x5E; (20s)//Original 0x06; ->Faz dormir depois de y ssegundos calculados conforme: x = y * 0.32s
 80031a4:	2303      	movs	r3, #3
		HAL_I2C_Mem_Write(I2Cx, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_ASLP_COUNT_REG, 1, &databyte, 1, i2c_timeout);
 80031a6:	2229      	movs	r2, #41	; 0x29
		databyte = 0x03;//0x03; (1s)//0x5E; (20s)//Original 0x06; ->Faz dormir depois de y ssegundos calculados conforme: x = y * 0.32s
 80031a8:	7023      	strb	r3, [r4, #0]
		HAL_I2C_Mem_Write(I2Cx, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_ASLP_COUNT_REG, 1, &databyte, 1, i2c_timeout);
 80031aa:	213c      	movs	r1, #60	; 0x3c
 80031ac:	002b      	movs	r3, r5
 80031ae:	0030      	movs	r0, r6
 80031b0:	9702      	str	r7, [sp, #8]
 80031b2:	9501      	str	r5, [sp, #4]
 80031b4:	9400      	str	r4, [sp, #0]
 80031b6:	f002 fa03 	bl	80055c0 <HAL_I2C_Mem_Write>
		databyte = 0x80;
 80031ba:	2380      	movs	r3, #128	; 0x80
		HAL_I2C_Mem_Write(I2Cx, FXOS8700CQ_SLAVE_ADDR << 1,FXOS8700CQ_M_CTRL_REG4, 1, &databyte, 1, i2c_timeout);
 80031bc:	222d      	movs	r2, #45	; 0x2d
		databyte = 0x80;
 80031be:	7023      	strb	r3, [r4, #0]
		HAL_I2C_Mem_Write(I2Cx, FXOS8700CQ_SLAVE_ADDR << 1,FXOS8700CQ_M_CTRL_REG4, 1, &databyte, 1, i2c_timeout);
 80031c0:	213c      	movs	r1, #60	; 0x3c
 80031c2:	002b      	movs	r3, r5
 80031c4:	0030      	movs	r0, r6
 80031c6:	9702      	str	r7, [sp, #8]
 80031c8:	9501      	str	r5, [sp, #4]
 80031ca:	9400      	str	r4, [sp, #0]
 80031cc:	f002 f9f8 	bl	80055c0 <HAL_I2C_Mem_Write>
		databyte = 0x80;
 80031d0:	2380      	movs	r3, #128	; 0x80
		HAL_I2C_Mem_Write(I2Cx, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_M_CTRL_REG5, 1, &databyte, 1, i2c_timeout);
 80031d2:	222e      	movs	r2, #46	; 0x2e
		databyte = 0x80;
 80031d4:	7023      	strb	r3, [r4, #0]
		HAL_I2C_Mem_Write(I2Cx, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_M_CTRL_REG5, 1, &databyte, 1, i2c_timeout);
 80031d6:	213c      	movs	r1, #60	; 0x3c
 80031d8:	002b      	movs	r3, r5
 80031da:	0030      	movs	r0, r6
 80031dc:	9702      	str	r7, [sp, #8]
 80031de:	9501      	str	r5, [sp, #4]
 80031e0:	9400      	str	r4, [sp, #0]
 80031e2:	f002 f9ed 	bl	80055c0 <HAL_I2C_Mem_Write>
		databyte = 0xA9;//0xF9 (1,5Hz normal e 1,5Hz sleep)//0xA9; (12,5Hz normal e 6,25 Hz sleep)//Original 0x99; (6,25Hz) //Original 0x19; (50Hz)
 80031e6:	23a9      	movs	r3, #169	; 0xa9
		HAL_I2C_Mem_Write(I2Cx, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_CTRL_REG1, 1, &databyte, 1, i2c_timeout);
 80031e8:	222a      	movs	r2, #42	; 0x2a
		databyte = 0xA9;//0xF9 (1,5Hz normal e 1,5Hz sleep)//0xA9; (12,5Hz normal e 6,25 Hz sleep)//Original 0x99; (6,25Hz) //Original 0x19; (50Hz)
 80031ea:	7023      	strb	r3, [r4, #0]
		HAL_I2C_Mem_Write(I2Cx, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_CTRL_REG1, 1, &databyte, 1, i2c_timeout);
 80031ec:	213c      	movs	r1, #60	; 0x3c
 80031ee:	002b      	movs	r3, r5
 80031f0:	0030      	movs	r0, r6
 80031f2:	9702      	str	r7, [sp, #8]
 80031f4:	9501      	str	r5, [sp, #4]
 80031f6:	9400      	str	r4, [sp, #0]
 80031f8:	f002 f9e2 	bl	80055c0 <HAL_I2C_Mem_Write>
		FXOS8700CQActive(I2Cx);
 80031fc:	0030      	movs	r0, r6
 80031fe:	f7ff ff19 	bl	8003034 <FXOS8700CQActive>
		ret = 0;
 8003202:	2000      	movs	r0, #0
}
 8003204:	b009      	add	sp, #36	; 0x24
 8003206:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003208:	20000314 	.word	0x20000314

0800320c <FXOS8700CQCalibrate>:
{
 800320c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	FXOS8700CQReset(&hi2c1);
 800320e:	4c1a      	ldr	r4, [pc, #104]	; (8003278 <FXOS8700CQCalibrate+0x6c>)
 8003210:	0020      	movs	r0, r4
 8003212:	f7ff ff2d 	bl	8003070 <FXOS8700CQReset>
	FXOS8700CQStandby(&hi2c1);
 8003216:	0020      	movs	r0, r4
 8003218:	f7ff feee 	bl	8002ff8 <FXOS8700CQStandby>
	if(FXOS8700CQInit(&hi2c1) != HAL_OK){
 800321c:	f7ff fe9a 	bl	8002f54 <FXOS8700CQInit.constprop.0>
 8003220:	2800      	cmp	r0, #0
 8003222:	d005      	beq.n	8003230 <FXOS8700CQCalibrate+0x24>
		FXOS8700CQReset(&hi2c1);
 8003224:	0020      	movs	r0, r4
 8003226:	f7ff ff23 	bl	8003070 <FXOS8700CQReset>
		FXOS8700CQStandby(&hi2c1);
 800322a:	0020      	movs	r0, r4
 800322c:	f7ff fee4 	bl	8002ff8 <FXOS8700CQStandby>
	FXOS8700CQActive(&hi2c1);
 8003230:	0020      	movs	r0, r4
 8003232:	f7ff feff 	bl	8003034 <FXOS8700CQActive>
 8003236:	240a      	movs	r4, #10
	int calibrate=0;
 8003238:	2500      	movs	r5, #0
		HAL_Delay(1);
 800323a:	2001      	movs	r0, #1
 800323c:	f7ff fdc2 	bl	8002dc4 <HAL_Delay>
		FXOS8700CQReadAccelMagnData(&hi2c1);
 8003240:	f7ff fe62 	bl	8002f08 <FXOS8700CQReadAccelMagnData.constprop.0>
		return MAG.x;
 8003244:	4b0d      	ldr	r3, [pc, #52]	; (800327c <FXOS8700CQCalibrate+0x70>)
		if((int)(FXOS8700CQGetData(GET_MAG_X)) > calibrate)
 8003246:	2200      	movs	r2, #0
 8003248:	5e9b      	ldrsh	r3, [r3, r2]
 800324a:	42ab      	cmp	r3, r5
 800324c:	dd00      	ble.n	8003250 <FXOS8700CQCalibrate+0x44>
				calibrate += auxiliar;
 800324e:	18ed      	adds	r5, r5, r3
	for(int i =0; i < 10; i++)
 8003250:	3c01      	subs	r4, #1
 8003252:	2c00      	cmp	r4, #0
 8003254:	d1f1      	bne.n	800323a <FXOS8700CQCalibrate+0x2e>
	calibrate = calibrate/10;
 8003256:	210a      	movs	r1, #10
 8003258:	0028      	movs	r0, r5
 800325a:	f7fd f805 	bl	8000268 <__divsi3>
	calibrate += 500;//1000;
 800325e:	30f5      	adds	r0, #245	; 0xf5
 8003260:	30ff      	adds	r0, #255	; 0xff
 8003262:	0005      	movs	r5, r0
	APP_LOG(TS_OFF, VLEVEL_L, "Calibrate =  %d\r\n", calibrate);
 8003264:	9000      	str	r0, [sp, #0]
 8003266:	0022      	movs	r2, r4
 8003268:	0021      	movs	r1, r4
 800326a:	4b05      	ldr	r3, [pc, #20]	; (8003280 <FXOS8700CQCalibrate+0x74>)
 800326c:	2001      	movs	r0, #1
 800326e:	f00b fe3b 	bl	800eee8 <UTIL_ADV_TRACE_COND_FSend>
}
 8003272:	0028      	movs	r0, r5
 8003274:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8003276:	46c0      	nop			; (mov r8, r8)
 8003278:	20000314 	.word	0x20000314
 800327c:	200002e6 	.word	0x200002e6
 8003280:	0800f316 	.word	0x0800f316

08003284 <EEPROM_Write>:
	while ((FLASH->SR & FLASH_SR_BSY) != 0);
 8003284:	4b0b      	ldr	r3, [pc, #44]	; (80032b4 <EEPROM_Write+0x30>)
void EEPROM_Write(uint32_t d, uint32_t *addr){
 8003286:	b530      	push	{r4, r5, lr}
 8003288:	001a      	movs	r2, r3
	while ((FLASH->SR & FLASH_SR_BSY) != 0);
 800328a:	2401      	movs	r4, #1
 800328c:	699d      	ldr	r5, [r3, #24]
 800328e:	4225      	tst	r5, r4
 8003290:	d1fc      	bne.n	800328c <EEPROM_Write+0x8>
	if ((FLASH->PECR & FLASH_PECR_PELOCK) != 0){
 8003292:	685d      	ldr	r5, [r3, #4]
 8003294:	4225      	tst	r5, r4
 8003296:	d003      	beq.n	80032a0 <EEPROM_Write+0x1c>
		FLASH->PEKEYR = FLASH_PEKEY1;
 8003298:	4c07      	ldr	r4, [pc, #28]	; (80032b8 <EEPROM_Write+0x34>)
 800329a:	60dc      	str	r4, [r3, #12]
		FLASH->PEKEYR = FLASH_PEKEY2;
 800329c:	4c07      	ldr	r4, [pc, #28]	; (80032bc <EEPROM_Write+0x38>)
 800329e:	60dc      	str	r4, [r3, #12]
	while ((FLASH->SR & FLASH_SR_BSY) != 0);
 80032a0:	2301      	movs	r3, #1
	*addr = d;
 80032a2:	6008      	str	r0, [r1, #0]
	while ((FLASH->SR & FLASH_SR_BSY) != 0);
 80032a4:	6991      	ldr	r1, [r2, #24]
 80032a6:	4219      	tst	r1, r3
 80032a8:	d1fc      	bne.n	80032a4 <EEPROM_Write+0x20>
	FLASH->PECR |= FLASH_PECR_PELOCK;
 80032aa:	6851      	ldr	r1, [r2, #4]
 80032ac:	430b      	orrs	r3, r1
 80032ae:	6053      	str	r3, [r2, #4]
}
 80032b0:	bd30      	pop	{r4, r5, pc}
 80032b2:	46c0      	nop			; (mov r8, r8)
 80032b4:	40022000 	.word	0x40022000
 80032b8:	89abcdef 	.word	0x89abcdef
 80032bc:	02030405 	.word	0x02030405

080032c0 <P2P_Radio_Init>:
void P2P_Radio_Init(void){
 80032c0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(app.stt.lora_state == LORA_IDLE){
 80032c2:	4b1c      	ldr	r3, [pc, #112]	; (8003334 <P2P_Radio_Init+0x74>)
void P2P_Radio_Init(void){
 80032c4:	b08d      	sub	sp, #52	; 0x34
	if(app.stt.lora_state == LORA_IDLE){
 80032c6:	799c      	ldrb	r4, [r3, #6]
 80032c8:	2c00      	cmp	r4, #0
 80032ca:	d131      	bne.n	8003330 <P2P_Radio_Init+0x70>
		app.stt.lora_state = LORA_BUSY;
 80032cc:	2501      	movs	r5, #1
		RadioEvents.TxDone = OnP2PTxDone;
 80032ce:	481a      	ldr	r0, [pc, #104]	; (8003338 <P2P_Radio_Init+0x78>)
		app.stt.lora_state = LORA_BUSY;
 80032d0:	719d      	strb	r5, [r3, #6]
		RadioEvents.TxDone = OnP2PTxDone;
 80032d2:	4b1a      	ldr	r3, [pc, #104]	; (800333c <P2P_Radio_Init+0x7c>)
		Radio.Init(&RadioEvents);
 80032d4:	4f1a      	ldr	r7, [pc, #104]	; (8003340 <P2P_Radio_Init+0x80>)
		RadioEvents.TxDone = OnP2PTxDone;
 80032d6:	6003      	str	r3, [r0, #0]
		RadioEvents.RxDone = OnP2PRxDone;
 80032d8:	4b1a      	ldr	r3, [pc, #104]	; (8003344 <P2P_Radio_Init+0x84>)
 80032da:	6083      	str	r3, [r0, #8]
		RadioEvents.TxTimeout = OnP2PTxTimeout;
 80032dc:	4b1a      	ldr	r3, [pc, #104]	; (8003348 <P2P_Radio_Init+0x88>)
 80032de:	6043      	str	r3, [r0, #4]
		RadioEvents.RxTimeout = OnP2PRxTimeout;
 80032e0:	4b1a      	ldr	r3, [pc, #104]	; (800334c <P2P_Radio_Init+0x8c>)
 80032e2:	60c3      	str	r3, [r0, #12]
		RadioEvents.RxError = OnP2PRxError;
 80032e4:	4b1a      	ldr	r3, [pc, #104]	; (8003350 <P2P_Radio_Init+0x90>)
 80032e6:	6103      	str	r3, [r0, #16]
		Radio.Init(&RadioEvents);
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80032ec:	4798      	blx	r3
		Radio.SetTxConfig(MODEM_LORA, P2P_TX_OUTPUT_POWER, 0, P2P_BANDWIDTH,
 80032ee:	4b19      	ldr	r3, [pc, #100]	; (8003354 <P2P_Radio_Init+0x94>)
 80032f0:	0022      	movs	r2, r4
 80032f2:	9308      	str	r3, [sp, #32]
 80032f4:	2308      	movs	r3, #8
 80032f6:	9302      	str	r3, [sp, #8]
 80032f8:	3304      	adds	r3, #4
 80032fa:	9300      	str	r3, [sp, #0]
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	2116      	movs	r1, #22
 8003300:	930b      	str	r3, [sp, #44]	; 0x2c
 8003302:	0028      	movs	r0, r5
 8003304:	0023      	movs	r3, r4
 8003306:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8003308:	9407      	str	r4, [sp, #28]
 800330a:	9406      	str	r4, [sp, #24]
 800330c:	9405      	str	r4, [sp, #20]
 800330e:	9504      	str	r5, [sp, #16]
 8003310:	9403      	str	r4, [sp, #12]
 8003312:	9501      	str	r5, [sp, #4]
 8003314:	47b0      	blx	r6
		Radio.SetMaxPayloadLength(MODEM_LORA, LORA_BUFFER_SIZE);
 8003316:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003318:	2140      	movs	r1, #64	; 0x40
 800331a:	0028      	movs	r0, r5
 800331c:	930b      	str	r3, [sp, #44]	; 0x2c
 800331e:	4798      	blx	r3
		APP_LOG(TS_ON, VLEVEL_L,  "Modo P2P\n\r");
 8003320:	4b0d      	ldr	r3, [pc, #52]	; (8003358 <P2P_Radio_Init+0x98>)
 8003322:	002a      	movs	r2, r5
 8003324:	0021      	movs	r1, r4
 8003326:	0028      	movs	r0, r5
 8003328:	f00b fdde 	bl	800eee8 <UTIL_ADV_TRACE_COND_FSend>
		app.stt.lora_state = LORA_IDLE;
 800332c:	4b01      	ldr	r3, [pc, #4]	; (8003334 <P2P_Radio_Init+0x74>)
 800332e:	719c      	strb	r4, [r3, #6]
}
 8003330:	b00d      	add	sp, #52	; 0x34
 8003332:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003334:	20000038 	.word	0x20000038
 8003338:	200002ec 	.word	0x200002ec
 800333c:	08002e85 	.word	0x08002e85
 8003340:	0800fd8c 	.word	0x0800fd8c
 8003344:	08002dd1 	.word	0x08002dd1
 8003348:	08002e35 	.word	0x08002e35
 800334c:	08002de1 	.word	0x08002de1
 8003350:	08002df1 	.word	0x08002df1
 8003354:	00001388 	.word	0x00001388
 8003358:	0800f328 	.word	0x0800f328

0800335c <LoRaWAN_Mode_Init>:
void LoRaWAN_Mode_Init(void){
 800335c:	b570      	push	{r4, r5, r6, lr}
	if(app.stt.lora_state == LORA_IDLE){
 800335e:	4d0c      	ldr	r5, [pc, #48]	; (8003390 <LoRaWAN_Mode_Init+0x34>)
 8003360:	79ae      	ldrb	r6, [r5, #6]
 8003362:	2e00      	cmp	r6, #0
 8003364:	d113      	bne.n	800338e <LoRaWAN_Mode_Init+0x32>
		app.stt.lora_state = LORA_BUSY;
 8003366:	2401      	movs	r4, #1
 8003368:	71ac      	strb	r4, [r5, #6]
		LoraInfo_Init();
 800336a:	f004 fa8f 	bl	800788c <LoraInfo_Init>
		LmHandlerInit(&LmHandlerCallbacks);
 800336e:	4809      	ldr	r0, [pc, #36]	; (8003394 <LoRaWAN_Mode_Init+0x38>)
 8003370:	f005 fb0a 	bl	8008988 <LmHandlerInit>
		LmHandlerConfigure(&LmHandlerParams);
 8003374:	4808      	ldr	r0, [pc, #32]	; (8003398 <LoRaWAN_Mode_Init+0x3c>)
 8003376:	f005 f911 	bl	800859c <LmHandlerConfigure>
		LmHandlerJoin(LORAWAN_DEFAULT_ACTIVATION_TYPE);
 800337a:	0020      	movs	r0, r4
 800337c:	f005 fa2a 	bl	80087d4 <LmHandlerJoin>
		APP_LOG(TS_ON, VLEVEL_L,  "Modo LORAWAN\n\r");
 8003380:	0022      	movs	r2, r4
 8003382:	0031      	movs	r1, r6
 8003384:	0020      	movs	r0, r4
 8003386:	4b05      	ldr	r3, [pc, #20]	; (800339c <LoRaWAN_Mode_Init+0x40>)
 8003388:	f00b fdae 	bl	800eee8 <UTIL_ADV_TRACE_COND_FSend>
		app.stt.lora_state = LORA_IDLE;
 800338c:	71ae      	strb	r6, [r5, #6]
}
 800338e:	bd70      	pop	{r4, r5, r6, pc}
 8003390:	20000038 	.word	0x20000038
 8003394:	20000010 	.word	0x20000010
 8003398:	20000030 	.word	0x20000030
 800339c:	0800f333 	.word	0x0800f333

080033a0 <rx_bytes>:
}*/

/*
 * Processa comandos recebidos pela serial
 */
void rx_bytes(uint8_t *bytes, uint16_t sz, uint8_t error){
 80033a0:	b530      	push	{r4, r5, lr}
 80033a2:	b08d      	sub	sp, #52	; 0x34
	if(sz >= 4){
 80033a4:	2903      	cmp	r1, #3
 80033a6:	d800      	bhi.n	80033aa <rx_bytes+0xa>
 80033a8:	e086      	b.n	80034b8 <rx_bytes+0x118>
		if(bytes[0] == '$' && bytes[1] == 'W' && bytes[3] == '#' && bytes[sz-1]){
 80033aa:	7803      	ldrb	r3, [r0, #0]
 80033ac:	2b24      	cmp	r3, #36	; 0x24
 80033ae:	d000      	beq.n	80033b2 <rx_bytes+0x12>
 80033b0:	e082      	b.n	80034b8 <rx_bytes+0x118>
 80033b2:	7843      	ldrb	r3, [r0, #1]
 80033b4:	2b57      	cmp	r3, #87	; 0x57
 80033b6:	d17f      	bne.n	80034b8 <rx_bytes+0x118>
 80033b8:	78c3      	ldrb	r3, [r0, #3]
 80033ba:	2b23      	cmp	r3, #35	; 0x23
 80033bc:	d17c      	bne.n	80034b8 <rx_bytes+0x118>
 80033be:	1841      	adds	r1, r0, r1
 80033c0:	3901      	subs	r1, #1
 80033c2:	780b      	ldrb	r3, [r1, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d077      	beq.n	80034b8 <rx_bytes+0x118>
			if(bytes[2] == 'A'){
 80033c8:	7883      	ldrb	r3, [r0, #2]
 80033ca:	2b41      	cmp	r3, #65	; 0x41
 80033cc:	d149      	bne.n	8003462 <rx_bytes+0xc2>
 80033ce:	4a6a      	ldr	r2, [pc, #424]	; (8003578 <rx_bytes+0x1d8>)
 80033d0:	1d01      	adds	r1, r0, #4
 80033d2:	0014      	movs	r4, r2
 80033d4:	300c      	adds	r0, #12
				for(int i = 0; i < 4; i++){
					if(bytes[4+i*2] >= 'a' && bytes[4+i*2] <= 'f'){
 80033d6:	780b      	ldrb	r3, [r1, #0]
 80033d8:	001d      	movs	r5, r3
 80033da:	3d61      	subs	r5, #97	; 0x61
 80033dc:	2d05      	cmp	r5, #5
 80033de:	d803      	bhi.n	80033e8 <rx_bytes+0x48>
						((uint8_t *)&app.cfg.cfg.dev_addr)[3-i] = (bytes[4+i*2] - 'a' + 10) * 16;
 80033e0:	3b57      	subs	r3, #87	; 0x57
					}else if(bytes[4+i*2] >= '0' && bytes[4+i*2] <= '9'){
						((uint8_t *)&app.cfg.cfg.dev_addr)[3-i] = (bytes[4+i*2] - '0') * 16;
 80033e2:	011b      	lsls	r3, r3, #4
 80033e4:	72d3      	strb	r3, [r2, #11]
 80033e6:	e003      	b.n	80033f0 <rx_bytes+0x50>
					}else if(bytes[4+i*2] >= '0' && bytes[4+i*2] <= '9'){
 80033e8:	3b30      	subs	r3, #48	; 0x30
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	2b09      	cmp	r3, #9
 80033ee:	d9f8      	bls.n	80033e2 <rx_bytes+0x42>
					}
					if(bytes[5+i*2] >= 'a' && bytes[5+i*2] <= 'f'){
 80033f0:	784b      	ldrb	r3, [r1, #1]
 80033f2:	001d      	movs	r5, r3
 80033f4:	3d61      	subs	r5, #97	; 0x61
 80033f6:	2d05      	cmp	r5, #5
 80033f8:	d82b      	bhi.n	8003452 <rx_bytes+0xb2>
						((uint8_t *)&app.cfg.cfg.dev_addr)[3-i] += bytes[5+i*2] - 'a' + 10;
 80033fa:	7ad5      	ldrb	r5, [r2, #11]
 80033fc:	195b      	adds	r3, r3, r5
 80033fe:	3b57      	subs	r3, #87	; 0x57
					}else if(bytes[5+i*2] >= '0' && bytes[5+i*2] <= '9'){
						((uint8_t *)&app.cfg.cfg.dev_addr)[3-i] += bytes[5+i*2] - '0';
 8003400:	72d3      	strb	r3, [r2, #11]
				for(int i = 0; i < 4; i++){
 8003402:	3102      	adds	r1, #2
 8003404:	3a01      	subs	r2, #1
 8003406:	4288      	cmp	r0, r1
 8003408:	d1e5      	bne.n	80033d6 <rx_bytes+0x36>
					}
				}
				EEPROM_Write(((uint32_t *)(&app.cfg))[offsetof(cfg_t, cfg.dev_addr)/sizeof(uint32_t)], &eeprom_cfg.word[offsetof(cfg_t, cfg.dev_addr)/sizeof(uint32_t)]);
 800340a:	495c      	ldr	r1, [pc, #368]	; (800357c <rx_bytes+0x1dc>)
 800340c:	68a0      	ldr	r0, [r4, #8]
 800340e:	f7ff ff39 	bl	8003284 <EEPROM_Write>
				SetDevAddr(app.cfg.cfg.dev_addr);
 8003412:	68a0      	ldr	r0, [r4, #8]
				LoRaWAN_Mode_Init();
				uint8_t eui[8];
				LmHandlerGetDevEUI(&eui[0]);
 8003414:	ac0a      	add	r4, sp, #40	; 0x28
				SetDevAddr(app.cfg.cfg.dev_addr);
 8003416:	f7ff fcb7 	bl	8002d88 <SetDevAddr>
				LoRaWAN_Mode_Init();
 800341a:	f7ff ff9f 	bl	800335c <LoRaWAN_Mode_Init>
				LmHandlerGetDevEUI(&eui[0]);
 800341e:	0020      	movs	r0, r4
 8003420:	f005 fbbc 	bl	8008b9c <LmHandlerGetDevEUI>
				APP_LOG(TS_OFF, VLEVEL_L, "DEV_EUI:%02X%02X%02X%02X%02X%02X%02X%02X\r\n", eui[0], eui[1], eui[2], eui[3], eui[4], eui[5], eui[6], eui[7]);
 8003424:	79e3      	ldrb	r3, [r4, #7]
 8003426:	9307      	str	r3, [sp, #28]
 8003428:	79a3      	ldrb	r3, [r4, #6]
 800342a:	9306      	str	r3, [sp, #24]
 800342c:	7963      	ldrb	r3, [r4, #5]
 800342e:	9305      	str	r3, [sp, #20]
 8003430:	7923      	ldrb	r3, [r4, #4]
 8003432:	9304      	str	r3, [sp, #16]
 8003434:	78e3      	ldrb	r3, [r4, #3]
 8003436:	9303      	str	r3, [sp, #12]
 8003438:	78a3      	ldrb	r3, [r4, #2]
 800343a:	9302      	str	r3, [sp, #8]
 800343c:	7863      	ldrb	r3, [r4, #1]
 800343e:	9301      	str	r3, [sp, #4]
 8003440:	7823      	ldrb	r3, [r4, #0]
 8003442:	9300      	str	r3, [sp, #0]
 8003444:	4b4e      	ldr	r3, [pc, #312]	; (8003580 <rx_bytes+0x1e0>)
				}
				APP_LOG(TS_OFF, VLEVEL_L, "XTA_TRIM=%02d\r\n", app.cfg.cfg.xta_trim);
			}else if(bytes[2] == 'N'){
				uint8_t eui[8];
				LmHandlerGetDevEUI(&eui[0]);
				APP_LOG(TS_OFF, VLEVEL_L, "%02X%02X%02X%02X%02X%02X%02X%02X\r\n", eui[0], eui[1], eui[2], eui[3], eui[4], eui[5], eui[6], eui[7]);
 8003446:	2200      	movs	r2, #0
 8003448:	2001      	movs	r0, #1
 800344a:	0011      	movs	r1, r2
 800344c:	f00b fd4c 	bl	800eee8 <UTIL_ADV_TRACE_COND_FSend>
			}
		}
	}
}
 8003450:	e032      	b.n	80034b8 <rx_bytes+0x118>
					}else if(bytes[5+i*2] >= '0' && bytes[5+i*2] <= '9'){
 8003452:	001d      	movs	r5, r3
 8003454:	3d30      	subs	r5, #48	; 0x30
 8003456:	2d09      	cmp	r5, #9
 8003458:	d8d3      	bhi.n	8003402 <rx_bytes+0x62>
						((uint8_t *)&app.cfg.cfg.dev_addr)[3-i] += bytes[5+i*2] - '0';
 800345a:	7ad5      	ldrb	r5, [r2, #11]
 800345c:	195b      	adds	r3, r3, r5
 800345e:	3b30      	subs	r3, #48	; 0x30
 8003460:	e7ce      	b.n	8003400 <rx_bytes+0x60>
			}else if(bytes[2] == 'R'){
 8003462:	2b52      	cmp	r3, #82	; 0x52
 8003464:	d12a      	bne.n	80034bc <rx_bytes+0x11c>
				SX126xSetStandby( STDBY_XOSC );
 8003466:	2001      	movs	r0, #1
 8003468:	f00a fc76 	bl	800dd58 <SX126xSetStandby>
				SX126xWriteRegister(REG_XTA_TRIM, app.cfg.cfg.xta_trim);
 800346c:	4c42      	ldr	r4, [pc, #264]	; (8003578 <rx_bytes+0x1d8>)
 800346e:	4845      	ldr	r0, [pc, #276]	; (8003584 <rx_bytes+0x1e4>)
 8003470:	7ba1      	ldrb	r1, [r4, #14]
 8003472:	f00a fe61 	bl	800e138 <SX126xWriteRegister>
				SX126xWriteRegister(REG_XTB_TRIM, app.cfg.cfg.xta_trim);
 8003476:	7ba1      	ldrb	r1, [r4, #14]
 8003478:	4843      	ldr	r0, [pc, #268]	; (8003588 <rx_bytes+0x1e8>)
 800347a:	f00a fe5d 	bl	800e138 <SX126xWriteRegister>
				Radio.SetTxContinuousWave( 915800000, P2P_TX_OUTPUT_POWER, 60 );
 800347e:	4b43      	ldr	r3, [pc, #268]	; (800358c <rx_bytes+0x1ec>)
 8003480:	223c      	movs	r2, #60	; 0x3c
 8003482:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8003484:	2116      	movs	r1, #22
 8003486:	4842      	ldr	r0, [pc, #264]	; (8003590 <rx_bytes+0x1f0>)
 8003488:	47a8      	blx	r5
				SX126xSetStandby( STDBY_XOSC );
 800348a:	2001      	movs	r0, #1
 800348c:	f00a fc64 	bl	800dd58 <SX126xSetStandby>
				SX126xWriteRegister(REG_XTA_TRIM, app.cfg.cfg.xta_trim);
 8003490:	7ba1      	ldrb	r1, [r4, #14]
 8003492:	483c      	ldr	r0, [pc, #240]	; (8003584 <rx_bytes+0x1e4>)
 8003494:	f00a fe50 	bl	800e138 <SX126xWriteRegister>
				SX126xWriteRegister(REG_XTB_TRIM, app.cfg.cfg.xta_trim);
 8003498:	7ba1      	ldrb	r1, [r4, #14]
 800349a:	483b      	ldr	r0, [pc, #236]	; (8003588 <rx_bytes+0x1e8>)
 800349c:	f00a fe4c 	bl	800e138 <SX126xWriteRegister>
				Radio.SetTxContinuousWave( 915800000, P2P_TX_OUTPUT_POWER, 60 );
 80034a0:	223c      	movs	r2, #60	; 0x3c
 80034a2:	2116      	movs	r1, #22
 80034a4:	483a      	ldr	r0, [pc, #232]	; (8003590 <rx_bytes+0x1f0>)
 80034a6:	47a8      	blx	r5
				APP_LOG(TS_OFF, VLEVEL_L, "XTA_TRIM=%d\n\r", app.cfg.cfg.xta_trim);
 80034a8:	7ba3      	ldrb	r3, [r4, #14]
 80034aa:	9300      	str	r3, [sp, #0]
 80034ac:	4b39      	ldr	r3, [pc, #228]	; (8003594 <rx_bytes+0x1f4>)
				APP_LOG(TS_OFF, VLEVEL_L, "XTA_TRIM=%02d\r\n", app.cfg.cfg.xta_trim);
 80034ae:	2200      	movs	r2, #0
 80034b0:	2001      	movs	r0, #1
 80034b2:	0011      	movs	r1, r2
 80034b4:	f00b fd18 	bl	800eee8 <UTIL_ADV_TRACE_COND_FSend>
}
 80034b8:	b00d      	add	sp, #52	; 0x34
 80034ba:	bd30      	pop	{r4, r5, pc}
			}else if(bytes[2] == 'S'){
 80034bc:	2b53      	cmp	r3, #83	; 0x53
 80034be:	d100      	bne.n	80034c2 <rx_bytes+0x122>
				while(1);
 80034c0:	e7fe      	b.n	80034c0 <rx_bytes+0x120>
			}else if(bytes[2] == '+'){
 80034c2:	2b2b      	cmp	r3, #43	; 0x2b
 80034c4:	d11e      	bne.n	8003504 <rx_bytes+0x164>
				if(app.cfg.cfg.xta_trim < 0x2F){
 80034c6:	4c2c      	ldr	r4, [pc, #176]	; (8003578 <rx_bytes+0x1d8>)
 80034c8:	7ba0      	ldrb	r0, [r4, #14]
 80034ca:	282e      	cmp	r0, #46	; 0x2e
 80034cc:	d816      	bhi.n	80034fc <rx_bytes+0x15c>
					app.cfg.cfg.xta_trim++;
 80034ce:	3001      	adds	r0, #1
					app.cfg.cfg.xta_trim--;
 80034d0:	b2c0      	uxtb	r0, r0
 80034d2:	73a0      	strb	r0, [r4, #14]
					SX126xFreqCorrection(app.cfg.cfg.xta_trim);
 80034d4:	f00a fbe2 	bl	800dc9c <SX126xFreqCorrection>
					SX126xSetStandby( STDBY_XOSC );
 80034d8:	2001      	movs	r0, #1
 80034da:	f00a fc3d 	bl	800dd58 <SX126xSetStandby>
					SX126xWriteRegister(REG_XTA_TRIM, app.cfg.cfg.xta_trim);
 80034de:	7ba1      	ldrb	r1, [r4, #14]
 80034e0:	4828      	ldr	r0, [pc, #160]	; (8003584 <rx_bytes+0x1e4>)
 80034e2:	f00a fe29 	bl	800e138 <SX126xWriteRegister>
					SX126xWriteRegister(REG_XTB_TRIM, app.cfg.cfg.xta_trim);
 80034e6:	7ba1      	ldrb	r1, [r4, #14]
 80034e8:	4827      	ldr	r0, [pc, #156]	; (8003588 <rx_bytes+0x1e8>)
 80034ea:	f00a fe25 	bl	800e138 <SX126xWriteRegister>
					Radio.SetTxContinuousWave( 915800000, P2P_TX_OUTPUT_POWER, 60 );
 80034ee:	4b27      	ldr	r3, [pc, #156]	; (800358c <rx_bytes+0x1ec>)
 80034f0:	223c      	movs	r2, #60	; 0x3c
 80034f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034f4:	2116      	movs	r1, #22
 80034f6:	4826      	ldr	r0, [pc, #152]	; (8003590 <rx_bytes+0x1f0>)
 80034f8:	9309      	str	r3, [sp, #36]	; 0x24
 80034fa:	4798      	blx	r3
				APP_LOG(TS_OFF, VLEVEL_L, "XTA_TRIM=%02d\r\n", app.cfg.cfg.xta_trim);
 80034fc:	7ba3      	ldrb	r3, [r4, #14]
 80034fe:	9300      	str	r3, [sp, #0]
 8003500:	4b25      	ldr	r3, [pc, #148]	; (8003598 <rx_bytes+0x1f8>)
 8003502:	e7d4      	b.n	80034ae <rx_bytes+0x10e>
			}else if(bytes[2] == '-'){
 8003504:	2b2d      	cmp	r3, #45	; 0x2d
 8003506:	d105      	bne.n	8003514 <rx_bytes+0x174>
				if(app.cfg.cfg.xta_trim > 0){
 8003508:	4c1b      	ldr	r4, [pc, #108]	; (8003578 <rx_bytes+0x1d8>)
 800350a:	7ba0      	ldrb	r0, [r4, #14]
 800350c:	2800      	cmp	r0, #0
 800350e:	d0f5      	beq.n	80034fc <rx_bytes+0x15c>
					app.cfg.cfg.xta_trim--;
 8003510:	3801      	subs	r0, #1
 8003512:	e7dd      	b.n	80034d0 <rx_bytes+0x130>
			}else if(bytes[2] == 'E' ){
 8003514:	2b45      	cmp	r3, #69	; 0x45
 8003516:	d0cf      	beq.n	80034b8 <rx_bytes+0x118>
			}else if(bytes[2] == '>'){
 8003518:	2b3e      	cmp	r3, #62	; 0x3e
 800351a:	d109      	bne.n	8003530 <rx_bytes+0x190>
				if(app.cfg.cfg.xta_trim < 47){
 800351c:	4c16      	ldr	r4, [pc, #88]	; (8003578 <rx_bytes+0x1d8>)
 800351e:	7ba3      	ldrb	r3, [r4, #14]
 8003520:	2b2e      	cmp	r3, #46	; 0x2e
 8003522:	d8eb      	bhi.n	80034fc <rx_bytes+0x15c>
						app.cfg.cfg.xta_trim = 47;
 8003524:	202f      	movs	r0, #47	; 0x2f
					if(app.cfg.cfg.xta_trim <= 42){
 8003526:	2b2a      	cmp	r3, #42	; 0x2a
 8003528:	d8d3      	bhi.n	80034d2 <rx_bytes+0x132>
						app.cfg.cfg.xta_trim += 5;
 800352a:	3305      	adds	r3, #5
						app.cfg.cfg.xta_trim -= 5;
 800352c:	b2d8      	uxtb	r0, r3
 800352e:	e7d0      	b.n	80034d2 <rx_bytes+0x132>
			}else if(bytes[2] == '<'){
 8003530:	2b3c      	cmp	r3, #60	; 0x3c
 8003532:	d108      	bne.n	8003546 <rx_bytes+0x1a6>
				if(app.cfg.cfg.xta_trim > 0){
 8003534:	4c10      	ldr	r4, [pc, #64]	; (8003578 <rx_bytes+0x1d8>)
 8003536:	7ba3      	ldrb	r3, [r4, #14]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d0df      	beq.n	80034fc <rx_bytes+0x15c>
						app.cfg.cfg.xta_trim = 0;
 800353c:	2000      	movs	r0, #0
					if(app.cfg.cfg.xta_trim >= 5){
 800353e:	2b04      	cmp	r3, #4
 8003540:	d9c7      	bls.n	80034d2 <rx_bytes+0x132>
						app.cfg.cfg.xta_trim -= 5;
 8003542:	3b05      	subs	r3, #5
 8003544:	e7f2      	b.n	800352c <rx_bytes+0x18c>
			}else if(bytes[2] == 'N'){
 8003546:	2b4e      	cmp	r3, #78	; 0x4e
 8003548:	d1b6      	bne.n	80034b8 <rx_bytes+0x118>
				LmHandlerGetDevEUI(&eui[0]);
 800354a:	ac0a      	add	r4, sp, #40	; 0x28
 800354c:	0020      	movs	r0, r4
 800354e:	f005 fb25 	bl	8008b9c <LmHandlerGetDevEUI>
				APP_LOG(TS_OFF, VLEVEL_L, "%02X%02X%02X%02X%02X%02X%02X%02X\r\n", eui[0], eui[1], eui[2], eui[3], eui[4], eui[5], eui[6], eui[7]);
 8003552:	79e3      	ldrb	r3, [r4, #7]
 8003554:	9307      	str	r3, [sp, #28]
 8003556:	79a3      	ldrb	r3, [r4, #6]
 8003558:	9306      	str	r3, [sp, #24]
 800355a:	7963      	ldrb	r3, [r4, #5]
 800355c:	9305      	str	r3, [sp, #20]
 800355e:	7923      	ldrb	r3, [r4, #4]
 8003560:	9304      	str	r3, [sp, #16]
 8003562:	78e3      	ldrb	r3, [r4, #3]
 8003564:	9303      	str	r3, [sp, #12]
 8003566:	78a3      	ldrb	r3, [r4, #2]
 8003568:	9302      	str	r3, [sp, #8]
 800356a:	7863      	ldrb	r3, [r4, #1]
 800356c:	9301      	str	r3, [sp, #4]
 800356e:	7823      	ldrb	r3, [r4, #0]
 8003570:	9300      	str	r3, [sp, #0]
 8003572:	4b0a      	ldr	r3, [pc, #40]	; (800359c <rx_bytes+0x1fc>)
 8003574:	e767      	b.n	8003446 <rx_bytes+0xa6>
 8003576:	46c0      	nop			; (mov r8, r8)
 8003578:	20000038 	.word	0x20000038
 800357c:	08080000 	.word	0x08080000
 8003580:	0800f342 	.word	0x0800f342
 8003584:	00000911 	.word	0x00000911
 8003588:	00000912 	.word	0x00000912
 800358c:	0800fd8c 	.word	0x0800fd8c
 8003590:	3695ffc0 	.word	0x3695ffc0
 8003594:	0800f36d 	.word	0x0800f36d
 8003598:	0800f37b 	.word	0x0800f37b
 800359c:	0800fa52 	.word	0x0800fa52

080035a0 <fillBufferAutoTx>:
	buffer[i++] = 5;
 80035a0:	2305      	movs	r3, #5
uint16_t fillBufferAutoTx(uint8_t *buffer){
 80035a2:	b510      	push	{r4, lr}
	buffer[i++] = 5;
 80035a4:	7003      	strb	r3, [r0, #0]
uint16_t fillBufferAutoTx(uint8_t *buffer){
 80035a6:	0004      	movs	r4, r0
	buffer[i++] = (uint8_t)((SYS_GetBatteryLevel() + 50)/100);
 80035a8:	f7fe ff42 	bl	8002430 <SYS_GetBatteryLevel>
 80035ac:	2164      	movs	r1, #100	; 0x64
 80035ae:	3032      	adds	r0, #50	; 0x32
 80035b0:	f7fc fe5a 	bl	8000268 <__divsi3>
		return MAG.x;
 80035b4:	4b09      	ldr	r3, [pc, #36]	; (80035dc <fillBufferAutoTx+0x3c>)
	buffer[i++] = (uint8_t)((SYS_GetBatteryLevel() + 50)/100);
 80035b6:	7060      	strb	r0, [r4, #1]
		return MAG.x;
 80035b8:	2100      	movs	r1, #0
 80035ba:	5e5a      	ldrsh	r2, [r3, r1]
}
 80035bc:	2008      	movs	r0, #8
	buffer[i++] = (uint8_t)((tmp >> 8) & 0xff);
 80035be:	1211      	asrs	r1, r2, #8
 80035c0:	70a1      	strb	r1, [r4, #2]
	buffer[i++] = (uint8_t)(tmp & 0xff);
 80035c2:	70e2      	strb	r2, [r4, #3]
		return MAG.y;
 80035c4:	2102      	movs	r1, #2
 80035c6:	5e5a      	ldrsh	r2, [r3, r1]
	buffer[i++] = (uint8_t)((tmp >> 8) & 0xff);
 80035c8:	1211      	asrs	r1, r2, #8
	buffer[i++] = (uint8_t)(tmp & 0xff);
 80035ca:	7162      	strb	r2, [r4, #5]
	buffer[i++] = (uint8_t)((tmp >> 8) & 0xff);
 80035cc:	7121      	strb	r1, [r4, #4]
		return MAG.z;
 80035ce:	2204      	movs	r2, #4
 80035d0:	5e9b      	ldrsh	r3, [r3, r2]
	buffer[i++] = (uint8_t)((tmp >> 8) & 0xff);
 80035d2:	121a      	asrs	r2, r3, #8
 80035d4:	71a2      	strb	r2, [r4, #6]
	buffer[i++] = (uint8_t)(tmp & 0xff);
 80035d6:	71e3      	strb	r3, [r4, #7]
}
 80035d8:	bd10      	pop	{r4, pc}
 80035da:	46c0      	nop			; (mov r8, r8)
 80035dc:	200002e6 	.word	0x200002e6

080035e0 <fillBufferManualTx>:
	buffer[i++] = 0;
 80035e0:	2300      	movs	r3, #0
uint16_t fillBufferManualTx(uint8_t *buffer){
 80035e2:	b510      	push	{r4, lr}
	buffer[i++] = 0;
 80035e4:	7003      	strb	r3, [r0, #0]
uint16_t fillBufferManualTx(uint8_t *buffer){
 80035e6:	0004      	movs	r4, r0
	buffer[i++] = (uint8_t)((SYS_GetBatteryLevel() + 50)/100);
 80035e8:	f7fe ff22 	bl	8002430 <SYS_GetBatteryLevel>
 80035ec:	2164      	movs	r1, #100	; 0x64
 80035ee:	3032      	adds	r0, #50	; 0x32
 80035f0:	f7fc fe3a 	bl	8000268 <__divsi3>
		return MAG.x;
 80035f4:	4b09      	ldr	r3, [pc, #36]	; (800361c <fillBufferManualTx+0x3c>)
	buffer[i++] = (uint8_t)((SYS_GetBatteryLevel() + 50)/100);
 80035f6:	7060      	strb	r0, [r4, #1]
		return MAG.x;
 80035f8:	2100      	movs	r1, #0
 80035fa:	5e5a      	ldrsh	r2, [r3, r1]
}
 80035fc:	2008      	movs	r0, #8
	buffer[i++] = (uint8_t)((tmp >> 8) & 0xff);
 80035fe:	1211      	asrs	r1, r2, #8
 8003600:	70a1      	strb	r1, [r4, #2]
	buffer[i++] = (uint8_t)(tmp & 0xff);
 8003602:	70e2      	strb	r2, [r4, #3]
		return MAG.y;
 8003604:	2102      	movs	r1, #2
 8003606:	5e5a      	ldrsh	r2, [r3, r1]
	buffer[i++] = (uint8_t)((tmp >> 8) & 0xff);
 8003608:	1211      	asrs	r1, r2, #8
	buffer[i++] = (uint8_t)(tmp & 0xff);
 800360a:	7162      	strb	r2, [r4, #5]
	buffer[i++] = (uint8_t)((tmp >> 8) & 0xff);
 800360c:	7121      	strb	r1, [r4, #4]
		return MAG.z;
 800360e:	2204      	movs	r2, #4
 8003610:	5e9b      	ldrsh	r3, [r3, r2]
	buffer[i++] = (uint8_t)((tmp >> 8) & 0xff);
 8003612:	121a      	asrs	r2, r3, #8
 8003614:	71a2      	strb	r2, [r4, #6]
	buffer[i++] = (uint8_t)(tmp & 0xff);
 8003616:	71e3      	strb	r3, [r4, #7]
}
 8003618:	bd10      	pop	{r4, pc}
 800361a:	46c0      	nop			; (mov r8, r8)
 800361c:	200002e6 	.word	0x200002e6

08003620 <LED_TX>:
void LED_TX(GPIO_PinState state){
 8003620:	b530      	push	{r4, r5, lr}
	gpio_cfg.Pin = LED_TX_PIN;
 8003622:	2580      	movs	r5, #128	; 0x80
	gpio_cfg.Speed = GPIO_SPEED_LOW;
 8003624:	2300      	movs	r3, #0
void LED_TX(GPIO_PinState state){
 8003626:	b087      	sub	sp, #28
	gpio_cfg.Pin = LED_TX_PIN;
 8003628:	006d      	lsls	r5, r5, #1
void LED_TX(GPIO_PinState state){
 800362a:	0004      	movs	r4, r0
	gpio_cfg.Pin = LED_TX_PIN;
 800362c:	9501      	str	r5, [sp, #4]
	gpio_cfg.Speed = GPIO_SPEED_LOW;
 800362e:	9304      	str	r3, [sp, #16]
	if(state == false){
 8003630:	4298      	cmp	r0, r3
 8003632:	d10f      	bne.n	8003654 <LED_TX+0x34>
		HAL_GPIO_WritePin(LED_TX_PORT, LED_TX_PIN, state);
 8003634:	0002      	movs	r2, r0
 8003636:	20a0      	movs	r0, #160	; 0xa0
 8003638:	0029      	movs	r1, r5
 800363a:	05c0      	lsls	r0, r0, #23
 800363c:	f001 fe34 	bl	80052a8 <HAL_GPIO_WritePin>
		HAL_GPIO_Init(LED_TX_PORT, &gpio_cfg);
 8003640:	20a0      	movs	r0, #160	; 0xa0
		gpio_cfg.Pull = GPIO_PULLDOWN;
 8003642:	2302      	movs	r3, #2
		HAL_GPIO_Init(LED_TX_PORT, &gpio_cfg);
 8003644:	a901      	add	r1, sp, #4
 8003646:	05c0      	lsls	r0, r0, #23
		gpio_cfg.Mode = GPIO_MODE_INPUT;
 8003648:	9402      	str	r4, [sp, #8]
		gpio_cfg.Pull = GPIO_PULLDOWN;
 800364a:	9303      	str	r3, [sp, #12]
		HAL_GPIO_Init(LED_TX_PORT, &gpio_cfg);
 800364c:	f001 fcf2 	bl	8005034 <HAL_GPIO_Init>
}
 8003650:	b007      	add	sp, #28
 8003652:	bd30      	pop	{r4, r5, pc}
		HAL_GPIO_Init(LED_TX_PORT, &gpio_cfg);
 8003654:	20a0      	movs	r0, #160	; 0xa0
		gpio_cfg.Mode = GPIO_MODE_OUTPUT_PP;
 8003656:	2201      	movs	r2, #1
		HAL_GPIO_Init(LED_TX_PORT, &gpio_cfg);
 8003658:	a901      	add	r1, sp, #4
 800365a:	05c0      	lsls	r0, r0, #23
		gpio_cfg.Mode = GPIO_MODE_OUTPUT_PP;
 800365c:	9202      	str	r2, [sp, #8]
		gpio_cfg.Pull = GPIO_NOPULL;
 800365e:	9303      	str	r3, [sp, #12]
		HAL_GPIO_Init(LED_TX_PORT, &gpio_cfg);
 8003660:	f001 fce8 	bl	8005034 <HAL_GPIO_Init>
		HAL_GPIO_WritePin(LED_TX_PORT, LED_TX_PIN, state);
 8003664:	20a0      	movs	r0, #160	; 0xa0
 8003666:	0022      	movs	r2, r4
 8003668:	0029      	movs	r1, r5
 800366a:	05c0      	lsls	r0, r0, #23
 800366c:	f001 fe1c 	bl	80052a8 <HAL_GPIO_WritePin>
}
 8003670:	e7ee      	b.n	8003650 <LED_TX+0x30>
	...

08003674 <OnTxTimerLedEvent>:
static void OnTxTimerLedEvent(void *context){
 8003674:	b570      	push	{r4, r5, r6, lr}
	switch(app.stt.led_mode){
 8003676:	4c2b      	ldr	r4, [pc, #172]	; (8003724 <OnTxTimerLedEvent+0xb0>)
 8003678:	7963      	ldrb	r3, [r4, #5]
 800367a:	2b01      	cmp	r3, #1
 800367c:	d021      	beq.n	80036c2 <OnTxTimerLedEvent+0x4e>
 800367e:	2b02      	cmp	r3, #2
 8003680:	d032      	beq.n	80036e8 <OnTxTimerLedEvent+0x74>
 8003682:	4d29      	ldr	r5, [pc, #164]	; (8003728 <OnTxTimerLedEvent+0xb4>)
 8003684:	2b00      	cmp	r3, #0
 8003686:	d141      	bne.n	800370c <OnTxTimerLedEvent+0x98>
		if(blinkCntTX & 0x01){
 8003688:	782a      	ldrb	r2, [r5, #0]
 800368a:	3301      	adds	r3, #1
 800368c:	0010      	movs	r0, r2
 800368e:	4018      	ands	r0, r3
 8003690:	421a      	tst	r2, r3
 8003692:	d000      	beq.n	8003696 <OnTxTimerLedEvent+0x22>
			LED_TX(true);
 8003694:	0018      	movs	r0, r3
			LED_TX(false);
 8003696:	f7ff ffc3 	bl	8003620 <LED_TX>
		if(blinkCntTX){
 800369a:	782b      	ldrb	r3, [r5, #0]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00b      	beq.n	80036b8 <OnTxTimerLedEvent+0x44>
			blinkCntTX--;
 80036a0:	3b01      	subs	r3, #1
 80036a2:	702b      	strb	r3, [r5, #0]
			if(app.cfg.cfg.tx_mode == P2P_MODE){
 80036a4:	7be3      	ldrb	r3, [r4, #15]
				UTIL_TIMER_StartWithPeriod(&LedTimer, LED_TX_LORAWAN_BLINK_TIME);
 80036a6:	2164      	movs	r1, #100	; 0x64
 80036a8:	4820      	ldr	r0, [pc, #128]	; (800372c <OnTxTimerLedEvent+0xb8>)
			if(app.cfg.cfg.tx_mode == P2P_MODE){
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d101      	bne.n	80036b2 <OnTxTimerLedEvent+0x3e>
				UTIL_TIMER_StartWithPeriod(&LedTimer, LED_TX_P2P_BLINK_TIME);
 80036ae:	21fa      	movs	r1, #250	; 0xfa
 80036b0:	0049      	lsls	r1, r1, #1
			UTIL_TIMER_StartWithPeriod(&LedTimer, LED_P2P_BLINK_TIME);
 80036b2:	f00b fae1 	bl	800ec78 <UTIL_TIMER_StartWithPeriod>
}
 80036b6:	bd70      	pop	{r4, r5, r6, pc}
			blinkCntTX = (LED_TX_BLINK_TIMES*2);
 80036b8:	230a      	movs	r3, #10
			blinkCntLoRa = (LED_LORAWAN_BLINK_TIMES*2);
 80036ba:	702b      	strb	r3, [r5, #0]
		app.stt.led_mode = LED_MODE_OFF;
 80036bc:	2303      	movs	r3, #3
 80036be:	7163      	strb	r3, [r4, #5]
}
 80036c0:	e7f9      	b.n	80036b6 <OnTxTimerLedEvent+0x42>
		if(blinkCntLoRa & 0x01){
 80036c2:	4d1b      	ldr	r5, [pc, #108]	; (8003730 <OnTxTimerLedEvent+0xbc>)
 80036c4:	782a      	ldrb	r2, [r5, #0]
 80036c6:	0010      	movs	r0, r2
 80036c8:	4018      	ands	r0, r3
 80036ca:	421a      	tst	r2, r3
 80036cc:	d000      	beq.n	80036d0 <OnTxTimerLedEvent+0x5c>
			LED_TX(true);
 80036ce:	0018      	movs	r0, r3
			LED_TX(false);
 80036d0:	f7ff ffa6 	bl	8003620 <LED_TX>
		if(blinkCntLoRa){
 80036d4:	782b      	ldrb	r3, [r5, #0]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d004      	beq.n	80036e4 <OnTxTimerLedEvent+0x70>
			UTIL_TIMER_StartWithPeriod(&LedTimer, LED_LORAWAN_BLINK_TIME);
 80036da:	2164      	movs	r1, #100	; 0x64
			blinkCntLoRa--;
 80036dc:	3b01      	subs	r3, #1
 80036de:	702b      	strb	r3, [r5, #0]
			UTIL_TIMER_StartWithPeriod(&LedTimer, LED_P2P_BLINK_TIME);
 80036e0:	4812      	ldr	r0, [pc, #72]	; (800372c <OnTxTimerLedEvent+0xb8>)
 80036e2:	e7e6      	b.n	80036b2 <OnTxTimerLedEvent+0x3e>
			blinkCntLoRa = (LED_LORAWAN_BLINK_TIMES*2);
 80036e4:	2312      	movs	r3, #18
 80036e6:	e7e8      	b.n	80036ba <OnTxTimerLedEvent+0x46>
		if(blinkCntP2P & 0x01){
 80036e8:	4d12      	ldr	r5, [pc, #72]	; (8003734 <OnTxTimerLedEvent+0xc0>)
 80036ea:	2301      	movs	r3, #1
 80036ec:	782a      	ldrb	r2, [r5, #0]
 80036ee:	0010      	movs	r0, r2
 80036f0:	4018      	ands	r0, r3
 80036f2:	421a      	tst	r2, r3
 80036f4:	d000      	beq.n	80036f8 <OnTxTimerLedEvent+0x84>
			LED_TX(true);
 80036f6:	0018      	movs	r0, r3
			LED_TX(false);
 80036f8:	f7ff ff92 	bl	8003620 <LED_TX>
		if(blinkCntP2P){
 80036fc:	782b      	ldrb	r3, [r5, #0]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d0dc      	beq.n	80036bc <OnTxTimerLedEvent+0x48>
			UTIL_TIMER_StartWithPeriod(&LedTimer, LED_P2P_BLINK_TIME);
 8003702:	21fa      	movs	r1, #250	; 0xfa
			blinkCntP2P--;
 8003704:	3b01      	subs	r3, #1
 8003706:	702b      	strb	r3, [r5, #0]
			UTIL_TIMER_StartWithPeriod(&LedTimer, LED_P2P_BLINK_TIME);
 8003708:	0089      	lsls	r1, r1, #2
 800370a:	e7e9      	b.n	80036e0 <OnTxTimerLedEvent+0x6c>
		blinkCntTX = (LED_TX_BLINK_TIMES*2);
 800370c:	230a      	movs	r3, #10
		blinkCntLoRa = (LED_LORAWAN_BLINK_TIMES*2);
 800370e:	2212      	movs	r2, #18
		blinkCntP2P = (LED_P2P_BLINK_TIMES*2);
 8003710:	2000      	movs	r0, #0
		blinkCntTX = (LED_TX_BLINK_TIMES*2);
 8003712:	702b      	strb	r3, [r5, #0]
		blinkCntLoRa = (LED_LORAWAN_BLINK_TIMES*2);
 8003714:	4b06      	ldr	r3, [pc, #24]	; (8003730 <OnTxTimerLedEvent+0xbc>)
 8003716:	701a      	strb	r2, [r3, #0]
		blinkCntP2P = (LED_P2P_BLINK_TIMES*2);
 8003718:	4b06      	ldr	r3, [pc, #24]	; (8003734 <OnTxTimerLedEvent+0xc0>)
 800371a:	7018      	strb	r0, [r3, #0]
		LED_TX(false);
 800371c:	f7ff ff80 	bl	8003620 <LED_TX>
 8003720:	e7cc      	b.n	80036bc <OnTxTimerLedEvent+0x48>
 8003722:	46c0      	nop			; (mov r8, r8)
 8003724:	20000038 	.word	0x20000038
 8003728:	20000049 	.word	0x20000049
 800372c:	20001504 	.word	0x20001504
 8003730:	20000048 	.word	0x20000048
 8003734:	20000308 	.word	0x20000308

08003738 <LED_Blink>:
void LED_Blink(led_mode_t mode){
 8003738:	b570      	push	{r4, r5, r6, lr}
 800373a:	0004      	movs	r4, r0
	if(mode > LED_MODE_P2P || app.stt.led_mode != LED_MODE_OFF){
 800373c:	2802      	cmp	r0, #2
 800373e:	d818      	bhi.n	8003772 <LED_Blink+0x3a>
 8003740:	4e0f      	ldr	r6, [pc, #60]	; (8003780 <LED_Blink+0x48>)
 8003742:	7973      	ldrb	r3, [r6, #5]
 8003744:	2b03      	cmp	r3, #3
 8003746:	d114      	bne.n	8003772 <LED_Blink+0x3a>
	LED_TX(true);
 8003748:	2001      	movs	r0, #1
 800374a:	f7ff ff69 	bl	8003620 <LED_TX>
	UTIL_TIMER_Stop(&LedTimer);
 800374e:	4d0d      	ldr	r5, [pc, #52]	; (8003784 <LED_Blink+0x4c>)
	app.stt.led_mode = mode;
 8003750:	7174      	strb	r4, [r6, #5]
	UTIL_TIMER_Stop(&LedTimer);
 8003752:	0028      	movs	r0, r5
 8003754:	f00b f9fa 	bl	800eb4c <UTIL_TIMER_Stop>
		UTIL_TIMER_StartWithPeriod(&LedTimer, LED_LORAWAN_ON_TIME);
 8003758:	2164      	movs	r1, #100	; 0x64
	switch(mode){
 800375a:	2c01      	cmp	r4, #1
 800375c:	d006      	beq.n	800376c <LED_Blink+0x34>
 800375e:	2c02      	cmp	r4, #2
 8003760:	d00a      	beq.n	8003778 <LED_Blink+0x40>
		if(app.cfg.cfg.tx_mode == P2P_MODE){
 8003762:	7bf3      	ldrb	r3, [r6, #15]
 8003764:	2b01      	cmp	r3, #1
 8003766:	d105      	bne.n	8003774 <LED_Blink+0x3c>
			UTIL_TIMER_StartWithPeriod(&LedTimer, LED_TX_P2P_ON_TIME);
 8003768:	21fa      	movs	r1, #250	; 0xfa
 800376a:	0049      	lsls	r1, r1, #1
		UTIL_TIMER_StartWithPeriod(&LedTimer, LED_P2P_ON_TIME);
 800376c:	0028      	movs	r0, r5
 800376e:	f00b fa83 	bl	800ec78 <UTIL_TIMER_StartWithPeriod>
}
 8003772:	bd70      	pop	{r4, r5, r6, pc}
			UTIL_TIMER_StartWithPeriod(&LedTimer, LED_TX_LORAWAN_ON_TIME);
 8003774:	4904      	ldr	r1, [pc, #16]	; (8003788 <LED_Blink+0x50>)
 8003776:	e7f9      	b.n	800376c <LED_Blink+0x34>
		UTIL_TIMER_StartWithPeriod(&LedTimer, LED_P2P_ON_TIME);
 8003778:	21fa      	movs	r1, #250	; 0xfa
 800377a:	00c9      	lsls	r1, r1, #3
 800377c:	e7f6      	b.n	800376c <LED_Blink+0x34>
 800377e:	46c0      	nop			; (mov r8, r8)
 8003780:	20000038 	.word	0x20000038
 8003784:	20001504 	.word	0x20001504
 8003788:	00001770 	.word	0x00001770

0800378c <App_Send>:
void App_Send(send_mode_t mode){
 800378c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(app.stt.lora_state == LORA_IDLE){
 800378e:	4d2f      	ldr	r5, [pc, #188]	; (800384c <App_Send+0xc0>)
void App_Send(send_mode_t mode){
 8003790:	b08f      	sub	sp, #60	; 0x3c
 8003792:	9008      	str	r0, [sp, #32]
	if(app.stt.lora_state == LORA_IDLE){
 8003794:	79af      	ldrb	r7, [r5, #6]
 8003796:	2f00      	cmp	r7, #0
 8003798:	d12e      	bne.n	80037f8 <App_Send+0x6c>
		app.stt.lora_state = LORA_BUSY;
 800379a:	2601      	movs	r6, #1
		LmHandlerGetDevEUI(&eui[0]);
 800379c:	ac0b      	add	r4, sp, #44	; 0x2c
 800379e:	0020      	movs	r0, r4
		app.stt.lora_state = LORA_BUSY;
 80037a0:	71ae      	strb	r6, [r5, #6]
		LmHandlerGetDevEUI(&eui[0]);
 80037a2:	f005 f9fb 	bl	8008b9c <LmHandlerGetDevEUI>
		APP_LOG(TS_OFF, VLEVEL_L, "SN:%02X%02X%02X%02X%02X%02X%02X%02X\r\n", eui[0], eui[1], eui[2], eui[3], eui[4], eui[5], eui[6], eui[7]);
 80037a6:	79e3      	ldrb	r3, [r4, #7]
 80037a8:	003a      	movs	r2, r7
 80037aa:	9307      	str	r3, [sp, #28]
 80037ac:	79a3      	ldrb	r3, [r4, #6]
 80037ae:	0039      	movs	r1, r7
 80037b0:	9306      	str	r3, [sp, #24]
 80037b2:	7963      	ldrb	r3, [r4, #5]
 80037b4:	0030      	movs	r0, r6
 80037b6:	9305      	str	r3, [sp, #20]
 80037b8:	7923      	ldrb	r3, [r4, #4]
 80037ba:	9304      	str	r3, [sp, #16]
 80037bc:	78e3      	ldrb	r3, [r4, #3]
 80037be:	9303      	str	r3, [sp, #12]
 80037c0:	78a3      	ldrb	r3, [r4, #2]
 80037c2:	9302      	str	r3, [sp, #8]
 80037c4:	7863      	ldrb	r3, [r4, #1]
 80037c6:	9301      	str	r3, [sp, #4]
 80037c8:	7823      	ldrb	r3, [r4, #0]
 80037ca:	9300      	str	r3, [sp, #0]
 80037cc:	4b20      	ldr	r3, [pc, #128]	; (8003850 <App_Send+0xc4>)
 80037ce:	f00b fb8b 	bl	800eee8 <UTIL_ADV_TRACE_COND_FSend>
		LED_Blink(LED_MODE_TX);
 80037d2:	0038      	movs	r0, r7
 80037d4:	f7ff ffb0 	bl	8003738 <LED_Blink>
		if(app.cfg.cfg.tx_mode == LORAWAN_MODE){
 80037d8:	7beb      	ldrb	r3, [r5, #15]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d111      	bne.n	8003802 <App_Send+0x76>
			if(mode == SEND_MODE_AUTO){
 80037de:	4c1d      	ldr	r4, [pc, #116]	; (8003854 <App_Send+0xc8>)
 80037e0:	9b08      	ldr	r3, [sp, #32]
 80037e2:	6860      	ldr	r0, [r4, #4]
				AppData.Port = LORAWAN_USER_APP_PORT;
 80037e4:	7026      	strb	r6, [r4, #0]
			if(mode == SEND_MODE_AUTO){
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d108      	bne.n	80037fc <App_Send+0x70>
				AppData.BufferSize = fillBufferAutoTx(AppData.Buffer);
 80037ea:	f7ff fed9 	bl	80035a0 <fillBufferAutoTx>
				AppData.BufferSize = fillBufferManualTx(AppData.Buffer);
 80037ee:	7060      	strb	r0, [r4, #1]
			UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 80037f0:	2100      	movs	r1, #0
 80037f2:	2002      	movs	r0, #2
 80037f4:	f00b f880 	bl	800e8f8 <UTIL_SEQ_SetTask>
}
 80037f8:	b00f      	add	sp, #60	; 0x3c
 80037fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
				AppData.BufferSize = fillBufferManualTx(AppData.Buffer);
 80037fc:	f7ff fef0 	bl	80035e0 <fillBufferManualTx>
 8003800:	e7f5      	b.n	80037ee <App_Send+0x62>
		}else if(app.cfg.cfg.tx_mode == P2P_MODE){
 8003802:	2b01      	cmp	r3, #1
 8003804:	d1f8      	bne.n	80037f8 <App_Send+0x6c>
			Radio.SetChannel(P2P_RF_FREQUENCY);
 8003806:	4e14      	ldr	r6, [pc, #80]	; (8003858 <App_Send+0xcc>)
 8003808:	4814      	ldr	r0, [pc, #80]	; (800385c <App_Send+0xd0>)
 800380a:	68f3      	ldr	r3, [r6, #12]
 800380c:	9309      	str	r3, [sp, #36]	; 0x24
 800380e:	4798      	blx	r3
			LmHandlerGetDevEUI(&LoRaBuffer[0]);
 8003810:	4813      	ldr	r0, [pc, #76]	; (8003860 <App_Send+0xd4>)
 8003812:	f005 f9c3 	bl	8008b9c <LmHandlerGetDevEUI>
			LoRaBufferSize = 8;
 8003816:	2308      	movs	r3, #8
 8003818:	4c12      	ldr	r4, [pc, #72]	; (8003864 <App_Send+0xd8>)
 800381a:	4813      	ldr	r0, [pc, #76]	; (8003868 <App_Send+0xdc>)
 800381c:	8023      	strh	r3, [r4, #0]
			if(mode == SEND_MODE_AUTO){
 800381e:	9b08      	ldr	r3, [sp, #32]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d110      	bne.n	8003846 <App_Send+0xba>
				LoRaBufferSize += fillBufferAutoTx((uint8_t *)&LoRaBuffer[LoRaBufferSize]);
 8003824:	f7ff febc 	bl	80035a0 <fillBufferAutoTx>
				LoRaBufferSize += fillBufferManualTx((uint8_t *)&LoRaBuffer[LoRaBufferSize]);
 8003828:	8823      	ldrh	r3, [r4, #0]
 800382a:	18c0      	adds	r0, r0, r3
 800382c:	8020      	strh	r0, [r4, #0]
			app.stt.send_mode = mode;
 800382e:	9b08      	ldr	r3, [sp, #32]
			Radio.Send(&LoRaBuffer[2], LoRaBufferSize-2);
 8003830:	8821      	ldrh	r1, [r4, #0]
			app.stt.send_mode = mode;
 8003832:	712b      	strb	r3, [r5, #4]
			Radio.Send(&LoRaBuffer[2], LoRaBufferSize-2);
 8003834:	3902      	subs	r1, #2
 8003836:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8003838:	480c      	ldr	r0, [pc, #48]	; (800386c <App_Send+0xe0>)
 800383a:	b2c9      	uxtb	r1, r1
 800383c:	9308      	str	r3, [sp, #32]
 800383e:	4798      	blx	r3
			app.stt.tx_cnt = 0;
 8003840:	2300      	movs	r3, #0
 8003842:	806b      	strh	r3, [r5, #2]
}
 8003844:	e7d8      	b.n	80037f8 <App_Send+0x6c>
				LoRaBufferSize += fillBufferManualTx((uint8_t *)&LoRaBuffer[LoRaBufferSize]);
 8003846:	f7ff fecb 	bl	80035e0 <fillBufferManualTx>
 800384a:	e7ed      	b.n	8003828 <App_Send+0x9c>
 800384c:	20000038 	.word	0x20000038
 8003850:	0800f38b 	.word	0x0800f38b
 8003854:	20000000 	.word	0x20000000
 8003858:	0800fd8c 	.word	0x0800fd8c
 800385c:	3689cac0 	.word	0x3689cac0
 8003860:	2000155c 	.word	0x2000155c
 8003864:	20000036 	.word	0x20000036
 8003868:	20001564 	.word	0x20001564
 800386c:	2000155e 	.word	0x2000155e

08003870 <OnTimer>:
static void OnTimer(void *contextid){
 8003870:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if(ind == 0){
 8003872:	4c10      	ldr	r4, [pc, #64]	; (80038b4 <OnTimer+0x44>)
 8003874:	7823      	ldrb	r3, [r4, #0]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d102      	bne.n	8003880 <OnTimer+0x10>
		ind = 5;
 800387a:	3305      	adds	r3, #5
 800387c:	7023      	strb	r3, [r4, #0]
}
 800387e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
		ind--;
 8003880:	3b01      	subs	r3, #1
 8003882:	7023      	strb	r3, [r4, #0]
		FXOS8700CQReadAccelMagnData(&hi2c1);
 8003884:	f7ff fb40 	bl	8002f08 <FXOS8700CQReadAccelMagnData.constprop.0>
		APP_LOG(TS_OFF, VLEVEL_L, "nTX_Mg - X: %d Y: %d Z: %d| %d\r\n",  magX, magY, magZ, ind);
 8003888:	7823      	ldrb	r3, [r4, #0]
 800388a:	2001      	movs	r0, #1
 800388c:	9303      	str	r3, [sp, #12]
		return MAG.z;
 800388e:	4b0a      	ldr	r3, [pc, #40]	; (80038b8 <OnTimer+0x48>)
		APP_LOG(TS_OFF, VLEVEL_L, "nTX_Mg - X: %d Y: %d Z: %d| %d\r\n",  magX, magY, magZ, ind);
 8003890:	2104      	movs	r1, #4
 8003892:	5e5a      	ldrsh	r2, [r3, r1]
 8003894:	9202      	str	r2, [sp, #8]
 8003896:	2102      	movs	r1, #2
 8003898:	5e5a      	ldrsh	r2, [r3, r1]
 800389a:	9201      	str	r2, [sp, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	5e9b      	ldrsh	r3, [r3, r2]
 80038a0:	2200      	movs	r2, #0
 80038a2:	9300      	str	r3, [sp, #0]
 80038a4:	0011      	movs	r1, r2
 80038a6:	4b05      	ldr	r3, [pc, #20]	; (80038bc <OnTimer+0x4c>)
 80038a8:	f00b fb1e 	bl	800eee8 <UTIL_ADV_TRACE_COND_FSend>
		App_Send(SEND_MODE_AUTO);
 80038ac:	2000      	movs	r0, #0
 80038ae:	f7ff ff6d 	bl	800378c <App_Send>
}
 80038b2:	e7e4      	b.n	800387e <OnTimer+0xe>
 80038b4:	2000004a 	.word	0x2000004a
 80038b8:	200002e6 	.word	0x200002e6
 80038bc:	0800f3b1 	.word	0x0800f3b1

080038c0 <OnBtnTimeoutTimer>:
static void OnBtnTimeoutTimer(void *contextid){
 80038c0:	b513      	push	{r0, r1, r4, lr}
	if(app.stt.btnCnt >= CLICKS_TO_TX && app.stt.btnCnt < (CLICKS_TO_CHANGE_MODE)){
 80038c2:	4c14      	ldr	r4, [pc, #80]	; (8003914 <OnBtnTimeoutTimer+0x54>)
 80038c4:	8823      	ldrh	r3, [r4, #0]
 80038c6:	1e5a      	subs	r2, r3, #1
 80038c8:	2a03      	cmp	r2, #3
 80038ca:	d80b      	bhi.n	80038e4 <OnBtnTimeoutTimer+0x24>
		if(sendEstacionamentoTongle == 1)
 80038cc:	4a12      	ldr	r2, [pc, #72]	; (8003918 <OnBtnTimeoutTimer+0x58>)
		App_Send(SEND_MODE_MANUAL);
 80038ce:	2001      	movs	r0, #1
		if(sendEstacionamentoTongle == 1)
 80038d0:	6813      	ldr	r3, [r2, #0]
 80038d2:	3b01      	subs	r3, #1
 80038d4:	1e59      	subs	r1, r3, #1
 80038d6:	418b      	sbcs	r3, r1
 80038d8:	6013      	str	r3, [r2, #0]
		App_Send(SEND_MODE_MANUAL);
 80038da:	f7ff ff57 	bl	800378c <App_Send>
	app.stt.btnCnt = 0;
 80038de:	2300      	movs	r3, #0
 80038e0:	8023      	strh	r3, [r4, #0]
}
 80038e2:	bd13      	pop	{r0, r1, r4, pc}
	}else if(app.stt.btnCnt >= (CLICKS_TO_CHANGE_MODE)){
 80038e4:	2b04      	cmp	r3, #4
 80038e6:	d9fa      	bls.n	80038de <OnBtnTimeoutTimer+0x1e>
		if(app.cfg.cfg.tx_mode != P2P_MODE){
 80038e8:	7be0      	ldrb	r0, [r4, #15]
 80038ea:	2801      	cmp	r0, #1
 80038ec:	d00b      	beq.n	8003906 <OnBtnTimeoutTimer+0x46>
			app.cfg.cfg.tx_mode = P2P_MODE;
 80038ee:	2301      	movs	r3, #1
			LED_Blink(LED_MODE_P2P);
 80038f0:	2002      	movs	r0, #2
			app.cfg.cfg.tx_mode = P2P_MODE;
 80038f2:	73e3      	strb	r3, [r4, #15]
			LED_Blink(LED_MODE_P2P);
 80038f4:	f7ff ff20 	bl	8003738 <LED_Blink>
			P2P_Radio_Init();
 80038f8:	f7ff fce2 	bl	80032c0 <P2P_Radio_Init>
			Radio.Sleep();
 80038fc:	4b07      	ldr	r3, [pc, #28]	; (800391c <OnBtnTimeoutTimer+0x5c>)
 80038fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003900:	9301      	str	r3, [sp, #4]
 8003902:	4798      	blx	r3
 8003904:	e7eb      	b.n	80038de <OnBtnTimeoutTimer+0x1e>
			app.cfg.cfg.tx_mode = LORAWAN_MODE;
 8003906:	2300      	movs	r3, #0
 8003908:	73e3      	strb	r3, [r4, #15]
			LED_Blink(LED_MODE_LORAWAN);
 800390a:	f7ff ff15 	bl	8003738 <LED_Blink>
			LoRaWAN_Mode_Init();
 800390e:	f7ff fd25 	bl	800335c <LoRaWAN_Mode_Init>
 8003912:	e7e4      	b.n	80038de <OnBtnTimeoutTimer+0x1e>
 8003914:	20000038 	.word	0x20000038
 8003918:	20000368 	.word	0x20000368
 800391c:	0800fd8c 	.word	0x0800fd8c

08003920 <getInterruptFlag>:
	return flagInterrupt;
 8003920:	4b01      	ldr	r3, [pc, #4]	; (8003928 <getInterruptFlag+0x8>)
 8003922:	6818      	ldr	r0, [r3, #0]
}
 8003924:	4770      	bx	lr
 8003926:	46c0      	nop			; (mov r8, r8)
 8003928:	20000310 	.word	0x20000310

0800392c <resetInterruptFlag>:
	flagInterrupt = 0;
 800392c:	2200      	movs	r2, #0
 800392e:	4b01      	ldr	r3, [pc, #4]	; (8003934 <resetInterruptFlag+0x8>)
 8003930:	601a      	str	r2, [r3, #0]
}
 8003932:	4770      	bx	lr
 8003934:	20000310 	.word	0x20000310

08003938 <tratarInterrupcao>:
{
 8003938:	b5f0      	push	{r4, r5, r6, r7, lr}
	HAL_I2C_Mem_Read(&hi2c1, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_M_INT_SRC_REG, 1, &Int_Source, 1, i2c_timeout);
 800393a:	26fa      	movs	r6, #250	; 0xfa
 800393c:	2716      	movs	r7, #22
 800393e:	2401      	movs	r4, #1
{
 8003940:	b087      	sub	sp, #28
	HAL_I2C_Mem_Read(&hi2c1, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_M_INT_SRC_REG, 1, &Int_Source, 1, i2c_timeout);
 8003942:	4d3a      	ldr	r5, [pc, #232]	; (8003a2c <tratarInterrupcao+0xf4>)
 8003944:	446f      	add	r7, sp
 8003946:	0076      	lsls	r6, r6, #1
 8003948:	0023      	movs	r3, r4
 800394a:	225e      	movs	r2, #94	; 0x5e
 800394c:	213c      	movs	r1, #60	; 0x3c
 800394e:	0028      	movs	r0, r5
 8003950:	9602      	str	r6, [sp, #8]
 8003952:	9401      	str	r4, [sp, #4]
 8003954:	9700      	str	r7, [sp, #0]
 8003956:	f001 ff11 	bl	800577c <HAL_I2C_Mem_Read>
	if (Int_Source & 0x04)  // Magnetic threshold event detected?
 800395a:	783b      	ldrb	r3, [r7, #0]
 800395c:	075b      	lsls	r3, r3, #29
 800395e:	d51f      	bpl.n	80039a0 <tratarInterrupcao+0x68>
		APP_LOG(TS_OFF, VLEVEL_L, "INTERRUPT THRESHOLD\r\n");
 8003960:	2200      	movs	r2, #0
 8003962:	4b33      	ldr	r3, [pc, #204]	; (8003a30 <tratarInterrupcao+0xf8>)
 8003964:	0011      	movs	r1, r2
 8003966:	0020      	movs	r0, r4
 8003968:	f00b fabe 	bl	800eee8 <UTIL_ADV_TRACE_COND_FSend>
		HAL_I2C_Mem_Read(&hi2c1, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_M_THS_SRC_REG, 1, &M_Ths_Src, 1, i2c_timeout);
 800396c:	2317      	movs	r3, #23
 800396e:	446b      	add	r3, sp
 8003970:	2253      	movs	r2, #83	; 0x53
 8003972:	9300      	str	r3, [sp, #0]
 8003974:	213c      	movs	r1, #60	; 0x3c
 8003976:	0023      	movs	r3, r4
 8003978:	0028      	movs	r0, r5
 800397a:	9602      	str	r6, [sp, #8]
 800397c:	9401      	str	r4, [sp, #4]
 800397e:	f001 fefd 	bl	800577c <HAL_I2C_Mem_Read>
		app.stt.btnCnt++;
 8003982:	4a2c      	ldr	r2, [pc, #176]	; (8003a34 <tratarInterrupcao+0xfc>)
 8003984:	8813      	ldrh	r3, [r2, #0]
 8003986:	191b      	adds	r3, r3, r4
 8003988:	8013      	strh	r3, [r2, #0]
		if(estacionamento_interrupt_tongle == 0)
 800398a:	4b2b      	ldr	r3, [pc, #172]	; (8003a38 <tratarInterrupcao+0x100>)
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	2a00      	cmp	r2, #0
 8003990:	d145      	bne.n	8003a1e <tratarInterrupcao+0xe6>
			int value = FXOS8700CQCalibrate(INTERRUPT_MENOR_QUE);
 8003992:	2007      	movs	r0, #7
			estacionamento_interrupt_tongle = 1;
 8003994:	601c      	str	r4, [r3, #0]
			int value = FXOS8700CQCalibrate(INTERRUPT_MENOR_QUE);
 8003996:	f7ff fc39 	bl	800320c <FXOS8700CQCalibrate>
			FXOS8700CQInitSleep(&hi2c1, value, INTERRUPT_MENOR_QUE);
 800399a:	2107      	movs	r1, #7
			FXOS8700CQInitSleep(&hi2c1, value, INTERRUPT_MAIOR_QUE);
 800399c:	f7ff fb86 	bl	80030ac <FXOS8700CQInitSleep.constprop.0>
	HAL_I2C_Mem_Read(&hi2c1, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_INT_SOURCE, 1, &Int_Source, 1, i2c_timeout);
 80039a0:	26fa      	movs	r6, #250	; 0xfa
 80039a2:	2716      	movs	r7, #22
 80039a4:	2401      	movs	r4, #1
 80039a6:	446f      	add	r7, sp
 80039a8:	0076      	lsls	r6, r6, #1
 80039aa:	0023      	movs	r3, r4
 80039ac:	220c      	movs	r2, #12
 80039ae:	213c      	movs	r1, #60	; 0x3c
 80039b0:	0028      	movs	r0, r5
 80039b2:	9602      	str	r6, [sp, #8]
 80039b4:	9401      	str	r4, [sp, #4]
 80039b6:	9700      	str	r7, [sp, #0]
 80039b8:	f001 fee0 	bl	800577c <HAL_I2C_Mem_Read>
	if (Int_Source & 0x80)  // Auto-sleep/"ake interrupt?
 80039bc:	783b      	ldrb	r3, [r7, #0]
 80039be:	2b7f      	cmp	r3, #127	; 0x7f
 80039c0:	d922      	bls.n	8003a08 <tratarInterrupcao+0xd0>
		HAL_I2C_Mem_Read(&hi2c1, FXOS8700CQ_SLAVE_ADDR << 1, FXOS8700CQ_SYSMOD, 1, &Sysmod, 1, i2c_timeout);
 80039c2:	9602      	str	r6, [sp, #8]
 80039c4:	3ede      	subs	r6, #222	; 0xde
 80039c6:	3eff      	subs	r6, #255	; 0xff
 80039c8:	446e      	add	r6, sp
 80039ca:	0023      	movs	r3, r4
 80039cc:	220b      	movs	r2, #11
 80039ce:	213c      	movs	r1, #60	; 0x3c
 80039d0:	0028      	movs	r0, r5
 80039d2:	9401      	str	r4, [sp, #4]
 80039d4:	9600      	str	r6, [sp, #0]
 80039d6:	f001 fed1 	bl	800577c <HAL_I2C_Mem_Read>
		APP_LOG(TS_OFF, VLEVEL_L, "MAGNETOMETER: GO TO SLEEP| Int_Source %02X, Sysmod %02X\r\n", Int_Source, Sysmod);
 80039da:	2200      	movs	r2, #0
 80039dc:	7833      	ldrb	r3, [r6, #0]
 80039de:	0011      	movs	r1, r2
 80039e0:	9301      	str	r3, [sp, #4]
 80039e2:	783b      	ldrb	r3, [r7, #0]
 80039e4:	0020      	movs	r0, r4
 80039e6:	9300      	str	r3, [sp, #0]
 80039e8:	4b14      	ldr	r3, [pc, #80]	; (8003a3c <tratarInterrupcao+0x104>)
 80039ea:	f00b fa7d 	bl	800eee8 <UTIL_ADV_TRACE_COND_FSend>
		if(Sysmod != 0x02)
 80039ee:	7833      	ldrb	r3, [r6, #0]
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d002      	beq.n	80039fa <tratarInterrupcao+0xc2>
			HAL_Delay(10000);
 80039f4:	4812      	ldr	r0, [pc, #72]	; (8003a40 <tratarInterrupcao+0x108>)
 80039f6:	f7ff f9e5 	bl	8002dc4 <HAL_Delay>
		UTIL_TIMER_Stop(&btnTimeOutTimer);
 80039fa:	4c12      	ldr	r4, [pc, #72]	; (8003a44 <tratarInterrupcao+0x10c>)
 80039fc:	0020      	movs	r0, r4
 80039fe:	f00b f8a5 	bl	800eb4c <UTIL_TIMER_Stop>
		UTIL_TIMER_Start(&btnTimeOutTimer);
 8003a02:	0020      	movs	r0, r4
 8003a04:	f00b f8f6 	bl	800ebf4 <UTIL_TIMER_Start>
	APP_LOG(TS_OFF, VLEVEL_L, "app.stt.btnCnt = %d\n\r", app.stt.btnCnt);
 8003a08:	2200      	movs	r2, #0
 8003a0a:	4b0a      	ldr	r3, [pc, #40]	; (8003a34 <tratarInterrupcao+0xfc>)
 8003a0c:	0011      	movs	r1, r2
 8003a0e:	881b      	ldrh	r3, [r3, #0]
 8003a10:	2001      	movs	r0, #1
 8003a12:	9300      	str	r3, [sp, #0]
 8003a14:	4b0c      	ldr	r3, [pc, #48]	; (8003a48 <tratarInterrupcao+0x110>)
 8003a16:	f00b fa67 	bl	800eee8 <UTIL_ADV_TRACE_COND_FSend>
}
 8003a1a:	b007      	add	sp, #28
 8003a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			estacionamento_interrupt_tongle = 0;
 8003a1e:	2200      	movs	r2, #0
			int value = FXOS8700CQCalibrate(INTERRUPT_MAIOR_QUE);
 8003a20:	2006      	movs	r0, #6
			estacionamento_interrupt_tongle = 0;
 8003a22:	601a      	str	r2, [r3, #0]
			int value = FXOS8700CQCalibrate(INTERRUPT_MAIOR_QUE);
 8003a24:	f7ff fbf2 	bl	800320c <FXOS8700CQCalibrate>
			FXOS8700CQInitSleep(&hi2c1, value, INTERRUPT_MAIOR_QUE);
 8003a28:	2106      	movs	r1, #6
 8003a2a:	e7b7      	b.n	800399c <tratarInterrupcao+0x64>
 8003a2c:	20000314 	.word	0x20000314
 8003a30:	0800f3d2 	.word	0x0800f3d2
 8003a34:	20000038 	.word	0x20000038
 8003a38:	2000030c 	.word	0x2000030c
 8003a3c:	0800f3e8 	.word	0x0800f3e8
 8003a40:	00002710 	.word	0x00002710
 8003a44:	20001544 	.word	0x20001544
 8003a48:	0800f422 	.word	0x0800f422

08003a4c <EXTI_Init>:
	pExtiConfig.Mode = EXTI_MODE_INTERRUPT;
 8003a4c:	2301      	movs	r3, #1
void EXTI_Init(AppDioIrqHandler **irqHandlers){
 8003a4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a50:	b085      	sub	sp, #20
	pExtiConfig.Mode = EXTI_MODE_INTERRUPT;
 8003a52:	9301      	str	r3, [sp, #4]
	pExtiConfig.Trigger = EXTI_TRIGGER_FALLING;
 8003a54:	18db      	adds	r3, r3, r3
void EXTI_Init(AppDioIrqHandler **irqHandlers){
 8003a56:	0005      	movs	r5, r0
	pExtiConfig.Trigger = EXTI_TRIGGER_FALLING;
 8003a58:	9302      	str	r3, [sp, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a5a:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003a5e:	b672      	cpsid	i
		pExtiConfig.GPIOSel = app_exti_cnt[i].exti_port;
 8003a60:	2400      	movs	r4, #0
		HAL_EXTI_SetConfigLine(&hApp_DIO_exti[i], &pExtiConfig);
 8003a62:	4e17      	ldr	r6, [pc, #92]	; (8003ac0 <EXTI_Init+0x74>)
		pExtiConfig.Line = app_exti_cnt[i].line;
 8003a64:	4b17      	ldr	r3, [pc, #92]	; (8003ac4 <EXTI_Init+0x78>)
		HAL_EXTI_SetConfigLine(&hApp_DIO_exti[i], &pExtiConfig);
 8003a66:	4669      	mov	r1, sp
 8003a68:	0030      	movs	r0, r6
		pExtiConfig.Line = app_exti_cnt[i].line;
 8003a6a:	9300      	str	r3, [sp, #0]
		pExtiConfig.GPIOSel = app_exti_cnt[i].exti_port;
 8003a6c:	9403      	str	r4, [sp, #12]
		HAL_EXTI_SetConfigLine(&hApp_DIO_exti[i], &pExtiConfig);
 8003a6e:	f001 f91d 	bl	8004cac <HAL_EXTI_SetConfigLine>
		HAL_EXTI_RegisterCallback(&hApp_DIO_exti[i], HAL_EXTI_COMMON_CB_ID, irqHandlers[i]);
 8003a72:	0021      	movs	r1, r4
 8003a74:	682a      	ldr	r2, [r5, #0]
 8003a76:	0030      	movs	r0, r6
 8003a78:	f001 f96a 	bl	8004d50 <HAL_EXTI_RegisterCallback>
		HAL_NVIC_SetPriority(app_exti_cnt[i].irqn, app_exti_cnt[i].prio, 0x00);
 8003a7c:	0022      	movs	r2, r4
 8003a7e:	0021      	movs	r1, r4
 8003a80:	2007      	movs	r0, #7
 8003a82:	f000 ff89 	bl	8004998 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(app_exti_cnt[i].irqn);
 8003a86:	2007      	movs	r0, #7
 8003a88:	f000 ffb0 	bl	80049ec <HAL_NVIC_EnableIRQ>
		pExtiConfig.Line = app_exti_btn[i].line;
 8003a8c:	4b0e      	ldr	r3, [pc, #56]	; (8003ac8 <EXTI_Init+0x7c>)
		HAL_EXTI_SetConfigLine(&hApp_DIO_exti[i+APP_EXTI_CNT_NUM], &pExtiConfig);
 8003a8e:	4e0f      	ldr	r6, [pc, #60]	; (8003acc <EXTI_Init+0x80>)
		pExtiConfig.Line = app_exti_btn[i].line;
 8003a90:	9300      	str	r3, [sp, #0]
		pExtiConfig.GPIOSel = app_exti_btn[i].exti_port;
 8003a92:	2301      	movs	r3, #1
		HAL_EXTI_SetConfigLine(&hApp_DIO_exti[i+APP_EXTI_CNT_NUM], &pExtiConfig);
 8003a94:	4669      	mov	r1, sp
 8003a96:	0030      	movs	r0, r6
		pExtiConfig.GPIOSel = app_exti_btn[i].exti_port;
 8003a98:	9303      	str	r3, [sp, #12]
		HAL_EXTI_SetConfigLine(&hApp_DIO_exti[i+APP_EXTI_CNT_NUM], &pExtiConfig);
 8003a9a:	f001 f907 	bl	8004cac <HAL_EXTI_SetConfigLine>
		HAL_EXTI_RegisterCallback(&hApp_DIO_exti[i+APP_EXTI_CNT_NUM], HAL_EXTI_COMMON_CB_ID, irqHandlers[i+APP_EXTI_CNT_NUM]);
 8003a9e:	0021      	movs	r1, r4
 8003aa0:	686a      	ldr	r2, [r5, #4]
 8003aa2:	0030      	movs	r0, r6
 8003aa4:	f001 f954 	bl	8004d50 <HAL_EXTI_RegisterCallback>
		HAL_NVIC_SetPriority(app_exti_btn[i].irqn, app_exti_btn[i].prio, 0x00);
 8003aa8:	0022      	movs	r2, r4
 8003aaa:	0021      	movs	r1, r4
 8003aac:	2007      	movs	r0, #7
 8003aae:	f000 ff73 	bl	8004998 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(app_exti_btn[i].irqn);
 8003ab2:	2007      	movs	r0, #7
 8003ab4:	f000 ff9a 	bl	80049ec <HAL_NVIC_EnableIRQ>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ab8:	f387 8810 	msr	PRIMASK, r7
}
 8003abc:	b005      	add	sp, #20
 8003abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ac0:	20001534 	.word	0x20001534
 8003ac4:	0600000d 	.word	0x0600000d
 8003ac8:	06000006 	.word	0x06000006
 8003acc:	2000153c 	.word	0x2000153c

08003ad0 <TxAppInit>:
void TxAppInit(void){
 8003ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
	flagInterrupt = 0;
 8003ad2:	2400      	movs	r4, #0
 8003ad4:	4b6d      	ldr	r3, [pc, #436]	; (8003c8c <TxAppInit+0x1bc>)
void TxAppInit(void){
 8003ad6:	b095      	sub	sp, #84	; 0x54
	UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 8003ad8:	0021      	movs	r1, r4
 8003ada:	2001      	movs	r0, #1
 8003adc:	4a6c      	ldr	r2, [pc, #432]	; (8003c90 <TxAppInit+0x1c0>)
	flagInterrupt = 0;
 8003ade:	601c      	str	r4, [r3, #0]
	UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 8003ae0:	f00a ffb8 	bl	800ea54 <UTIL_SEQ_RegTask>
	UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 8003ae4:	0021      	movs	r1, r4
 8003ae6:	4a6b      	ldr	r2, [pc, #428]	; (8003c94 <TxAppInit+0x1c4>)
 8003ae8:	2002      	movs	r0, #2
 8003aea:	f00a ffb3 	bl	800ea54 <UTIL_SEQ_RegTask>
		((uint32_t *)(&app.cfg))[i] = ((uint32_t *)(&eeprom_cfg))[i];
 8003aee:	4e6a      	ldr	r6, [pc, #424]	; (8003c98 <TxAppInit+0x1c8>)
 8003af0:	4d6a      	ldr	r5, [pc, #424]	; (8003c9c <TxAppInit+0x1cc>)
 8003af2:	6833      	ldr	r3, [r6, #0]
	SetDevAddr(app.cfg.cfg.dev_addr);
 8003af4:	6830      	ldr	r0, [r6, #0]
		((uint32_t *)(&app.cfg))[i] = ((uint32_t *)(&eeprom_cfg))[i];
 8003af6:	60ab      	str	r3, [r5, #8]
 8003af8:	6873      	ldr	r3, [r6, #4]
 8003afa:	60eb      	str	r3, [r5, #12]
	SetDevAddr(app.cfg.cfg.dev_addr);
 8003afc:	f7ff f944 	bl	8002d88 <SetDevAddr>
	app.cfg.cfg.tx_time = DEFAULT_TIME_TX;
 8003b00:	4b67      	ldr	r3, [pc, #412]	; (8003ca0 <TxAppInit+0x1d0>)
	SX126xFreqCorrection(app.cfg.cfg.xta_trim);
 8003b02:	2014      	movs	r0, #20
	app.cfg.cfg.tx_time = DEFAULT_TIME_TX;
 8003b04:	60eb      	str	r3, [r5, #12]
	SX126xFreqCorrection(app.cfg.cfg.xta_trim);
 8003b06:	f00a f8c9 	bl	800dc9c <SX126xFreqCorrection>
	UTIL_ADV_TRACE_StartRxProcess(rx_bytes);
 8003b0a:	4866      	ldr	r0, [pc, #408]	; (8003ca4 <TxAppInit+0x1d4>)
 8003b0c:	f00b f996 	bl	800ee3c <UTIL_ADV_TRACE_StartRxProcess>
	LoRaWAN_Mode_Init();
 8003b10:	f7ff fc24 	bl	800335c <LoRaWAN_Mode_Init>
	FLASH_OBProgramInitTypeDef pOBInit = {
 8003b14:	220c      	movs	r2, #12
 8003b16:	0021      	movs	r1, r4
 8003b18:	a80c      	add	r0, sp, #48	; 0x30
 8003b1a:	f00b fac2 	bl	800f0a2 <memset>
 8003b1e:	2308      	movs	r3, #8
	HAL_FLASHEx_OBProgram(&pOBInit);
 8003b20:	a80b      	add	r0, sp, #44	; 0x2c
	FLASH_OBProgramInitTypeDef pOBInit = {
 8003b22:	930b      	str	r3, [sp, #44]	; 0x2c
	HAL_FLASHEx_OBProgram(&pOBInit);
 8003b24:	f001 f9fc 	bl	8004f20 <HAL_FLASHEx_OBProgram>
	EXTI_Init(AppDioIrq);
 8003b28:	485f      	ldr	r0, [pc, #380]	; (8003ca8 <TxAppInit+0x1d8>)
 8003b2a:	f7ff ff8f 	bl	8003a4c <EXTI_Init>
	GPIO_InitTypeDef gpio_cfg = {
 8003b2e:	2210      	movs	r2, #16
 8003b30:	0021      	movs	r1, r4
 8003b32:	a810      	add	r0, sp, #64	; 0x40
 8003b34:	f00b fab5 	bl	800f0a2 <memset>
		gpio_cfg.Pin = app_exti_cnt[i].pin;
 8003b38:	2380      	movs	r3, #128	; 0x80
		HAL_GPIO_Init(app_exti_cnt[i].gpio_port, &gpio_cfg);
 8003b3a:	20a0      	movs	r0, #160	; 0xa0
		gpio_cfg.Pin = app_exti_cnt[i].pin;
 8003b3c:	019b      	lsls	r3, r3, #6
		HAL_GPIO_Init(app_exti_cnt[i].gpio_port, &gpio_cfg);
 8003b3e:	a90f      	add	r1, sp, #60	; 0x3c
 8003b40:	05c0      	lsls	r0, r0, #23
		gpio_cfg.Pin = app_exti_cnt[i].pin;
 8003b42:	930f      	str	r3, [sp, #60]	; 0x3c
		HAL_GPIO_Init(app_exti_cnt[i].gpio_port, &gpio_cfg);
 8003b44:	f001 fa76 	bl	8005034 <HAL_GPIO_Init>
	if(app.cfg.cfg.tx_mode == P2P_MODE){
 8003b48:	7beb      	ldrb	r3, [r5, #15]
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d101      	bne.n	8003b52 <TxAppInit+0x82>
		P2P_Radio_Init();
 8003b4e:	f7ff fbb7 	bl	80032c0 <P2P_Radio_Init>
	gpio_cfg.Speed = GPIO_SPEED_FAST;
 8003b52:	2302      	movs	r3, #2
	gpio_cfg.Pull = GPIO_PULLUP;
 8003b54:	2501      	movs	r5, #1
		HAL_GPIO_Init(app_exti_btn[i].gpio_port, &gpio_cfg);
 8003b56:	4855      	ldr	r0, [pc, #340]	; (8003cac <TxAppInit+0x1dc>)
	gpio_cfg.Speed = GPIO_SPEED_FAST;
 8003b58:	9312      	str	r3, [sp, #72]	; 0x48
		HAL_GPIO_Init(app_exti_btn[i].gpio_port, &gpio_cfg);
 8003b5a:	a90f      	add	r1, sp, #60	; 0x3c
		gpio_cfg.Pin = app_exti_btn[i].pin;
 8003b5c:	333e      	adds	r3, #62	; 0x3e
 8003b5e:	930f      	str	r3, [sp, #60]	; 0x3c
	gpio_cfg.Pull = GPIO_PULLUP;
 8003b60:	9511      	str	r5, [sp, #68]	; 0x44
		HAL_GPIO_Init(app_exti_btn[i].gpio_port, &gpio_cfg);
 8003b62:	f001 fa67 	bl	8005034 <HAL_GPIO_Init>
		gpio_cfg.Pin = output_pin[i].pin;
 8003b66:	2380      	movs	r3, #128	; 0x80
		HAL_GPIO_Init(output_pin[i].gpio_port, &gpio_cfg);
 8003b68:	20a0      	movs	r0, #160	; 0xa0
	gpio_cfg.Pull = GPIO_NOPULL;
 8003b6a:	2400      	movs	r4, #0
		gpio_cfg.Pin = output_pin[i].pin;
 8003b6c:	2720      	movs	r7, #32
 8003b6e:	005b      	lsls	r3, r3, #1
		HAL_GPIO_Init(output_pin[i].gpio_port, &gpio_cfg);
 8003b70:	a90f      	add	r1, sp, #60	; 0x3c
 8003b72:	05c0      	lsls	r0, r0, #23
		gpio_cfg.Pin = output_pin[i].pin;
 8003b74:	930f      	str	r3, [sp, #60]	; 0x3c
	gpio_cfg.Mode = GPIO_MODE_OUTPUT_PP;
 8003b76:	9510      	str	r5, [sp, #64]	; 0x40
	gpio_cfg.Pull = GPIO_NOPULL;
 8003b78:	9411      	str	r4, [sp, #68]	; 0x44
	gpio_cfg.Speed = GPIO_SPEED_LOW;
 8003b7a:	9412      	str	r4, [sp, #72]	; 0x48
		HAL_GPIO_Init(output_pin[i].gpio_port, &gpio_cfg);
 8003b7c:	f001 fa5a 	bl	8005034 <HAL_GPIO_Init>
 8003b80:	a90f      	add	r1, sp, #60	; 0x3c
 8003b82:	484a      	ldr	r0, [pc, #296]	; (8003cac <TxAppInit+0x1dc>)
		gpio_cfg.Pin = output_pin[i].pin;
 8003b84:	970f      	str	r7, [sp, #60]	; 0x3c
		HAL_GPIO_Init(output_pin[i].gpio_port, &gpio_cfg);
 8003b86:	f001 fa55 	bl	8005034 <HAL_GPIO_Init>
	LED_TX(false);
 8003b8a:	0020      	movs	r0, r4
 8003b8c:	f7ff fd48 	bl	8003620 <LED_TX>
	HAL_GPIO_WritePin(EN_INPUT_PULSE_PORT, EN_INPUT_PULSE_PIN, GPIO_PIN_SET);
 8003b90:	0039      	movs	r1, r7
 8003b92:	002a      	movs	r2, r5
 8003b94:	4845      	ldr	r0, [pc, #276]	; (8003cac <TxAppInit+0x1dc>)
 8003b96:	f001 fb87 	bl	80052a8 <HAL_GPIO_WritePin>
	UTIL_TIMER_Create(&inputTimer, 0xFFFFFFFFU, UTIL_TIMER_PERIODIC, OnTimer, NULL);
 8003b9a:	2101      	movs	r1, #1
 8003b9c:	4f44      	ldr	r7, [pc, #272]	; (8003cb0 <TxAppInit+0x1e0>)
 8003b9e:	002a      	movs	r2, r5
 8003ba0:	0038      	movs	r0, r7
 8003ba2:	4b44      	ldr	r3, [pc, #272]	; (8003cb4 <TxAppInit+0x1e4>)
 8003ba4:	4249      	negs	r1, r1
 8003ba6:	9400      	str	r4, [sp, #0]
 8003ba8:	f00a ff70 	bl	800ea8c <UTIL_TIMER_Create>
	UTIL_TIMER_SetPeriod(&inputTimer, app.cfg.cfg.tx_time*1000);//60000
 8003bac:	4b3b      	ldr	r3, [pc, #236]	; (8003c9c <TxAppInit+0x1cc>)
 8003bae:	0038      	movs	r0, r7
 8003bb0:	8999      	ldrh	r1, [r3, #12]
 8003bb2:	23fa      	movs	r3, #250	; 0xfa
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	4359      	muls	r1, r3
 8003bb8:	f00b f878 	bl	800ecac <UTIL_TIMER_SetPeriod>
	UTIL_TIMER_Start(&inputTimer);
 8003bbc:	0038      	movs	r0, r7
 8003bbe:	f00b f819 	bl	800ebf4 <UTIL_TIMER_Start>
	UTIL_TIMER_Create(&btnTimeOutTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnBtnTimeoutTimer, NULL);
 8003bc2:	2101      	movs	r1, #1
 8003bc4:	4f3c      	ldr	r7, [pc, #240]	; (8003cb8 <TxAppInit+0x1e8>)
 8003bc6:	0022      	movs	r2, r4
 8003bc8:	4b3c      	ldr	r3, [pc, #240]	; (8003cbc <TxAppInit+0x1ec>)
 8003bca:	0038      	movs	r0, r7
 8003bcc:	4249      	negs	r1, r1
 8003bce:	9400      	str	r4, [sp, #0]
 8003bd0:	f00a ff5c 	bl	800ea8c <UTIL_TIMER_Create>
	UTIL_TIMER_SetPeriod(&btnTimeOutTimer, BTN_TIMEOUT);
 8003bd4:	21fa      	movs	r1, #250	; 0xfa
 8003bd6:	0038      	movs	r0, r7
 8003bd8:	0089      	lsls	r1, r1, #2
 8003bda:	f00b f867 	bl	800ecac <UTIL_TIMER_SetPeriod>
	UTIL_TIMER_Create(&LedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 8003bde:	2101      	movs	r1, #1
	LmHandlerGetDevEUI(&eui[0]);
 8003be0:	af09      	add	r7, sp, #36	; 0x24
	UTIL_TIMER_Create(&LedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 8003be2:	0022      	movs	r2, r4
 8003be4:	4b36      	ldr	r3, [pc, #216]	; (8003cc0 <TxAppInit+0x1f0>)
 8003be6:	4249      	negs	r1, r1
 8003be8:	4836      	ldr	r0, [pc, #216]	; (8003cc4 <TxAppInit+0x1f4>)
 8003bea:	9400      	str	r4, [sp, #0]
 8003bec:	f00a ff4e 	bl	800ea8c <UTIL_TIMER_Create>
	LmHandlerGetDevEUI(&eui[0]);
 8003bf0:	0038      	movs	r0, r7
 8003bf2:	f004 ffd3 	bl	8008b9c <LmHandlerGetDevEUI>
	APP_LOG(TS_OFF, VLEVEL_L, "SN:%02X%02X%02X%02X%02X%02X%02X%02X\r\n", eui[0], eui[1], eui[2], eui[3], eui[4], eui[5], eui[6], eui[7]);
 8003bf6:	79fb      	ldrb	r3, [r7, #7]
 8003bf8:	0022      	movs	r2, r4
 8003bfa:	9307      	str	r3, [sp, #28]
 8003bfc:	79bb      	ldrb	r3, [r7, #6]
 8003bfe:	0021      	movs	r1, r4
 8003c00:	9306      	str	r3, [sp, #24]
 8003c02:	797b      	ldrb	r3, [r7, #5]
 8003c04:	0028      	movs	r0, r5
 8003c06:	9305      	str	r3, [sp, #20]
 8003c08:	793b      	ldrb	r3, [r7, #4]
 8003c0a:	9304      	str	r3, [sp, #16]
 8003c0c:	78fb      	ldrb	r3, [r7, #3]
 8003c0e:	9303      	str	r3, [sp, #12]
 8003c10:	78bb      	ldrb	r3, [r7, #2]
 8003c12:	9302      	str	r3, [sp, #8]
 8003c14:	787b      	ldrb	r3, [r7, #1]
 8003c16:	9301      	str	r3, [sp, #4]
 8003c18:	783b      	ldrb	r3, [r7, #0]
 8003c1a:	9300      	str	r3, [sp, #0]
 8003c1c:	4b2a      	ldr	r3, [pc, #168]	; (8003cc8 <TxAppInit+0x1f8>)
 8003c1e:	f00b f963 	bl	800eee8 <UTIL_ADV_TRACE_COND_FSend>
	APP_LOG(TS_OFF, VLEVEL_L, "%s\r\n", fver);
 8003c22:	0033      	movs	r3, r6
 8003c24:	4f29      	ldr	r7, [pc, #164]	; (8003ccc <TxAppInit+0x1fc>)
 8003c26:	3308      	adds	r3, #8
 8003c28:	0022      	movs	r2, r4
 8003c2a:	0021      	movs	r1, r4
 8003c2c:	9300      	str	r3, [sp, #0]
 8003c2e:	0028      	movs	r0, r5
 8003c30:	003b      	movs	r3, r7
	APP_LOG(TS_OFF, VLEVEL_L, "%s\r\n", model);
 8003c32:	360f      	adds	r6, #15
	APP_LOG(TS_OFF, VLEVEL_L, "%s\r\n", fver);
 8003c34:	f00b f958 	bl	800eee8 <UTIL_ADV_TRACE_COND_FSend>
	APP_LOG(TS_OFF, VLEVEL_L, "%s\r\n", model);
 8003c38:	003b      	movs	r3, r7
 8003c3a:	0022      	movs	r2, r4
 8003c3c:	0021      	movs	r1, r4
 8003c3e:	0028      	movs	r0, r5
 8003c40:	9600      	str	r6, [sp, #0]
 8003c42:	f00b f951 	bl	800eee8 <UTIL_ADV_TRACE_COND_FSend>
	  hi2c1.Instance = I2C1;
 8003c46:	4822      	ldr	r0, [pc, #136]	; (8003cd0 <TxAppInit+0x200>)
 8003c48:	4b22      	ldr	r3, [pc, #136]	; (8003cd4 <TxAppInit+0x204>)
	  hi2c1.Init.OwnAddress1 = 0;
 8003c4a:	6084      	str	r4, [r0, #8]
	  hi2c1.Instance = I2C1;
 8003c4c:	6003      	str	r3, [r0, #0]
	  hi2c1.Init.Timing = 0x10909CEC;//0x00303D5B; // Timing configurado para operação a 400 kHz em Fast Mode
 8003c4e:	4b22      	ldr	r3, [pc, #136]	; (8003cd8 <TxAppInit+0x208>)
	  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003c50:	60c5      	str	r5, [r0, #12]
	  hi2c1.Init.Timing = 0x10909CEC;//0x00303D5B; // Timing configurado para operação a 400 kHz em Fast Mode
 8003c52:	6043      	str	r3, [r0, #4]
	  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003c54:	6104      	str	r4, [r0, #16]
	  hi2c1.Init.OwnAddress2 = 0;
 8003c56:	6144      	str	r4, [r0, #20]
	  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003c58:	61c4      	str	r4, [r0, #28]
	  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003c5a:	6204      	str	r4, [r0, #32]
	  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003c5c:	f001 fc5a 	bl	8005514 <HAL_I2C_Init>
 8003c60:	42a0      	cmp	r0, r4
 8003c62:	d001      	beq.n	8003c68 <TxAppInit+0x198>
	    Error_Handler(); // Tratamento de erro
 8003c64:	f7fe fc8a 	bl	800257c <Error_Handler>
	uint8_t wiam = FXOS8700CQInit(&hi2c1);
 8003c68:	f7ff f974 	bl	8002f54 <FXOS8700CQInit.constprop.0>
	APP_LOG(TS_OFF, VLEVEL_L, "WHO I AM %02X\r\n", wiam);
 8003c6c:	2200      	movs	r2, #0
	uint8_t wiam = FXOS8700CQInit(&hi2c1);
 8003c6e:	0004      	movs	r4, r0
	APP_LOG(TS_OFF, VLEVEL_L, "WHO I AM %02X\r\n", wiam);
 8003c70:	9000      	str	r0, [sp, #0]
 8003c72:	0011      	movs	r1, r2
 8003c74:	2001      	movs	r0, #1
 8003c76:	4b19      	ldr	r3, [pc, #100]	; (8003cdc <TxAppInit+0x20c>)
 8003c78:	f00b f936 	bl	800eee8 <UTIL_ADV_TRACE_COND_FSend>
	if(wiam != 0)
 8003c7c:	2c00      	cmp	r4, #0
 8003c7e:	d002      	beq.n	8003c86 <TxAppInit+0x1b6>
		HAL_Delay(10000);
 8003c80:	4817      	ldr	r0, [pc, #92]	; (8003ce0 <TxAppInit+0x210>)
 8003c82:	f7ff f89f 	bl	8002dc4 <HAL_Delay>
}
 8003c86:	b015      	add	sp, #84	; 0x54
 8003c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c8a:	46c0      	nop			; (mov r8, r8)
 8003c8c:	20000310 	.word	0x20000310
 8003c90:	080086f1 	.word	0x080086f1
 8003c94:	08002ee1 	.word	0x08002ee1
 8003c98:	08080000 	.word	0x08080000
 8003c9c:	20000038 	.word	0x20000038
 8003ca0:	0014003c 	.word	0x0014003c
 8003ca4:	080033a1 	.word	0x080033a1
 8003ca8:	20000008 	.word	0x20000008
 8003cac:	50000400 	.word	0x50000400
 8003cb0:	2000151c 	.word	0x2000151c
 8003cb4:	08003871 	.word	0x08003871
 8003cb8:	20001544 	.word	0x20001544
 8003cbc:	080038c1 	.word	0x080038c1
 8003cc0:	08003675 	.word	0x08003675
 8003cc4:	20001504 	.word	0x20001504
 8003cc8:	0800f38b 	.word	0x0800f38b
 8003ccc:	0800f438 	.word	0x0800f438
 8003cd0:	20000314 	.word	0x20000314
 8003cd4:	40005400 	.word	0x40005400
 8003cd8:	10909cec 	.word	0x10909cec
 8003cdc:	0800f43d 	.word	0x0800f43d
 8003ce0:	00002710 	.word	0x00002710

08003ce4 <MX_USART2_Init>:
/* USART2 init function */

void MX_USART2_Init(void)
{

  husart2.Instance        = USART2;
 8003ce4:	480a      	ldr	r0, [pc, #40]	; (8003d10 <MX_USART2_Init+0x2c>)
 8003ce6:	4b0b      	ldr	r3, [pc, #44]	; (8003d14 <MX_USART2_Init+0x30>)
{
 8003ce8:	b510      	push	{r4, lr}
  husart2.Instance        = USART2;
 8003cea:	6003      	str	r3, [r0, #0]
  husart2.Init.BaudRate   = USART_BAUDRATE;
 8003cec:	2396      	movs	r3, #150	; 0x96
 8003cee:	019b      	lsls	r3, r3, #6
  husart2.Init.WordLength = UART_WORDLENGTH_8B;
  husart2.Init.StopBits   = UART_STOPBITS_1;
  husart2.Init.Parity     = UART_PARITY_NONE;
  husart2.Init.Mode       = UART_MODE_TX_RX;//UART_MODE_TX;
 8003cf0:	220c      	movs	r2, #12
  husart2.Init.BaudRate   = USART_BAUDRATE;
 8003cf2:	6043      	str	r3, [r0, #4]
  husart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003cf4:	2300      	movs	r3, #0
  husart2.Init.Mode       = UART_MODE_TX_RX;//UART_MODE_TX;
 8003cf6:	6142      	str	r2, [r0, #20]
  husart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003cf8:	6083      	str	r3, [r0, #8]
  husart2.Init.StopBits   = UART_STOPBITS_1;
 8003cfa:	60c3      	str	r3, [r0, #12]
  husart2.Init.Parity     = UART_PARITY_NONE;
 8003cfc:	6103      	str	r3, [r0, #16]
  husart2.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8003cfe:	6183      	str	r3, [r0, #24]

  if (HAL_UART_Init(&husart2) != HAL_OK)
 8003d00:	f003 fc9a 	bl	8007638 <HAL_UART_Init>
 8003d04:	2800      	cmp	r0, #0
 8003d06:	d001      	beq.n	8003d0c <MX_USART2_Init+0x28>
  {
    Error_Handler();
 8003d08:	f7fe fc38 	bl	800257c <Error_Handler>
  }
}
 8003d0c:	bd10      	pop	{r4, pc}
 8003d0e:	46c0      	nop			; (mov r8, r8)
 8003d10:	2000165c 	.word	0x2000165c
 8003d14:	40004400 	.word	0x40004400

08003d18 <HAL_UART_MspInit>:


void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle)
{
 8003d18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d1a:	0004      	movs	r4, r0
 8003d1c:	b091      	sub	sp, #68	; 0x44

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d1e:	2214      	movs	r2, #20
 8003d20:	2100      	movs	r1, #0
 8003d22:	a804      	add	r0, sp, #16
 8003d24:	f00b f9bd 	bl	800f0a2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003d28:	221c      	movs	r2, #28
 8003d2a:	2100      	movs	r1, #0
 8003d2c:	a809      	add	r0, sp, #36	; 0x24
 8003d2e:	f00b f9b8 	bl	800f0a2 <memset>
  if (uartHandle->Instance == USART2)
 8003d32:	4b44      	ldr	r3, [pc, #272]	; (8003e44 <HAL_UART_MspInit+0x12c>)
 8003d34:	6822      	ldr	r2, [r4, #0]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d000      	beq.n	8003d3c <HAL_UART_MspInit+0x24>
 8003d3a:	e081      	b.n	8003e40 <HAL_UART_MspInit+0x128>

    /* USER CODE END USART2_MspInit 0 */

    /* Enable peripherals and GPIO Clocks */
    /* Enable GPIO TX/RX clock */
    USARTx_TX_GPIO_CLK_ENABLE();
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	4b42      	ldr	r3, [pc, #264]	; (8003e48 <HAL_UART_MspInit+0x130>)
 8003d40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d42:	4311      	orrs	r1, r2
 8003d44:	62d9      	str	r1, [r3, #44]	; 0x2c
 8003d46:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d48:	4011      	ands	r1, r2
 8003d4a:	9101      	str	r1, [sp, #4]
 8003d4c:	9901      	ldr	r1, [sp, #4]
    USARTx_RX_GPIO_CLK_ENABLE();
 8003d4e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d50:	4311      	orrs	r1, r2
 8003d52:	62d9      	str	r1, [r3, #44]	; 0x2c
 8003d54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d56:	4011      	ands	r1, r2
 8003d58:	9102      	str	r1, [sp, #8]
 8003d5a:	9902      	ldr	r1, [sp, #8]

    /* Enable USARTx clock */
    __USART2_CLK_ENABLE();
 8003d5c:	2180      	movs	r1, #128	; 0x80
 8003d5e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003d60:	0289      	lsls	r1, r1, #10
 8003d62:	4308      	orrs	r0, r1
 8003d64:	6398      	str	r0, [r3, #56]	; 0x38

    /* Enable DMA clock */
    DMAx_CLK_ENABLE();
 8003d66:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003d68:	4310      	orrs	r0, r2
 8003d6a:	6318      	str	r0, [r3, #48]	; 0x30
 8003d6c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003d6e:	4002      	ands	r2, r0
 8003d70:	9203      	str	r2, [sp, #12]
 8003d72:	9a03      	ldr	r2, [sp, #12]

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003d74:	6b9a      	ldr	r2, [r3, #56]	; 0x38

    /* Select SYSTEM clock for USART2 commuincation TX/RX */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_HSI;//RCC_USART2CLKSOURCE_SYSCLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003d76:	a809      	add	r0, sp, #36	; 0x24
    __HAL_RCC_USART2_CLK_ENABLE();
 8003d78:	4311      	orrs	r1, r2
 8003d7a:	6399      	str	r1, [r3, #56]	; 0x38
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	9309      	str	r3, [sp, #36]	; 0x24
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_HSI;//RCC_USART2CLKSOURCE_SYSCLK;
 8003d80:	3306      	adds	r3, #6
 8003d82:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003d84:	f002 f9e6 	bl	8006154 <HAL_RCCEx_PeriphCLKConfig>
 8003d88:	2800      	cmp	r0, #0
 8003d8a:	d001      	beq.n	8003d90 <HAL_UART_MspInit+0x78>
    {
      Error_Handler();
 8003d8c:	f7fe fbf6 	bl	800257c <Error_Handler>
    GPIO_InitStruct.Pin = USARTx_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = USARTx_TX_AF;
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 8003d90:	20a0      	movs	r0, #160	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d92:	2500      	movs	r5, #0
    GPIO_InitStruct.Pin = USARTx_TX_Pin;
 8003d94:	2604      	movs	r6, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d96:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8003d98:	2303      	movs	r3, #3
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 8003d9a:	a904      	add	r1, sp, #16
 8003d9c:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d9e:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8003da0:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = USARTx_TX_Pin;
 8003da2:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003da4:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8003da6:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 8003da8:	f001 f944 	bl	8005034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USARTx_RX_Pin;
 8003dac:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = USARTx_RX_AF;
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 8003dae:	20a0      	movs	r0, #160	; 0xa0
    GPIO_InitStruct.Pin = USARTx_RX_Pin;
 8003db0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003db2:	3b07      	subs	r3, #7
 8003db4:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 8003db6:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8003db8:	19db      	adds	r3, r3, r7
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 8003dba:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dbc:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8003dbe:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8003dc0:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 8003dc2:	f001 f937 	bl	8005034 <HAL_GPIO_Init>


    /* USART2 DMA Init */
    /* USART2_TX Init */
    /* Configure the DMA handler for Transmission process */
    hdma_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 8003dc6:	4f21      	ldr	r7, [pc, #132]	; (8003e4c <HAL_UART_MspInit+0x134>)
 8003dc8:	4b21      	ldr	r3, [pc, #132]	; (8003e50 <HAL_UART_MspInit+0x138>)
    hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
    hdma_tx.Init.Mode                = DMA_NORMAL;
    hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;

    if (HAL_DMA_Init(&hdma_tx) != HAL_OK)
 8003dca:	0038      	movs	r0, r7
    hdma_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 8003dcc:	603b      	str	r3, [r7, #0]
    hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8003dce:	2310      	movs	r3, #16
 8003dd0:	60bb      	str	r3, [r7, #8]
    hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8003dd2:	3370      	adds	r3, #112	; 0x70
    hdma_tx.Init.Request             = USARTx_TX_DMA_REQUEST;
 8003dd4:	607e      	str	r6, [r7, #4]
    hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8003dd6:	60fd      	str	r5, [r7, #12]
    hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8003dd8:	613b      	str	r3, [r7, #16]
    hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003dda:	617d      	str	r5, [r7, #20]
    hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8003ddc:	61bd      	str	r5, [r7, #24]
    hdma_tx.Init.Mode                = DMA_NORMAL;
 8003dde:	61fd      	str	r5, [r7, #28]
    hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
 8003de0:	623d      	str	r5, [r7, #32]
    if (HAL_DMA_Init(&hdma_tx) != HAL_OK)
 8003de2:	f000 fe1f 	bl	8004a24 <HAL_DMA_Init>
 8003de6:	42a8      	cmp	r0, r5
 8003de8:	d001      	beq.n	8003dee <HAL_UART_MspInit+0xd6>
    {
      Error_Handler();
 8003dea:	f7fe fbc7 	bl	800257c <Error_Handler>

    /* Associate the initialized DMA handle to the UART handle */
    __HAL_LINKDMA(uartHandle, hdmatx, hdma_tx);

    /* USART2_RX Init */
    hdma_rx.Instance = USARTx_RX_DMA_CHANNEL;
 8003dee:	4d19      	ldr	r5, [pc, #100]	; (8003e54 <HAL_UART_MspInit+0x13c>)
 8003df0:	4b19      	ldr	r3, [pc, #100]	; (8003e58 <HAL_UART_MspInit+0x140>)
    hdma_rx.Init.Request = USARTx_RX_DMA_REQUEST;
    hdma_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003df2:	2280      	movs	r2, #128	; 0x80
    hdma_rx.Instance = USARTx_RX_DMA_CHANNEL;
 8003df4:	602b      	str	r3, [r5, #0]
    hdma_rx.Init.Request = USARTx_RX_DMA_REQUEST;
 8003df6:	2304      	movs	r3, #4
 8003df8:	606b      	str	r3, [r5, #4]
    hdma_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003dfa:	2300      	movs	r3, #0
    hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_rx.Init.Mode = DMA_NORMAL;
    hdma_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_rx) != HAL_OK)
 8003dfc:	0028      	movs	r0, r5
    __HAL_LINKDMA(uartHandle, hdmatx, hdma_tx);
 8003dfe:	66e7      	str	r7, [r4, #108]	; 0x6c
 8003e00:	62bc      	str	r4, [r7, #40]	; 0x28
    hdma_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e02:	60ab      	str	r3, [r5, #8]
    hdma_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e04:	60eb      	str	r3, [r5, #12]
    hdma_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003e06:	612a      	str	r2, [r5, #16]
    hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e08:	616b      	str	r3, [r5, #20]
    hdma_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e0a:	61ab      	str	r3, [r5, #24]
    hdma_rx.Init.Mode = DMA_NORMAL;
 8003e0c:	61eb      	str	r3, [r5, #28]
    hdma_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003e0e:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_rx) != HAL_OK)
 8003e10:	f000 fe08 	bl	8004a24 <HAL_DMA_Init>
 8003e14:	2800      	cmp	r0, #0
 8003e16:	d001      	beq.n	8003e1c <HAL_UART_MspInit+0x104>
    {
      Error_Handler();
 8003e18:	f7fe fbb0 	bl	800257c <Error_Handler>

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_rx);

    /* Configure the NVIC for DMA */
    /* NVIC configuration for DMA transfer complete interrupt (USART1_TX) */
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	2100      	movs	r1, #0
 8003e20:	200b      	movs	r0, #11
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_rx);
 8003e22:	6725      	str	r5, [r4, #112]	; 0x70
 8003e24:	62ac      	str	r4, [r5, #40]	; 0x28
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 8003e26:	f000 fdb7 	bl	8004998 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 8003e2a:	200b      	movs	r0, #11
 8003e2c:	f000 fdde 	bl	80049ec <HAL_NVIC_EnableIRQ>

    /* NVIC for USART, to catch the TX complete */
    HAL_NVIC_SetPriority(USARTx_IRQn, USARTx_DMA_Priority, 1);
 8003e30:	201c      	movs	r0, #28
 8003e32:	2201      	movs	r2, #1
 8003e34:	2100      	movs	r1, #0
 8003e36:	f000 fdaf 	bl	8004998 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_IRQn);
 8003e3a:	201c      	movs	r0, #28
 8003e3c:	f000 fdd6 	bl	80049ec <HAL_NVIC_EnableIRQ>
    //HAL_UART_ReceiverTimeout_Config(uartHandle, 2);
    //HAL_UART_EnableReceiverTimeout(uartHandle);
    //HAL_UART_Receive_IT(uartHandle, rxBuffer, RX_BUFFER_SIZE);
    /* USER CODE END USART2_MspInit 1 */
  }
}
 8003e40:	b011      	add	sp, #68	; 0x44
 8003e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e44:	40004400 	.word	0x40004400
 8003e48:	40021000 	.word	0x40021000
 8003e4c:	20001614 	.word	0x20001614
 8003e50:	40020080 	.word	0x40020080
 8003e54:	200015cc 	.word	0x200015cc
 8003e58:	4002006c 	.word	0x4002006c

08003e5c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef *uartHandle)
{

  if (uartHandle->Instance == USART2)
 8003e5c:	4b0b      	ldr	r3, [pc, #44]	; (8003e8c <HAL_UART_MspDeInit+0x30>)
 8003e5e:	6802      	ldr	r2, [r0, #0]
{
 8003e60:	b510      	push	{r4, lr}
 8003e62:	0004      	movs	r4, r0
  if (uartHandle->Instance == USART2)
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d10f      	bne.n	8003e88 <HAL_UART_MspDeInit+0x2c>

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
      */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 8003e68:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART2_CLK_DISABLE();
 8003e6a:	4a09      	ldr	r2, [pc, #36]	; (8003e90 <HAL_UART_MspDeInit+0x34>)
 8003e6c:	4909      	ldr	r1, [pc, #36]	; (8003e94 <HAL_UART_MspDeInit+0x38>)
 8003e6e:	6b93      	ldr	r3, [r2, #56]	; 0x38
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 8003e70:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART2_CLK_DISABLE();
 8003e72:	400b      	ands	r3, r1
 8003e74:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 8003e76:	210c      	movs	r1, #12
 8003e78:	f001 f996 	bl	80051a8 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8003e7c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8003e7e:	f000 fe15 	bl	8004aac <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8003e82:	201c      	movs	r0, #28
 8003e84:	f000 fdbe 	bl	8004a04 <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN USART2_MspDeInit 1 */

    /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8003e88:	bd10      	pop	{r4, pc}
 8003e8a:	46c0      	nop			; (mov r8, r8)
 8003e8c:	40004400 	.word	0x40004400
 8003e90:	40021000 	.word	0x40021000
 8003e94:	fffdffff 	.word	0xfffdffff

08003e98 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8003e98:	b510      	push	{r4, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8003e9a:	4b04      	ldr	r3, [pc, #16]	; (8003eac <vcom_Init+0x14>)
 8003e9c:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 8003e9e:	f7fe fadf 	bl	8002460 <MX_DMA_Init>
  MX_USART2_Init();
 8003ea2:	f7ff ff1f 	bl	8003ce4 <MX_USART2_Init>
  //HAL_UART_ReceiverTimeout_Config(&UartHandle, 2);
  //HAL_UART_EnableReceiverTimeout(&UartHandle);
  //HAL_UART_Receive_IT(&UartHandle, rxBuffer, USART_RX_BUFFER_SIZE);
  /* USER CODE END vcom_Init_2 */
  return UTIL_ADV_TRACE_OK;
}
 8003ea6:	2000      	movs	r0, #0
 8003ea8:	bd10      	pop	{r4, pc}
 8003eaa:	46c0      	nop			; (mov r8, r8)
 8003eac:	20000370 	.word	0x20000370

08003eb0 <vcom_DeInit>:
{
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
 8003eb0:	2280      	movs	r2, #128	; 0x80
 8003eb2:	4b09      	ldr	r3, [pc, #36]	; (8003ed8 <vcom_DeInit+0x28>)
 8003eb4:	0292      	lsls	r2, r2, #10
 8003eb6:	6a99      	ldr	r1, [r3, #40]	; 0x28
{
 8003eb8:	b510      	push	{r4, lr}
  __HAL_RCC_USART2_FORCE_RESET();
 8003eba:	430a      	orrs	r2, r1
 8003ebc:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_USART2_RELEASE_RESET();
 8003ebe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ec0:	4906      	ldr	r1, [pc, #24]	; (8003edc <vcom_DeInit+0x2c>)

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&UartHandle);
 8003ec2:	4807      	ldr	r0, [pc, #28]	; (8003ee0 <vcom_DeInit+0x30>)
  __HAL_RCC_USART2_RELEASE_RESET();
 8003ec4:	400a      	ands	r2, r1
 8003ec6:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_UART_MspDeInit(&UartHandle);
 8003ec8:	f7ff ffc8 	bl	8003e5c <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* temporary while waiting CR 50840: MX implementation of  MX_DMA_DeInit() */
  /* For the time being user should change manually the channel according to the MX settings */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8003ecc:	200b      	movs	r0, #11
 8003ece:	f000 fd99 	bl	8004a04 <HAL_NVIC_DisableIRQ>
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
  return UTIL_ADV_TRACE_OK;
}
 8003ed2:	2000      	movs	r0, #0
 8003ed4:	bd10      	pop	{r4, pc}
 8003ed6:	46c0      	nop			; (mov r8, r8)
 8003ed8:	40021000 	.word	0x40021000
 8003edc:	fffdffff 	.word	0xfffdffff
 8003ee0:	2000165c 	.word	0x2000165c

08003ee4 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8003ee4:	b510      	push	{r4, lr}
 8003ee6:	000a      	movs	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&UartHandle, p_data, size);
 8003ee8:	0001      	movs	r1, r0
 8003eea:	4802      	ldr	r0, [pc, #8]	; (8003ef4 <vcom_Trace_DMA+0x10>)
 8003eec:	f002 ff72 	bl	8006dd4 <HAL_UART_Transmit_DMA>
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
  return UTIL_ADV_TRACE_OK;
}
 8003ef0:	2000      	movs	r0, #0
 8003ef2:	bd10      	pop	{r4, pc}
 8003ef4:	2000165c 	.word	0x2000165c

08003ef8 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8003ef8:	b513      	push	{r0, r1, r4, lr}

  /*record call back*/
  RxCpltCallback = RxCb;

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8003efa:	2180      	movs	r1, #128	; 0x80
  RxCpltCallback = RxCb;
 8003efc:	4b10      	ldr	r3, [pc, #64]	; (8003f40 <vcom_ReceiveInit+0x48>)

  HAL_UARTEx_StopModeWakeUpSourceConfig(&UartHandle, WakeUpSelection);
 8003efe:	4c11      	ldr	r4, [pc, #68]	; (8003f44 <vcom_ReceiveInit+0x4c>)
  RxCpltCallback = RxCb;
 8003f00:	6018      	str	r0, [r3, #0]
  HAL_UARTEx_StopModeWakeUpSourceConfig(&UartHandle, WakeUpSelection);
 8003f02:	9a01      	ldr	r2, [sp, #4]
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8003f04:	0389      	lsls	r1, r1, #14
  HAL_UARTEx_StopModeWakeUpSourceConfig(&UartHandle, WakeUpSelection);
 8003f06:	0020      	movs	r0, r4
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8003f08:	9100      	str	r1, [sp, #0]
  HAL_UARTEx_StopModeWakeUpSourceConfig(&UartHandle, WakeUpSelection);
 8003f0a:	f003 fc47 	bl	800779c <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&UartHandle, USART_ISR_BUSY) == SET);
 8003f0e:	2280      	movs	r2, #128	; 0x80
 8003f10:	6823      	ldr	r3, [r4, #0]
 8003f12:	0252      	lsls	r2, r2, #9
 8003f14:	69d9      	ldr	r1, [r3, #28]
 8003f16:	4211      	tst	r1, r2
 8003f18:	d1fc      	bne.n	8003f14 <vcom_ReceiveInit+0x1c>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&UartHandle, USART_ISR_REACK) == RESET);
 8003f1a:	2280      	movs	r2, #128	; 0x80
 8003f1c:	03d2      	lsls	r2, r2, #15
 8003f1e:	69d9      	ldr	r1, [r3, #28]
 8003f20:	4211      	tst	r1, r2
 8003f22:	d0fc      	beq.n	8003f1e <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&UartHandle, UART_IT_WUF);//UART_IT_IDLE);//UART_IT_WUF);
 8003f24:	6899      	ldr	r1, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&UartHandle);
 8003f26:	0020      	movs	r0, r4
  __HAL_UART_ENABLE_IT(&UartHandle, UART_IT_WUF);//UART_IT_IDLE);//UART_IT_WUF);
 8003f28:	430a      	orrs	r2, r1
 8003f2a:	609a      	str	r2, [r3, #8]
  HAL_UARTEx_EnableStopMode(&UartHandle);
 8003f2c:	f003 fc7a 	bl	8007824 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&UartHandle, rxBuf, sizeof(rxBuf));
 8003f30:	2210      	movs	r2, #16
 8003f32:	0020      	movs	r0, r4
 8003f34:	4904      	ldr	r1, [pc, #16]	; (8003f48 <vcom_ReceiveInit+0x50>)
 8003f36:	f003 fbfb 	bl	8007730 <HAL_UART_Receive_IT>

  /* USER CODE BEGIN vcom_ReceiveInit_2 */
  /* USER CODE END vcom_ReceiveInit_2 */
  return UTIL_ADV_TRACE_OK;
}
 8003f3a:	2000      	movs	r0, #0
 8003f3c:	bd16      	pop	{r1, r2, r4, pc}
 8003f3e:	46c0      	nop			; (mov r8, r8)
 8003f40:	2000036c 	.word	0x2000036c
 8003f44:	2000165c 	.word	0x2000165c
 8003f48:	200016e0 	.word	0x200016e0

08003f4c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8003f4c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  TxCpltCallback(NULL);
 8003f4e:	4b02      	ldr	r3, [pc, #8]	; (8003f58 <HAL_UART_TxCpltCallback+0xc>)
 8003f50:	2000      	movs	r0, #0
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4798      	blx	r3
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8003f56:	bd10      	pop	{r4, pc}
 8003f58:	20000370 	.word	0x20000370

08003f5c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if ((NULL != RxCpltCallback))// && (HAL_UART_ERROR_NONE == UartHandle->ErrorCode))
 8003f5c:	4b0b      	ldr	r3, [pc, #44]	; (8003f8c <HAL_UART_RxCpltCallback+0x30>)
{
 8003f5e:	b570      	push	{r4, r5, r6, lr}
  if ((NULL != RxCpltCallback))// && (HAL_UART_ERROR_NONE == UartHandle->ErrorCode))
 8003f60:	681b      	ldr	r3, [r3, #0]
{
 8003f62:	0004      	movs	r4, r0
 8003f64:	4d0a      	ldr	r5, [pc, #40]	; (8003f90 <HAL_UART_RxCpltCallback+0x34>)
  if ((NULL != RxCpltCallback))// && (HAL_UART_ERROR_NONE == UartHandle->ErrorCode))
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00a      	beq.n	8003f80 <HAL_UART_RxCpltCallback+0x24>
  {
	    RxCpltCallback(rxBuf, UartHandle->RxXferSize - UartHandle->RxXferCount, 0);
 8003f6a:	0002      	movs	r2, r0
 8003f6c:	0001      	movs	r1, r0
 8003f6e:	325a      	adds	r2, #90	; 0x5a
 8003f70:	3158      	adds	r1, #88	; 0x58
 8003f72:	8812      	ldrh	r2, [r2, #0]
 8003f74:	8809      	ldrh	r1, [r1, #0]
 8003f76:	0028      	movs	r0, r5
 8003f78:	1a89      	subs	r1, r1, r2
 8003f7a:	b289      	uxth	r1, r1
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	4798      	blx	r3
  }
  HAL_UART_Receive_IT(UartHandle, rxBuf, sizeof(rxBuf));
 8003f80:	0029      	movs	r1, r5
 8003f82:	2210      	movs	r2, #16
 8003f84:	0020      	movs	r0, r4
 8003f86:	f003 fbd3 	bl	8007730 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8003f8a:	bd70      	pop	{r4, r5, r6, pc}
 8003f8c:	2000036c 	.word	0x2000036c
 8003f90:	200016e0 	.word	0x200016e0

08003f94 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *UartHandle, uint16_t size){
	if ((NULL != RxCpltCallback))// && (HAL_UART_ERROR_NONE == UartHandle->ErrorCode))
 8003f94:	4b07      	ldr	r3, [pc, #28]	; (8003fb4 <HAL_UARTEx_RxEventCallback+0x20>)
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *UartHandle, uint16_t size){
 8003f96:	b570      	push	{r4, r5, r6, lr}
	if ((NULL != RxCpltCallback))// && (HAL_UART_ERROR_NONE == UartHandle->ErrorCode))
 8003f98:	681b      	ldr	r3, [r3, #0]
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *UartHandle, uint16_t size){
 8003f9a:	0004      	movs	r4, r0
 8003f9c:	4d06      	ldr	r5, [pc, #24]	; (8003fb8 <HAL_UARTEx_RxEventCallback+0x24>)
	if ((NULL != RxCpltCallback))// && (HAL_UART_ERROR_NONE == UartHandle->ErrorCode))
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d002      	beq.n	8003fa8 <HAL_UARTEx_RxEventCallback+0x14>
	{
		RxCpltCallback(rxBuf, size, 0);
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	0028      	movs	r0, r5
 8003fa6:	4798      	blx	r3
	}
	HAL_UART_Receive_IT(UartHandle, rxBuf, sizeof(rxBuf));
 8003fa8:	0029      	movs	r1, r5
 8003faa:	2210      	movs	r2, #16
 8003fac:	0020      	movs	r0, r4
 8003fae:	f003 fbbf 	bl	8007730 <HAL_UART_Receive_IT>
}
 8003fb2:	bd70      	pop	{r4, r5, r6, pc}
 8003fb4:	2000036c 	.word	0x2000036c
 8003fb8:	200016e0 	.word	0x200016e0

08003fbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8003fbc:	480d      	ldr	r0, [pc, #52]	; (8003ff4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8003fbe:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003fc0:	480d      	ldr	r0, [pc, #52]	; (8003ff8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003fc2:	490e      	ldr	r1, [pc, #56]	; (8003ffc <LoopForever+0xa>)
  ldr r2, =_sidata
 8003fc4:	4a0e      	ldr	r2, [pc, #56]	; (8004000 <LoopForever+0xe>)
  movs r3, #0
 8003fc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003fc8:	e002      	b.n	8003fd0 <LoopCopyDataInit>

08003fca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003fca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003fcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003fce:	3304      	adds	r3, #4

08003fd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003fd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003fd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003fd4:	d3f9      	bcc.n	8003fca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003fd6:	4a0b      	ldr	r2, [pc, #44]	; (8004004 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003fd8:	4c0b      	ldr	r4, [pc, #44]	; (8004008 <LoopForever+0x16>)
  movs r3, #0
 8003fda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003fdc:	e001      	b.n	8003fe2 <LoopFillZerobss>

08003fde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003fde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003fe0:	3204      	adds	r2, #4

08003fe2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003fe2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003fe4:	d3fb      	bcc.n	8003fde <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003fe6:	f000 f979 	bl	80042dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003fea:	f00b f82d 	bl	800f048 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003fee:	f7fe fa9b 	bl	8002528 <main>

08003ff2 <LoopForever>:

LoopForever:
    b LoopForever
 8003ff2:	e7fe      	b.n	8003ff2 <LoopForever>
   ldr   r0, =_estack
 8003ff4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8003ff8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ffc:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8004000:	0800fe60 	.word	0x0800fe60
  ldr r2, =_sbss
 8004004:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8004008:	20001940 	.word	0x20001940

0800400c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800400c:	e7fe      	b.n	800400c <ADC1_COMP_IRQHandler>
	...

08004010 <SX1262DVK1CAS_RADIO_IoInit>:
static void SX1262DVK1CAS_RADIO_SPI_IoInit(SPI_HandleTypeDef *spiHandle);
static void SX1262DVK1CAS_RADIO_SPI_IoDeInit(void);
/* Exported functions --------------------------------------------------------*/

void SX1262DVK1CAS_RADIO_IoInit(void)
{
 8004010:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef initStruct = {0};
 8004012:	2600      	movs	r6, #0
  SPI_HandleTypeDef dummy_hspi;

  /* DIO IO Init */

//   Set DioIrqHandler port in IT_RISING mode
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 8004014:	2501      	movs	r5, #1
{
 8004016:	b091      	sub	sp, #68	; 0x44
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 8004018:	4c40      	ldr	r4, [pc, #256]	; (800411c <SX1262DVK1CAS_RADIO_IoInit+0x10c>)
  GPIO_InitTypeDef initStruct = {0};
 800401a:	960a      	str	r6, [sp, #40]	; 0x28
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 800401c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  initStruct.Mode = GPIO_MODE_IT_RISING;
  initStruct.Pull = GPIO_NOPULL;
  initStruct.Speed = GPIO_SPEED_HIGH;
  initStruct.Pin = RADIO_DIO_1_PIN;
  HAL_GPIO_Init(RADIO_DIO_1_PORT, &initStruct);
 800401e:	27a0      	movs	r7, #160	; 0xa0
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 8004020:	432b      	orrs	r3, r5
 8004022:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004024:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_DIO_1_PORT, &initStruct);
 8004026:	05ff      	lsls	r7, r7, #23
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 8004028:	402b      	ands	r3, r5
 800402a:	9300      	str	r3, [sp, #0]
 800402c:	9b00      	ldr	r3, [sp, #0]
  initStruct.Mode = GPIO_MODE_IT_RISING;
 800402e:	4b3c      	ldr	r3, [pc, #240]	; (8004120 <SX1262DVK1CAS_RADIO_IoInit+0x110>)
  HAL_GPIO_Init(RADIO_DIO_1_PORT, &initStruct);
 8004030:	0038      	movs	r0, r7
  initStruct.Mode = GPIO_MODE_IT_RISING;
 8004032:	9307      	str	r3, [sp, #28]
  initStruct.Speed = GPIO_SPEED_HIGH;
 8004034:	2303      	movs	r3, #3
 8004036:	9309      	str	r3, [sp, #36]	; 0x24
  initStruct.Pin = RADIO_DIO_1_PIN;
 8004038:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(RADIO_DIO_1_PORT, &initStruct);
 800403a:	a906      	add	r1, sp, #24
  initStruct.Pin = RADIO_DIO_1_PIN;
 800403c:	021b      	lsls	r3, r3, #8
 800403e:	9306      	str	r3, [sp, #24]
  initStruct.Pull = GPIO_NOPULL;
 8004040:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(RADIO_DIO_1_PORT, &initStruct);
 8004042:	f000 fff7 	bl	8005034 <HAL_GPIO_Init>

  /* Radio IO Init */
  RADIO_BUSY_CLK_ENABLE();
 8004046:	2202      	movs	r2, #2
 8004048:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  initStruct.Mode = GPIO_MODE_INPUT;
  initStruct.Pull = GPIO_NOPULL;
  initStruct.Pin = RADIO_BUSY_PIN;
  HAL_GPIO_Init(RADIO_BUSY_PORT, &initStruct);
 800404a:	a906      	add	r1, sp, #24
  RADIO_BUSY_CLK_ENABLE();
 800404c:	4313      	orrs	r3, r2
 800404e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004050:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_BUSY_PORT, &initStruct);
 8004052:	4834      	ldr	r0, [pc, #208]	; (8004124 <SX1262DVK1CAS_RADIO_IoInit+0x114>)
  RADIO_BUSY_CLK_ENABLE();
 8004054:	4013      	ands	r3, r2
 8004056:	9301      	str	r3, [sp, #4]
 8004058:	9b01      	ldr	r3, [sp, #4]
  initStruct.Pin = RADIO_BUSY_PIN;
 800405a:	2308      	movs	r3, #8
  initStruct.Mode = GPIO_MODE_INPUT;
 800405c:	9607      	str	r6, [sp, #28]
  initStruct.Pin = RADIO_BUSY_PIN;
 800405e:	9306      	str	r3, [sp, #24]
  initStruct.Pull = GPIO_NOPULL;
 8004060:	9608      	str	r6, [sp, #32]
  HAL_GPIO_Init(RADIO_BUSY_PORT, &initStruct);
 8004062:	f000 ffe7 	bl	8005034 <HAL_GPIO_Init>

  /* Antenna IO Init */
  RADIO_ANT_SWITCH_POWER_CLK_ENABLE();
 8004066:	2202      	movs	r2, #2
  initStruct.Pull = GPIO_NOPULL;
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
  initStruct.Pin = RADIO_ANT_SWITCH_POWER_PIN;
 8004068:	2104      	movs	r1, #4
  RADIO_ANT_SWITCH_POWER_CLK_ENABLE();
 800406a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_ANT_SWITCH_POWER_PORT, &initStruct);
 800406c:	482d      	ldr	r0, [pc, #180]	; (8004124 <SX1262DVK1CAS_RADIO_IoInit+0x114>)
  RADIO_ANT_SWITCH_POWER_CLK_ENABLE();
 800406e:	4313      	orrs	r3, r2
 8004070:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004072:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  initStruct.Pin = RADIO_ANT_SWITCH_POWER_PIN;
 8004074:	9106      	str	r1, [sp, #24]
  RADIO_ANT_SWITCH_POWER_CLK_ENABLE();
 8004076:	4013      	ands	r3, r2
 8004078:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(RADIO_ANT_SWITCH_POWER_PORT, &initStruct);
 800407a:	a906      	add	r1, sp, #24
  RADIO_ANT_SWITCH_POWER_CLK_ENABLE();
 800407c:	9b02      	ldr	r3, [sp, #8]
  initStruct.Pull = GPIO_NOPULL;
 800407e:	9608      	str	r6, [sp, #32]
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004080:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(RADIO_ANT_SWITCH_POWER_PORT, &initStruct);
 8004082:	f000 ffd7 	bl	8005034 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_ANT_SWITCH_POWER_PORT, RADIO_ANT_SWITCH_POWER_PIN, GPIO_PIN_RESET);
 8004086:	0032      	movs	r2, r6
 8004088:	2104      	movs	r1, #4
 800408a:	4826      	ldr	r0, [pc, #152]	; (8004124 <SX1262DVK1CAS_RADIO_IoInit+0x114>)
 800408c:	f001 f90c 	bl	80052a8 <HAL_GPIO_WritePin>
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /* Enable Peripheral clock */
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 8004090:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  /**SPI1 GPIO Configuration
  PA5     ------> SPI1_SCK
  PA6     ------> SPI1_MISO
  PA7     ------> SPI1_MOSI
    */
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004092:	2202      	movs	r2, #2
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 8004094:	432b      	orrs	r3, r5
 8004096:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004098:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;

  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800409a:	0038      	movs	r0, r7
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 800409c:	402b      	ands	r3, r5
 800409e:	9303      	str	r3, [sp, #12]
 80040a0:	9b03      	ldr	r3, [sp, #12]
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 80040a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80040a4:	a90b      	add	r1, sp, #44	; 0x2c
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 80040a6:	432b      	orrs	r3, r5
 80040a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80040aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80040ac:	402b      	ands	r3, r5
 80040ae:	9304      	str	r3, [sp, #16]
 80040b0:	9b04      	ldr	r3, [sp, #16]
  RADIO_SPI_MISO_GPIO_CLK_ENABLE();
 80040b2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80040b4:	432b      	orrs	r3, r5
 80040b6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80040b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ba:	920c      	str	r2, [sp, #48]	; 0x30
  RADIO_SPI_MISO_GPIO_CLK_ENABLE();
 80040bc:	402b      	ands	r3, r5
 80040be:	9305      	str	r3, [sp, #20]
 80040c0:	9b05      	ldr	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040c2:	2303      	movs	r3, #3
 80040c4:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 80040c6:	337d      	adds	r3, #125	; 0x7d
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80040c8:	920d      	str	r2, [sp, #52]	; 0x34
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 80040ca:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
 80040cc:	960f      	str	r6, [sp, #60]	; 0x3c
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80040ce:	f000 ffb1 	bl	8005034 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_MISO_GPIO_AF;
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 80040d2:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 80040d4:	0038      	movs	r0, r7
 80040d6:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 80040d8:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Alternate = RADIO_SPI_MISO_GPIO_AF;
 80040da:	960f      	str	r6, [sp, #60]	; 0x3c
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 80040dc:	f000 ffaa 	bl	8005034 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_SCK_GPIO_AF;
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 80040e0:	2320      	movs	r3, #32
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 80040e2:	0038      	movs	r0, r7
 80040e4:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 80040e6:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Alternate = RADIO_SPI_SCK_GPIO_AF;
 80040e8:	960f      	str	r6, [sp, #60]	; 0x3c
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 80040ea:	f000 ffa3 	bl	8005034 <HAL_GPIO_Init>
  RADIO_NSS_CLK_ENABLE();
 80040ee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_NSS_PORT,  &initStruct);
 80040f0:	0038      	movs	r0, r7
  RADIO_NSS_CLK_ENABLE();
 80040f2:	432b      	orrs	r3, r5
 80040f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80040f6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  initStruct.Pin = RADIO_NSS_PIN;
 80040f8:	2410      	movs	r4, #16
  RADIO_NSS_CLK_ENABLE();
 80040fa:	402b      	ands	r3, r5
 80040fc:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_NSS_PORT,  &initStruct);
 80040fe:	a906      	add	r1, sp, #24
  RADIO_NSS_CLK_ENABLE();
 8004100:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004102:	9507      	str	r5, [sp, #28]
  initStruct.Pull = GPIO_NOPULL;
 8004104:	9608      	str	r6, [sp, #32]
  initStruct.Pin = RADIO_NSS_PIN;
 8004106:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(RADIO_NSS_PORT,  &initStruct);
 8004108:	f000 ff94 	bl	8005034 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN,  GPIO_PIN_SET);
 800410c:	002a      	movs	r2, r5
 800410e:	0021      	movs	r1, r4
 8004110:	0038      	movs	r0, r7
 8004112:	f001 f8c9 	bl	80052a8 <HAL_GPIO_WritePin>
}
 8004116:	b011      	add	sp, #68	; 0x44
 8004118:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800411a:	46c0      	nop			; (mov r8, r8)
 800411c:	40021000 	.word	0x40021000
 8004120:	10110000 	.word	0x10110000
 8004124:	50000400 	.word	0x50000400

08004128 <SX1262DVK1CAS_RADIO_IoDeInit>:
{
 8004128:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_GPIO_WritePin(RADIO_ANT_SWITCH_POWER_PORT, RADIO_ANT_SWITCH_POWER_PIN, GPIO_PIN_RESET);
 800412a:	2200      	movs	r2, #0
{
 800412c:	b087      	sub	sp, #28
  HAL_GPIO_WritePin(RADIO_ANT_SWITCH_POWER_PORT, RADIO_ANT_SWITCH_POWER_PIN, GPIO_PIN_RESET);
 800412e:	2104      	movs	r1, #4
 8004130:	4815      	ldr	r0, [pc, #84]	; (8004188 <SX1262DVK1CAS_RADIO_IoDeInit+0x60>)
     it's preferred to set in OUTPUT_PP mode, with the pins set to 0 */

  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8004132:	24a0      	movs	r4, #160	; 0xa0
  HAL_GPIO_WritePin(RADIO_ANT_SWITCH_POWER_PORT, RADIO_ANT_SWITCH_POWER_PIN, GPIO_PIN_RESET);
 8004134:	f001 f8b8 	bl	80052a8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004138:	2301      	movs	r3, #1
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 800413a:	2780      	movs	r7, #128	; 0x80
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 800413c:	2640      	movs	r6, #64	; 0x40
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 800413e:	2520      	movs	r5, #32
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8004140:	05e4      	lsls	r4, r4, #23
 8004142:	0020      	movs	r0, r4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004144:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8004146:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004148:	18db      	adds	r3, r3, r3
 800414a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 800414c:	9701      	str	r7, [sp, #4]
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800414e:	f000 ff71 	bl	8005034 <HAL_GPIO_Init>
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8004152:	0020      	movs	r0, r4
 8004154:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 8004156:	9601      	str	r6, [sp, #4]
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8004158:	f000 ff6c 	bl	8005034 <HAL_GPIO_Init>
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 800415c:	0020      	movs	r0, r4
 800415e:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 8004160:	9501      	str	r5, [sp, #4]
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8004162:	f000 ff67 	bl	8005034 <HAL_GPIO_Init>


  HAL_GPIO_WritePin(RADIO_SPI_MOSI_GPIO_PORT, RADIO_SPI_MOSI_GPIO_PIN, GPIO_PIN_RESET);
 8004166:	0039      	movs	r1, r7
 8004168:	0020      	movs	r0, r4
 800416a:	2200      	movs	r2, #0
 800416c:	f001 f89c 	bl	80052a8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SPI_MISO_GPIO_PORT, RADIO_SPI_MISO_GPIO_PIN, GPIO_PIN_RESET);
 8004170:	0031      	movs	r1, r6
 8004172:	0020      	movs	r0, r4
 8004174:	2200      	movs	r2, #0
 8004176:	f001 f897 	bl	80052a8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SPI_SCK_GPIO_PORT, RADIO_SPI_SCK_GPIO_PIN, GPIO_PIN_RESET);
 800417a:	2200      	movs	r2, #0
 800417c:	0029      	movs	r1, r5
 800417e:	0020      	movs	r0, r4
 8004180:	f001 f892 	bl	80052a8 <HAL_GPIO_WritePin>
}
 8004184:	b007      	add	sp, #28
 8004186:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004188:	50000400 	.word	0x50000400

0800418c <SX1262DVK1CAS_RADIO_IoIrqInit>:
{
 800418c:	b570      	push	{r4, r5, r6, lr}
 800418e:	0004      	movs	r4, r0
  HAL_EXTI_GetHandle(&hRADIO_DIO_exti[0], RADIO_DIO_1_EXTI_LINE);
 8004190:	4d09      	ldr	r5, [pc, #36]	; (80041b8 <SX1262DVK1CAS_RADIO_IoIrqInit+0x2c>)
 8004192:	490a      	ldr	r1, [pc, #40]	; (80041bc <SX1262DVK1CAS_RADIO_IoIrqInit+0x30>)
 8004194:	0028      	movs	r0, r5
 8004196:	f000 fde2 	bl	8004d5e <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hRADIO_DIO_exti[0], HAL_EXTI_COMMON_CB_ID, irqHandlers[0]);
 800419a:	0028      	movs	r0, r5
 800419c:	6822      	ldr	r2, [r4, #0]
 800419e:	2100      	movs	r1, #0
 80041a0:	f000 fdd6 	bl	8004d50 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(RADIO_DIO_1_IRQn, RADIO_DIO_1_IT_PRIO, 0x00);
 80041a4:	2200      	movs	r2, #0
 80041a6:	2007      	movs	r0, #7
 80041a8:	0011      	movs	r1, r2
 80041aa:	f000 fbf5 	bl	8004998 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RADIO_DIO_1_IRQn);
 80041ae:	2007      	movs	r0, #7
 80041b0:	f000 fc1c 	bl	80049ec <HAL_NVIC_EnableIRQ>
}
 80041b4:	bd70      	pop	{r4, r5, r6, pc}
 80041b6:	46c0      	nop			; (mov r8, r8)
 80041b8:	20001730 	.word	0x20001730
 80041bc:	0600000f 	.word	0x0600000f

080041c0 <SX1262DVK1CAS_RADIO_GetWakeUpTime>:
}
 80041c0:	2005      	movs	r0, #5
 80041c2:	4770      	bx	lr

080041c4 <SX1262DVK1CAS_RADIO_Reset>:
{
 80041c4:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef initStruct = { 0 };
 80041c6:	2714      	movs	r7, #20
{
 80041c8:	b087      	sub	sp, #28
  GPIO_InitTypeDef initStruct = { 0 };
 80041ca:	003a      	movs	r2, r7
 80041cc:	2100      	movs	r1, #0
 80041ce:	a801      	add	r0, sp, #4
 80041d0:	f00a ff67 	bl	800f0a2 <memset>
  RADIO_RESET_CLK_ENABLE();
 80041d4:	2002      	movs	r0, #2
 80041d6:	4a18      	ldr	r2, [pc, #96]	; (8004238 <SX1262DVK1CAS_RADIO_Reset+0x74>)
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041d8:	2401      	movs	r4, #1
  RADIO_RESET_CLK_ENABLE();
 80041da:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
  initStruct.Pull = GPIO_NOPULL;
 80041dc:	2600      	movs	r6, #0
  RADIO_RESET_CLK_ENABLE();
 80041de:	4301      	orrs	r1, r0
 80041e0:	62d1      	str	r1, [r2, #44]	; 0x2c
 80041e2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 80041e4:	4d15      	ldr	r5, [pc, #84]	; (800423c <SX1262DVK1CAS_RADIO_Reset+0x78>)
  RADIO_RESET_CLK_ENABLE();
 80041e6:	4003      	ands	r3, r0
 80041e8:	9300      	str	r3, [sp, #0]
 80041ea:	9b00      	ldr	r3, [sp, #0]
  initStruct.Speed = GPIO_SPEED_HIGH;
 80041ec:	2303      	movs	r3, #3
  HAL_Delay(10);
 80041ee:	3008      	adds	r0, #8
  initStruct.Speed = GPIO_SPEED_HIGH;
 80041f0:	9304      	str	r3, [sp, #16]
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80041f2:	9402      	str	r4, [sp, #8]
  initStruct.Pull = GPIO_NOPULL;
 80041f4:	9603      	str	r6, [sp, #12]
  HAL_Delay(10);
 80041f6:	f7fe fde5 	bl	8002dc4 <HAL_Delay>
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 80041fa:	0028      	movs	r0, r5
 80041fc:	a901      	add	r1, sp, #4
  initStruct.Pin = RADIO_RESET_PIN;
 80041fe:	9401      	str	r4, [sp, #4]
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 8004200:	f000 ff18 	bl	8005034 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_RESET_PORT, RADIO_RESET_PIN, GPIO_PIN_RESET);
 8004204:	0032      	movs	r2, r6
 8004206:	0021      	movs	r1, r4
 8004208:	0028      	movs	r0, r5
 800420a:	f001 f84d 	bl	80052a8 <HAL_GPIO_WritePin>
  HAL_Delay(20);
 800420e:	0038      	movs	r0, r7
 8004210:	f7fe fdd8 	bl	8002dc4 <HAL_Delay>
  initStruct.Mode = GPIO_MODE_ANALOG;
 8004214:	2303      	movs	r3, #3
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 8004216:	0028      	movs	r0, r5
 8004218:	a901      	add	r1, sp, #4
  initStruct.Mode = GPIO_MODE_ANALOG;
 800421a:	9302      	str	r3, [sp, #8]
  initStruct.Pin = RADIO_RESET_PIN;
 800421c:	9401      	str	r4, [sp, #4]
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 800421e:	f000 ff09 	bl	8005034 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_RESET_PORT, RADIO_RESET_PIN, GPIO_PIN_RESET);  // internal pull-up
 8004222:	0032      	movs	r2, r6
 8004224:	0021      	movs	r1, r4
 8004226:	0028      	movs	r0, r5
 8004228:	f001 f83e 	bl	80052a8 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800422c:	200a      	movs	r0, #10
 800422e:	f7fe fdc9 	bl	8002dc4 <HAL_Delay>
}
 8004232:	b007      	add	sp, #28
 8004234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004236:	46c0      	nop			; (mov r8, r8)
 8004238:	40021000 	.word	0x40021000
 800423c:	50000400 	.word	0x50000400

08004240 <SX1262DVK1CAS_RADIO_WaitOnBusy>:
{
 8004240:	b510      	push	{r4, lr}
  while (HAL_GPIO_ReadPin(RADIO_BUSY_PORT, RADIO_BUSY_PIN) == 1);
 8004242:	2108      	movs	r1, #8
 8004244:	4802      	ldr	r0, [pc, #8]	; (8004250 <SX1262DVK1CAS_RADIO_WaitOnBusy+0x10>)
 8004246:	f001 f829 	bl	800529c <HAL_GPIO_ReadPin>
 800424a:	2801      	cmp	r0, #1
 800424c:	d0f9      	beq.n	8004242 <SX1262DVK1CAS_RADIO_WaitOnBusy+0x2>
}
 800424e:	bd10      	pop	{r4, pc}
 8004250:	50000400 	.word	0x50000400

08004254 <SX1262DVK1CAS_RADIO_ChipSelect>:
{
 8004254:	0002      	movs	r2, r0
 8004256:	b510      	push	{r4, lr}
  if (state == 0)
 8004258:	2800      	cmp	r0, #0
 800425a:	d105      	bne.n	8004268 <SX1262DVK1CAS_RADIO_ChipSelect+0x14>
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 800425c:	20a0      	movs	r0, #160	; 0xa0
 800425e:	2110      	movs	r1, #16
 8004260:	05c0      	lsls	r0, r0, #23
 8004262:	f001 f821 	bl	80052a8 <HAL_GPIO_WritePin>
}
 8004266:	bd10      	pop	{r4, pc}
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 8004268:	2201      	movs	r2, #1
 800426a:	e7f7      	b.n	800425c <SX1262DVK1CAS_RADIO_ChipSelect+0x8>

0800426c <SX1262DVK1CAS_RADIO_SetAntSw>:
{
 800426c:	0002      	movs	r2, r0
 800426e:	b510      	push	{r4, lr}
  switch (state)
 8004270:	2800      	cmp	r0, #0
 8004272:	d104      	bne.n	800427e <SX1262DVK1CAS_RADIO_SetAntSw+0x12>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_POWER_PORT, RADIO_ANT_SWITCH_POWER_PIN, GPIO_PIN_SET);
 8004274:	2104      	movs	r1, #4
 8004276:	4803      	ldr	r0, [pc, #12]	; (8004284 <SX1262DVK1CAS_RADIO_SetAntSw+0x18>)
 8004278:	f001 f816 	bl	80052a8 <HAL_GPIO_WritePin>
}
 800427c:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_POWER_PORT, RADIO_ANT_SWITCH_POWER_PIN, GPIO_PIN_SET);
 800427e:	2201      	movs	r2, #1
 8004280:	e7f8      	b.n	8004274 <SX1262DVK1CAS_RADIO_SetAntSw+0x8>
 8004282:	46c0      	nop			; (mov r8, r8)
 8004284:	50000400 	.word	0x50000400

08004288 <SX1262DVK1CAS_RADIO_BoardIsTcxo>:
}
 8004288:	2000      	movs	r0, #0
 800428a:	4770      	bx	lr

0800428c <SX1262DVK1CAS_RADIO_Bus_Init>:
{
 800428c:	b510      	push	{r4, lr}
  RADIO_SPI_Init();
 800428e:	f003 fb51 	bl	8007934 <BSP_SPI1_Init>
}
 8004292:	bd10      	pop	{r4, pc}

08004294 <SX1262DVK1CAS_RADIO_SendRecv>:
{
 8004294:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 8004296:	240e      	movs	r4, #14
{
 8004298:	466b      	mov	r3, sp
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 800429a:	446c      	add	r4, sp
{
 800429c:	80d8      	strh	r0, [r3, #6]
 800429e:	3306      	adds	r3, #6
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 80042a0:	2201      	movs	r2, #1
 80042a2:	0021      	movs	r1, r4
 80042a4:	0018      	movs	r0, r3
 80042a6:	f003 fb01 	bl	80078ac <BSP_SPI1_SendRecv>
  return rxData;
 80042aa:	8820      	ldrh	r0, [r4, #0]
}
 80042ac:	b004      	add	sp, #16
 80042ae:	bd10      	pop	{r4, pc}

080042b0 <SX1262DVK1CAS_RADIO_WakeUp>:
{
 80042b0:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_RESET);
 80042b2:	24a0      	movs	r4, #160	; 0xa0
 80042b4:	05e4      	lsls	r4, r4, #23
 80042b6:	2200      	movs	r2, #0
 80042b8:	2110      	movs	r1, #16
 80042ba:	0020      	movs	r0, r4
 80042bc:	f000 fff4 	bl	80052a8 <HAL_GPIO_WritePin>
  SX1262DVK1CAS_RADIO_SendRecv(RADIO_GET_STATUS);
 80042c0:	20c0      	movs	r0, #192	; 0xc0
 80042c2:	f7ff ffe7 	bl	8004294 <SX1262DVK1CAS_RADIO_SendRecv>
  SX1262DVK1CAS_RADIO_SendRecv(0);
 80042c6:	2000      	movs	r0, #0
 80042c8:	f7ff ffe4 	bl	8004294 <SX1262DVK1CAS_RADIO_SendRecv>
  HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 80042cc:	2201      	movs	r2, #1
 80042ce:	2110      	movs	r1, #16
 80042d0:	0020      	movs	r0, r4
 80042d2:	f000 ffe9 	bl	80052a8 <HAL_GPIO_WritePin>
  SX1262DVK1CAS_RADIO_WaitOnBusy();
 80042d6:	f7ff ffb3 	bl	8004240 <SX1262DVK1CAS_RADIO_WaitOnBusy>
}
 80042da:	bd10      	pop	{r4, pc}

080042dc <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80042dc:	4770      	bx	lr
	...

080042e0 <HAL_Init>:
#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
#endif /* PREREAD_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80042e0:	2302      	movs	r3, #2
 80042e2:	4a08      	ldr	r2, [pc, #32]	; (8004304 <HAL_Init+0x24>)
{
 80042e4:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80042e6:	6811      	ldr	r1, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80042e8:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80042ea:	430b      	orrs	r3, r1
 80042ec:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80042ee:	f7fe fd63 	bl	8002db8 <HAL_InitTick>
 80042f2:	1e04      	subs	r4, r0, #0
 80042f4:	d103      	bne.n	80042fe <HAL_Init+0x1e>
    status = HAL_ERROR;
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80042f6:	f7fe fbd7 	bl	8002aa8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
}
 80042fa:	0020      	movs	r0, r4
 80042fc:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80042fe:	2401      	movs	r4, #1
 8004300:	e7fb      	b.n	80042fa <HAL_Init+0x1a>
 8004302:	46c0      	nop			; (mov r8, r8)
 8004304:	40022000 	.word	0x40022000

08004308 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004308:	4a03      	ldr	r2, [pc, #12]	; (8004318 <HAL_IncTick+0x10>)
 800430a:	4b04      	ldr	r3, [pc, #16]	; (800431c <HAL_IncTick+0x14>)
 800430c:	6811      	ldr	r1, [r2, #0]
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	185b      	adds	r3, r3, r1
 8004312:	6013      	str	r3, [r2, #0]
}
 8004314:	4770      	bx	lr
 8004316:	46c0      	nop			; (mov r8, r8)
 8004318:	20001738 	.word	0x20001738
 800431c:	20000050 	.word	0x20000050

08004320 <HAL_GetUIDw0>:
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8004320:	4b01      	ldr	r3, [pc, #4]	; (8004328 <HAL_GetUIDw0+0x8>)
 8004322:	6818      	ldr	r0, [r3, #0]
}
 8004324:	4770      	bx	lr
 8004326:	46c0      	nop			; (mov r8, r8)
 8004328:	1ff80050 	.word	0x1ff80050

0800432c <HAL_GetUIDw1>:
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 800432c:	4b01      	ldr	r3, [pc, #4]	; (8004334 <HAL_GetUIDw1+0x8>)
 800432e:	6818      	ldr	r0, [r3, #0]
}
 8004330:	4770      	bx	lr
 8004332:	46c0      	nop			; (mov r8, r8)
 8004334:	1ff80054 	.word	0x1ff80054

08004338 <HAL_GetUIDw2>:
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 8004338:	4b01      	ldr	r3, [pc, #4]	; (8004340 <HAL_GetUIDw2+0x8>)
 800433a:	6818      	ldr	r0, [r3, #0]
}
 800433c:	4770      	bx	lr
 800433e:	46c0      	nop			; (mov r8, r8)
 8004340:	1ff80064 	.word	0x1ff80064

08004344 <ADC_DelayMicroSecond>:
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8004344:	4b08      	ldr	r3, [pc, #32]	; (8004368 <ADC_DelayMicroSecond+0x24>)
{
 8004346:	b513      	push	{r0, r1, r4, lr}
 8004348:	0004      	movs	r4, r0
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800434a:	4908      	ldr	r1, [pc, #32]	; (800436c <ADC_DelayMicroSecond+0x28>)
 800434c:	6818      	ldr	r0, [r3, #0]
 800434e:	f7fb ff01 	bl	8000154 <__udivsi3>
 8004352:	4344      	muls	r4, r0
 8004354:	9401      	str	r4, [sp, #4]

  while(waitLoopIndex != 0U)
 8004356:	9b01      	ldr	r3, [sp, #4]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d100      	bne.n	800435e <ADC_DelayMicroSecond+0x1a>
  {
    waitLoopIndex--;
  } 
}
 800435c:	bd13      	pop	{r0, r1, r4, pc}
    waitLoopIndex--;
 800435e:	9b01      	ldr	r3, [sp, #4]
 8004360:	3b01      	subs	r3, #1
 8004362:	9301      	str	r3, [sp, #4]
 8004364:	e7f7      	b.n	8004356 <ADC_DelayMicroSecond+0x12>
 8004366:	46c0      	nop			; (mov r8, r8)
 8004368:	2000004c 	.word	0x2000004c
 800436c:	000f4240 	.word	0x000f4240

08004370 <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004370:	2103      	movs	r1, #3
 8004372:	6803      	ldr	r3, [r0, #0]
{
 8004374:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004376:	689a      	ldr	r2, [r3, #8]
{
 8004378:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800437a:	400a      	ands	r2, r1
 800437c:	2a01      	cmp	r2, #1
 800437e:	d104      	bne.n	800438a <ADC_Enable+0x1a>
 8004380:	6819      	ldr	r1, [r3, #0]
 8004382:	4211      	tst	r1, r2
 8004384:	d001      	beq.n	800438a <ADC_Enable+0x1a>
  return HAL_OK;
 8004386:	2000      	movs	r0, #0
}
 8004388:	bd70      	pop	{r4, r5, r6, pc}
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800438a:	6899      	ldr	r1, [r3, #8]
 800438c:	4a13      	ldr	r2, [pc, #76]	; (80043dc <ADC_Enable+0x6c>)
 800438e:	4211      	tst	r1, r2
 8004390:	d008      	beq.n	80043a4 <ADC_Enable+0x34>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004392:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004394:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004396:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004398:	4313      	orrs	r3, r2
 800439a:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800439c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800439e:	4303      	orrs	r3, r0
 80043a0:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 80043a2:	e7f1      	b.n	8004388 <ADC_Enable+0x18>
    __HAL_ADC_ENABLE(hadc);
 80043a4:	2501      	movs	r5, #1
 80043a6:	689a      	ldr	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80043a8:	0028      	movs	r0, r5
    __HAL_ADC_ENABLE(hadc);
 80043aa:	432a      	orrs	r2, r5
 80043ac:	609a      	str	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80043ae:	f7ff ffc9 	bl	8004344 <ADC_DelayMicroSecond>
    tickstart = HAL_GetTick();
 80043b2:	f7fe fd03 	bl	8002dbc <HAL_GetTick>
 80043b6:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80043b8:	6823      	ldr	r3, [r4, #0]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	422b      	tst	r3, r5
 80043be:	d1e2      	bne.n	8004386 <ADC_Enable+0x16>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80043c0:	f7fe fcfc 	bl	8002dbc <HAL_GetTick>
 80043c4:	1b80      	subs	r0, r0, r6
 80043c6:	280a      	cmp	r0, #10
 80043c8:	d9f6      	bls.n	80043b8 <ADC_Enable+0x48>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043ca:	2310      	movs	r3, #16
 80043cc:	6d62      	ldr	r2, [r4, #84]	; 0x54
        return HAL_ERROR;
 80043ce:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043d0:	4313      	orrs	r3, r2
 80043d2:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80043d6:	431d      	orrs	r5, r3
 80043d8:	65a5      	str	r5, [r4, #88]	; 0x58
        return HAL_ERROR;
 80043da:	e7d5      	b.n	8004388 <ADC_Enable+0x18>
 80043dc:	80000017 	.word	0x80000017

080043e0 <ADC_Disable>:
  if (ADC_IS_ENABLE(hadc) != RESET)
 80043e0:	2103      	movs	r1, #3
 80043e2:	6803      	ldr	r3, [r0, #0]
{
 80043e4:	b570      	push	{r4, r5, r6, lr}
 80043e6:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80043e8:	6898      	ldr	r0, [r3, #8]
 80043ea:	4008      	ands	r0, r1
 80043ec:	2801      	cmp	r0, #1
 80043ee:	d001      	beq.n	80043f4 <ADC_Disable+0x14>
  return HAL_OK;
 80043f0:	2000      	movs	r0, #0
}
 80043f2:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	4202      	tst	r2, r0
 80043f8:	d0fa      	beq.n	80043f0 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80043fa:	2205      	movs	r2, #5
 80043fc:	689d      	ldr	r5, [r3, #8]
 80043fe:	4015      	ands	r5, r2
 8004400:	2d01      	cmp	r5, #1
 8004402:	d119      	bne.n	8004438 <ADC_Disable+0x58>
      __HAL_ADC_DISABLE(hadc);
 8004404:	6898      	ldr	r0, [r3, #8]
 8004406:	3a03      	subs	r2, #3
 8004408:	4302      	orrs	r2, r0
 800440a:	609a      	str	r2, [r3, #8]
 800440c:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 800440e:	f7fe fcd5 	bl	8002dbc <HAL_GetTick>
 8004412:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004414:	6823      	ldr	r3, [r4, #0]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	422b      	tst	r3, r5
 800441a:	d0e9      	beq.n	80043f0 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800441c:	f7fe fcce 	bl	8002dbc <HAL_GetTick>
 8004420:	1b80      	subs	r0, r0, r6
 8004422:	280a      	cmp	r0, #10
 8004424:	d9f6      	bls.n	8004414 <ADC_Disable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004426:	2310      	movs	r3, #16
 8004428:	6d62      	ldr	r2, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800442a:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800442c:	4313      	orrs	r3, r2
 800442e:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004430:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004432:	431d      	orrs	r5, r3
 8004434:	65a5      	str	r5, [r4, #88]	; 0x58
        return HAL_ERROR;
 8004436:	e7dc      	b.n	80043f2 <ADC_Disable+0x12>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004438:	2310      	movs	r3, #16
 800443a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800443c:	4313      	orrs	r3, r2
 800443e:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004440:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004442:	4303      	orrs	r3, r0
 8004444:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 8004446:	e7d4      	b.n	80043f2 <ADC_Disable+0x12>

08004448 <ADC_ConversionStop>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8004448:	2204      	movs	r2, #4
 800444a:	6803      	ldr	r3, [r0, #0]
{
 800444c:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800444e:	6899      	ldr	r1, [r3, #8]
{
 8004450:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8004452:	4211      	tst	r1, r2
 8004454:	d101      	bne.n	800445a <ADC_ConversionStop+0x12>
  return HAL_OK;
 8004456:	2000      	movs	r0, #0
}
 8004458:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800445a:	6899      	ldr	r1, [r3, #8]
 800445c:	4211      	tst	r1, r2
 800445e:	d006      	beq.n	800446e <ADC_ConversionStop+0x26>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8004460:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8004462:	0792      	lsls	r2, r2, #30
 8004464:	d403      	bmi.n	800446e <ADC_ConversionStop+0x26>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8004466:	2210      	movs	r2, #16
 8004468:	6899      	ldr	r1, [r3, #8]
 800446a:	430a      	orrs	r2, r1
 800446c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800446e:	f7fe fca5 	bl	8002dbc <HAL_GetTick>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8004472:	2604      	movs	r6, #4
    tickstart = HAL_GetTick();
 8004474:	0005      	movs	r5, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8004476:	6823      	ldr	r3, [r4, #0]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	4233      	tst	r3, r6
 800447c:	d0eb      	beq.n	8004456 <ADC_ConversionStop+0xe>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800447e:	f7fe fc9d 	bl	8002dbc <HAL_GetTick>
 8004482:	1b40      	subs	r0, r0, r5
 8004484:	280a      	cmp	r0, #10
 8004486:	d9f6      	bls.n	8004476 <ADC_ConversionStop+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004488:	2310      	movs	r3, #16
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800448a:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800448c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800448e:	4313      	orrs	r3, r2
 8004490:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004492:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004494:	4303      	orrs	r3, r0
 8004496:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 8004498:	e7de      	b.n	8004458 <ADC_ConversionStop+0x10>
	...

0800449c <HAL_ADC_Init>:
{
 800449c:	b570      	push	{r4, r5, r6, lr}
 800449e:	0004      	movs	r4, r0
    return HAL_ERROR;
 80044a0:	2001      	movs	r0, #1
  if(hadc == NULL)
 80044a2:	2c00      	cmp	r4, #0
 80044a4:	d01b      	beq.n	80044de <HAL_ADC_Init+0x42>
  if(hadc->State == HAL_ADC_STATE_RESET)
 80044a6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d106      	bne.n	80044ba <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 80044ac:	0022      	movs	r2, r4
 80044ae:	3250      	adds	r2, #80	; 0x50
    ADC_CLEAR_ERRORCODE(hadc);
 80044b0:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_MspInit(hadc);
 80044b2:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 80044b4:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 80044b6:	f7fd ff35 	bl	8002324 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80044ba:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80044bc:	06db      	lsls	r3, r3, #27
 80044be:	d406      	bmi.n	80044ce <HAL_ADC_Init+0x32>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 80044c0:	6823      	ldr	r3, [r4, #0]
 80044c2:	2204      	movs	r2, #4
 80044c4:	6899      	ldr	r1, [r3, #8]
 80044c6:	0008      	movs	r0, r1
 80044c8:	4010      	ands	r0, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80044ca:	4211      	tst	r1, r2
 80044cc:	d008      	beq.n	80044e0 <HAL_ADC_Init+0x44>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044ce:	2310      	movs	r3, #16
 80044d0:	6d62      	ldr	r2, [r4, #84]	; 0x54
    return HAL_ERROR;
 80044d2:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044d4:	4313      	orrs	r3, r2
 80044d6:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 80044d8:	2300      	movs	r3, #0
 80044da:	3450      	adds	r4, #80	; 0x50
 80044dc:	7023      	strb	r3, [r4, #0]
}
 80044de:	bd70      	pop	{r4, r5, r6, pc}
  ADC_STATE_CLR_SET(hadc->State,
 80044e0:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80044e2:	4955      	ldr	r1, [pc, #340]	; (8004638 <HAL_ADC_Init+0x19c>)
 80044e4:	4011      	ands	r1, r2
 80044e6:	2202      	movs	r2, #2
 80044e8:	430a      	orrs	r2, r1
 80044ea:	6562      	str	r2, [r4, #84]	; 0x54
  if (ADC_IS_ENABLE(hadc) == RESET)
 80044ec:	2203      	movs	r2, #3
 80044ee:	6899      	ldr	r1, [r3, #8]
 80044f0:	4011      	ands	r1, r2
 80044f2:	4a52      	ldr	r2, [pc, #328]	; (800463c <HAL_ADC_Init+0x1a0>)
 80044f4:	2901      	cmp	r1, #1
 80044f6:	d102      	bne.n	80044fe <HAL_ADC_Init+0x62>
 80044f8:	681d      	ldr	r5, [r3, #0]
 80044fa:	420d      	tst	r5, r1
 80044fc:	d119      	bne.n	8004532 <HAL_ADC_Init+0x96>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80044fe:	2680      	movs	r6, #128	; 0x80
 8004500:	6861      	ldr	r1, [r4, #4]
 8004502:	05f6      	lsls	r6, r6, #23
 8004504:	004d      	lsls	r5, r1, #1
 8004506:	086d      	lsrs	r5, r5, #1
 8004508:	42b5      	cmp	r5, r6
 800450a:	d003      	beq.n	8004514 <HAL_ADC_Init+0x78>
 800450c:	2580      	movs	r5, #128	; 0x80
 800450e:	062d      	lsls	r5, r5, #24
 8004510:	42a9      	cmp	r1, r5
 8004512:	d176      	bne.n	8004602 <HAL_ADC_Init+0x166>
 8004514:	691d      	ldr	r5, [r3, #16]
 8004516:	00ad      	lsls	r5, r5, #2
 8004518:	08ad      	lsrs	r5, r5, #2
 800451a:	611d      	str	r5, [r3, #16]
 800451c:	691d      	ldr	r5, [r3, #16]
 800451e:	4329      	orrs	r1, r5
 8004520:	6119      	str	r1, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8004522:	2518      	movs	r5, #24
 8004524:	68d9      	ldr	r1, [r3, #12]
 8004526:	43a9      	bics	r1, r5
 8004528:	60d9      	str	r1, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 800452a:	68d9      	ldr	r1, [r3, #12]
 800452c:	68a5      	ldr	r5, [r4, #8]
 800452e:	4329      	orrs	r1, r5
 8004530:	60d9      	str	r1, [r3, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8004532:	6811      	ldr	r1, [r2, #0]
 8004534:	4d42      	ldr	r5, [pc, #264]	; (8004640 <HAL_ADC_Init+0x1a4>)
 8004536:	4029      	ands	r1, r5
 8004538:	6011      	str	r1, [r2, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 800453a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800453c:	6815      	ldr	r5, [r2, #0]
 800453e:	0649      	lsls	r1, r1, #25
 8004540:	4329      	orrs	r1, r5
 8004542:	6011      	str	r1, [r2, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8004544:	2280      	movs	r2, #128	; 0x80
 8004546:	6899      	ldr	r1, [r3, #8]
 8004548:	0552      	lsls	r2, r2, #21
 800454a:	4211      	tst	r1, r2
 800454c:	d102      	bne.n	8004554 <HAL_ADC_Init+0xb8>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800454e:	6899      	ldr	r1, [r3, #8]
 8004550:	430a      	orrs	r2, r1
 8004552:	609a      	str	r2, [r3, #8]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8004554:	68da      	ldr	r2, [r3, #12]
 8004556:	493b      	ldr	r1, [pc, #236]	; (8004644 <HAL_ADC_Init+0x1a8>)
 8004558:	400a      	ands	r2, r1
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800455a:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800455c:	60da      	str	r2, [r3, #12]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800455e:	68dd      	ldr	r5, [r3, #12]
 8004560:	68e2      	ldr	r2, [r4, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8004562:	2902      	cmp	r1, #2
 8004564:	d100      	bne.n	8004568 <HAL_ADC_Init+0xcc>
 8004566:	2004      	movs	r0, #4
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004568:	6b26      	ldr	r6, [r4, #48]	; 0x30
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800456a:	1c61      	adds	r1, r4, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800456c:	4332      	orrs	r2, r6
 800456e:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8004570:	69a5      	ldr	r5, [r4, #24]
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004572:	7fc9      	ldrb	r1, [r1, #31]
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8004574:	03ad      	lsls	r5, r5, #14
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004576:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8004578:	69e5      	ldr	r5, [r4, #28]
 800457a:	03ed      	lsls	r5, r5, #15
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800457c:	432a      	orrs	r2, r5
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800457e:	034d      	lsls	r5, r1, #13
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004580:	432a      	orrs	r2, r5
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8004582:	0025      	movs	r5, r4
 8004584:	352c      	adds	r5, #44	; 0x2c
 8004586:	782d      	ldrb	r5, [r5, #0]
 8004588:	006d      	lsls	r5, r5, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800458a:	432a      	orrs	r2, r5
 800458c:	4302      	orrs	r2, r0
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800458e:	20c2      	movs	r0, #194	; 0xc2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8004590:	60da      	str	r2, [r3, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004592:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004594:	30ff      	adds	r0, #255	; 0xff
 8004596:	4282      	cmp	r2, r0
 8004598:	d004      	beq.n	80045a4 <HAL_ADC_Init+0x108>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800459a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800459c:	68d8      	ldr	r0, [r3, #12]
 800459e:	432a      	orrs	r2, r5
 80045a0:	4302      	orrs	r2, r0
 80045a2:	60da      	str	r2, [r3, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80045a4:	1ca2      	adds	r2, r4, #2
 80045a6:	7fd2      	ldrb	r2, [r2, #31]
 80045a8:	2a01      	cmp	r2, #1
 80045aa:	d106      	bne.n	80045ba <HAL_ADC_Init+0x11e>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80045ac:	2900      	cmp	r1, #0
 80045ae:	d134      	bne.n	800461a <HAL_ADC_Init+0x17e>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80045b0:	2280      	movs	r2, #128	; 0x80
 80045b2:	68d9      	ldr	r1, [r3, #12]
 80045b4:	0252      	lsls	r2, r2, #9
 80045b6:	430a      	orrs	r2, r1
 80045b8:	60da      	str	r2, [r3, #12]
  if (hadc->Init.OversamplingMode == ENABLE)
 80045ba:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 80045bc:	691a      	ldr	r2, [r3, #16]
  if (hadc->Init.OversamplingMode == ENABLE)
 80045be:	2901      	cmp	r1, #1
 80045c0:	d133      	bne.n	800462a <HAL_ADC_Init+0x18e>
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 80045c2:	4821      	ldr	r0, [pc, #132]	; (8004648 <HAL_ADC_Init+0x1ac>)
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80045c4:	6c65      	ldr	r5, [r4, #68]	; 0x44
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 80045c6:	4002      	ands	r2, r0
 80045c8:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80045ca:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80045cc:	6918      	ldr	r0, [r3, #16]
 80045ce:	432a      	orrs	r2, r5
                               hadc->Init.Oversample.RightBitShift             |
 80045d0:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80045d2:	432a      	orrs	r2, r5
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80045d4:	4302      	orrs	r2, r0
 80045d6:	611a      	str	r2, [r3, #16]
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80045d8:	691a      	ldr	r2, [r3, #16]
 80045da:	4311      	orrs	r1, r2
 80045dc:	6119      	str	r1, [r3, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80045de:	2107      	movs	r1, #7
 80045e0:	695a      	ldr	r2, [r3, #20]
  ADC_CLEAR_ERRORCODE(hadc);
 80045e2:	2000      	movs	r0, #0
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80045e4:	438a      	bics	r2, r1
 80045e6:	615a      	str	r2, [r3, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80045e8:	695a      	ldr	r2, [r3, #20]
 80045ea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80045ec:	430a      	orrs	r2, r1
 80045ee:	615a      	str	r2, [r3, #20]
  ADC_STATE_CLR_SET(hadc->State,
 80045f0:	2203      	movs	r2, #3
  ADC_CLEAR_ERRORCODE(hadc);
 80045f2:	65a0      	str	r0, [r4, #88]	; 0x58
  ADC_STATE_CLR_SET(hadc->State,
 80045f4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80045f6:	4393      	bics	r3, r2
 80045f8:	001a      	movs	r2, r3
 80045fa:	2301      	movs	r3, #1
 80045fc:	4313      	orrs	r3, r2
 80045fe:	6563      	str	r3, [r4, #84]	; 0x54
  return HAL_OK;
 8004600:	e76d      	b.n	80044de <HAL_ADC_Init+0x42>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8004602:	691d      	ldr	r5, [r3, #16]
 8004604:	4e11      	ldr	r6, [pc, #68]	; (800464c <HAL_ADC_Init+0x1b0>)
 8004606:	00ad      	lsls	r5, r5, #2
 8004608:	08ad      	lsrs	r5, r5, #2
 800460a:	611d      	str	r5, [r3, #16]
 800460c:	6815      	ldr	r5, [r2, #0]
 800460e:	4035      	ands	r5, r6
 8004610:	6015      	str	r5, [r2, #0]
 8004612:	6815      	ldr	r5, [r2, #0]
 8004614:	4329      	orrs	r1, r5
 8004616:	6011      	str	r1, [r2, #0]
 8004618:	e783      	b.n	8004522 <HAL_ADC_Init+0x86>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800461a:	2120      	movs	r1, #32
 800461c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800461e:	4301      	orrs	r1, r0
 8004620:	6561      	str	r1, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004622:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004624:	430a      	orrs	r2, r1
 8004626:	65a2      	str	r2, [r4, #88]	; 0x58
 8004628:	e7c7      	b.n	80045ba <HAL_ADC_Init+0x11e>
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800462a:	2101      	movs	r1, #1
 800462c:	420a      	tst	r2, r1
 800462e:	d0d6      	beq.n	80045de <HAL_ADC_Init+0x142>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8004630:	691a      	ldr	r2, [r3, #16]
 8004632:	438a      	bics	r2, r1
 8004634:	611a      	str	r2, [r3, #16]
 8004636:	e7d2      	b.n	80045de <HAL_ADC_Init+0x142>
 8004638:	fffffefd 	.word	0xfffffefd
 800463c:	40012708 	.word	0x40012708
 8004640:	fdffffff 	.word	0xfdffffff
 8004644:	fffe0219 	.word	0xfffe0219
 8004648:	fffffc03 	.word	0xfffffc03
 800464c:	ffc3ffff 	.word	0xffc3ffff

08004650 <HAL_ADC_DeInit>:
{
 8004650:	b570      	push	{r4, r5, r6, lr}
 8004652:	0004      	movs	r4, r0
    return HAL_ERROR;
 8004654:	2501      	movs	r5, #1
  if(hadc == NULL)
 8004656:	2800      	cmp	r0, #0
 8004658:	d011      	beq.n	800467e <HAL_ADC_DeInit+0x2e>
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800465a:	2302      	movs	r3, #2
 800465c:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800465e:	4313      	orrs	r3, r2
 8004660:	6543      	str	r3, [r0, #84]	; 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 8004662:	f7ff fef1 	bl	8004448 <ADC_ConversionStop>
 8004666:	1e05      	subs	r5, r0, #0
  if (tmp_hal_status == HAL_OK)
 8004668:	d137      	bne.n	80046da <HAL_ADC_DeInit+0x8a>
    tmp_hal_status = ADC_Disable(hadc);
 800466a:	0020      	movs	r0, r4
 800466c:	f7ff feb8 	bl	80043e0 <ADC_Disable>
 8004670:	0005      	movs	r5, r0
    if (tmp_hal_status != HAL_ERROR)
 8004672:	2801      	cmp	r0, #1
 8004674:	d105      	bne.n	8004682 <HAL_ADC_DeInit+0x32>
{
 8004676:	2501      	movs	r5, #1
  __HAL_UNLOCK(hadc);
 8004678:	2300      	movs	r3, #0
 800467a:	3450      	adds	r4, #80	; 0x50
 800467c:	7023      	strb	r3, [r4, #0]
}
 800467e:	0028      	movs	r0, r5
 8004680:	bd70      	pop	{r4, r5, r6, pc}
      hadc->State = HAL_ADC_STATE_READY;
 8004682:	2301      	movs	r3, #1
 8004684:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD | ADC_IT_OVR | ADC_IT_EOCAL | ADC_IT_EOS |  \
 8004686:	6823      	ldr	r3, [r4, #0]
 8004688:	4915      	ldr	r1, [pc, #84]	; (80046e0 <HAL_ADC_DeInit+0x90>)
 800468a:	685a      	ldr	r2, [r3, #4]
    HAL_ADC_MspDeInit(hadc);
 800468c:	0020      	movs	r0, r4
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD | ADC_IT_OVR | ADC_IT_EOCAL | ADC_IT_EOS |  \
 800468e:	400a      	ands	r2, r1
 8004690:	605a      	str	r2, [r3, #4]
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_EOCAL | ADC_FLAG_OVR | ADC_FLAG_EOS |  \
 8004692:	4a14      	ldr	r2, [pc, #80]	; (80046e4 <HAL_ADC_DeInit+0x94>)
    hadc->Instance->CR &= ~ADC_CR_ADVREGEN;
 8004694:	4914      	ldr	r1, [pc, #80]	; (80046e8 <HAL_ADC_DeInit+0x98>)
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_EOCAL | ADC_FLAG_OVR | ADC_FLAG_EOS |  \
 8004696:	601a      	str	r2, [r3, #0]
    hadc->Instance->CR &= ~ADC_CR_ADVREGEN;
 8004698:	689a      	ldr	r2, [r3, #8]
 800469a:	400a      	ands	r2, r1
 800469c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWDCH  | ADC_CFGR1_AWDEN  | ADC_CFGR1_AWDSGL | \
 800469e:	68da      	ldr	r2, [r3, #12]
 80046a0:	4912      	ldr	r1, [pc, #72]	; (80046ec <HAL_ADC_DeInit+0x9c>)
 80046a2:	400a      	ands	r2, r1
 80046a4:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_TOVS  | ADC_CFGR2_OVSS  | ADC_CFGR2_OVSR | \
 80046a6:	691a      	ldr	r2, [r3, #16]
 80046a8:	4911      	ldr	r1, [pc, #68]	; (80046f0 <HAL_ADC_DeInit+0xa0>)
 80046aa:	400a      	ands	r2, r1
    hadc->Instance->SMPR &= ~(ADC_SMPR_SMPR);
 80046ac:	2107      	movs	r1, #7
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_TOVS  | ADC_CFGR2_OVSS  | ADC_CFGR2_OVSR | \
 80046ae:	611a      	str	r2, [r3, #16]
    hadc->Instance->SMPR &= ~(ADC_SMPR_SMPR);
 80046b0:	695a      	ldr	r2, [r3, #20]
 80046b2:	438a      	bics	r2, r1
 80046b4:	615a      	str	r2, [r3, #20]
    hadc->Instance->TR &= ~(ADC_TR_LT | ADC_TR_HT);
 80046b6:	6a1a      	ldr	r2, [r3, #32]
 80046b8:	490e      	ldr	r1, [pc, #56]	; (80046f4 <HAL_ADC_DeInit+0xa4>)
 80046ba:	400a      	ands	r2, r1
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 80046bc:	217f      	movs	r1, #127	; 0x7f
    hadc->Instance->TR &= ~(ADC_TR_LT | ADC_TR_HT);
 80046be:	621a      	str	r2, [r3, #32]
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 80046c0:	33b4      	adds	r3, #180	; 0xb4
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	438a      	bics	r2, r1
 80046c6:	601a      	str	r2, [r3, #0]
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	438a      	bics	r2, r1
 80046cc:	601a      	str	r2, [r3, #0]
    HAL_ADC_MspDeInit(hadc);
 80046ce:	f7fd fe39 	bl	8002344 <HAL_ADC_MspDeInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80046d2:	2300      	movs	r3, #0
 80046d4:	65a3      	str	r3, [r4, #88]	; 0x58
    hadc->State = HAL_ADC_STATE_RESET;
 80046d6:	6563      	str	r3, [r4, #84]	; 0x54
 80046d8:	e7ce      	b.n	8004678 <HAL_ADC_DeInit+0x28>
  if (tmp_hal_status != HAL_ERROR)
 80046da:	2801      	cmp	r0, #1
 80046dc:	d0cb      	beq.n	8004676 <HAL_ADC_DeInit+0x26>
 80046de:	e7d2      	b.n	8004686 <HAL_ADC_DeInit+0x36>
 80046e0:	fffff760 	.word	0xfffff760
 80046e4:	0000089f 	.word	0x0000089f
 80046e8:	efffffff 	.word	0xefffffff
 80046ec:	833e0200 	.word	0x833e0200
 80046f0:	3ffffc02 	.word	0x3ffffc02
 80046f4:	f000f000 	.word	0xf000f000

080046f8 <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80046f8:	6803      	ldr	r3, [r0, #0]
{
 80046fa:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80046fc:	689b      	ldr	r3, [r3, #8]
{
 80046fe:	0004      	movs	r4, r0
    tmp_hal_status = HAL_BUSY;
 8004700:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004702:	075b      	lsls	r3, r3, #29
 8004704:	d41a      	bmi.n	800473c <HAL_ADC_Start+0x44>
    __HAL_LOCK(hadc);
 8004706:	0025      	movs	r5, r4
 8004708:	3550      	adds	r5, #80	; 0x50
 800470a:	782b      	ldrb	r3, [r5, #0]
 800470c:	2b01      	cmp	r3, #1
 800470e:	d015      	beq.n	800473c <HAL_ADC_Start+0x44>
 8004710:	2301      	movs	r3, #1
 8004712:	702b      	strb	r3, [r5, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004714:	69e3      	ldr	r3, [r4, #28]
 8004716:	2b01      	cmp	r3, #1
 8004718:	d111      	bne.n	800473e <HAL_ADC_Start+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 800471a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800471c:	4a0b      	ldr	r2, [pc, #44]	; (800474c <HAL_ADC_Start+0x54>)
      ADC_CLEAR_ERRORCODE(hadc);
 800471e:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8004720:	401a      	ands	r2, r3
 8004722:	2380      	movs	r3, #128	; 0x80
 8004724:	005b      	lsls	r3, r3, #1
 8004726:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004728:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 800472a:	6563      	str	r3, [r4, #84]	; 0x54
      ADC_CLEAR_ERRORCODE(hadc);
 800472c:	65a0      	str	r0, [r4, #88]	; 0x58
      __HAL_UNLOCK(hadc);
 800472e:	7028      	strb	r0, [r5, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004730:	6823      	ldr	r3, [r4, #0]
 8004732:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8004734:	6899      	ldr	r1, [r3, #8]
 8004736:	3a18      	subs	r2, #24
 8004738:	430a      	orrs	r2, r1
 800473a:	609a      	str	r2, [r3, #8]
}
 800473c:	bd70      	pop	{r4, r5, r6, pc}
      tmp_hal_status = ADC_Enable(hadc);
 800473e:	0020      	movs	r0, r4
 8004740:	f7ff fe16 	bl	8004370 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8004744:	2800      	cmp	r0, #0
 8004746:	d0e8      	beq.n	800471a <HAL_ADC_Start+0x22>
 8004748:	e7f8      	b.n	800473c <HAL_ADC_Start+0x44>
 800474a:	46c0      	nop			; (mov r8, r8)
 800474c:	fffff0fe 	.word	0xfffff0fe

08004750 <HAL_ADC_Stop>:
{
 8004750:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 8004752:	0006      	movs	r6, r0
 8004754:	3650      	adds	r6, #80	; 0x50
 8004756:	7833      	ldrb	r3, [r6, #0]
{
 8004758:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 800475a:	2002      	movs	r0, #2
 800475c:	2b01      	cmp	r3, #1
 800475e:	d012      	beq.n	8004786 <HAL_ADC_Stop+0x36>
 8004760:	2501      	movs	r5, #1
  tmp_hal_status = ADC_ConversionStop(hadc);
 8004762:	0020      	movs	r0, r4
  __HAL_LOCK(hadc);
 8004764:	7035      	strb	r5, [r6, #0]
  tmp_hal_status = ADC_ConversionStop(hadc);
 8004766:	f7ff fe6f 	bl	8004448 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800476a:	2800      	cmp	r0, #0
 800476c:	d109      	bne.n	8004782 <HAL_ADC_Stop+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 800476e:	0020      	movs	r0, r4
 8004770:	f7ff fe36 	bl	80043e0 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8004774:	2800      	cmp	r0, #0
 8004776:	d104      	bne.n	8004782 <HAL_ADC_Stop+0x32>
      ADC_STATE_CLR_SET(hadc->State,
 8004778:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800477a:	4a03      	ldr	r2, [pc, #12]	; (8004788 <HAL_ADC_Stop+0x38>)
 800477c:	4013      	ands	r3, r2
 800477e:	431d      	orrs	r5, r3
 8004780:	6565      	str	r5, [r4, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8004782:	2300      	movs	r3, #0
 8004784:	7033      	strb	r3, [r6, #0]
}
 8004786:	bd70      	pop	{r4, r5, r6, pc}
 8004788:	fffffefe 	.word	0xfffffefe

0800478c <HAL_ADC_PollForConversion>:
{
 800478c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800478e:	6946      	ldr	r6, [r0, #20]
{
 8004790:	0004      	movs	r4, r0
 8004792:	000d      	movs	r5, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8004794:	2e08      	cmp	r6, #8
 8004796:	d00d      	beq.n	80047b4 <HAL_ADC_PollForConversion+0x28>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8004798:	6803      	ldr	r3, [r0, #0]
 800479a:	2001      	movs	r0, #1
 800479c:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800479e:	260c      	movs	r6, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80047a0:	4203      	tst	r3, r0
 80047a2:	d007      	beq.n	80047b4 <HAL_ADC_PollForConversion+0x28>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047a4:	2320      	movs	r3, #32
 80047a6:	6d62      	ldr	r2, [r4, #84]	; 0x54
      __HAL_UNLOCK(hadc);
 80047a8:	3450      	adds	r4, #80	; 0x50
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047aa:	4313      	orrs	r3, r2
 80047ac:	6063      	str	r3, [r4, #4]
      __HAL_UNLOCK(hadc);
 80047ae:	2300      	movs	r3, #0
 80047b0:	7023      	strb	r3, [r4, #0]
}
 80047b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tickstart = HAL_GetTick();
 80047b4:	f7fe fb02 	bl	8002dbc <HAL_GetTick>
 80047b8:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80047ba:	6823      	ldr	r3, [r4, #0]
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	4216      	tst	r6, r2
 80047c0:	d024      	beq.n	800480c <HAL_ADC_PollForConversion+0x80>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80047c2:	2280      	movs	r2, #128	; 0x80
 80047c4:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80047c6:	0092      	lsls	r2, r2, #2
 80047c8:	430a      	orrs	r2, r1
 80047ca:	6562      	str	r2, [r4, #84]	; 0x54
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80047cc:	22c0      	movs	r2, #192	; 0xc0
 80047ce:	68d9      	ldr	r1, [r3, #12]
 80047d0:	0112      	lsls	r2, r2, #4
 80047d2:	4211      	tst	r1, r2
 80047d4:	d113      	bne.n	80047fe <HAL_ADC_PollForConversion+0x72>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80047d6:	1c62      	adds	r2, r4, #1
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80047d8:	7fd2      	ldrb	r2, [r2, #31]
 80047da:	2a00      	cmp	r2, #0
 80047dc:	d10f      	bne.n	80047fe <HAL_ADC_PollForConversion+0x72>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	0712      	lsls	r2, r2, #28
 80047e2:	d50c      	bpl.n	80047fe <HAL_ADC_PollForConversion+0x72>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80047e4:	689a      	ldr	r2, [r3, #8]
 80047e6:	0752      	lsls	r2, r2, #29
 80047e8:	d423      	bmi.n	8004832 <HAL_ADC_PollForConversion+0xa6>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80047ea:	210c      	movs	r1, #12
 80047ec:	685a      	ldr	r2, [r3, #4]
 80047ee:	438a      	bics	r2, r1
 80047f0:	605a      	str	r2, [r3, #4]
        ADC_STATE_CLR_SET(hadc->State,
 80047f2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80047f4:	4913      	ldr	r1, [pc, #76]	; (8004844 <HAL_ADC_PollForConversion+0xb8>)
 80047f6:	4011      	ands	r1, r2
 80047f8:	2201      	movs	r2, #1
 80047fa:	430a      	orrs	r2, r1
 80047fc:	6562      	str	r2, [r4, #84]	; 0x54
  return HAL_OK;
 80047fe:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8004800:	69a2      	ldr	r2, [r4, #24]
 8004802:	4282      	cmp	r2, r0
 8004804:	d1d5      	bne.n	80047b2 <HAL_ADC_PollForConversion+0x26>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004806:	220c      	movs	r2, #12
 8004808:	601a      	str	r2, [r3, #0]
 800480a:	e7d2      	b.n	80047b2 <HAL_ADC_PollForConversion+0x26>
    if(Timeout != HAL_MAX_DELAY)
 800480c:	1c6a      	adds	r2, r5, #1
 800480e:	d0d5      	beq.n	80047bc <HAL_ADC_PollForConversion+0x30>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8004810:	2d00      	cmp	r5, #0
 8004812:	d108      	bne.n	8004826 <HAL_ADC_PollForConversion+0x9a>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004814:	2304      	movs	r3, #4
 8004816:	6d62      	ldr	r2, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 8004818:	3450      	adds	r4, #80	; 0x50
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800481a:	4313      	orrs	r3, r2
 800481c:	6063      	str	r3, [r4, #4]
        __HAL_UNLOCK(hadc);
 800481e:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8004820:	2003      	movs	r0, #3
        __HAL_UNLOCK(hadc);
 8004822:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 8004824:	e7c5      	b.n	80047b2 <HAL_ADC_PollForConversion+0x26>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8004826:	f7fe fac9 	bl	8002dbc <HAL_GetTick>
 800482a:	1bc0      	subs	r0, r0, r7
 800482c:	42a8      	cmp	r0, r5
 800482e:	d9c4      	bls.n	80047ba <HAL_ADC_PollForConversion+0x2e>
 8004830:	e7f0      	b.n	8004814 <HAL_ADC_PollForConversion+0x88>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004832:	2220      	movs	r2, #32
 8004834:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8004836:	430a      	orrs	r2, r1
 8004838:	6562      	str	r2, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800483a:	2201      	movs	r2, #1
 800483c:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800483e:	430a      	orrs	r2, r1
 8004840:	65a2      	str	r2, [r4, #88]	; 0x58
 8004842:	e7dc      	b.n	80047fe <HAL_ADC_PollForConversion+0x72>
 8004844:	fffffefe 	.word	0xfffffefe

08004848 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8004848:	6803      	ldr	r3, [r0, #0]
 800484a:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 800484c:	4770      	bx	lr
	...

08004850 <HAL_ADC_ConfigChannel>:
{
 8004850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 8004852:	0004      	movs	r4, r0
 8004854:	3450      	adds	r4, #80	; 0x50
 8004856:	7822      	ldrb	r2, [r4, #0]
{
 8004858:	0003      	movs	r3, r0
 800485a:	000d      	movs	r5, r1
  __HAL_LOCK(hadc);
 800485c:	2002      	movs	r0, #2
 800485e:	2a01      	cmp	r2, #1
 8004860:	d00b      	beq.n	800487a <HAL_ADC_ConfigChannel+0x2a>
 8004862:	3801      	subs	r0, #1
 8004864:	7020      	strb	r0, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	6891      	ldr	r1, [r2, #8]
 800486a:	0749      	lsls	r1, r1, #29
 800486c:	d506      	bpl.n	800487c <HAL_ADC_ConfigChannel+0x2c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800486e:	2220      	movs	r2, #32
 8004870:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004872:	430a      	orrs	r2, r1
 8004874:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8004876:	2300      	movs	r3, #0
 8004878:	7023      	strb	r3, [r4, #0]
}
 800487a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (sConfig->Rank != ADC_RANK_NONE)
 800487c:	2380      	movs	r3, #128	; 0x80
 800487e:	6828      	ldr	r0, [r5, #0]
 8004880:	4e19      	ldr	r6, [pc, #100]	; (80048e8 <HAL_ADC_ConfigChannel+0x98>)
 8004882:	686f      	ldr	r7, [r5, #4]
 8004884:	0341      	lsls	r1, r0, #13
 8004886:	02db      	lsls	r3, r3, #11
 8004888:	0b49      	lsrs	r1, r1, #13
 800488a:	4003      	ands	r3, r0
 800488c:	42b7      	cmp	r7, r6
 800488e:	d019      	beq.n	80048c4 <HAL_ADC_ConfigChannel+0x74>
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8004890:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8004892:	4301      	orrs	r1, r0
 8004894:	6291      	str	r1, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8004896:	2b00      	cmp	r3, #0
 8004898:	d008      	beq.n	80048ac <HAL_ADC_ConfigChannel+0x5c>
      ADC->CCR |= ADC_CCR_TSEN;   
 800489a:	2380      	movs	r3, #128	; 0x80
 800489c:	4a13      	ldr	r2, [pc, #76]	; (80048ec <HAL_ADC_ConfigChannel+0x9c>)
 800489e:	041b      	lsls	r3, r3, #16
 80048a0:	6811      	ldr	r1, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80048a2:	200a      	movs	r0, #10
      ADC->CCR |= ADC_CCR_TSEN;   
 80048a4:	430b      	orrs	r3, r1
 80048a6:	6013      	str	r3, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80048a8:	f7ff fd4c 	bl	8004344 <ADC_DelayMicroSecond>
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80048ac:	682b      	ldr	r3, [r5, #0]
 80048ae:	039b      	lsls	r3, r3, #14
 80048b0:	d505      	bpl.n	80048be <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR |= ADC_CCR_VREFEN;   
 80048b2:	2380      	movs	r3, #128	; 0x80
 80048b4:	4a0d      	ldr	r2, [pc, #52]	; (80048ec <HAL_ADC_ConfigChannel+0x9c>)
 80048b6:	03db      	lsls	r3, r3, #15
 80048b8:	6811      	ldr	r1, [r2, #0]
 80048ba:	430b      	orrs	r3, r1
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80048bc:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hadc);
 80048be:	2000      	movs	r0, #0
 80048c0:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 80048c2:	e7da      	b.n	800487a <HAL_ADC_ConfigChannel+0x2a>
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80048c4:	6a95      	ldr	r5, [r2, #40]	; 0x28
 80048c6:	438d      	bics	r5, r1
 80048c8:	6295      	str	r5, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d004      	beq.n	80048d8 <HAL_ADC_ConfigChannel+0x88>
      ADC->CCR &= ~ADC_CCR_TSEN;   
 80048ce:	4a07      	ldr	r2, [pc, #28]	; (80048ec <HAL_ADC_ConfigChannel+0x9c>)
 80048d0:	4907      	ldr	r1, [pc, #28]	; (80048f0 <HAL_ADC_ConfigChannel+0xa0>)
 80048d2:	6813      	ldr	r3, [r2, #0]
 80048d4:	400b      	ands	r3, r1
 80048d6:	6013      	str	r3, [r2, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80048d8:	0383      	lsls	r3, r0, #14
 80048da:	d5f0      	bpl.n	80048be <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 80048dc:	4a03      	ldr	r2, [pc, #12]	; (80048ec <HAL_ADC_ConfigChannel+0x9c>)
 80048de:	4905      	ldr	r1, [pc, #20]	; (80048f4 <HAL_ADC_ConfigChannel+0xa4>)
 80048e0:	6813      	ldr	r3, [r2, #0]
 80048e2:	400b      	ands	r3, r1
 80048e4:	e7ea      	b.n	80048bc <HAL_ADC_ConfigChannel+0x6c>
 80048e6:	46c0      	nop			; (mov r8, r8)
 80048e8:	00001001 	.word	0x00001001
 80048ec:	40012708 	.word	0x40012708
 80048f0:	ff7fffff 	.word	0xff7fffff
 80048f4:	ffbfffff 	.word	0xffbfffff

080048f8 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 80048f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80048fa:	0005      	movs	r5, r0
 80048fc:	3550      	adds	r5, #80	; 0x50
 80048fe:	782b      	ldrb	r3, [r5, #0]
{
 8004900:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8004902:	2002      	movs	r0, #2
 8004904:	2b01      	cmp	r3, #1
 8004906:	d044      	beq.n	8004992 <HAL_ADCEx_Calibration_Start+0x9a>
 8004908:	2301      	movs	r3, #1
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800490a:	2203      	movs	r2, #3
  __HAL_LOCK(hadc);
 800490c:	702b      	strb	r3, [r5, #0]
  if (ADC_IS_ENABLE(hadc) == RESET)
 800490e:	6823      	ldr	r3, [r4, #0]
 8004910:	6898      	ldr	r0, [r3, #8]
 8004912:	4010      	ands	r0, r2
 8004914:	2801      	cmp	r0, #1
 8004916:	d109      	bne.n	800492c <HAL_ADCEx_Calibration_Start+0x34>
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	4202      	tst	r2, r0
 800491c:	d006      	beq.n	800492c <HAL_ADCEx_Calibration_Start+0x34>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800491e:	2320      	movs	r3, #32
 8004920:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004922:	4313      	orrs	r3, r2
 8004924:	6563      	str	r3, [r4, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004926:	2300      	movs	r3, #0
 8004928:	702b      	strb	r3, [r5, #0]
  
  /* Return function status */
  return tmp_hal_status;
 800492a:	e032      	b.n	8004992 <HAL_ADCEx_Calibration_Start+0x9a>
    ADC_STATE_CLR_SET(hadc->State, 
 800492c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800492e:	4919      	ldr	r1, [pc, #100]	; (8004994 <HAL_ADCEx_Calibration_Start+0x9c>)
 8004930:	4011      	ands	r1, r2
 8004932:	2202      	movs	r2, #2
 8004934:	430a      	orrs	r2, r1
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8004936:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State, 
 8004938:	6562      	str	r2, [r4, #84]	; 0x54
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800493a:	68de      	ldr	r6, [r3, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800493c:	68da      	ldr	r2, [r3, #12]
 800493e:	438a      	bics	r2, r1
 8004940:	60da      	str	r2, [r3, #12]
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8004942:	2280      	movs	r2, #128	; 0x80
 8004944:	6899      	ldr	r1, [r3, #8]
 8004946:	0612      	lsls	r2, r2, #24
 8004948:	430a      	orrs	r2, r1
 800494a:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 800494c:	f7fe fa36 	bl	8002dbc <HAL_GetTick>
 8004950:	0007      	movs	r7, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8004952:	6823      	ldr	r3, [r4, #0]
 8004954:	689a      	ldr	r2, [r3, #8]
 8004956:	2a00      	cmp	r2, #0
 8004958:	db0c      	blt.n	8004974 <HAL_ADCEx_Calibration_Start+0x7c>
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800495a:	2203      	movs	r2, #3
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 800495c:	68d9      	ldr	r1, [r3, #12]
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 800495e:	4016      	ands	r6, r2
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8004960:	430e      	orrs	r6, r1
 8004962:	60de      	str	r6, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8004964:	6d63      	ldr	r3, [r4, #84]	; 0x54
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004966:	2000      	movs	r0, #0
    ADC_STATE_CLR_SET(hadc->State,
 8004968:	4393      	bics	r3, r2
 800496a:	001a      	movs	r2, r3
 800496c:	2301      	movs	r3, #1
 800496e:	4313      	orrs	r3, r2
 8004970:	6563      	str	r3, [r4, #84]	; 0x54
 8004972:	e7d8      	b.n	8004926 <HAL_ADCEx_Calibration_Start+0x2e>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004974:	f7fe fa22 	bl	8002dbc <HAL_GetTick>
 8004978:	1bc0      	subs	r0, r0, r7
 800497a:	280a      	cmp	r0, #10
 800497c:	d9e9      	bls.n	8004952 <HAL_ADCEx_Calibration_Start+0x5a>
        ADC_STATE_CLR_SET(hadc->State,
 800497e:	2212      	movs	r2, #18
 8004980:	6d63      	ldr	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 8004982:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 8004984:	4393      	bics	r3, r2
 8004986:	001a      	movs	r2, r3
 8004988:	2310      	movs	r3, #16
 800498a:	4313      	orrs	r3, r2
 800498c:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 800498e:	2300      	movs	r3, #0
 8004990:	702b      	strb	r3, [r5, #0]
}
 8004992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004994:	fffffefd 	.word	0xfffffefd

08004998 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004998:	b530      	push	{r4, r5, lr}
 800499a:	25ff      	movs	r5, #255	; 0xff
 800499c:	2403      	movs	r4, #3
 800499e:	002a      	movs	r2, r5
 80049a0:	4004      	ands	r4, r0
 80049a2:	00e4      	lsls	r4, r4, #3
 80049a4:	40a2      	lsls	r2, r4
 80049a6:	0189      	lsls	r1, r1, #6
 80049a8:	4029      	ands	r1, r5
 80049aa:	43d2      	mvns	r2, r2
 80049ac:	40a1      	lsls	r1, r4
 80049ae:	b2c3      	uxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 80049b0:	2800      	cmp	r0, #0
 80049b2:	db0a      	blt.n	80049ca <HAL_NVIC_SetPriority+0x32>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80049b4:	24c0      	movs	r4, #192	; 0xc0
 80049b6:	4b0b      	ldr	r3, [pc, #44]	; (80049e4 <HAL_NVIC_SetPriority+0x4c>)
 80049b8:	0880      	lsrs	r0, r0, #2
 80049ba:	0080      	lsls	r0, r0, #2
 80049bc:	18c0      	adds	r0, r0, r3
 80049be:	00a4      	lsls	r4, r4, #2
 80049c0:	5903      	ldr	r3, [r0, r4]
 80049c2:	401a      	ands	r2, r3
 80049c4:	4311      	orrs	r1, r2
 80049c6:	5101      	str	r1, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80049c8:	bd30      	pop	{r4, r5, pc}
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80049ca:	200f      	movs	r0, #15
 80049cc:	4003      	ands	r3, r0
 80049ce:	3b08      	subs	r3, #8
 80049d0:	4805      	ldr	r0, [pc, #20]	; (80049e8 <HAL_NVIC_SetPriority+0x50>)
 80049d2:	089b      	lsrs	r3, r3, #2
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	181b      	adds	r3, r3, r0
 80049d8:	69d8      	ldr	r0, [r3, #28]
 80049da:	4002      	ands	r2, r0
 80049dc:	4311      	orrs	r1, r2
 80049de:	61d9      	str	r1, [r3, #28]
 80049e0:	e7f2      	b.n	80049c8 <HAL_NVIC_SetPriority+0x30>
 80049e2:	46c0      	nop			; (mov r8, r8)
 80049e4:	e000e100 	.word	0xe000e100
 80049e8:	e000ed00 	.word	0xe000ed00

080049ec <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80049ec:	2800      	cmp	r0, #0
 80049ee:	db05      	blt.n	80049fc <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049f0:	231f      	movs	r3, #31
 80049f2:	4018      	ands	r0, r3
 80049f4:	3b1e      	subs	r3, #30
 80049f6:	4083      	lsls	r3, r0
 80049f8:	4a01      	ldr	r2, [pc, #4]	; (8004a00 <HAL_NVIC_EnableIRQ+0x14>)
 80049fa:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80049fc:	4770      	bx	lr
 80049fe:	46c0      	nop			; (mov r8, r8)
 8004a00:	e000e100 	.word	0xe000e100

08004a04 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004a04:	2800      	cmp	r0, #0
 8004a06:	db09      	blt.n	8004a1c <HAL_NVIC_DisableIRQ+0x18>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a08:	231f      	movs	r3, #31
 8004a0a:	4018      	ands	r0, r3
 8004a0c:	3b1e      	subs	r3, #30
 8004a0e:	4083      	lsls	r3, r0
 8004a10:	4a03      	ldr	r2, [pc, #12]	; (8004a20 <HAL_NVIC_DisableIRQ+0x1c>)
 8004a12:	67d3      	str	r3, [r2, #124]	; 0x7c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004a14:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004a18:	f3bf 8f6f 	isb	sy
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8004a1c:	4770      	bx	lr
 8004a1e:	46c0      	nop			; (mov r8, r8)
 8004a20:	e000e104 	.word	0xe000e104

08004a24 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a26:	0004      	movs	r4, r0
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8004a28:	2001      	movs	r0, #1
  if(hdma == NULL)
 8004a2a:	2c00      	cmp	r4, #0
 8004a2c:	d035      	beq.n	8004a9a <HAL_DMA_Init+0x76>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004a2e:	6825      	ldr	r5, [r4, #0]
 8004a30:	4b1a      	ldr	r3, [pc, #104]	; (8004a9c <HAL_DMA_Init+0x78>)
 8004a32:	2114      	movs	r1, #20
 8004a34:	18e8      	adds	r0, r5, r3
 8004a36:	f7fb fb8d 	bl	8000154 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8004a3a:	4b19      	ldr	r3, [pc, #100]	; (8004aa0 <HAL_DMA_Init+0x7c>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004a3c:	0080      	lsls	r0, r0, #2
  hdma->DmaBaseAddress = DMA1;
 8004a3e:	6423      	str	r3, [r4, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004a40:	2302      	movs	r3, #2
 8004a42:	1da2      	adds	r2, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004a44:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->State = HAL_DMA_STATE_BUSY;
 8004a46:	77d3      	strb	r3, [r2, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004a48:	682e      	ldr	r6, [r5, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004a4a:	4b16      	ldr	r3, [pc, #88]	; (8004aa4 <HAL_DMA_Init+0x80>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004a4c:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004a4e:	401e      	ands	r6, r3
  tmp |=  hdma->Init.Direction        |
 8004a50:	68e3      	ldr	r3, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a52:	6927      	ldr	r7, [r4, #16]
  tmp |=  hdma->Init.Direction        |
 8004a54:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a56:	433b      	orrs	r3, r7
 8004a58:	6967      	ldr	r7, [r4, #20]
 8004a5a:	433b      	orrs	r3, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a5c:	69a7      	ldr	r7, [r4, #24]
 8004a5e:	433b      	orrs	r3, r7
 8004a60:	69e7      	ldr	r7, [r4, #28]
 8004a62:	433b      	orrs	r3, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a64:	6a27      	ldr	r7, [r4, #32]
 8004a66:	433b      	orrs	r3, r7
  tmp |=  hdma->Init.Direction        |
 8004a68:	4333      	orrs	r3, r6

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004a6a:	602b      	str	r3, [r5, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004a6c:	2380      	movs	r3, #128	; 0x80
 8004a6e:	01db      	lsls	r3, r3, #7
 8004a70:	4299      	cmp	r1, r3
 8004a72:	d00c      	beq.n	8004a8e <HAL_DMA_Init+0x6a>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004a74:	251c      	movs	r5, #28
 8004a76:	4028      	ands	r0, r5
 8004a78:	3d0d      	subs	r5, #13
 8004a7a:	4085      	lsls	r5, r0
 8004a7c:	490a      	ldr	r1, [pc, #40]	; (8004aa8 <HAL_DMA_Init+0x84>)
 8004a7e:	680b      	ldr	r3, [r1, #0]
 8004a80:	43ab      	bics	r3, r5
 8004a82:	600b      	str	r3, [r1, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8004a84:	6863      	ldr	r3, [r4, #4]
 8004a86:	680d      	ldr	r5, [r1, #0]
 8004a88:	4083      	lsls	r3, r0
 8004a8a:	432b      	orrs	r3, r5
 8004a8c:	600b      	str	r3, [r1, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a8e:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004a90:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a92:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004a94:	3405      	adds	r4, #5
  hdma->State  = HAL_DMA_STATE_READY;
 8004a96:	77d3      	strb	r3, [r2, #31]
  hdma->Lock = HAL_UNLOCKED;
 8004a98:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 8004a9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a9c:	bffdfff8 	.word	0xbffdfff8
 8004aa0:	40020000 	.word	0x40020000
 8004aa4:	ffff800f 	.word	0xffff800f
 8004aa8:	400200a8 	.word	0x400200a8

08004aac <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004aac:	b570      	push	{r4, r5, r6, lr}
 8004aae:	2501      	movs	r5, #1
 8004ab0:	0004      	movs	r4, r0

  /* Check the DMA handle allocation */
  if (NULL == hdma )
  {
    return HAL_ERROR;
 8004ab2:	0028      	movs	r0, r5
  if (NULL == hdma )
 8004ab4:	2c00      	cmp	r4, #0
 8004ab6:	d021      	beq.n	8004afc <HAL_DMA_DeInit+0x50>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8004ab8:	6826      	ldr	r6, [r4, #0]

  /* Compute the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004aba:	2114      	movs	r1, #20
  __HAL_DMA_DISABLE(hdma);
 8004abc:	6833      	ldr	r3, [r6, #0]
 8004abe:	43ab      	bics	r3, r5
 8004ac0:	6033      	str	r3, [r6, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004ac2:	4b0f      	ldr	r3, [pc, #60]	; (8004b00 <HAL_DMA_DeInit+0x54>)
 8004ac4:	18f0      	adds	r0, r6, r3
 8004ac6:	f7fb fb45 	bl	8000154 <__udivsi3>

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004aca:	211c      	movs	r1, #28
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004acc:	0083      	lsls	r3, r0, #2
 8004ace:	6463      	str	r3, [r4, #68]	; 0x44
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004ad0:	400b      	ands	r3, r1
  hdma->Instance->CCR  = 0U;
 8004ad2:	2000      	movs	r0, #0
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004ad4:	409d      	lsls	r5, r3

  /* Reset DMA channel selection register */
  /* DMA1 */
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004ad6:	390d      	subs	r1, #13
 8004ad8:	4099      	lsls	r1, r3
  hdma->DmaBaseAddress = DMA1;
 8004ada:	4a0a      	ldr	r2, [pc, #40]	; (8004b04 <HAL_DMA_DeInit+0x58>)

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8004adc:	1da3      	adds	r3, r4, #6
  hdma->DmaBaseAddress = DMA1;
 8004ade:	6422      	str	r2, [r4, #64]	; 0x40
  hdma->Instance->CCR  = 0U;
 8004ae0:	6030      	str	r0, [r6, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004ae2:	6055      	str	r5, [r2, #4]
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004ae4:	4d08      	ldr	r5, [pc, #32]	; (8004b08 <HAL_DMA_DeInit+0x5c>)
 8004ae6:	682a      	ldr	r2, [r5, #0]
 8004ae8:	438a      	bics	r2, r1
 8004aea:	602a      	str	r2, [r5, #0]
  hdma->XferCpltCallback = NULL;
 8004aec:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8004aee:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8004af0:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8004af2:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004af4:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004af6:	3405      	adds	r4, #5
  hdma->State = HAL_DMA_STATE_RESET;
 8004af8:	77d8      	strb	r0, [r3, #31]
  __HAL_UNLOCK(hdma);
 8004afa:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 8004afc:	bd70      	pop	{r4, r5, r6, pc}
 8004afe:	46c0      	nop			; (mov r8, r8)
 8004b00:	bffdfff8 	.word	0xbffdfff8
 8004b04:	40020000 	.word	0x40020000
 8004b08:	400200a8 	.word	0x400200a8

08004b0c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004b0e:	1d45      	adds	r5, r0, #5
{
 8004b10:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hdma);
 8004b12:	7feb      	ldrb	r3, [r5, #31]
{
 8004b14:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8004b16:	2002      	movs	r0, #2
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d029      	beq.n	8004b70 <HAL_DMA_Start_IT+0x64>
 8004b1c:	2301      	movs	r3, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 8004b1e:	1da7      	adds	r7, r4, #6
  __HAL_LOCK(hdma);
 8004b20:	77eb      	strb	r3, [r5, #31]
  if(HAL_DMA_STATE_READY == hdma->State)
 8004b22:	7ffb      	ldrb	r3, [r7, #31]
 8004b24:	2600      	movs	r6, #0
 8004b26:	469c      	mov	ip, r3
 8004b28:	4660      	mov	r0, ip
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	2801      	cmp	r0, #1
 8004b2e:	d12a      	bne.n	8004b86 <HAL_DMA_Start_IT+0x7a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b30:	3001      	adds	r0, #1
 8004b32:	77f8      	strb	r0, [r7, #31]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004b34:	6820      	ldr	r0, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b36:	63e6      	str	r6, [r4, #60]	; 0x3c
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004b38:	6c67      	ldr	r7, [r4, #68]	; 0x44
    __HAL_DMA_DISABLE(hdma);
 8004b3a:	6805      	ldr	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004b3c:	361c      	adds	r6, #28
 8004b3e:	403e      	ands	r6, r7
    __HAL_DMA_DISABLE(hdma);
 8004b40:	439d      	bics	r5, r3
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004b42:	40b3      	lsls	r3, r6
    __HAL_DMA_DISABLE(hdma);
 8004b44:	6005      	str	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004b46:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8004b48:	606b      	str	r3, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004b4a:	9b01      	ldr	r3, [sp, #4]
 8004b4c:	6043      	str	r3, [r0, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b4e:	68a3      	ldr	r3, [r4, #8]
 8004b50:	2b10      	cmp	r3, #16
 8004b52:	d10e      	bne.n	8004b72 <HAL_DMA_Start_IT+0x66>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004b54:	6082      	str	r2, [r0, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004b56:	60c1      	str	r1, [r0, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8004b58:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00c      	beq.n	8004b78 <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b5e:	230e      	movs	r3, #14
 8004b60:	6802      	ldr	r2, [r0, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004b62:	4313      	orrs	r3, r2
 8004b64:	6003      	str	r3, [r0, #0]
    __HAL_DMA_ENABLE(hdma);
 8004b66:	2301      	movs	r3, #1
 8004b68:	6802      	ldr	r2, [r0, #0]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b6e:	2000      	movs	r0, #0
}
 8004b70:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8004b72:	6081      	str	r1, [r0, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8004b74:	60c2      	str	r2, [r0, #12]
 8004b76:	e7ef      	b.n	8004b58 <HAL_DMA_Start_IT+0x4c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004b78:	2204      	movs	r2, #4
 8004b7a:	6803      	ldr	r3, [r0, #0]
 8004b7c:	4393      	bics	r3, r2
 8004b7e:	6003      	str	r3, [r0, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004b80:	6802      	ldr	r2, [r0, #0]
 8004b82:	230a      	movs	r3, #10
 8004b84:	e7ed      	b.n	8004b62 <HAL_DMA_Start_IT+0x56>
    status = HAL_BUSY;
 8004b86:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);
 8004b88:	77ee      	strb	r6, [r5, #31]
    status = HAL_BUSY;
 8004b8a:	e7f1      	b.n	8004b70 <HAL_DMA_Start_IT+0x64>

08004b8c <HAL_DMA_Abort>:
{
 8004b8c:	b530      	push	{r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004b8e:	1d85      	adds	r5, r0, #6
 8004b90:	7feb      	ldrb	r3, [r5, #31]
 8004b92:	1d44      	adds	r4, r0, #5
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	d005      	beq.n	8004ba4 <HAL_DMA_Abort+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b98:	2304      	movs	r3, #4
 8004b9a:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8004b9c:	2300      	movs	r3, #0
    return HAL_ERROR;
 8004b9e:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8004ba0:	77e3      	strb	r3, [r4, #31]
}
 8004ba2:	bd30      	pop	{r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004ba4:	210e      	movs	r1, #14
 8004ba6:	6803      	ldr	r3, [r0, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	438a      	bics	r2, r1
 8004bac:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8004bae:	2201      	movs	r2, #1
 8004bb0:	6819      	ldr	r1, [r3, #0]
 8004bb2:	4391      	bics	r1, r2
 8004bb4:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004bb6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004bb8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004bba:	201c      	movs	r0, #28
 8004bbc:	4003      	ands	r3, r0
 8004bbe:	0010      	movs	r0, r2
 8004bc0:	4098      	lsls	r0, r3
 8004bc2:	6048      	str	r0, [r1, #4]
    __HAL_UNLOCK(hdma);
 8004bc4:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 8004bc6:	77ea      	strb	r2, [r5, #31]
    __HAL_UNLOCK(hdma);
 8004bc8:	77e0      	strb	r0, [r4, #31]
    return status;
 8004bca:	e7ea      	b.n	8004ba2 <HAL_DMA_Abort+0x16>

08004bcc <HAL_DMA_Abort_IT>:
{
 8004bcc:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004bce:	1d84      	adds	r4, r0, #6
 8004bd0:	7fe3      	ldrb	r3, [r4, #31]
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d004      	beq.n	8004be0 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004bd6:	2304      	movs	r3, #4
 8004bd8:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8004bda:	3b03      	subs	r3, #3
}
 8004bdc:	0018      	movs	r0, r3
 8004bde:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004be0:	210e      	movs	r1, #14
 8004be2:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004be4:	6c45      	ldr	r5, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004be6:	681a      	ldr	r2, [r3, #0]
 8004be8:	438a      	bics	r2, r1
 8004bea:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8004bec:	2201      	movs	r2, #1
 8004bee:	6819      	ldr	r1, [r3, #0]
 8004bf0:	4391      	bics	r1, r2
 8004bf2:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004bf4:	231c      	movs	r3, #28
 8004bf6:	402b      	ands	r3, r5
 8004bf8:	0015      	movs	r5, r2
 8004bfa:	409d      	lsls	r5, r3
 8004bfc:	6c01      	ldr	r1, [r0, #64]	; 0x40
    __HAL_UNLOCK(hdma);
 8004bfe:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004c00:	604d      	str	r5, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8004c02:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 8004c04:	2400      	movs	r4, #0
 8004c06:	77dc      	strb	r4, [r3, #31]
    if(hdma->XferAbortCallback != NULL)
 8004c08:	6b82      	ldr	r2, [r0, #56]	; 0x38
  HAL_StatusTypeDef status = HAL_OK;
 8004c0a:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 8004c0c:	42a2      	cmp	r2, r4
 8004c0e:	d0e5      	beq.n	8004bdc <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 8004c10:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8004c12:	0023      	movs	r3, r4
 8004c14:	e7e2      	b.n	8004bdc <HAL_DMA_Abort_IT+0x10>

08004c16 <HAL_DMA_IRQHandler>:
{
 8004c16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8004c18:	221c      	movs	r2, #28
 8004c1a:	2704      	movs	r7, #4
 8004c1c:	6c46      	ldr	r6, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004c1e:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8004c20:	4032      	ands	r2, r6
 8004c22:	003e      	movs	r6, r7
 8004c24:	4096      	lsls	r6, r2
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004c26:	680d      	ldr	r5, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8004c28:	6803      	ldr	r3, [r0, #0]
 8004c2a:	681c      	ldr	r4, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8004c2c:	4235      	tst	r5, r6
 8004c2e:	d00d      	beq.n	8004c4c <HAL_DMA_IRQHandler+0x36>
 8004c30:	423c      	tst	r4, r7
 8004c32:	d00b      	beq.n	8004c4c <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	0692      	lsls	r2, r2, #26
 8004c38:	d402      	bmi.n	8004c40 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	43ba      	bics	r2, r7
 8004c3e:	601a      	str	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 8004c40:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8004c42:	604e      	str	r6, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d019      	beq.n	8004c7c <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 8004c48:	4798      	blx	r3
  return;
 8004c4a:	e017      	b.n	8004c7c <HAL_DMA_IRQHandler+0x66>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8004c4c:	2702      	movs	r7, #2
 8004c4e:	003e      	movs	r6, r7
 8004c50:	4096      	lsls	r6, r2
 8004c52:	4235      	tst	r5, r6
 8004c54:	d013      	beq.n	8004c7e <HAL_DMA_IRQHandler+0x68>
 8004c56:	423c      	tst	r4, r7
 8004c58:	d011      	beq.n	8004c7e <HAL_DMA_IRQHandler+0x68>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	0692      	lsls	r2, r2, #26
 8004c5e:	d406      	bmi.n	8004c6e <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004c60:	240a      	movs	r4, #10
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	43a2      	bics	r2, r4
 8004c66:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8004c68:	2201      	movs	r2, #1
 8004c6a:	1d83      	adds	r3, r0, #6
 8004c6c:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 8004c6e:	2200      	movs	r2, #0
 8004c70:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8004c72:	604e      	str	r6, [r1, #4]
    __HAL_UNLOCK(hdma);
 8004c74:	77da      	strb	r2, [r3, #31]
    if(hdma->XferCpltCallback != NULL)
 8004c76:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d1e5      	bne.n	8004c48 <HAL_DMA_IRQHandler+0x32>
}
 8004c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8004c7e:	2608      	movs	r6, #8
 8004c80:	0037      	movs	r7, r6
 8004c82:	4097      	lsls	r7, r2
 8004c84:	423d      	tst	r5, r7
 8004c86:	d0f9      	beq.n	8004c7c <HAL_DMA_IRQHandler+0x66>
 8004c88:	4234      	tst	r4, r6
 8004c8a:	d0f7      	beq.n	8004c7c <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c8c:	250e      	movs	r5, #14
 8004c8e:	681c      	ldr	r4, [r3, #0]
 8004c90:	43ac      	bics	r4, r5
 8004c92:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004c94:	2301      	movs	r3, #1
 8004c96:	001c      	movs	r4, r3
 8004c98:	4094      	lsls	r4, r2
    hdma->State = HAL_DMA_STATE_READY;
 8004c9a:	1d82      	adds	r2, r0, #6
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8004c9c:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004c9e:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8004ca0:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	1d43      	adds	r3, r0, #5
 8004ca6:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 8004ca8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004caa:	e7e5      	b.n	8004c78 <HAL_DMA_IRQHandler+0x62>

08004cac <HAL_EXTI_SetConfigLine>:
  * @param  hexti Exti handle.
  * @param  pExtiConfig Pointer on EXTI configuration to be set.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_SetConfigLine(EXTI_HandleTypeDef *hexti, EXTI_ConfigTypeDef *pExtiConfig)
{
 8004cac:	0003      	movs	r3, r0
 8004cae:	b570      	push	{r4, r5, r6, lr}
  uint32_t maskline;

  /* Check null pointer */
  if ((hexti == NULL) || (pExtiConfig == NULL))
  {
    return HAL_ERROR;
 8004cb0:	2001      	movs	r0, #1
  if ((hexti == NULL) || (pExtiConfig == NULL))
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d03a      	beq.n	8004d2c <HAL_EXTI_SetConfigLine+0x80>
 8004cb6:	2900      	cmp	r1, #0
 8004cb8:	d038      	beq.n	8004d2c <HAL_EXTI_SetConfigLine+0x80>

  /* Assign line number to handle */
  hexti->Line = pExtiConfig->Line;

  /* Compute line mask */
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 8004cba:	221f      	movs	r2, #31
  maskline = (1uL << linepos);
 8004cbc:	0005      	movs	r5, r0
  hexti->Line = pExtiConfig->Line;
 8004cbe:	680c      	ldr	r4, [r1, #0]
  linepos = (pExtiConfig->Line & EXTI_PIN_MASK);
 8004cc0:	4022      	ands	r2, r4
  hexti->Line = pExtiConfig->Line;
 8004cc2:	601c      	str	r4, [r3, #0]
  maskline = (1uL << linepos);
 8004cc4:	4095      	lsls	r5, r2

  /* Configure triggers for configurable lines */
  if ((pExtiConfig->Line & EXTI_CONFIG) != 0x00u)
 8004cc6:	4b20      	ldr	r3, [pc, #128]	; (8004d48 <HAL_EXTI_SetConfigLine+0x9c>)
 8004cc8:	01a6      	lsls	r6, r4, #6
 8004cca:	d520      	bpl.n	8004d0e <HAL_EXTI_SetConfigLine+0x62>
  {
    assert_param(IS_EXTI_TRIGGER(pExtiConfig->Trigger));

    /* Configure rising trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_RISING) != 0x00u)
 8004ccc:	688e      	ldr	r6, [r1, #8]
 8004cce:	4206      	tst	r6, r0
 8004cd0:	d02d      	beq.n	8004d2e <HAL_EXTI_SetConfigLine+0x82>
    {
      EXTI->RTSR |= maskline;
 8004cd2:	6898      	ldr	r0, [r3, #8]
 8004cd4:	4328      	orrs	r0, r5
    }
    else
    {
      EXTI->RTSR &= ~maskline;
 8004cd6:	6098      	str	r0, [r3, #8]
    }

    /* Configure falling trigger */
    /* Mask or set line */
    if ((pExtiConfig->Trigger & EXTI_TRIGGER_FALLING) != 0x00u)
 8004cd8:	07b0      	lsls	r0, r6, #30
 8004cda:	d52b      	bpl.n	8004d34 <HAL_EXTI_SetConfigLine+0x88>
    {
      EXTI->FTSR |= maskline;
 8004cdc:	68d8      	ldr	r0, [r3, #12]
 8004cde:	4328      	orrs	r0, r5
    }
    else
    {
      EXTI->FTSR &= ~maskline;
 8004ce0:	60d8      	str	r0, [r3, #12]
    }


    /* Configure gpio port selection in case of gpio exti line */
    if ((pExtiConfig->Line & EXTI_GPIO) == EXTI_GPIO)
 8004ce2:	20c0      	movs	r0, #192	; 0xc0
 8004ce4:	0026      	movs	r6, r4
 8004ce6:	04c0      	lsls	r0, r0, #19
 8004ce8:	4006      	ands	r6, r0
 8004cea:	4286      	cmp	r6, r0
 8004cec:	d10f      	bne.n	8004d0e <HAL_EXTI_SetConfigLine+0x62>
    {
      assert_param(IS_EXTI_GPIO_PORT(pExtiConfig->GPIOSel));
      assert_param(IS_EXTI_GPIO_PIN(linepos));

      regval = SYSCFG->EXTICR[linepos >> 2u];
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8004cee:	2603      	movs	r6, #3
 8004cf0:	4034      	ands	r4, r6
 8004cf2:	00a4      	lsls	r4, r4, #2
 8004cf4:	360c      	adds	r6, #12
 8004cf6:	40a6      	lsls	r6, r4
 8004cf8:	4814      	ldr	r0, [pc, #80]	; (8004d4c <HAL_EXTI_SetConfigLine+0xa0>)
      regval = SYSCFG->EXTICR[linepos >> 2u];
 8004cfa:	0892      	lsrs	r2, r2, #2
 8004cfc:	0092      	lsls	r2, r2, #2
 8004cfe:	1812      	adds	r2, r2, r0
 8004d00:	6890      	ldr	r0, [r2, #8]
      regval &= ~(SYSCFG_EXTICR1_EXTI0 << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8004d02:	43b0      	bics	r0, r6
 8004d04:	0006      	movs	r6, r0
      regval |= (pExtiConfig->GPIOSel << (SYSCFG_EXTICR1_EXTI1_Pos * (linepos & 0x03u)));
 8004d06:	68c8      	ldr	r0, [r1, #12]
 8004d08:	40a0      	lsls	r0, r4
 8004d0a:	4330      	orrs	r0, r6
      SYSCFG->EXTICR[linepos >> 2u] = regval;
 8004d0c:	6090      	str	r0, [r2, #8]
    }
  }

  /* Configure interrupt mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_INTERRUPT) != 0x00u)
 8004d0e:	684a      	ldr	r2, [r1, #4]
 8004d10:	07d1      	lsls	r1, r2, #31
 8004d12:	d512      	bpl.n	8004d3a <HAL_EXTI_SetConfigLine+0x8e>
  {
    EXTI->IMR |= maskline;
 8004d14:	6819      	ldr	r1, [r3, #0]
 8004d16:	4329      	orrs	r1, r5
    EXTI->IMR &= ~maskline;
  }

  /* Configure event mode : read current mode */
  /* Mask or set line */
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
 8004d18:	0010      	movs	r0, r2
    EXTI->IMR &= ~maskline;
 8004d1a:	6019      	str	r1, [r3, #0]
  if ((pExtiConfig->Mode & EXTI_MODE_EVENT) != 0x00u)
 8004d1c:	2102      	movs	r1, #2
 8004d1e:	4008      	ands	r0, r1
 8004d20:	420a      	tst	r2, r1
 8004d22:	d00d      	beq.n	8004d40 <HAL_EXTI_SetConfigLine+0x94>
  else
  {
    EXTI->EMR &= ~maskline;
  }

  return HAL_OK;
 8004d24:	2000      	movs	r0, #0
    EXTI->EMR |= maskline;
 8004d26:	685a      	ldr	r2, [r3, #4]
 8004d28:	4315      	orrs	r5, r2
 8004d2a:	605d      	str	r5, [r3, #4]
}
 8004d2c:	bd70      	pop	{r4, r5, r6, pc}
      EXTI->RTSR &= ~maskline;
 8004d2e:	6898      	ldr	r0, [r3, #8]
 8004d30:	43a8      	bics	r0, r5
 8004d32:	e7d0      	b.n	8004cd6 <HAL_EXTI_SetConfigLine+0x2a>
      EXTI->FTSR &= ~maskline;
 8004d34:	68d8      	ldr	r0, [r3, #12]
 8004d36:	43a8      	bics	r0, r5
 8004d38:	e7d2      	b.n	8004ce0 <HAL_EXTI_SetConfigLine+0x34>
    EXTI->IMR &= ~maskline;
 8004d3a:	6819      	ldr	r1, [r3, #0]
 8004d3c:	43a9      	bics	r1, r5
 8004d3e:	e7eb      	b.n	8004d18 <HAL_EXTI_SetConfigLine+0x6c>
    EXTI->EMR &= ~maskline;
 8004d40:	685a      	ldr	r2, [r3, #4]
 8004d42:	43aa      	bics	r2, r5
 8004d44:	605a      	str	r2, [r3, #4]
 8004d46:	e7f1      	b.n	8004d2c <HAL_EXTI_SetConfigLine+0x80>
 8004d48:	40010400 	.word	0x40010400
 8004d4c:	40010000 	.word	0x40010000

08004d50 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8004d50:	0003      	movs	r3, r0
 8004d52:	1e08      	subs	r0, r1, #0
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
 8004d54:	d101      	bne.n	8004d5a <HAL_EXTI_RegisterCallback+0xa>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8004d56:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
      break;
  }

  return status;
}
 8004d58:	4770      	bx	lr
      status = HAL_ERROR;
 8004d5a:	2001      	movs	r0, #1
 8004d5c:	e7fc      	b.n	8004d58 <HAL_EXTI_RegisterCallback+0x8>

08004d5e <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8004d5e:	0003      	movs	r3, r0
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
  {
    return HAL_ERROR;
 8004d60:	2001      	movs	r0, #1
  if (hexti == NULL)
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d001      	beq.n	8004d6a <HAL_EXTI_GetHandle+0xc>
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;

    return HAL_OK;
 8004d66:	2000      	movs	r0, #0
    hexti->Line = ExtiLine;
 8004d68:	6019      	str	r1, [r3, #0]
  }
}
 8004d6a:	4770      	bx	lr

08004d6c <HAL_EXTI_IRQHandler>:
{
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8004d6c:	221f      	movs	r2, #31
 8004d6e:	6803      	ldr	r3, [r0, #0]
{
 8004d70:	b510      	push	{r4, lr}
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8004d72:	401a      	ands	r2, r3
 8004d74:	2301      	movs	r3, #1
 8004d76:	4093      	lsls	r3, r2

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 8004d78:	4a04      	ldr	r2, [pc, #16]	; (8004d8c <HAL_EXTI_IRQHandler+0x20>)
 8004d7a:	6951      	ldr	r1, [r2, #20]
  if (regval != 0x00u)
 8004d7c:	420b      	tst	r3, r1
 8004d7e:	d004      	beq.n	8004d8a <HAL_EXTI_IRQHandler+0x1e>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 8004d80:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8004d82:	6843      	ldr	r3, [r0, #4]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d000      	beq.n	8004d8a <HAL_EXTI_IRQHandler+0x1e>
    {
      hexti->PendingCallback();
 8004d88:	4798      	blx	r3
    }
  }
}
 8004d8a:	bd10      	pop	{r4, pc}
 8004d8c:	40010400 	.word	0x40010400

08004d90 <HAL_EXTI_ClearPending>:
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));
  assert_param(IS_EXTI_PENDING_EDGE(Edge));

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8004d90:	231f      	movs	r3, #31
 8004d92:	6802      	ldr	r2, [r0, #0]
 8004d94:	401a      	ands	r2, r3
 8004d96:	3b1e      	subs	r3, #30
 8004d98:	4093      	lsls	r3, r2

  /* Clear Pending bit */
  EXTI->PR =  maskline;
 8004d9a:	4a01      	ldr	r2, [pc, #4]	; (8004da0 <HAL_EXTI_ClearPending+0x10>)
 8004d9c:	6153      	str	r3, [r2, #20]
}
 8004d9e:	4770      	bx	lr
 8004da0:	40010400 	.word	0x40010400

08004da4 <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8004da4:	4a28      	ldr	r2, [pc, #160]	; (8004e48 <FLASH_SetErrorCode+0xa4>)
 8004da6:	2180      	movs	r1, #128	; 0x80
 8004da8:	6990      	ldr	r0, [r2, #24]
 8004daa:	0049      	lsls	r1, r1, #1
 8004dac:	0003      	movs	r3, r0
{
 8004dae:	b530      	push	{r4, r5, lr}
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8004db0:	400b      	ands	r3, r1
 8004db2:	4208      	tst	r0, r1
 8004db4:	d005      	beq.n	8004dc2 <FLASH_SetErrorCode+0x1e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004db6:	2302      	movs	r3, #2
 8004db8:	4824      	ldr	r0, [pc, #144]	; (8004e4c <FLASH_SetErrorCode+0xa8>)
 8004dba:	6944      	ldr	r4, [r0, #20]
 8004dbc:	4323      	orrs	r3, r4
 8004dbe:	6143      	str	r3, [r0, #20]
    flags |= FLASH_FLAG_WRPERR;
 8004dc0:	000b      	movs	r3, r1
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8004dc2:	2080      	movs	r0, #128	; 0x80
 8004dc4:	6991      	ldr	r1, [r2, #24]
 8004dc6:	0080      	lsls	r0, r0, #2
 8004dc8:	4201      	tst	r1, r0
 8004dca:	d005      	beq.n	8004dd8 <FLASH_SetErrorCode+0x34>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8004dcc:	2101      	movs	r1, #1
 8004dce:	4c1f      	ldr	r4, [pc, #124]	; (8004e4c <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_PGAERR;
 8004dd0:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8004dd2:	6965      	ldr	r5, [r4, #20]
 8004dd4:	4329      	orrs	r1, r5
 8004dd6:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8004dd8:	2080      	movs	r0, #128	; 0x80
 8004dda:	6991      	ldr	r1, [r2, #24]
 8004ddc:	00c0      	lsls	r0, r0, #3
 8004dde:	4201      	tst	r1, r0
 8004de0:	d005      	beq.n	8004dee <FLASH_SetErrorCode+0x4a>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8004de2:	2108      	movs	r1, #8
 8004de4:	4c19      	ldr	r4, [pc, #100]	; (8004e4c <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_SIZERR;
 8004de6:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8004de8:	6965      	ldr	r5, [r4, #20]
 8004dea:	4329      	orrs	r1, r5
 8004dec:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8004dee:	2080      	movs	r0, #128	; 0x80
 8004df0:	6991      	ldr	r1, [r2, #24]
 8004df2:	0100      	lsls	r0, r0, #4
 8004df4:	4201      	tst	r1, r0
 8004df6:	d005      	beq.n	8004e04 <FLASH_SetErrorCode+0x60>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8004df8:	2104      	movs	r1, #4
 8004dfa:	4c14      	ldr	r4, [pc, #80]	; (8004e4c <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_OPTVERR;
 8004dfc:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8004dfe:	6965      	ldr	r5, [r4, #20]
 8004e00:	4329      	orrs	r1, r5
 8004e02:	6161      	str	r1, [r4, #20]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 8004e04:	2080      	movs	r0, #128	; 0x80
 8004e06:	6991      	ldr	r1, [r2, #24]
 8004e08:	0180      	lsls	r0, r0, #6
 8004e0a:	4201      	tst	r1, r0
 8004e0c:	d005      	beq.n	8004e1a <FLASH_SetErrorCode+0x76>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8004e0e:	2110      	movs	r1, #16
 8004e10:	4c0e      	ldr	r4, [pc, #56]	; (8004e4c <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_RDERR;
 8004e12:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8004e14:	6965      	ldr	r5, [r4, #20]
 8004e16:	4329      	orrs	r1, r5
 8004e18:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 8004e1a:	6991      	ldr	r1, [r2, #24]
 8004e1c:	0389      	lsls	r1, r1, #14
 8004e1e:	d505      	bpl.n	8004e2c <FLASH_SetErrorCode+0x88>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 8004e20:	2020      	movs	r0, #32
 8004e22:	4c0a      	ldr	r4, [pc, #40]	; (8004e4c <FLASH_SetErrorCode+0xa8>)
    flags |= HAL_FLASH_ERROR_FWWERR;
 8004e24:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 8004e26:	6961      	ldr	r1, [r4, #20]
 8004e28:	4301      	orrs	r1, r0
 8004e2a:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 8004e2c:	2080      	movs	r0, #128	; 0x80
 8004e2e:	6991      	ldr	r1, [r2, #24]
 8004e30:	0240      	lsls	r0, r0, #9
 8004e32:	4201      	tst	r1, r0
 8004e34:	d005      	beq.n	8004e42 <FLASH_SetErrorCode+0x9e>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 8004e36:	2140      	movs	r1, #64	; 0x40
 8004e38:	4c04      	ldr	r4, [pc, #16]	; (8004e4c <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_NOTZEROERR;
 8004e3a:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 8004e3c:	6965      	ldr	r5, [r4, #20]
 8004e3e:	4329      	orrs	r1, r5
 8004e40:	6161      	str	r1, [r4, #20]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8004e42:	6193      	str	r3, [r2, #24]
}  
 8004e44:	bd30      	pop	{r4, r5, pc}
 8004e46:	46c0      	nop			; (mov r8, r8)
 8004e48:	40022000 	.word	0x40022000
 8004e4c:	2000173c 	.word	0x2000173c

08004e50 <FLASH_WaitForLastOperation>:
{
 8004e50:	b570      	push	{r4, r5, r6, lr}
 8004e52:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004e54:	f7fd ffb2 	bl	8002dbc <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004e58:	2601      	movs	r6, #1
  uint32_t tickstart = HAL_GetTick();
 8004e5a:	0005      	movs	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8004e5c:	4a19      	ldr	r2, [pc, #100]	; (8004ec4 <FLASH_WaitForLastOperation+0x74>)
 8004e5e:	0013      	movs	r3, r2
 8004e60:	6991      	ldr	r1, [r2, #24]
 8004e62:	4231      	tst	r1, r6
 8004e64:	d121      	bne.n	8004eaa <FLASH_WaitForLastOperation+0x5a>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8004e66:	2102      	movs	r1, #2
 8004e68:	6990      	ldr	r0, [r2, #24]
 8004e6a:	4208      	tst	r0, r1
 8004e6c:	d000      	beq.n	8004e70 <FLASH_WaitForLastOperation+0x20>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004e6e:	6191      	str	r1, [r2, #24]
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8004e70:	699a      	ldr	r2, [r3, #24]
 8004e72:	05d2      	lsls	r2, r2, #23
 8004e74:	d415      	bmi.n	8004ea2 <FLASH_WaitForLastOperation+0x52>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8004e76:	699a      	ldr	r2, [r3, #24]
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8004e78:	0592      	lsls	r2, r2, #22
 8004e7a:	d412      	bmi.n	8004ea2 <FLASH_WaitForLastOperation+0x52>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8004e7c:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8004e7e:	0552      	lsls	r2, r2, #21
 8004e80:	d40f      	bmi.n	8004ea2 <FLASH_WaitForLastOperation+0x52>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8004e82:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8004e84:	0512      	lsls	r2, r2, #20
 8004e86:	d40c      	bmi.n	8004ea2 <FLASH_WaitForLastOperation+0x52>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8004e88:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8004e8a:	0492      	lsls	r2, r2, #18
 8004e8c:	d409      	bmi.n	8004ea2 <FLASH_WaitForLastOperation+0x52>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8004e8e:	6999      	ldr	r1, [r3, #24]
 8004e90:	2280      	movs	r2, #128	; 0x80
 8004e92:	0008      	movs	r0, r1
 8004e94:	0292      	lsls	r2, r2, #10
 8004e96:	4010      	ands	r0, r2
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8004e98:	4211      	tst	r1, r2
 8004e9a:	d102      	bne.n	8004ea2 <FLASH_WaitForLastOperation+0x52>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 8004e9c:	699b      	ldr	r3, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8004e9e:	03db      	lsls	r3, r3, #15
 8004ea0:	d508      	bpl.n	8004eb4 <FLASH_WaitForLastOperation+0x64>
    FLASH_SetErrorCode();
 8004ea2:	f7ff ff7f 	bl	8004da4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004ea6:	2001      	movs	r0, #1
 8004ea8:	e004      	b.n	8004eb4 <FLASH_WaitForLastOperation+0x64>
    if (Timeout != HAL_MAX_DELAY)
 8004eaa:	1c61      	adds	r1, r4, #1
 8004eac:	d0d8      	beq.n	8004e60 <FLASH_WaitForLastOperation+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8004eae:	2c00      	cmp	r4, #0
 8004eb0:	d101      	bne.n	8004eb6 <FLASH_WaitForLastOperation+0x66>
        return HAL_TIMEOUT;
 8004eb2:	2003      	movs	r0, #3
}
 8004eb4:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8004eb6:	f7fd ff81 	bl	8002dbc <HAL_GetTick>
 8004eba:	1b40      	subs	r0, r0, r5
 8004ebc:	42a0      	cmp	r0, r4
 8004ebe:	d9cd      	bls.n	8004e5c <FLASH_WaitForLastOperation+0xc>
 8004ec0:	e7f7      	b.n	8004eb2 <FLASH_WaitForLastOperation+0x62>
 8004ec2:	46c0      	nop			; (mov r8, r8)
 8004ec4:	40022000 	.word	0x40022000

08004ec8 <FLASH_OB_ProtectedSectorsConfig>:
  *        @arg @ref OB_WRPSTATE_DISABLE
  * @retval HAL_StatusTypeDef
  */
static HAL_StatusTypeDef FLASH_OB_ProtectedSectorsConfig(uint32_t Sector, uint32_t NewState)
#endif
{
 8004ec8:	b570      	push	{r4, r5, r6, lr}
 8004eca:	0004      	movs	r4, r0
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t WRP_Data = 0;
  uint32_t OB_WRP = Sector;
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004ecc:	4811      	ldr	r0, [pc, #68]	; (8004f14 <FLASH_OB_ProtectedSectorsConfig+0x4c>)
{
 8004ece:	000e      	movs	r6, r1
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004ed0:	f7ff ffbe 	bl	8004e50 <FLASH_WaitForLastOperation>
 
  if(status == HAL_OK)
 8004ed4:	2800      	cmp	r0, #0
 8004ed6:	d111      	bne.n	8004efc <FLASH_OB_ProtectedSectorsConfig+0x34>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004ed8:	4b0f      	ldr	r3, [pc, #60]	; (8004f18 <FLASH_OB_ProtectedSectorsConfig+0x50>)
 8004eda:	6158      	str	r0, [r3, #20]

    /* Update WRP only if at least 1 selected sector */
    if (OB_WRP != 0x00000000U)
 8004edc:	2c00      	cmp	r4, #0
 8004ede:	d00d      	beq.n	8004efc <FLASH_OB_ProtectedSectorsConfig+0x34>
    {
      if ((OB_WRP & WRP_MASK_LOW) != 0x00000000U)
 8004ee0:	b2a3      	uxth	r3, r4
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d00a      	beq.n	8004efc <FLASH_OB_ProtectedSectorsConfig+0x34>
      {
        if (NewState != OB_WRPSTATE_DISABLE)
 8004ee6:	001c      	movs	r4, r3
 8004ee8:	4d0c      	ldr	r5, [pc, #48]	; (8004f1c <FLASH_OB_ProtectedSectorsConfig+0x54>)
 8004eea:	2e00      	cmp	r6, #0
 8004eec:	d00a      	beq.n	8004f04 <FLASH_OB_ProtectedSectorsConfig+0x3c>
        {
          WRP_Data = (uint16_t)(((OB_WRP & WRP_MASK_LOW) | OB->WRP01));
 8004eee:	68a8      	ldr	r0, [r5, #8]
 8004ef0:	4304      	orrs	r4, r0
 8004ef2:	b2a4      	uxth	r4, r4
          OB->WRP01 = (uint32_t)(~(WRP_Data) << 16U) | (WRP_Data);
 8004ef4:	43e0      	mvns	r0, r4
 8004ef6:	0400      	lsls	r0, r0, #16
 8004ef8:	4304      	orrs	r4, r0
 8004efa:	60ac      	str	r4, [r5, #8]
      }
    }
#endif /* STM32L071xx || STM32L072xx || STM32L073xx || STM32L081xx || STM32L082xx || STM32L083xx */
  }
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004efc:	4805      	ldr	r0, [pc, #20]	; (8004f14 <FLASH_OB_ProtectedSectorsConfig+0x4c>)
 8004efe:	f7ff ffa7 	bl	8004e50 <FLASH_WaitForLastOperation>

  /* Return the write protection operation Status */
  return status;      
}
 8004f02:	bd70      	pop	{r4, r5, r6, pc}
          WRP_Data = (uint16_t)(~OB_WRP & (WRP_MASK_LOW & OB->WRP01));
 8004f04:	68ab      	ldr	r3, [r5, #8]
 8004f06:	43a3      	bics	r3, r4
 8004f08:	b29b      	uxth	r3, r3
          OB->WRP01 =  (uint32_t)((~WRP_Data) << 16U) | (WRP_Data);
 8004f0a:	43da      	mvns	r2, r3
 8004f0c:	0412      	lsls	r2, r2, #16
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	60ab      	str	r3, [r5, #8]
 8004f12:	e7f3      	b.n	8004efc <FLASH_OB_ProtectedSectorsConfig+0x34>
 8004f14:	0000c350 	.word	0x0000c350
 8004f18:	2000173c 	.word	0x2000173c
 8004f1c:	1ff80000 	.word	0x1ff80000

08004f20 <HAL_FLASHEx_OBProgram>:
{
 8004f20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 8004f22:	4d3f      	ldr	r5, [pc, #252]	; (8005020 <HAL_FLASHEx_OBProgram+0x100>)
{
 8004f24:	0004      	movs	r4, r0
  __HAL_LOCK(&pFlash);
 8004f26:	7c2b      	ldrb	r3, [r5, #16]
 8004f28:	2002      	movs	r0, #2
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d00c      	beq.n	8004f48 <HAL_FLASHEx_OBProgram+0x28>
 8004f2e:	3801      	subs	r0, #1
 8004f30:	7428      	strb	r0, [r5, #16]
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 8004f32:	6823      	ldr	r3, [r4, #0]
 8004f34:	4203      	tst	r3, r0
 8004f36:	d008      	beq.n	8004f4a <HAL_FLASHEx_OBProgram+0x2a>
    status = FLASH_OB_ProtectedSectorsConfig(pOBInit->WRPSector, pOBInit->WRPState);
 8004f38:	6861      	ldr	r1, [r4, #4]
 8004f3a:	68a0      	ldr	r0, [r4, #8]
 8004f3c:	f7ff ffc4 	bl	8004ec8 <FLASH_OB_ProtectedSectorsConfig>
    if (status != HAL_OK)
 8004f40:	2800      	cmp	r0, #0
 8004f42:	d002      	beq.n	8004f4a <HAL_FLASHEx_OBProgram+0x2a>
  __HAL_UNLOCK(&pFlash);
 8004f44:	2300      	movs	r3, #0
 8004f46:	742b      	strb	r3, [r5, #16]
}
 8004f48:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 8004f4a:	6823      	ldr	r3, [r4, #0]
 8004f4c:	079b      	lsls	r3, r3, #30
 8004f4e:	d518      	bpl.n	8004f82 <HAL_FLASHEx_OBProgram+0x62>
    status = FLASH_OB_RDPConfig(pOBInit->RDPLevel);
 8004f50:	7b23      	ldrb	r3, [r4, #12]
  tmp1 = (uint32_t)(OB->RDP & FLASH_OPTR_RDPROT);
 8004f52:	4f34      	ldr	r7, [pc, #208]	; (8005024 <HAL_FLASHEx_OBProgram+0x104>)
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004f54:	4834      	ldr	r0, [pc, #208]	; (8005028 <HAL_FLASHEx_OBProgram+0x108>)
    status = FLASH_OB_RDPConfig(pOBInit->RDPLevel);
 8004f56:	9301      	str	r3, [sp, #4]
  tmp1 = (uint32_t)(OB->RDP & FLASH_OPTR_RDPROT);
 8004f58:	683b      	ldr	r3, [r7, #0]
    tmp3 = (uint32_t)(OB->RDP & FLASH_OPTR_WPRMOD);
 8004f5a:	683e      	ldr	r6, [r7, #0]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004f5c:	f7ff ff78 	bl	8004e50 <FLASH_WaitForLastOperation>
    if(status == HAL_OK)
 8004f60:	2800      	cmp	r0, #0
 8004f62:	d1ef      	bne.n	8004f44 <HAL_FLASHEx_OBProgram+0x24>
    tmp3 = (uint32_t)(OB->RDP & FLASH_OPTR_WPRMOD);
 8004f64:	2380      	movs	r3, #128	; 0x80
 8004f66:	005b      	lsls	r3, r3, #1
 8004f68:	401e      	ands	r6, r3
    tmp1 = (~((uint32_t)(OB_RDP | tmp3)));
 8004f6a:	9b01      	ldr	r3, [sp, #4]
      pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004f6c:	6168      	str	r0, [r5, #20]
    tmp1 = (~((uint32_t)(OB_RDP | tmp3)));
 8004f6e:	431e      	orrs	r6, r3
 8004f70:	43f3      	mvns	r3, r6
    tmp2 = (uint32_t)(((uint32_t)((uint32_t)(tmp1) << 16U)) | ((uint32_t)(OB_RDP | tmp3)));
 8004f72:	041b      	lsls	r3, r3, #16
 8004f74:	431e      	orrs	r6, r3
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004f76:	482c      	ldr	r0, [pc, #176]	; (8005028 <HAL_FLASHEx_OBProgram+0x108>)
      OB->RDP = tmp2;
 8004f78:	603e      	str	r6, [r7, #0]
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004f7a:	f7ff ff69 	bl	8004e50 <FLASH_WaitForLastOperation>
    if (status != HAL_OK)
 8004f7e:	2800      	cmp	r0, #0
 8004f80:	d1e0      	bne.n	8004f44 <HAL_FLASHEx_OBProgram+0x24>
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 8004f82:	6823      	ldr	r3, [r4, #0]
 8004f84:	075b      	lsls	r3, r3, #29
 8004f86:	d518      	bpl.n	8004fba <HAL_FLASHEx_OBProgram+0x9a>
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW, 
 8004f88:	7ba3      	ldrb	r3, [r4, #14]
  assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
  assert_param(IS_OB_STOP_SOURCE(OB_STOP));
  assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));

  /* Get the User Option byte register */
  tmp1 = OB->USER & ((~FLASH_OPTR_USER) >> 16U);
 8004f8a:	4f26      	ldr	r7, [pc, #152]	; (8005024 <HAL_FLASHEx_OBProgram+0x104>)
  /* Calculate the user option byte to write */ 
  tmp = (uint32_t)(((uint32_t)~((uint32_t)((uint32_t)(OB_IWDG) | (uint32_t)(OB_STOP) | (uint32_t)(OB_STDBY) | tmp1))) << 16U);
  tmp |= ((uint32_t)(OB_IWDG) | ((uint32_t)OB_STOP) | (uint32_t)(OB_STDBY) | tmp1);
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004f8c:	4826      	ldr	r0, [pc, #152]	; (8005028 <HAL_FLASHEx_OBProgram+0x108>)
  tmp1 = OB->USER & ((~FLASH_OPTR_USER) >> 16U);
 8004f8e:	687e      	ldr	r6, [r7, #4]
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_IWDG_SW, 
 8004f90:	9301      	str	r3, [sp, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004f92:	f7ff ff5d 	bl	8004e50 <FLASH_WaitForLastOperation>
  
  if(status == HAL_OK)
 8004f96:	2800      	cmp	r0, #0
 8004f98:	d1d4      	bne.n	8004f44 <HAL_FLASHEx_OBProgram+0x24>
  tmp1 = OB->USER & ((~FLASH_OPTR_USER) >> 16U);
 8004f9a:	4b24      	ldr	r3, [pc, #144]	; (800502c <HAL_FLASHEx_OBProgram+0x10c>)
  tmp = (uint32_t)(((uint32_t)~((uint32_t)((uint32_t)(OB_IWDG) | (uint32_t)(OB_STOP) | (uint32_t)(OB_STDBY) | tmp1))) << 16U);
 8004f9c:	9a01      	ldr	r2, [sp, #4]
  tmp1 = OB->USER & ((~FLASH_OPTR_USER) >> 16U);
 8004f9e:	401e      	ands	r6, r3
  tmp = (uint32_t)(((uint32_t)~((uint32_t)((uint32_t)(OB_IWDG) | (uint32_t)(OB_STOP) | (uint32_t)(OB_STDBY) | tmp1))) << 16U);
 8004fa0:	2370      	movs	r3, #112	; 0x70
 8004fa2:	401a      	ands	r2, r3
 8004fa4:	4316      	orrs	r6, r2
 8004fa6:	43f3      	mvns	r3, r6
 8004fa8:	041b      	lsls	r3, r3, #16
  tmp |= ((uint32_t)(OB_IWDG) | ((uint32_t)OB_STOP) | (uint32_t)(OB_STDBY) | tmp1);
 8004faa:	431e      	orrs	r6, r3
  {  
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004fac:	6168      	str	r0, [r5, #20]

    /* Write the User Option Byte */
    OB->USER = tmp;
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004fae:	481e      	ldr	r0, [pc, #120]	; (8005028 <HAL_FLASHEx_OBProgram+0x108>)
    OB->USER = tmp;
 8004fb0:	607e      	str	r6, [r7, #4]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004fb2:	f7ff ff4d 	bl	8004e50 <FLASH_WaitForLastOperation>
    if (status != HAL_OK)
 8004fb6:	2800      	cmp	r0, #0
 8004fb8:	d1c4      	bne.n	8004f44 <HAL_FLASHEx_OBProgram+0x24>
  if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 8004fba:	6823      	ldr	r3, [r4, #0]
 8004fbc:	071b      	lsls	r3, r3, #28
 8004fbe:	d516      	bpl.n	8004fee <HAL_FLASHEx_OBProgram+0xce>
    status = FLASH_OB_BORConfig(pOBInit->BORLevel);
 8004fc0:	7b63      	ldrb	r3, [r4, #13]
  tmp1 = OB->USER & ((~FLASH_OPTR_BOR_LEV) >> 16U);
 8004fc2:	4f18      	ldr	r7, [pc, #96]	; (8005024 <HAL_FLASHEx_OBProgram+0x104>)
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004fc4:	4818      	ldr	r0, [pc, #96]	; (8005028 <HAL_FLASHEx_OBProgram+0x108>)
  tmp1 = OB->USER & ((~FLASH_OPTR_BOR_LEV) >> 16U);
 8004fc6:	687e      	ldr	r6, [r7, #4]
    status = FLASH_OB_BORConfig(pOBInit->BORLevel);
 8004fc8:	9301      	str	r3, [sp, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004fca:	f7ff ff41 	bl	8004e50 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8004fce:	2800      	cmp	r0, #0
 8004fd0:	d1b8      	bne.n	8004f44 <HAL_FLASHEx_OBProgram+0x24>
  tmp1 = OB->USER & ((~FLASH_OPTR_BOR_LEV) >> 16U);
 8004fd2:	4b17      	ldr	r3, [pc, #92]	; (8005030 <HAL_FLASHEx_OBProgram+0x110>)
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004fd4:	6168      	str	r0, [r5, #20]
  tmp1 = OB->USER & ((~FLASH_OPTR_BOR_LEV) >> 16U);
 8004fd6:	401e      	ands	r6, r3
  tmp = (uint32_t)~((OB_BOR | tmp1)) << 16U;
 8004fd8:	9b01      	ldr	r3, [sp, #4]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004fda:	4813      	ldr	r0, [pc, #76]	; (8005028 <HAL_FLASHEx_OBProgram+0x108>)
  tmp = (uint32_t)~((OB_BOR | tmp1)) << 16U;
 8004fdc:	431e      	orrs	r6, r3
 8004fde:	43f3      	mvns	r3, r6
 8004fe0:	041b      	lsls	r3, r3, #16
  tmp |= (OB_BOR | tmp1);
 8004fe2:	431e      	orrs	r6, r3
    OB->USER = tmp;
 8004fe4:	607e      	str	r6, [r7, #4]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004fe6:	f7ff ff33 	bl	8004e50 <FLASH_WaitForLastOperation>
    if (status != HAL_OK)
 8004fea:	2800      	cmp	r0, #0
 8004fec:	d1aa      	bne.n	8004f44 <HAL_FLASHEx_OBProgram+0x24>
  if ((pOBInit->OptionType & OPTIONBYTE_BOOT_BIT1) == OPTIONBYTE_BOOT_BIT1)
 8004fee:	6823      	ldr	r3, [r4, #0]
 8004ff0:	06db      	lsls	r3, r3, #27
 8004ff2:	d5a7      	bpl.n	8004f44 <HAL_FLASHEx_OBProgram+0x24>
  tmp1 = OB->USER & ((~FLASH_OPTR_BOOT1) >> 16U);
 8004ff4:	4f0b      	ldr	r7, [pc, #44]	; (8005024 <HAL_FLASHEx_OBProgram+0x104>)
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004ff6:	480c      	ldr	r0, [pc, #48]	; (8005028 <HAL_FLASHEx_OBProgram+0x108>)
    status = FLASH_OB_BOOTBit1Config(pOBInit->BOOTBit1Config);
 8004ff8:	7be4      	ldrb	r4, [r4, #15]
  tmp1 = OB->USER & ((~FLASH_OPTR_BOOT1) >> 16U);
 8004ffa:	687e      	ldr	r6, [r7, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004ffc:	f7ff ff28 	bl	8004e50 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8005000:	2800      	cmp	r0, #0
 8005002:	d19f      	bne.n	8004f44 <HAL_FLASHEx_OBProgram+0x24>
  tmp1 = OB->USER & ((~FLASH_OPTR_BOOT1) >> 16U);
 8005004:	0476      	lsls	r6, r6, #17
 8005006:	0c76      	lsrs	r6, r6, #17
  uint32_t tmp = 0, tmp1 = 0, OB_Bits = ((uint32_t) OB_BootBit1) << 15;
 8005008:	03e4      	lsls	r4, r4, #15
  tmp = (~(OB_Bits | tmp1)) << 16U;
 800500a:	4334      	orrs	r4, r6
 800500c:	43e6      	mvns	r6, r4
 800500e:	0436      	lsls	r6, r6, #16
  tmp |= OB_Bits | tmp1;
 8005010:	4334      	orrs	r4, r6
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005012:	6168      	str	r0, [r5, #20]
    OB->USER = tmp; 
 8005014:	607c      	str	r4, [r7, #4]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8005016:	4804      	ldr	r0, [pc, #16]	; (8005028 <HAL_FLASHEx_OBProgram+0x108>)
 8005018:	f7ff ff1a 	bl	8004e50 <FLASH_WaitForLastOperation>
 800501c:	e792      	b.n	8004f44 <HAL_FLASHEx_OBProgram+0x24>
 800501e:	46c0      	nop			; (mov r8, r8)
 8005020:	2000173c 	.word	0x2000173c
 8005024:	1ff80000 	.word	0x1ff80000
 8005028:	0000c350 	.word	0x0000c350
 800502c:	0000ff8f 	.word	0x0000ff8f
 8005030:	0000fff0 	.word	0x0000fff0

08005034 <HAL_GPIO_Init>:
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8005034:	4a55      	ldr	r2, [pc, #340]	; (800518c <HAL_GPIO_Init+0x158>)
{
 8005036:	b5f0      	push	{r4, r5, r6, r7, lr}
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8005038:	1882      	adds	r2, r0, r2
 800503a:	1e54      	subs	r4, r2, #1
 800503c:	41a2      	sbcs	r2, r4
  uint32_t position = 0x00U;
 800503e:	2300      	movs	r3, #0
{
 8005040:	b085      	sub	sp, #20
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8005042:	3205      	adds	r2, #5
 8005044:	9203      	str	r2, [sp, #12]
  while (((GPIO_Init->Pin) >> position) != 0)
 8005046:	680a      	ldr	r2, [r1, #0]
 8005048:	0014      	movs	r4, r2
 800504a:	40dc      	lsrs	r4, r3
 800504c:	d101      	bne.n	8005052 <HAL_GPIO_Init+0x1e>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 800504e:	b005      	add	sp, #20
 8005050:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8005052:	2701      	movs	r7, #1
 8005054:	003c      	movs	r4, r7
 8005056:	0015      	movs	r5, r2
 8005058:	409c      	lsls	r4, r3
 800505a:	4025      	ands	r5, r4
 800505c:	9500      	str	r5, [sp, #0]
    if (iocurrent)
 800505e:	4222      	tst	r2, r4
 8005060:	d100      	bne.n	8005064 <HAL_GPIO_Init+0x30>
 8005062:	e091      	b.n	8005188 <HAL_GPIO_Init+0x154>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005064:	684a      	ldr	r2, [r1, #4]
 8005066:	4694      	mov	ip, r2
 8005068:	2210      	movs	r2, #16
 800506a:	4665      	mov	r5, ip
 800506c:	4395      	bics	r5, r2
 800506e:	9502      	str	r5, [sp, #8]
 8005070:	3a0d      	subs	r2, #13
 8005072:	005d      	lsls	r5, r3, #1
 8005074:	40aa      	lsls	r2, r5
 8005076:	43d2      	mvns	r2, r2
 8005078:	9201      	str	r2, [sp, #4]
 800507a:	9a02      	ldr	r2, [sp, #8]
 800507c:	3a01      	subs	r2, #1
 800507e:	42ba      	cmp	r2, r7
 8005080:	d80f      	bhi.n	80050a2 <HAL_GPIO_Init+0x6e>
        temp = GPIOx->OSPEEDR;
 8005082:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8005084:	9a01      	ldr	r2, [sp, #4]
 8005086:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005088:	68ca      	ldr	r2, [r1, #12]
 800508a:	40aa      	lsls	r2, r5
 800508c:	4332      	orrs	r2, r6
        GPIOx->OSPEEDR = temp;
 800508e:	6082      	str	r2, [r0, #8]
        temp = GPIOx->OTYPER;
 8005090:	6842      	ldr	r2, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005092:	43a2      	bics	r2, r4
 8005094:	0014      	movs	r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005096:	4662      	mov	r2, ip
 8005098:	0912      	lsrs	r2, r2, #4
 800509a:	403a      	ands	r2, r7
 800509c:	409a      	lsls	r2, r3
 800509e:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 80050a0:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 80050a2:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80050a4:	9a01      	ldr	r2, [sp, #4]
 80050a6:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80050a8:	688a      	ldr	r2, [r1, #8]
 80050aa:	40aa      	lsls	r2, r5
 80050ac:	4322      	orrs	r2, r4
      GPIOx->PUPDR = temp;
 80050ae:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80050b0:	9a02      	ldr	r2, [sp, #8]
 80050b2:	2a02      	cmp	r2, #2
 80050b4:	d10d      	bne.n	80050d2 <HAL_GPIO_Init+0x9e>
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80050b6:	2407      	movs	r4, #7
 80050b8:	270f      	movs	r7, #15
 80050ba:	401c      	ands	r4, r3
 80050bc:	00a4      	lsls	r4, r4, #2
 80050be:	40a7      	lsls	r7, r4
        temp = GPIOx->AFR[position >> 3U];
 80050c0:	08da      	lsrs	r2, r3, #3
 80050c2:	0092      	lsls	r2, r2, #2
 80050c4:	1882      	adds	r2, r0, r2
 80050c6:	6a16      	ldr	r6, [r2, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80050c8:	43be      	bics	r6, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80050ca:	690f      	ldr	r7, [r1, #16]
 80050cc:	40a7      	lsls	r7, r4
 80050ce:	433e      	orrs	r6, r7
        GPIOx->AFR[position >> 3U] = temp;
 80050d0:	6216      	str	r6, [r2, #32]
      temp = GPIOx->MODER;
 80050d2:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80050d4:	9a01      	ldr	r2, [sp, #4]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80050d6:	2603      	movs	r6, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80050d8:	4022      	ands	r2, r4
 80050da:	0014      	movs	r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80050dc:	4662      	mov	r2, ip
 80050de:	4032      	ands	r2, r6
 80050e0:	40aa      	lsls	r2, r5
 80050e2:	4314      	orrs	r4, r2
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80050e4:	4662      	mov	r2, ip
      GPIOx->MODER = temp;
 80050e6:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80050e8:	00d2      	lsls	r2, r2, #3
 80050ea:	d54d      	bpl.n	8005188 <HAL_GPIO_Init+0x154>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050ec:	2501      	movs	r5, #1
 80050ee:	4c28      	ldr	r4, [pc, #160]	; (8005190 <HAL_GPIO_Init+0x15c>)
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80050f0:	270f      	movs	r7, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050f2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80050f4:	432a      	orrs	r2, r5
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80050f6:	001d      	movs	r5, r3
 80050f8:	4035      	ands	r5, r6
 80050fa:	00ad      	lsls	r5, r5, #2
 80050fc:	40af      	lsls	r7, r5
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050fe:	6362      	str	r2, [r4, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 8005100:	4a24      	ldr	r2, [pc, #144]	; (8005194 <HAL_GPIO_Init+0x160>)
 8005102:	089c      	lsrs	r4, r3, #2
 8005104:	00a4      	lsls	r4, r4, #2
 8005106:	18a4      	adds	r4, r4, r2
 8005108:	68a2      	ldr	r2, [r4, #8]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800510a:	43ba      	bics	r2, r7
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800510c:	27a0      	movs	r7, #160	; 0xa0
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800510e:	9201      	str	r2, [sp, #4]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8005110:	05ff      	lsls	r7, r7, #23
 8005112:	2200      	movs	r2, #0
 8005114:	42b8      	cmp	r0, r7
 8005116:	d00c      	beq.n	8005132 <HAL_GPIO_Init+0xfe>
 8005118:	4f1f      	ldr	r7, [pc, #124]	; (8005198 <HAL_GPIO_Init+0x164>)
 800511a:	3201      	adds	r2, #1
 800511c:	42b8      	cmp	r0, r7
 800511e:	d008      	beq.n	8005132 <HAL_GPIO_Init+0xfe>
 8005120:	4f1e      	ldr	r7, [pc, #120]	; (800519c <HAL_GPIO_Init+0x168>)
 8005122:	3201      	adds	r2, #1
 8005124:	42b8      	cmp	r0, r7
 8005126:	d004      	beq.n	8005132 <HAL_GPIO_Init+0xfe>
 8005128:	4f1d      	ldr	r7, [pc, #116]	; (80051a0 <HAL_GPIO_Init+0x16c>)
 800512a:	0032      	movs	r2, r6
 800512c:	42b8      	cmp	r0, r7
 800512e:	d000      	beq.n	8005132 <HAL_GPIO_Init+0xfe>
 8005130:	9a03      	ldr	r2, [sp, #12]
 8005132:	40aa      	lsls	r2, r5
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005134:	4667      	mov	r7, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8005136:	9d01      	ldr	r5, [sp, #4]
 8005138:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 800513a:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 800513c:	4a19      	ldr	r2, [pc, #100]	; (80051a4 <HAL_GPIO_Init+0x170>)
        temp &= ~((uint32_t)iocurrent);
 800513e:	9c00      	ldr	r4, [sp, #0]
        temp = EXTI->IMR;
 8005140:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 8005142:	9d00      	ldr	r5, [sp, #0]
        temp &= ~((uint32_t)iocurrent);
 8005144:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8005146:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005148:	03ff      	lsls	r7, r7, #15
 800514a:	d401      	bmi.n	8005150 <HAL_GPIO_Init+0x11c>
        temp &= ~((uint32_t)iocurrent);
 800514c:	0035      	movs	r5, r6
 800514e:	4025      	ands	r5, r4
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005150:	4667      	mov	r7, ip
        EXTI->IMR = temp;
 8005152:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8005154:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8005156:	9d00      	ldr	r5, [sp, #0]
 8005158:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800515a:	03bf      	lsls	r7, r7, #14
 800515c:	d401      	bmi.n	8005162 <HAL_GPIO_Init+0x12e>
        temp &= ~((uint32_t)iocurrent);
 800515e:	0035      	movs	r5, r6
 8005160:	4025      	ands	r5, r4
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005162:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 8005164:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8005166:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8005168:	9d00      	ldr	r5, [sp, #0]
 800516a:	4335      	orrs	r5, r6
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800516c:	02ff      	lsls	r7, r7, #11
 800516e:	d401      	bmi.n	8005174 <HAL_GPIO_Init+0x140>
        temp &= ~((uint32_t)iocurrent);
 8005170:	0035      	movs	r5, r6
 8005172:	4025      	ands	r5, r4
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005174:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 8005176:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8005178:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 800517a:	9e00      	ldr	r6, [sp, #0]
 800517c:	432e      	orrs	r6, r5
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800517e:	02bf      	lsls	r7, r7, #10
 8005180:	d401      	bmi.n	8005186 <HAL_GPIO_Init+0x152>
        temp &= ~((uint32_t)iocurrent);
 8005182:	4025      	ands	r5, r4
 8005184:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 8005186:	60d6      	str	r6, [r2, #12]
    position++;
 8005188:	3301      	adds	r3, #1
 800518a:	e75c      	b.n	8005046 <HAL_GPIO_Init+0x12>
 800518c:	afffe400 	.word	0xafffe400
 8005190:	40021000 	.word	0x40021000
 8005194:	40010000 	.word	0x40010000
 8005198:	50000400 	.word	0x50000400
 800519c:	50000800 	.word	0x50000800
 80051a0:	50000c00 	.word	0x50000c00
 80051a4:	40010400 	.word	0x40010400

080051a8 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80051a8:	b5f0      	push	{r4, r5, r6, r7, lr}
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80051aa:	4a36      	ldr	r2, [pc, #216]	; (8005284 <HAL_GPIO_DeInit+0xdc>)
{
 80051ac:	b085      	sub	sp, #20
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80051ae:	1882      	adds	r2, r0, r2
{
 80051b0:	9101      	str	r1, [sp, #4]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80051b2:	1e51      	subs	r1, r2, #1
 80051b4:	418a      	sbcs	r2, r1
  uint32_t position = 0x00U;
 80051b6:	2300      	movs	r3, #0
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80051b8:	3205      	adds	r2, #5
 80051ba:	9203      	str	r2, [sp, #12]
  while ((GPIO_Pin >> position) != 0)
 80051bc:	9a01      	ldr	r2, [sp, #4]
 80051be:	40da      	lsrs	r2, r3
 80051c0:	d101      	bne.n	80051c6 <HAL_GPIO_DeInit+0x1e>
      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
    }
    position++;
  }
}
 80051c2:	b005      	add	sp, #20
 80051c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Pin) & (1U << position);
 80051c6:	2701      	movs	r7, #1
 80051c8:	003a      	movs	r2, r7
 80051ca:	409a      	lsls	r2, r3
 80051cc:	9c01      	ldr	r4, [sp, #4]
 80051ce:	9200      	str	r2, [sp, #0]
 80051d0:	4014      	ands	r4, r2
    if (iocurrent)
 80051d2:	9900      	ldr	r1, [sp, #0]
 80051d4:	9a01      	ldr	r2, [sp, #4]
 80051d6:	420a      	tst	r2, r1
 80051d8:	d051      	beq.n	800527e <HAL_GPIO_DeInit+0xd6>
      tmp = SYSCFG->EXTICR[position >> 2U];
 80051da:	492b      	ldr	r1, [pc, #172]	; (8005288 <HAL_GPIO_DeInit+0xe0>)
 80051dc:	089a      	lsrs	r2, r3, #2
 80051de:	0092      	lsls	r2, r2, #2
 80051e0:	1852      	adds	r2, r2, r1
 80051e2:	6891      	ldr	r1, [r2, #8]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 80051e4:	001d      	movs	r5, r3
      tmp = SYSCFG->EXTICR[position >> 2U];
 80051e6:	000e      	movs	r6, r1
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 80051e8:	2103      	movs	r1, #3
 80051ea:	400d      	ands	r5, r1
 80051ec:	00ad      	lsls	r5, r5, #2
 80051ee:	310c      	adds	r1, #12
 80051f0:	40a9      	lsls	r1, r5
 80051f2:	9102      	str	r1, [sp, #8]
 80051f4:	4031      	ands	r1, r6
 80051f6:	000e      	movs	r6, r1
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80051f8:	21a0      	movs	r1, #160	; 0xa0
 80051fa:	05c9      	lsls	r1, r1, #23
 80051fc:	468c      	mov	ip, r1
 80051fe:	2100      	movs	r1, #0
 8005200:	4560      	cmp	r0, ip
 8005202:	d00d      	beq.n	8005220 <HAL_GPIO_DeInit+0x78>
 8005204:	4921      	ldr	r1, [pc, #132]	; (800528c <HAL_GPIO_DeInit+0xe4>)
 8005206:	468c      	mov	ip, r1
 8005208:	0039      	movs	r1, r7
 800520a:	4560      	cmp	r0, ip
 800520c:	d008      	beq.n	8005220 <HAL_GPIO_DeInit+0x78>
 800520e:	4f20      	ldr	r7, [pc, #128]	; (8005290 <HAL_GPIO_DeInit+0xe8>)
 8005210:	1849      	adds	r1, r1, r1
 8005212:	42b8      	cmp	r0, r7
 8005214:	d004      	beq.n	8005220 <HAL_GPIO_DeInit+0x78>
 8005216:	4f1f      	ldr	r7, [pc, #124]	; (8005294 <HAL_GPIO_DeInit+0xec>)
 8005218:	3101      	adds	r1, #1
 800521a:	42b8      	cmp	r0, r7
 800521c:	d000      	beq.n	8005220 <HAL_GPIO_DeInit+0x78>
 800521e:	9903      	ldr	r1, [sp, #12]
 8005220:	40a9      	lsls	r1, r5
 8005222:	42b1      	cmp	r1, r6
 8005224:	d110      	bne.n	8005248 <HAL_GPIO_DeInit+0xa0>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005226:	491c      	ldr	r1, [pc, #112]	; (8005298 <HAL_GPIO_DeInit+0xf0>)
 8005228:	680d      	ldr	r5, [r1, #0]
 800522a:	43a5      	bics	r5, r4
 800522c:	600d      	str	r5, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800522e:	684d      	ldr	r5, [r1, #4]
 8005230:	43a5      	bics	r5, r4
 8005232:	604d      	str	r5, [r1, #4]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005234:	688d      	ldr	r5, [r1, #8]
 8005236:	43a5      	bics	r5, r4
 8005238:	608d      	str	r5, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800523a:	68cd      	ldr	r5, [r1, #12]
 800523c:	43a5      	bics	r5, r4
 800523e:	60cd      	str	r5, [r1, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005240:	6891      	ldr	r1, [r2, #8]
 8005242:	9c02      	ldr	r4, [sp, #8]
 8005244:	43a1      	bics	r1, r4
 8005246:	6091      	str	r1, [r2, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005248:	2103      	movs	r1, #3
 800524a:	005c      	lsls	r4, r3, #1
 800524c:	40a1      	lsls	r1, r4
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800524e:	2407      	movs	r4, #7
 8005250:	260f      	movs	r6, #15
 8005252:	401c      	ands	r4, r3
 8005254:	00a4      	lsls	r4, r4, #2
 8005256:	40a6      	lsls	r6, r4
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8005258:	6802      	ldr	r2, [r0, #0]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 800525a:	9c00      	ldr	r4, [sp, #0]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800525c:	430a      	orrs	r2, r1
 800525e:	6002      	str	r2, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8005260:	08da      	lsrs	r2, r3, #3
 8005262:	0092      	lsls	r2, r2, #2
 8005264:	1882      	adds	r2, r0, r2
 8005266:	6a15      	ldr	r5, [r2, #32]
 8005268:	43b5      	bics	r5, r6
 800526a:	6215      	str	r5, [r2, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800526c:	68c2      	ldr	r2, [r0, #12]
 800526e:	438a      	bics	r2, r1
 8005270:	60c2      	str	r2, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 8005272:	6842      	ldr	r2, [r0, #4]
 8005274:	43a2      	bics	r2, r4
 8005276:	6042      	str	r2, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8005278:	6882      	ldr	r2, [r0, #8]
 800527a:	438a      	bics	r2, r1
 800527c:	6082      	str	r2, [r0, #8]
    position++;
 800527e:	3301      	adds	r3, #1
 8005280:	e79c      	b.n	80051bc <HAL_GPIO_DeInit+0x14>
 8005282:	46c0      	nop			; (mov r8, r8)
 8005284:	afffe400 	.word	0xafffe400
 8005288:	40010000 	.word	0x40010000
 800528c:	50000400 	.word	0x50000400
 8005290:	50000800 	.word	0x50000800
 8005294:	50000c00 	.word	0x50000c00
 8005298:	40010400 	.word	0x40010400

0800529c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800529c:	6900      	ldr	r0, [r0, #16]
 800529e:	4008      	ands	r0, r1
 80052a0:	1e41      	subs	r1, r0, #1
 80052a2:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 80052a4:	b2c0      	uxtb	r0, r0
}
 80052a6:	4770      	bx	lr

080052a8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80052a8:	2a00      	cmp	r2, #0
 80052aa:	d001      	beq.n	80052b0 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 80052ac:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80052ae:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 80052b0:	6281      	str	r1, [r0, #40]	; 0x28
}
 80052b2:	e7fc      	b.n	80052ae <HAL_GPIO_WritePin+0x6>

080052b4 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80052b4:	6803      	ldr	r3, [r0, #0]
 80052b6:	699a      	ldr	r2, [r3, #24]
 80052b8:	0792      	lsls	r2, r2, #30
 80052ba:	d501      	bpl.n	80052c0 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 80052bc:	2200      	movs	r2, #0
 80052be:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80052c0:	2201      	movs	r2, #1
 80052c2:	6999      	ldr	r1, [r3, #24]
 80052c4:	4211      	tst	r1, r2
 80052c6:	d102      	bne.n	80052ce <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80052c8:	6999      	ldr	r1, [r3, #24]
 80052ca:	430a      	orrs	r2, r1
 80052cc:	619a      	str	r2, [r3, #24]
  }
}
 80052ce:	4770      	bx	lr

080052d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80052d0:	b530      	push	{r4, r5, lr}
 80052d2:	9c03      	ldr	r4, [sp, #12]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80052d4:	6800      	ldr	r0, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80052d6:	4323      	orrs	r3, r4
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80052d8:	0412      	lsls	r2, r2, #16
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80052da:	0589      	lsls	r1, r1, #22
 80052dc:	431a      	orrs	r2, r3
 80052de:	0d89      	lsrs	r1, r1, #22
  MODIFY_REG(hi2c->Instance->CR2, \
 80052e0:	4b05      	ldr	r3, [pc, #20]	; (80052f8 <I2C_TransferConfig+0x28>)
 80052e2:	6845      	ldr	r5, [r0, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80052e4:	430a      	orrs	r2, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 80052e6:	0d64      	lsrs	r4, r4, #21
 80052e8:	431c      	orrs	r4, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80052ea:	0052      	lsls	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 80052ec:	43a5      	bics	r5, r4
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80052ee:	0852      	lsrs	r2, r2, #1
  MODIFY_REG(hi2c->Instance->CR2, \
 80052f0:	432a      	orrs	r2, r5
 80052f2:	6042      	str	r2, [r0, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80052f4:	bd30      	pop	{r4, r5, pc}
 80052f6:	46c0      	nop			; (mov r8, r8)
 80052f8:	03ff63ff 	.word	0x03ff63ff

080052fc <I2C_IsErrorOccurred>:
{
 80052fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80052fe:	0015      	movs	r5, r2
  uint32_t itflag   = hi2c->Instance->ISR;
 8005300:	6802      	ldr	r2, [r0, #0]
{
 8005302:	000e      	movs	r6, r1
  uint32_t itflag   = hi2c->Instance->ISR;
 8005304:	6991      	ldr	r1, [r2, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005306:	2310      	movs	r3, #16
 8005308:	000f      	movs	r7, r1
{
 800530a:	0004      	movs	r4, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800530c:	401f      	ands	r7, r3
  HAL_StatusTypeDef status = HAL_OK;
 800530e:	2000      	movs	r0, #0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005310:	4219      	tst	r1, r3
 8005312:	d00e      	beq.n	8005332 <I2C_IsErrorOccurred+0x36>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005314:	2720      	movs	r7, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005316:	61d3      	str	r3, [r2, #28]
  uint32_t error_code = 0;
 8005318:	9000      	str	r0, [sp, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800531a:	9001      	str	r0, [sp, #4]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800531c:	6823      	ldr	r3, [r4, #0]
 800531e:	699a      	ldr	r2, [r3, #24]
 8005320:	423a      	tst	r2, r7
 8005322:	d164      	bne.n	80053ee <I2C_IsErrorOccurred+0xf2>
 8005324:	9a01      	ldr	r2, [sp, #4]
 8005326:	2a00      	cmp	r2, #0
 8005328:	d032      	beq.n	8005390 <I2C_IsErrorOccurred+0x94>
    error_code |= HAL_I2C_ERROR_AF;
 800532a:	2704      	movs	r7, #4
    status = HAL_ERROR;
 800532c:	2001      	movs	r0, #1
    error_code |= HAL_I2C_ERROR_AF;
 800532e:	9b00      	ldr	r3, [sp, #0]
 8005330:	431f      	orrs	r7, r3
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005332:	2180      	movs	r1, #128	; 0x80
  itflag = hi2c->Instance->ISR;
 8005334:	6823      	ldr	r3, [r4, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005336:	0049      	lsls	r1, r1, #1
  itflag = hi2c->Instance->ISR;
 8005338:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800533a:	420a      	tst	r2, r1
 800533c:	d002      	beq.n	8005344 <I2C_IsErrorOccurred+0x48>
    error_code |= HAL_I2C_ERROR_BERR;
 800533e:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005340:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 8005342:	4307      	orrs	r7, r0
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005344:	2180      	movs	r1, #128	; 0x80
 8005346:	00c9      	lsls	r1, r1, #3
 8005348:	420a      	tst	r2, r1
 800534a:	d003      	beq.n	8005354 <I2C_IsErrorOccurred+0x58>
    error_code |= HAL_I2C_ERROR_OVR;
 800534c:	2008      	movs	r0, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800534e:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_OVR;
 8005350:	4307      	orrs	r7, r0
    status = HAL_ERROR;
 8005352:	3807      	subs	r0, #7
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8005354:	2180      	movs	r1, #128	; 0x80
 8005356:	0089      	lsls	r1, r1, #2
 8005358:	420a      	tst	r2, r1
 800535a:	d04d      	beq.n	80053f8 <I2C_IsErrorOccurred+0xfc>
    error_code |= HAL_I2C_ERROR_ARLO;
 800535c:	2202      	movs	r2, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800535e:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_ARLO;
 8005360:	4317      	orrs	r7, r2
    I2C_Flush_TXDR(hi2c);
 8005362:	0020      	movs	r0, r4
 8005364:	f7ff ffa6 	bl	80052b4 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8005368:	6822      	ldr	r2, [r4, #0]
 800536a:	4925      	ldr	r1, [pc, #148]	; (8005400 <I2C_IsErrorOccurred+0x104>)
 800536c:	6853      	ldr	r3, [r2, #4]
 800536e:	400b      	ands	r3, r1
 8005370:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005372:	0023      	movs	r3, r4
 8005374:	2220      	movs	r2, #32
    hi2c->ErrorCode |= error_code;
 8005376:	6c60      	ldr	r0, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005378:	3341      	adds	r3, #65	; 0x41
    hi2c->ErrorCode |= error_code;
 800537a:	4307      	orrs	r7, r0
 800537c:	6467      	str	r7, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800537e:	701a      	strb	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005380:	0022      	movs	r2, r4
 8005382:	2300      	movs	r3, #0
 8005384:	3242      	adds	r2, #66	; 0x42
    __HAL_UNLOCK(hi2c);
 8005386:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005388:	7013      	strb	r3, [r2, #0]
    __HAL_UNLOCK(hi2c);
 800538a:	2001      	movs	r0, #1
 800538c:	7023      	strb	r3, [r4, #0]
 800538e:	e035      	b.n	80053fc <I2C_IsErrorOccurred+0x100>
      if (Timeout != HAL_MAX_DELAY)
 8005390:	1c72      	adds	r2, r6, #1
 8005392:	d0c4      	beq.n	800531e <I2C_IsErrorOccurred+0x22>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005394:	f7fd fd12 	bl	8002dbc <HAL_GetTick>
 8005398:	1b40      	subs	r0, r0, r5
 800539a:	42b0      	cmp	r0, r6
 800539c:	d801      	bhi.n	80053a2 <I2C_IsErrorOccurred+0xa6>
 800539e:	2e00      	cmp	r6, #0
 80053a0:	d1bc      	bne.n	800531c <I2C_IsErrorOccurred+0x20>
          tmp2 = hi2c->Mode;
 80053a2:	0022      	movs	r2, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80053a4:	6823      	ldr	r3, [r4, #0]
          tmp2 = hi2c->Mode;
 80053a6:	3242      	adds	r2, #66	; 0x42
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80053a8:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 80053aa:	7811      	ldrb	r1, [r2, #0]
 80053ac:	b2ca      	uxtb	r2, r1
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80053ae:	2180      	movs	r1, #128	; 0x80
          tmp2 = hi2c->Mode;
 80053b0:	4694      	mov	ip, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80053b2:	699a      	ldr	r2, [r3, #24]
 80053b4:	0209      	lsls	r1, r1, #8
 80053b6:	420a      	tst	r2, r1
 80053b8:	d00c      	beq.n	80053d4 <I2C_IsErrorOccurred+0xd8>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80053ba:	2280      	movs	r2, #128	; 0x80
 80053bc:	01d2      	lsls	r2, r2, #7
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80053be:	4210      	tst	r0, r2
 80053c0:	d108      	bne.n	80053d4 <I2C_IsErrorOccurred+0xd8>
              (tmp1 != I2C_CR2_STOP) && \
 80053c2:	4661      	mov	r1, ip
 80053c4:	2920      	cmp	r1, #32
 80053c6:	d005      	beq.n	80053d4 <I2C_IsErrorOccurred+0xd8>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80053c8:	6859      	ldr	r1, [r3, #4]
 80053ca:	430a      	orrs	r2, r1
 80053cc:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 80053ce:	f7fd fcf5 	bl	8002dbc <HAL_GetTick>
 80053d2:	0005      	movs	r5, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80053d4:	6823      	ldr	r3, [r4, #0]
 80053d6:	699b      	ldr	r3, [r3, #24]
 80053d8:	423b      	tst	r3, r7
 80053da:	d19f      	bne.n	800531c <I2C_IsErrorOccurred+0x20>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80053dc:	f7fd fcee 	bl	8002dbc <HAL_GetTick>
 80053e0:	1b40      	subs	r0, r0, r5
 80053e2:	2819      	cmp	r0, #25
 80053e4:	d9f6      	bls.n	80053d4 <I2C_IsErrorOccurred+0xd8>
              status = HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80053e8:	9700      	str	r7, [sp, #0]
              status = HAL_ERROR;
 80053ea:	9301      	str	r3, [sp, #4]
 80053ec:	e796      	b.n	800531c <I2C_IsErrorOccurred+0x20>
    if (status == HAL_OK)
 80053ee:	9a01      	ldr	r2, [sp, #4]
 80053f0:	2a00      	cmp	r2, #0
 80053f2:	d19a      	bne.n	800532a <I2C_IsErrorOccurred+0x2e>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80053f4:	61df      	str	r7, [r3, #28]
 80053f6:	e798      	b.n	800532a <I2C_IsErrorOccurred+0x2e>
  if (status != HAL_OK)
 80053f8:	2800      	cmp	r0, #0
 80053fa:	d1b2      	bne.n	8005362 <I2C_IsErrorOccurred+0x66>
}
 80053fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80053fe:	46c0      	nop			; (mov r8, r8)
 8005400:	fe00e800 	.word	0xfe00e800

08005404 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8005404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005406:	0004      	movs	r4, r0
 8005408:	000d      	movs	r5, r1
 800540a:	0016      	movs	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800540c:	2702      	movs	r7, #2
 800540e:	6823      	ldr	r3, [r4, #0]
 8005410:	699b      	ldr	r3, [r3, #24]
 8005412:	423b      	tst	r3, r7
 8005414:	d001      	beq.n	800541a <I2C_WaitOnTXISFlagUntilTimeout+0x16>
  return HAL_OK;
 8005416:	2000      	movs	r0, #0
}
 8005418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800541a:	0032      	movs	r2, r6
 800541c:	0029      	movs	r1, r5
 800541e:	0020      	movs	r0, r4
 8005420:	f7ff ff6c 	bl	80052fc <I2C_IsErrorOccurred>
 8005424:	2800      	cmp	r0, #0
 8005426:	d118      	bne.n	800545a <I2C_WaitOnTXISFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 8005428:	1c6b      	adds	r3, r5, #1
 800542a:	d0f0      	beq.n	800540e <I2C_WaitOnTXISFlagUntilTimeout+0xa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800542c:	f7fd fcc6 	bl	8002dbc <HAL_GetTick>
 8005430:	1b80      	subs	r0, r0, r6
 8005432:	42a8      	cmp	r0, r5
 8005434:	d801      	bhi.n	800543a <I2C_WaitOnTXISFlagUntilTimeout+0x36>
 8005436:	2d00      	cmp	r5, #0
 8005438:	d1e9      	bne.n	800540e <I2C_WaitOnTXISFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800543a:	6823      	ldr	r3, [r4, #0]
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	001a      	movs	r2, r3
 8005440:	403a      	ands	r2, r7
 8005442:	423b      	tst	r3, r7
 8005444:	d1e3      	bne.n	800540e <I2C_WaitOnTXISFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005446:	2120      	movs	r1, #32
 8005448:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800544a:	430b      	orrs	r3, r1
 800544c:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800544e:	0023      	movs	r3, r4
          __HAL_UNLOCK(hi2c);
 8005450:	3440      	adds	r4, #64	; 0x40
          hi2c->State = HAL_I2C_STATE_READY;
 8005452:	3341      	adds	r3, #65	; 0x41
 8005454:	7019      	strb	r1, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005456:	705a      	strb	r2, [r3, #1]
          __HAL_UNLOCK(hi2c);
 8005458:	7022      	strb	r2, [r4, #0]
      return HAL_ERROR;
 800545a:	2001      	movs	r0, #1
 800545c:	e7dc      	b.n	8005418 <I2C_WaitOnTXISFlagUntilTimeout+0x14>

0800545e <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800545e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005460:	0004      	movs	r4, r0
 8005462:	000e      	movs	r6, r1
 8005464:	0017      	movs	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005466:	2520      	movs	r5, #32
 8005468:	6823      	ldr	r3, [r4, #0]
 800546a:	699b      	ldr	r3, [r3, #24]
 800546c:	422b      	tst	r3, r5
 800546e:	d001      	beq.n	8005474 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 8005470:	2000      	movs	r0, #0
}
 8005472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005474:	003a      	movs	r2, r7
 8005476:	0031      	movs	r1, r6
 8005478:	0020      	movs	r0, r4
 800547a:	f7ff ff3f 	bl	80052fc <I2C_IsErrorOccurred>
 800547e:	2800      	cmp	r0, #0
 8005480:	d115      	bne.n	80054ae <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005482:	f7fd fc9b 	bl	8002dbc <HAL_GetTick>
 8005486:	1bc0      	subs	r0, r0, r7
 8005488:	42b0      	cmp	r0, r6
 800548a:	d801      	bhi.n	8005490 <I2C_WaitOnSTOPFlagUntilTimeout+0x32>
 800548c:	2e00      	cmp	r6, #0
 800548e:	d1eb      	bne.n	8005468 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005490:	6823      	ldr	r3, [r4, #0]
 8005492:	699b      	ldr	r3, [r3, #24]
 8005494:	001a      	movs	r2, r3
 8005496:	402a      	ands	r2, r5
 8005498:	422b      	tst	r3, r5
 800549a:	d1e5      	bne.n	8005468 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800549c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800549e:	432b      	orrs	r3, r5
 80054a0:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80054a2:	0023      	movs	r3, r4
          __HAL_UNLOCK(hi2c);
 80054a4:	3440      	adds	r4, #64	; 0x40
          hi2c->State = HAL_I2C_STATE_READY;
 80054a6:	3341      	adds	r3, #65	; 0x41
 80054a8:	701d      	strb	r5, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80054aa:	705a      	strb	r2, [r3, #1]
          __HAL_UNLOCK(hi2c);
 80054ac:	7022      	strb	r2, [r4, #0]
      return HAL_ERROR;
 80054ae:	2001      	movs	r0, #1
 80054b0:	e7df      	b.n	8005472 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>

080054b2 <I2C_WaitOnFlagUntilTimeout>:
{
 80054b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054b4:	0004      	movs	r4, r0
 80054b6:	000d      	movs	r5, r1
 80054b8:	0017      	movs	r7, r2
 80054ba:	001e      	movs	r6, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80054bc:	6822      	ldr	r2, [r4, #0]
 80054be:	6993      	ldr	r3, [r2, #24]
 80054c0:	402b      	ands	r3, r5
 80054c2:	1b5b      	subs	r3, r3, r5
 80054c4:	4259      	negs	r1, r3
 80054c6:	414b      	adcs	r3, r1
 80054c8:	42bb      	cmp	r3, r7
 80054ca:	d001      	beq.n	80054d0 <I2C_WaitOnFlagUntilTimeout+0x1e>
  return HAL_OK;
 80054cc:	2000      	movs	r0, #0
 80054ce:	e01f      	b.n	8005510 <I2C_WaitOnFlagUntilTimeout+0x5e>
    if (Timeout != HAL_MAX_DELAY)
 80054d0:	1c73      	adds	r3, r6, #1
 80054d2:	d0f4      	beq.n	80054be <I2C_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054d4:	f7fd fc72 	bl	8002dbc <HAL_GetTick>
 80054d8:	9b06      	ldr	r3, [sp, #24]
 80054da:	1ac0      	subs	r0, r0, r3
 80054dc:	42b0      	cmp	r0, r6
 80054de:	d801      	bhi.n	80054e4 <I2C_WaitOnFlagUntilTimeout+0x32>
 80054e0:	2e00      	cmp	r6, #0
 80054e2:	d1eb      	bne.n	80054bc <I2C_WaitOnFlagUntilTimeout+0xa>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80054e4:	6823      	ldr	r3, [r4, #0]
 80054e6:	699b      	ldr	r3, [r3, #24]
 80054e8:	402b      	ands	r3, r5
 80054ea:	1b5b      	subs	r3, r3, r5
 80054ec:	425a      	negs	r2, r3
 80054ee:	4153      	adcs	r3, r2
 80054f0:	42bb      	cmp	r3, r7
 80054f2:	d1e3      	bne.n	80054bc <I2C_WaitOnFlagUntilTimeout+0xa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054f4:	2220      	movs	r2, #32
 80054f6:	6c63      	ldr	r3, [r4, #68]	; 0x44
          __HAL_UNLOCK(hi2c);
 80054f8:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054fa:	4313      	orrs	r3, r2
 80054fc:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80054fe:	0023      	movs	r3, r4
 8005500:	3341      	adds	r3, #65	; 0x41
 8005502:	701a      	strb	r2, [r3, #0]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005504:	0022      	movs	r2, r4
 8005506:	2300      	movs	r3, #0
 8005508:	3242      	adds	r2, #66	; 0x42
          __HAL_UNLOCK(hi2c);
 800550a:	3440      	adds	r4, #64	; 0x40
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800550c:	7013      	strb	r3, [r2, #0]
          __HAL_UNLOCK(hi2c);
 800550e:	7023      	strb	r3, [r4, #0]
}
 8005510:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005514 <HAL_I2C_Init>:
{
 8005514:	b570      	push	{r4, r5, r6, lr}
 8005516:	0004      	movs	r4, r0
    return HAL_ERROR;
 8005518:	2001      	movs	r0, #1
  if (hi2c == NULL)
 800551a:	2c00      	cmp	r4, #0
 800551c:	d03f      	beq.n	800559e <HAL_I2C_Init+0x8a>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800551e:	0025      	movs	r5, r4
 8005520:	3541      	adds	r5, #65	; 0x41
 8005522:	782b      	ldrb	r3, [r5, #0]
 8005524:	b2da      	uxtb	r2, r3
 8005526:	2b00      	cmp	r3, #0
 8005528:	d105      	bne.n	8005536 <HAL_I2C_Init+0x22>
    hi2c->Lock = HAL_UNLOCKED;
 800552a:	0023      	movs	r3, r4
 800552c:	3340      	adds	r3, #64	; 0x40
    HAL_I2C_MspInit(hi2c);
 800552e:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 8005530:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 8005532:	f7fd fae1 	bl	8002af8 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005536:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 8005538:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 800553a:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 800553c:	6823      	ldr	r3, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800553e:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	68a6      	ldr	r6, [r4, #8]
 8005544:	438a      	bics	r2, r1
 8005546:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005548:	6861      	ldr	r1, [r4, #4]
 800554a:	4a1a      	ldr	r2, [pc, #104]	; (80055b4 <HAL_I2C_Init+0xa0>)
 800554c:	400a      	ands	r2, r1
 800554e:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005550:	6899      	ldr	r1, [r3, #8]
 8005552:	4a19      	ldr	r2, [pc, #100]	; (80055b8 <HAL_I2C_Init+0xa4>)
 8005554:	4011      	ands	r1, r2
 8005556:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005558:	2801      	cmp	r0, #1
 800555a:	d121      	bne.n	80055a0 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800555c:	2180      	movs	r1, #128	; 0x80
 800555e:	0209      	lsls	r1, r1, #8
 8005560:	4331      	orrs	r1, r6
 8005562:	6099      	str	r1, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005564:	6858      	ldr	r0, [r3, #4]
 8005566:	4915      	ldr	r1, [pc, #84]	; (80055bc <HAL_I2C_Init+0xa8>)
 8005568:	4301      	orrs	r1, r0
 800556a:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800556c:	68d9      	ldr	r1, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800556e:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005570:	400a      	ands	r2, r1
 8005572:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005574:	6961      	ldr	r1, [r4, #20]
 8005576:	6922      	ldr	r2, [r4, #16]
 8005578:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 800557a:	69a1      	ldr	r1, [r4, #24]
 800557c:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800557e:	430a      	orrs	r2, r1
 8005580:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005582:	6a21      	ldr	r1, [r4, #32]
 8005584:	69e2      	ldr	r2, [r4, #28]
 8005586:	430a      	orrs	r2, r1
 8005588:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800558a:	2201      	movs	r2, #1
 800558c:	6819      	ldr	r1, [r3, #0]
 800558e:	430a      	orrs	r2, r1
 8005590:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8005592:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005594:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005596:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8005598:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800559a:	3442      	adds	r4, #66	; 0x42
 800559c:	7020      	strb	r0, [r4, #0]
}
 800559e:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80055a0:	2184      	movs	r1, #132	; 0x84
 80055a2:	0209      	lsls	r1, r1, #8
 80055a4:	4331      	orrs	r1, r6
 80055a6:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80055a8:	2802      	cmp	r0, #2
 80055aa:	d1db      	bne.n	8005564 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80055ac:	2180      	movs	r1, #128	; 0x80
 80055ae:	0109      	lsls	r1, r1, #4
 80055b0:	6059      	str	r1, [r3, #4]
 80055b2:	e7d7      	b.n	8005564 <HAL_I2C_Init+0x50>
 80055b4:	f0ffffff 	.word	0xf0ffffff
 80055b8:	ffff7fff 	.word	0xffff7fff
 80055bc:	02008000 	.word	0x02008000

080055c0 <HAL_I2C_Mem_Write>:
{
 80055c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055c2:	b089      	sub	sp, #36	; 0x24
 80055c4:	9304      	str	r3, [sp, #16]
 80055c6:	ab0e      	add	r3, sp, #56	; 0x38
 80055c8:	9203      	str	r2, [sp, #12]
 80055ca:	cb04      	ldmia	r3!, {r2}
 80055cc:	0004      	movs	r4, r0
 80055ce:	881b      	ldrh	r3, [r3, #0]
 80055d0:	9205      	str	r2, [sp, #20]
 80055d2:	9306      	str	r3, [sp, #24]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80055d4:	0003      	movs	r3, r0
 80055d6:	3341      	adds	r3, #65	; 0x41
 80055d8:	9307      	str	r3, [sp, #28]
 80055da:	781b      	ldrb	r3, [r3, #0]
{
 80055dc:	000f      	movs	r7, r1
    return HAL_BUSY;
 80055de:	2002      	movs	r0, #2
{
 80055e0:	9e10      	ldr	r6, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 80055e2:	2b20      	cmp	r3, #32
 80055e4:	d108      	bne.n	80055f8 <HAL_I2C_Mem_Write+0x38>
    if ((pData == NULL) || (Size == 0U))
 80055e6:	2a00      	cmp	r2, #0
 80055e8:	d002      	beq.n	80055f0 <HAL_I2C_Mem_Write+0x30>
 80055ea:	9b06      	ldr	r3, [sp, #24]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d105      	bne.n	80055fc <HAL_I2C_Mem_Write+0x3c>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80055f0:	2380      	movs	r3, #128	; 0x80
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80055f6:	2001      	movs	r0, #1
}
 80055f8:	b009      	add	sp, #36	; 0x24
 80055fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 80055fc:	0023      	movs	r3, r4
 80055fe:	3340      	adds	r3, #64	; 0x40
 8005600:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 8005602:	2002      	movs	r0, #2
    __HAL_LOCK(hi2c);
 8005604:	2a01      	cmp	r2, #1
 8005606:	d0f7      	beq.n	80055f8 <HAL_I2C_Mem_Write+0x38>
 8005608:	2201      	movs	r2, #1
 800560a:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800560c:	f7fd fbd6 	bl	8002dbc <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005610:	2180      	movs	r1, #128	; 0x80
    tickstart = HAL_GetTick();
 8005612:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005614:	9000      	str	r0, [sp, #0]
 8005616:	2319      	movs	r3, #25
 8005618:	2201      	movs	r2, #1
 800561a:	0020      	movs	r0, r4
 800561c:	0209      	lsls	r1, r1, #8
 800561e:	f7ff ff48 	bl	80054b2 <I2C_WaitOnFlagUntilTimeout>
 8005622:	2800      	cmp	r0, #0
 8005624:	d1e7      	bne.n	80055f6 <HAL_I2C_Mem_Write+0x36>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005626:	2321      	movs	r3, #33	; 0x21
 8005628:	9a07      	ldr	r2, [sp, #28]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800562a:	0039      	movs	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800562c:	7013      	strb	r3, [r2, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800562e:	0023      	movs	r3, r4
 8005630:	3342      	adds	r3, #66	; 0x42
 8005632:	9307      	str	r3, [sp, #28]
 8005634:	2340      	movs	r3, #64	; 0x40
 8005636:	9a07      	ldr	r2, [sp, #28]
 8005638:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr  = pData;
 800563a:	9b05      	ldr	r3, [sp, #20]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800563c:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 800563e:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 8005640:	9b06      	ldr	r3, [sp, #24]
    hi2c->XferISR   = NULL;
 8005642:	6360      	str	r0, [r4, #52]	; 0x34
    hi2c->XferCount = Size;
 8005644:	8563      	strh	r3, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005646:	466b      	mov	r3, sp
 8005648:	7c1a      	ldrb	r2, [r3, #16]
 800564a:	4b4a      	ldr	r3, [pc, #296]	; (8005774 <HAL_I2C_Mem_Write+0x1b4>)
 800564c:	0020      	movs	r0, r4
 800564e:	9300      	str	r3, [sp, #0]
 8005650:	2380      	movs	r3, #128	; 0x80
 8005652:	045b      	lsls	r3, r3, #17
 8005654:	f7ff fe3c 	bl	80052d0 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005658:	002a      	movs	r2, r5
 800565a:	0031      	movs	r1, r6
 800565c:	0020      	movs	r0, r4
 800565e:	f7ff fed1 	bl	8005404 <I2C_WaitOnTXISFlagUntilTimeout>
 8005662:	2800      	cmp	r0, #0
 8005664:	d126      	bne.n	80056b4 <HAL_I2C_Mem_Write+0xf4>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005666:	9a04      	ldr	r2, [sp, #16]
 8005668:	6823      	ldr	r3, [r4, #0]
 800566a:	2a01      	cmp	r2, #1
 800566c:	d116      	bne.n	800569c <HAL_I2C_Mem_Write+0xdc>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800566e:	466a      	mov	r2, sp
 8005670:	7b12      	ldrb	r2, [r2, #12]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005672:	2180      	movs	r1, #128	; 0x80
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005674:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005676:	0020      	movs	r0, r4
 8005678:	0033      	movs	r3, r6
 800567a:	2200      	movs	r2, #0
 800567c:	9500      	str	r5, [sp, #0]
 800567e:	f7ff ff18 	bl	80054b2 <I2C_WaitOnFlagUntilTimeout>
 8005682:	2800      	cmp	r0, #0
 8005684:	d116      	bne.n	80056b4 <HAL_I2C_Mem_Write+0xf4>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005686:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005688:	2bff      	cmp	r3, #255	; 0xff
 800568a:	d817      	bhi.n	80056bc <HAL_I2C_Mem_Write+0xfc>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800568c:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = hi2c->XferCount;
 800568e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005690:	049b      	lsls	r3, r3, #18
      hi2c->XferSize = hi2c->XferCount;
 8005692:	b292      	uxth	r2, r2
 8005694:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005696:	b2d2      	uxtb	r2, r2
 8005698:	9000      	str	r0, [sp, #0]
 800569a:	e014      	b.n	80056c6 <HAL_I2C_Mem_Write+0x106>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800569c:	9a03      	ldr	r2, [sp, #12]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800569e:	0031      	movs	r1, r6
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80056a0:	0a12      	lsrs	r2, r2, #8
 80056a2:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056a4:	0020      	movs	r0, r4
 80056a6:	002a      	movs	r2, r5
 80056a8:	f7ff feac 	bl	8005404 <I2C_WaitOnTXISFlagUntilTimeout>
 80056ac:	2800      	cmp	r0, #0
 80056ae:	d101      	bne.n	80056b4 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80056b0:	6823      	ldr	r3, [r4, #0]
 80056b2:	e7dc      	b.n	800566e <HAL_I2C_Mem_Write+0xae>
      __HAL_UNLOCK(hi2c);
 80056b4:	2300      	movs	r3, #0
 80056b6:	3440      	adds	r4, #64	; 0x40
 80056b8:	7023      	strb	r3, [r4, #0]
 80056ba:	e79c      	b.n	80055f6 <HAL_I2C_Mem_Write+0x36>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80056bc:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80056be:	2380      	movs	r3, #128	; 0x80
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80056c0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80056c2:	045b      	lsls	r3, r3, #17
 80056c4:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80056c6:	0039      	movs	r1, r7
 80056c8:	0020      	movs	r0, r4
 80056ca:	f7ff fe01 	bl	80052d0 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056ce:	002a      	movs	r2, r5
 80056d0:	0031      	movs	r1, r6
 80056d2:	0020      	movs	r0, r4
 80056d4:	f7ff fe96 	bl	8005404 <I2C_WaitOnTXISFlagUntilTimeout>
 80056d8:	2800      	cmp	r0, #0
 80056da:	d000      	beq.n	80056de <HAL_I2C_Mem_Write+0x11e>
 80056dc:	e78b      	b.n	80055f6 <HAL_I2C_Mem_Write+0x36>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80056de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056e0:	6822      	ldr	r2, [r4, #0]
 80056e2:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 80056e4:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80056e6:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 80056e8:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80056ea:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80056ec:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80056ee:	3b01      	subs	r3, #1
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80056f4:	3a01      	subs	r2, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80056f6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80056f8:	b292      	uxth	r2, r2
 80056fa:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d017      	beq.n	8005730 <HAL_I2C_Mem_Write+0x170>
 8005700:	2a00      	cmp	r2, #0
 8005702:	d115      	bne.n	8005730 <HAL_I2C_Mem_Write+0x170>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005704:	0033      	movs	r3, r6
 8005706:	2180      	movs	r1, #128	; 0x80
 8005708:	0020      	movs	r0, r4
 800570a:	9500      	str	r5, [sp, #0]
 800570c:	f7ff fed1 	bl	80054b2 <I2C_WaitOnFlagUntilTimeout>
 8005710:	2800      	cmp	r0, #0
 8005712:	d000      	beq.n	8005716 <HAL_I2C_Mem_Write+0x156>
 8005714:	e76f      	b.n	80055f6 <HAL_I2C_Mem_Write+0x36>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005716:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005718:	2bff      	cmp	r3, #255	; 0xff
 800571a:	d923      	bls.n	8005764 <HAL_I2C_Mem_Write+0x1a4>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800571c:	23ff      	movs	r3, #255	; 0xff
 800571e:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005720:	2380      	movs	r3, #128	; 0x80
 8005722:	22ff      	movs	r2, #255	; 0xff
 8005724:	9000      	str	r0, [sp, #0]
 8005726:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005728:	0039      	movs	r1, r7
 800572a:	0020      	movs	r0, r4
 800572c:	f7ff fdd0 	bl	80052d0 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8005730:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005732:	2b00      	cmp	r3, #0
 8005734:	d1cb      	bne.n	80056ce <HAL_I2C_Mem_Write+0x10e>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005736:	002a      	movs	r2, r5
 8005738:	0031      	movs	r1, r6
 800573a:	0020      	movs	r0, r4
 800573c:	f7ff fe8f 	bl	800545e <I2C_WaitOnSTOPFlagUntilTimeout>
 8005740:	2800      	cmp	r0, #0
 8005742:	d000      	beq.n	8005746 <HAL_I2C_Mem_Write+0x186>
 8005744:	e757      	b.n	80055f6 <HAL_I2C_Mem_Write+0x36>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005746:	2120      	movs	r1, #32
 8005748:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 800574a:	4d0b      	ldr	r5, [pc, #44]	; (8005778 <HAL_I2C_Mem_Write+0x1b8>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800574c:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800574e:	685a      	ldr	r2, [r3, #4]
 8005750:	402a      	ands	r2, r5
 8005752:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005754:	0023      	movs	r3, r4
 8005756:	3341      	adds	r3, #65	; 0x41
 8005758:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800575a:	9b07      	ldr	r3, [sp, #28]
    __HAL_UNLOCK(hi2c);
 800575c:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800575e:	7018      	strb	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8005760:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8005762:	e749      	b.n	80055f8 <HAL_I2C_Mem_Write+0x38>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005764:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 8005766:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005768:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 800576a:	b292      	uxth	r2, r2
 800576c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800576e:	b2d2      	uxtb	r2, r2
 8005770:	9000      	str	r0, [sp, #0]
 8005772:	e7d9      	b.n	8005728 <HAL_I2C_Mem_Write+0x168>
 8005774:	80002000 	.word	0x80002000
 8005778:	fe00e800 	.word	0xfe00e800

0800577c <HAL_I2C_Mem_Read>:
{
 800577c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800577e:	b089      	sub	sp, #36	; 0x24
 8005780:	9304      	str	r3, [sp, #16]
 8005782:	ab0e      	add	r3, sp, #56	; 0x38
 8005784:	9203      	str	r2, [sp, #12]
 8005786:	cb04      	ldmia	r3!, {r2}
 8005788:	0004      	movs	r4, r0
 800578a:	881b      	ldrh	r3, [r3, #0]
 800578c:	9205      	str	r2, [sp, #20]
 800578e:	9306      	str	r3, [sp, #24]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005790:	0003      	movs	r3, r0
 8005792:	3341      	adds	r3, #65	; 0x41
 8005794:	9307      	str	r3, [sp, #28]
 8005796:	781b      	ldrb	r3, [r3, #0]
{
 8005798:	000f      	movs	r7, r1
    return HAL_BUSY;
 800579a:	2002      	movs	r0, #2
{
 800579c:	9e10      	ldr	r6, [sp, #64]	; 0x40
  if (hi2c->State == HAL_I2C_STATE_READY)
 800579e:	2b20      	cmp	r3, #32
 80057a0:	d108      	bne.n	80057b4 <HAL_I2C_Mem_Read+0x38>
    if ((pData == NULL) || (Size == 0U))
 80057a2:	2a00      	cmp	r2, #0
 80057a4:	d002      	beq.n	80057ac <HAL_I2C_Mem_Read+0x30>
 80057a6:	9b06      	ldr	r3, [sp, #24]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d105      	bne.n	80057b8 <HAL_I2C_Mem_Read+0x3c>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80057ac:	2380      	movs	r3, #128	; 0x80
 80057ae:	009b      	lsls	r3, r3, #2
 80057b0:	6463      	str	r3, [r4, #68]	; 0x44
      return HAL_ERROR;
 80057b2:	2001      	movs	r0, #1
}
 80057b4:	b009      	add	sp, #36	; 0x24
 80057b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_LOCK(hi2c);
 80057b8:	0023      	movs	r3, r4
 80057ba:	3340      	adds	r3, #64	; 0x40
 80057bc:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 80057be:	2002      	movs	r0, #2
    __HAL_LOCK(hi2c);
 80057c0:	2a01      	cmp	r2, #1
 80057c2:	d0f7      	beq.n	80057b4 <HAL_I2C_Mem_Read+0x38>
 80057c4:	2201      	movs	r2, #1
 80057c6:	701a      	strb	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80057c8:	f7fd faf8 	bl	8002dbc <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80057cc:	2180      	movs	r1, #128	; 0x80
 80057ce:	2319      	movs	r3, #25
 80057d0:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 80057d2:	0005      	movs	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80057d4:	2201      	movs	r2, #1
 80057d6:	0020      	movs	r0, r4
 80057d8:	0209      	lsls	r1, r1, #8
 80057da:	f7ff fe6a 	bl	80054b2 <I2C_WaitOnFlagUntilTimeout>
 80057de:	1e03      	subs	r3, r0, #0
 80057e0:	d1e7      	bne.n	80057b2 <HAL_I2C_Mem_Read+0x36>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80057e2:	2222      	movs	r2, #34	; 0x22
 80057e4:	9907      	ldr	r1, [sp, #28]
 80057e6:	700a      	strb	r2, [r1, #0]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80057e8:	0022      	movs	r2, r4
 80057ea:	3242      	adds	r2, #66	; 0x42
 80057ec:	9207      	str	r2, [sp, #28]
 80057ee:	2240      	movs	r2, #64	; 0x40
 80057f0:	9907      	ldr	r1, [sp, #28]
 80057f2:	700a      	strb	r2, [r1, #0]
    hi2c->pBuffPtr  = pData;
 80057f4:	9a05      	ldr	r2, [sp, #20]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057f6:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->pBuffPtr  = pData;
 80057f8:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->XferCount = Size;
 80057fa:	9a06      	ldr	r2, [sp, #24]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80057fc:	494d      	ldr	r1, [pc, #308]	; (8005934 <HAL_I2C_Mem_Read+0x1b8>)
    hi2c->XferCount = Size;
 80057fe:	8562      	strh	r2, [r4, #42]	; 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005800:	466a      	mov	r2, sp
    hi2c->XferISR   = NULL;
 8005802:	6360      	str	r0, [r4, #52]	; 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005804:	7c12      	ldrb	r2, [r2, #16]
 8005806:	0020      	movs	r0, r4
 8005808:	9100      	str	r1, [sp, #0]
 800580a:	0039      	movs	r1, r7
 800580c:	f7ff fd60 	bl	80052d0 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005810:	002a      	movs	r2, r5
 8005812:	0031      	movs	r1, r6
 8005814:	0020      	movs	r0, r4
 8005816:	f7ff fdf5 	bl	8005404 <I2C_WaitOnTXISFlagUntilTimeout>
 800581a:	2800      	cmp	r0, #0
 800581c:	d127      	bne.n	800586e <HAL_I2C_Mem_Read+0xf2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800581e:	9a04      	ldr	r2, [sp, #16]
 8005820:	6823      	ldr	r3, [r4, #0]
 8005822:	2a01      	cmp	r2, #1
 8005824:	d117      	bne.n	8005856 <HAL_I2C_Mem_Read+0xda>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005826:	466a      	mov	r2, sp
 8005828:	7b12      	ldrb	r2, [r2, #12]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800582a:	2140      	movs	r1, #64	; 0x40
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800582c:	629a      	str	r2, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800582e:	0020      	movs	r0, r4
 8005830:	0033      	movs	r3, r6
 8005832:	2200      	movs	r2, #0
 8005834:	9500      	str	r5, [sp, #0]
 8005836:	f7ff fe3c 	bl	80054b2 <I2C_WaitOnFlagUntilTimeout>
 800583a:	2800      	cmp	r0, #0
 800583c:	d117      	bne.n	800586e <HAL_I2C_Mem_Read+0xf2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800583e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005840:	4b3d      	ldr	r3, [pc, #244]	; (8005938 <HAL_I2C_Mem_Read+0x1bc>)
 8005842:	2aff      	cmp	r2, #255	; 0xff
 8005844:	d817      	bhi.n	8005876 <HAL_I2C_Mem_Read+0xfa>
      hi2c->XferSize = hi2c->XferCount;
 8005846:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8005848:	b292      	uxth	r2, r2
 800584a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800584c:	9300      	str	r3, [sp, #0]
 800584e:	2380      	movs	r3, #128	; 0x80
 8005850:	b2d2      	uxtb	r2, r2
 8005852:	049b      	lsls	r3, r3, #18
 8005854:	e014      	b.n	8005880 <HAL_I2C_Mem_Read+0x104>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005856:	9a03      	ldr	r2, [sp, #12]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005858:	0031      	movs	r1, r6
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800585a:	0a12      	lsrs	r2, r2, #8
 800585c:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800585e:	0020      	movs	r0, r4
 8005860:	002a      	movs	r2, r5
 8005862:	f7ff fdcf 	bl	8005404 <I2C_WaitOnTXISFlagUntilTimeout>
 8005866:	2800      	cmp	r0, #0
 8005868:	d101      	bne.n	800586e <HAL_I2C_Mem_Read+0xf2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800586a:	6823      	ldr	r3, [r4, #0]
 800586c:	e7db      	b.n	8005826 <HAL_I2C_Mem_Read+0xaa>
      __HAL_UNLOCK(hi2c);
 800586e:	2300      	movs	r3, #0
 8005870:	3440      	adds	r4, #64	; 0x40
 8005872:	7023      	strb	r3, [r4, #0]
 8005874:	e79d      	b.n	80057b2 <HAL_I2C_Mem_Read+0x36>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005876:	22ff      	movs	r2, #255	; 0xff
 8005878:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800587a:	9300      	str	r3, [sp, #0]
 800587c:	2380      	movs	r3, #128	; 0x80
 800587e:	045b      	lsls	r3, r3, #17
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005880:	0039      	movs	r1, r7
 8005882:	0020      	movs	r0, r4
 8005884:	f7ff fd24 	bl	80052d0 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005888:	0033      	movs	r3, r6
 800588a:	2200      	movs	r2, #0
 800588c:	2104      	movs	r1, #4
 800588e:	0020      	movs	r0, r4
 8005890:	9500      	str	r5, [sp, #0]
 8005892:	f7ff fe0e 	bl	80054b2 <I2C_WaitOnFlagUntilTimeout>
 8005896:	2800      	cmp	r0, #0
 8005898:	d000      	beq.n	800589c <HAL_I2C_Mem_Read+0x120>
 800589a:	e78a      	b.n	80057b2 <HAL_I2C_Mem_Read+0x36>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800589c:	6823      	ldr	r3, [r4, #0]
 800589e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80058a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a2:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 80058a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80058a6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 80058a8:	3301      	adds	r3, #1
 80058aa:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80058ac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80058ae:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 80058b0:	3b01      	subs	r3, #1
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80058b6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80058b8:	b292      	uxth	r2, r2
 80058ba:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d017      	beq.n	80058f0 <HAL_I2C_Mem_Read+0x174>
 80058c0:	2a00      	cmp	r2, #0
 80058c2:	d115      	bne.n	80058f0 <HAL_I2C_Mem_Read+0x174>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80058c4:	0033      	movs	r3, r6
 80058c6:	2180      	movs	r1, #128	; 0x80
 80058c8:	0020      	movs	r0, r4
 80058ca:	9500      	str	r5, [sp, #0]
 80058cc:	f7ff fdf1 	bl	80054b2 <I2C_WaitOnFlagUntilTimeout>
 80058d0:	2800      	cmp	r0, #0
 80058d2:	d000      	beq.n	80058d6 <HAL_I2C_Mem_Read+0x15a>
 80058d4:	e76d      	b.n	80057b2 <HAL_I2C_Mem_Read+0x36>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80058d6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80058d8:	2bff      	cmp	r3, #255	; 0xff
 80058da:	d923      	bls.n	8005924 <HAL_I2C_Mem_Read+0x1a8>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80058dc:	23ff      	movs	r3, #255	; 0xff
 80058de:	8523      	strh	r3, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80058e0:	2380      	movs	r3, #128	; 0x80
 80058e2:	22ff      	movs	r2, #255	; 0xff
 80058e4:	9000      	str	r0, [sp, #0]
 80058e6:	045b      	lsls	r3, r3, #17
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80058e8:	0039      	movs	r1, r7
 80058ea:	0020      	movs	r0, r4
 80058ec:	f7ff fcf0 	bl	80052d0 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80058f0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d1c8      	bne.n	8005888 <HAL_I2C_Mem_Read+0x10c>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058f6:	002a      	movs	r2, r5
 80058f8:	0031      	movs	r1, r6
 80058fa:	0020      	movs	r0, r4
 80058fc:	f7ff fdaf 	bl	800545e <I2C_WaitOnSTOPFlagUntilTimeout>
 8005900:	2800      	cmp	r0, #0
 8005902:	d000      	beq.n	8005906 <HAL_I2C_Mem_Read+0x18a>
 8005904:	e755      	b.n	80057b2 <HAL_I2C_Mem_Read+0x36>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005906:	2120      	movs	r1, #32
 8005908:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 800590a:	4d0c      	ldr	r5, [pc, #48]	; (800593c <HAL_I2C_Mem_Read+0x1c0>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800590c:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800590e:	685a      	ldr	r2, [r3, #4]
 8005910:	402a      	ands	r2, r5
 8005912:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005914:	0023      	movs	r3, r4
 8005916:	3341      	adds	r3, #65	; 0x41
 8005918:	7019      	strb	r1, [r3, #0]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800591a:	9b07      	ldr	r3, [sp, #28]
    __HAL_UNLOCK(hi2c);
 800591c:	3440      	adds	r4, #64	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800591e:	7018      	strb	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8005920:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 8005922:	e747      	b.n	80057b4 <HAL_I2C_Mem_Read+0x38>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005924:	2380      	movs	r3, #128	; 0x80
          hi2c->XferSize = hi2c->XferCount;
 8005926:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005928:	049b      	lsls	r3, r3, #18
          hi2c->XferSize = hi2c->XferCount;
 800592a:	b292      	uxth	r2, r2
 800592c:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800592e:	b2d2      	uxtb	r2, r2
 8005930:	9000      	str	r0, [sp, #0]
 8005932:	e7d9      	b.n	80058e8 <HAL_I2C_Mem_Read+0x16c>
 8005934:	80002000 	.word	0x80002000
 8005938:	80002400 	.word	0x80002400
 800593c:	fe00e800 	.word	0xfe00e800

08005940 <HAL_PWR_DisablePVD>:
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
  /* Disable the power voltage detector */
  CLEAR_BIT(PWR->CR, PWR_CR_PVDE);
 8005940:	2110      	movs	r1, #16
 8005942:	4a02      	ldr	r2, [pc, #8]	; (800594c <HAL_PWR_DisablePVD+0xc>)
 8005944:	6813      	ldr	r3, [r2, #0]
 8005946:	438b      	bics	r3, r1
 8005948:	6013      	str	r3, [r2, #0]
}
 800594a:	4770      	bx	lr
 800594c:	40007000 	.word	0x40007000

08005950 <HAL_PWR_EnterSLEEPMode>:
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8005950:	4b17      	ldr	r3, [pc, #92]	; (80059b0 <HAL_PWR_EnterSLEEPMode+0x60>)
{
 8005952:	b5f0      	push	{r4, r5, r6, r7, lr}
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8005954:	4a17      	ldr	r2, [pc, #92]	; (80059b4 <HAL_PWR_EnterSLEEPMode+0x64>)
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8005956:	681e      	ldr	r6, [r3, #0]
{
 8005958:	0005      	movs	r5, r0
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 800595a:	2080      	movs	r0, #128	; 0x80
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 800595c:	6a17      	ldr	r7, [r2, #32]
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 800595e:	0034      	movs	r4, r6
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8005960:	2201      	movs	r2, #1
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8005962:	0080      	lsls	r0, r0, #2
 8005964:	4004      	ands	r4, r0
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8005966:	403a      	ands	r2, r7
  if((ulpbit != 0) && (vrefinbit != 0))
 8005968:	4206      	tst	r6, r0
 800596a:	d005      	beq.n	8005978 <HAL_PWR_EnterSLEEPMode+0x28>
 800596c:	2a00      	cmp	r2, #0
 800596e:	d003      	beq.n	8005978 <HAL_PWR_EnterSLEEPMode+0x28>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8005970:	6818      	ldr	r0, [r3, #0]
 8005972:	4e11      	ldr	r6, [pc, #68]	; (80059b8 <HAL_PWR_EnterSLEEPMode+0x68>)
 8005974:	4030      	ands	r0, r6
 8005976:	6018      	str	r0, [r3, #0]

  /* Select the regulator state in Sleep mode ---------------------------------*/
  tmpreg = PWR->CR;

  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8005978:	2603      	movs	r6, #3
  tmpreg = PWR->CR;
 800597a:	6818      	ldr	r0, [r3, #0]
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 800597c:	43b0      	bics	r0, r6

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 800597e:	4328      	orrs	r0, r5

  /* Store the new value */
  PWR->CR = tmpreg;
  
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8005980:	4d0e      	ldr	r5, [pc, #56]	; (80059bc <HAL_PWR_EnterSLEEPMode+0x6c>)
  PWR->CR = tmpreg;
 8005982:	6018      	str	r0, [r3, #0]
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8005984:	6928      	ldr	r0, [r5, #16]
 8005986:	3601      	adds	r6, #1
 8005988:	43b0      	bics	r0, r6
 800598a:	6128      	str	r0, [r5, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 800598c:	2901      	cmp	r1, #1
 800598e:	d10b      	bne.n	80059a8 <HAL_PWR_EnterSLEEPMode+0x58>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8005990:	bf30      	wfi
    __SEV();
    __WFE();
    __WFE();
  }

  if((ulpbit != 0) && (vrefinbit != 0))
 8005992:	2c00      	cmp	r4, #0
 8005994:	d006      	beq.n	80059a4 <HAL_PWR_EnterSLEEPMode+0x54>
 8005996:	2a00      	cmp	r2, #0
 8005998:	d004      	beq.n	80059a4 <HAL_PWR_EnterSLEEPMode+0x54>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 800599a:	2280      	movs	r2, #128	; 0x80
 800599c:	6819      	ldr	r1, [r3, #0]
 800599e:	0092      	lsls	r2, r2, #2
 80059a0:	430a      	orrs	r2, r1
 80059a2:	601a      	str	r2, [r3, #0]
  }

  /* Additional NOP to ensure all pending instructions are flushed before entering low power mode */
  __NOP();
 80059a4:	46c0      	nop			; (mov r8, r8)

}
 80059a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __SEV();
 80059a8:	bf40      	sev
    __WFE();
 80059aa:	bf20      	wfe
    __WFE();
 80059ac:	bf20      	wfe
 80059ae:	e7f0      	b.n	8005992 <HAL_PWR_EnterSLEEPMode+0x42>
 80059b0:	40007000 	.word	0x40007000
 80059b4:	40010000 	.word	0x40010000
 80059b8:	fffffdff 	.word	0xfffffdff
 80059bc:	e000ed00 	.word	0xe000ed00

080059c0 <HAL_PWR_EnterSTOPMode>:
     in Stop mode or in Sleep/Low-power sleep mode */
//  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
//  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
//  if((ulpbit != 0) && (vrefinbit != 0))
//  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 80059c0:	4b10      	ldr	r3, [pc, #64]	; (8005a04 <HAL_PWR_EnterSTOPMode+0x44>)
{
 80059c2:	b510      	push	{r4, lr}
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 80059c4:	4a10      	ldr	r2, [pc, #64]	; (8005a08 <HAL_PWR_EnterSTOPMode+0x48>)
 80059c6:	681c      	ldr	r4, [r3, #0]
 80059c8:	4014      	ands	r4, r2
 80059ca:	601c      	str	r4, [r3, #0]

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 80059cc:	2403      	movs	r4, #3
  tmpreg = PWR->CR;
 80059ce:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 80059d0:	43a2      	bics	r2, r4

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 80059d2:	4302      	orrs	r2, r0

  /* Store the new value */
  PWR->CR = tmpreg;

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80059d4:	2004      	movs	r0, #4
  PWR->CR = tmpreg;
 80059d6:	601a      	str	r2, [r3, #0]
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80059d8:	4a0c      	ldr	r2, [pc, #48]	; (8005a0c <HAL_PWR_EnterSTOPMode+0x4c>)
 80059da:	6914      	ldr	r4, [r2, #16]
 80059dc:	4320      	orrs	r0, r4
 80059de:	6110      	str	r0, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 80059e0:	2901      	cmp	r1, #1
 80059e2:	d10a      	bne.n	80059fa <HAL_PWR_EnterSTOPMode+0x3a>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80059e4:	bf30      	wfi
    __WFE();
    __WFE();
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80059e6:	2004      	movs	r0, #4
 80059e8:	6911      	ldr	r1, [r2, #16]
 80059ea:	4381      	bics	r1, r0
 80059ec:	6111      	str	r1, [r2, #16]

//  if((ulpbit != 0) && (vrefinbit != 0))
//  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 80059ee:	2280      	movs	r2, #128	; 0x80
 80059f0:	6819      	ldr	r1, [r3, #0]
 80059f2:	0092      	lsls	r2, r2, #2
 80059f4:	430a      	orrs	r2, r1
 80059f6:	601a      	str	r2, [r3, #0]
//  }
}
 80059f8:	bd10      	pop	{r4, pc}
    __SEV();
 80059fa:	bf40      	sev
    __WFE();
 80059fc:	bf20      	wfe
    __WFE();
 80059fe:	bf20      	wfe
 8005a00:	e7f1      	b.n	80059e6 <HAL_PWR_EnterSTOPMode+0x26>
 8005a02:	46c0      	nop			; (mov r8, r8)
 8005a04:	40007000 	.word	0x40007000
 8005a08:	fffffdff 	.word	0xfffffdff
 8005a0c:	e000ed00 	.word	0xe000ed00

08005a10 <HAL_PWR_PVDCallback>:
__weak void HAL_PWR_PVDCallback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 8005a10:	4770      	bx	lr
	...

08005a14 <HAL_PWR_PVD_IRQHandler>:
{
 8005a14:	b570      	push	{r4, r5, r6, lr}
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 8005a16:	2580      	movs	r5, #128	; 0x80
 8005a18:	4c04      	ldr	r4, [pc, #16]	; (8005a2c <HAL_PWR_PVD_IRQHandler+0x18>)
 8005a1a:	026d      	lsls	r5, r5, #9
 8005a1c:	6963      	ldr	r3, [r4, #20]
 8005a1e:	422b      	tst	r3, r5
 8005a20:	d002      	beq.n	8005a28 <HAL_PWR_PVD_IRQHandler+0x14>
    HAL_PWR_PVDCallback();
 8005a22:	f7ff fff5 	bl	8005a10 <HAL_PWR_PVDCallback>
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 8005a26:	6165      	str	r5, [r4, #20]
}
 8005a28:	bd70      	pop	{r4, r5, r6, pc}
 8005a2a:	46c0      	nop			; (mov r8, r8)
 8005a2c:	40010400 	.word	0x40010400

08005a30 <HAL_PWREx_EnableFastWakeUp>:
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 8005a30:	2380      	movs	r3, #128	; 0x80
 8005a32:	4a03      	ldr	r2, [pc, #12]	; (8005a40 <HAL_PWREx_EnableFastWakeUp+0x10>)
 8005a34:	00db      	lsls	r3, r3, #3
 8005a36:	6811      	ldr	r1, [r2, #0]
 8005a38:	430b      	orrs	r3, r1
 8005a3a:	6013      	str	r3, [r2, #0]
}
 8005a3c:	4770      	bx	lr
 8005a3e:	46c0      	nop			; (mov r8, r8)
 8005a40:	40007000 	.word	0x40007000

08005a44 <HAL_PWREx_EnableUltraLowPower>:
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 8005a44:	2380      	movs	r3, #128	; 0x80
 8005a46:	4a03      	ldr	r2, [pc, #12]	; (8005a54 <HAL_PWREx_EnableUltraLowPower+0x10>)
 8005a48:	009b      	lsls	r3, r3, #2
 8005a4a:	6811      	ldr	r1, [r2, #0]
 8005a4c:	430b      	orrs	r3, r1
 8005a4e:	6013      	str	r3, [r2, #0]
}
 8005a50:	4770      	bx	lr
 8005a52:	46c0      	nop			; (mov r8, r8)
 8005a54:	40007000 	.word	0x40007000

08005a58 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005a58:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8005a5a:	4b1d      	ldr	r3, [pc, #116]	; (8005ad0 <HAL_RCC_GetSysClockFreq+0x78>)
{
 8005a5c:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 8005a5e:	68dc      	ldr	r4, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8005a60:	4022      	ands	r2, r4
 8005a62:	2a08      	cmp	r2, #8
 8005a64:	d031      	beq.n	8005aca <HAL_RCC_GetSysClockFreq+0x72>
 8005a66:	2a0c      	cmp	r2, #12
 8005a68:	d009      	beq.n	8005a7e <HAL_RCC_GetSysClockFreq+0x26>
 8005a6a:	2a04      	cmp	r2, #4
 8005a6c:	d125      	bne.n	8005aba <HAL_RCC_GetSysClockFreq+0x62>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005a6e:	6818      	ldr	r0, [r3, #0]
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 8005a70:	4b18      	ldr	r3, [pc, #96]	; (8005ad4 <HAL_RCC_GetSysClockFreq+0x7c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005a72:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 8005a74:	17c0      	asrs	r0, r0, #31
 8005a76:	4018      	ands	r0, r3
 8005a78:	4b17      	ldr	r3, [pc, #92]	; (8005ad8 <HAL_RCC_GetSysClockFreq+0x80>)
 8005a7a:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 8005a7c:	bd70      	pop	{r4, r5, r6, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005a7e:	02a2      	lsls	r2, r4, #10
 8005a80:	4816      	ldr	r0, [pc, #88]	; (8005adc <HAL_RCC_GetSysClockFreq+0x84>)
 8005a82:	0f12      	lsrs	r2, r2, #28
 8005a84:	5c80      	ldrb	r0, [r0, r2]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a86:	2280      	movs	r2, #128	; 0x80
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005a88:	0224      	lsls	r4, r4, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a8a:	68d9      	ldr	r1, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005a8c:	0fa4      	lsrs	r4, r4, #30
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a8e:	0252      	lsls	r2, r2, #9
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8005a90:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a92:	4211      	tst	r1, r2
 8005a94:	d009      	beq.n	8005aaa <HAL_RCC_GetSysClockFreq+0x52>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005a96:	4a12      	ldr	r2, [pc, #72]	; (8005ae0 <HAL_RCC_GetSysClockFreq+0x88>)
 8005a98:	2300      	movs	r3, #0
 8005a9a:	2100      	movs	r1, #0
 8005a9c:	f7fa fd2e 	bl	80004fc <__aeabi_lmul>
 8005aa0:	0022      	movs	r2, r4
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	f7fa fd0a 	bl	80004bc <__aeabi_uldivmod>
 8005aa8:	e7e8      	b.n	8005a7c <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	2310      	movs	r3, #16
 8005aae:	421a      	tst	r2, r3
 8005ab0:	d001      	beq.n	8005ab6 <HAL_RCC_GetSysClockFreq+0x5e>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8005ab2:	4a0c      	ldr	r2, [pc, #48]	; (8005ae4 <HAL_RCC_GetSysClockFreq+0x8c>)
 8005ab4:	e7f0      	b.n	8005a98 <HAL_RCC_GetSysClockFreq+0x40>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8005ab6:	4a08      	ldr	r2, [pc, #32]	; (8005ad8 <HAL_RCC_GetSysClockFreq+0x80>)
 8005ab8:	e7ee      	b.n	8005a98 <HAL_RCC_GetSysClockFreq+0x40>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005aba:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005abc:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005abe:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8005ac0:	041b      	lsls	r3, r3, #16
 8005ac2:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8005ac4:	3301      	adds	r3, #1
 8005ac6:	4098      	lsls	r0, r3
  return sysclockfreq;
 8005ac8:	e7d8      	b.n	8005a7c <HAL_RCC_GetSysClockFreq+0x24>
  switch (tmpreg & RCC_CFGR_SWS)
 8005aca:	4805      	ldr	r0, [pc, #20]	; (8005ae0 <HAL_RCC_GetSysClockFreq+0x88>)
 8005acc:	e7d6      	b.n	8005a7c <HAL_RCC_GetSysClockFreq+0x24>
 8005ace:	46c0      	nop			; (mov r8, r8)
 8005ad0:	40021000 	.word	0x40021000
 8005ad4:	ff48e500 	.word	0xff48e500
 8005ad8:	00f42400 	.word	0x00f42400
 8005adc:	0800f478 	.word	0x0800f478
 8005ae0:	007a1200 	.word	0x007a1200
 8005ae4:	003d0900 	.word	0x003d0900

08005ae8 <HAL_RCC_OscConfig>:
{
 8005ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005aea:	0005      	movs	r5, r0
 8005aec:	b087      	sub	sp, #28
  if(RCC_OscInitStruct == NULL)
 8005aee:	2800      	cmp	r0, #0
 8005af0:	d055      	beq.n	8005b9e <HAL_RCC_OscConfig+0xb6>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005af2:	230c      	movs	r3, #12
 8005af4:	4cbd      	ldr	r4, [pc, #756]	; (8005dec <HAL_RCC_OscConfig+0x304>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005af6:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005af8:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005afa:	68e7      	ldr	r7, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005afc:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005afe:	2380      	movs	r3, #128	; 0x80
 8005b00:	025b      	lsls	r3, r3, #9
 8005b02:	401f      	ands	r7, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b04:	07d2      	lsls	r2, r2, #31
 8005b06:	d43e      	bmi.n	8005b86 <HAL_RCC_OscConfig+0x9e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b08:	682b      	ldr	r3, [r5, #0]
 8005b0a:	079b      	lsls	r3, r3, #30
 8005b0c:	d500      	bpl.n	8005b10 <HAL_RCC_OscConfig+0x28>
 8005b0e:	e087      	b.n	8005c20 <HAL_RCC_OscConfig+0x138>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005b10:	682b      	ldr	r3, [r5, #0]
 8005b12:	06db      	lsls	r3, r3, #27
 8005b14:	d529      	bpl.n	8005b6a <HAL_RCC_OscConfig+0x82>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005b16:	2e00      	cmp	r6, #0
 8005b18:	d000      	beq.n	8005b1c <HAL_RCC_OscConfig+0x34>
 8005b1a:	e0d8      	b.n	8005cce <HAL_RCC_OscConfig+0x1e6>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005b1c:	6823      	ldr	r3, [r4, #0]
 8005b1e:	059b      	lsls	r3, r3, #22
 8005b20:	d502      	bpl.n	8005b28 <HAL_RCC_OscConfig+0x40>
 8005b22:	69ab      	ldr	r3, [r5, #24]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d03a      	beq.n	8005b9e <HAL_RCC_OscConfig+0xb6>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005b28:	6862      	ldr	r2, [r4, #4]
 8005b2a:	49b1      	ldr	r1, [pc, #708]	; (8005df0 <HAL_RCC_OscConfig+0x308>)
 8005b2c:	6a2b      	ldr	r3, [r5, #32]
 8005b2e:	400a      	ands	r2, r1
 8005b30:	431a      	orrs	r2, r3
 8005b32:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005b34:	6861      	ldr	r1, [r4, #4]
 8005b36:	69ea      	ldr	r2, [r5, #28]
 8005b38:	0209      	lsls	r1, r1, #8
 8005b3a:	0a09      	lsrs	r1, r1, #8
 8005b3c:	0612      	lsls	r2, r2, #24
 8005b3e:	430a      	orrs	r2, r1
 8005b40:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005b42:	2280      	movs	r2, #128	; 0x80
 8005b44:	0b5b      	lsrs	r3, r3, #13
 8005b46:	3301      	adds	r3, #1
 8005b48:	0212      	lsls	r2, r2, #8
 8005b4a:	409a      	lsls	r2, r3
 8005b4c:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005b4e:	68e1      	ldr	r1, [r4, #12]
 8005b50:	060a      	lsls	r2, r1, #24
 8005b52:	49a8      	ldr	r1, [pc, #672]	; (8005df4 <HAL_RCC_OscConfig+0x30c>)
 8005b54:	0f12      	lsrs	r2, r2, #28
 8005b56:	5c8a      	ldrb	r2, [r1, r2]
 8005b58:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005b5a:	4aa7      	ldr	r2, [pc, #668]	; (8005df8 <HAL_RCC_OscConfig+0x310>)
 8005b5c:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 8005b5e:	4ba7      	ldr	r3, [pc, #668]	; (8005dfc <HAL_RCC_OscConfig+0x314>)
 8005b60:	6818      	ldr	r0, [r3, #0]
 8005b62:	f7fd f929 	bl	8002db8 <HAL_InitTick>
        if(status != HAL_OK)
 8005b66:	2800      	cmp	r0, #0
 8005b68:	d130      	bne.n	8005bcc <HAL_RCC_OscConfig+0xe4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b6a:	682b      	ldr	r3, [r5, #0]
 8005b6c:	071b      	lsls	r3, r3, #28
 8005b6e:	d500      	bpl.n	8005b72 <HAL_RCC_OscConfig+0x8a>
 8005b70:	e0e4      	b.n	8005d3c <HAL_RCC_OscConfig+0x254>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b72:	682b      	ldr	r3, [r5, #0]
 8005b74:	075b      	lsls	r3, r3, #29
 8005b76:	d500      	bpl.n	8005b7a <HAL_RCC_OscConfig+0x92>
 8005b78:	e106      	b.n	8005d88 <HAL_RCC_OscConfig+0x2a0>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b7a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d000      	beq.n	8005b82 <HAL_RCC_OscConfig+0x9a>
 8005b80:	e18d      	b.n	8005e9e <HAL_RCC_OscConfig+0x3b6>
  return HAL_OK;
 8005b82:	2000      	movs	r0, #0
 8005b84:	e022      	b.n	8005bcc <HAL_RCC_OscConfig+0xe4>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b86:	2e08      	cmp	r6, #8
 8005b88:	d003      	beq.n	8005b92 <HAL_RCC_OscConfig+0xaa>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005b8a:	2e0c      	cmp	r6, #12
 8005b8c:	d109      	bne.n	8005ba2 <HAL_RCC_OscConfig+0xba>
 8005b8e:	2f00      	cmp	r7, #0
 8005b90:	d007      	beq.n	8005ba2 <HAL_RCC_OscConfig+0xba>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b92:	6823      	ldr	r3, [r4, #0]
 8005b94:	039b      	lsls	r3, r3, #14
 8005b96:	d5b7      	bpl.n	8005b08 <HAL_RCC_OscConfig+0x20>
 8005b98:	686b      	ldr	r3, [r5, #4]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d1b4      	bne.n	8005b08 <HAL_RCC_OscConfig+0x20>
          return HAL_ERROR;
 8005b9e:	2001      	movs	r0, #1
 8005ba0:	e014      	b.n	8005bcc <HAL_RCC_OscConfig+0xe4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ba2:	686a      	ldr	r2, [r5, #4]
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d113      	bne.n	8005bd0 <HAL_RCC_OscConfig+0xe8>
 8005ba8:	6822      	ldr	r2, [r4, #0]
 8005baa:	4313      	orrs	r3, r2
 8005bac:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005bae:	f7fd f905 	bl	8002dbc <HAL_GetTick>
 8005bb2:	9001      	str	r0, [sp, #4]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005bb4:	2280      	movs	r2, #128	; 0x80
 8005bb6:	6823      	ldr	r3, [r4, #0]
 8005bb8:	0292      	lsls	r2, r2, #10
 8005bba:	4213      	tst	r3, r2
 8005bbc:	d1a4      	bne.n	8005b08 <HAL_RCC_OscConfig+0x20>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005bbe:	f7fd f8fd 	bl	8002dbc <HAL_GetTick>
 8005bc2:	9b01      	ldr	r3, [sp, #4]
 8005bc4:	1ac0      	subs	r0, r0, r3
 8005bc6:	2864      	cmp	r0, #100	; 0x64
 8005bc8:	d9f4      	bls.n	8005bb4 <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
 8005bca:	2003      	movs	r0, #3
}
 8005bcc:	b007      	add	sp, #28
 8005bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bd0:	21a0      	movs	r1, #160	; 0xa0
 8005bd2:	02c9      	lsls	r1, r1, #11
 8005bd4:	428a      	cmp	r2, r1
 8005bd6:	d105      	bne.n	8005be4 <HAL_RCC_OscConfig+0xfc>
 8005bd8:	2280      	movs	r2, #128	; 0x80
 8005bda:	6821      	ldr	r1, [r4, #0]
 8005bdc:	02d2      	lsls	r2, r2, #11
 8005bde:	430a      	orrs	r2, r1
 8005be0:	6022      	str	r2, [r4, #0]
 8005be2:	e7e1      	b.n	8005ba8 <HAL_RCC_OscConfig+0xc0>
 8005be4:	6821      	ldr	r1, [r4, #0]
 8005be6:	4886      	ldr	r0, [pc, #536]	; (8005e00 <HAL_RCC_OscConfig+0x318>)
 8005be8:	4001      	ands	r1, r0
 8005bea:	6021      	str	r1, [r4, #0]
 8005bec:	6821      	ldr	r1, [r4, #0]
 8005bee:	400b      	ands	r3, r1
 8005bf0:	9305      	str	r3, [sp, #20]
 8005bf2:	9b05      	ldr	r3, [sp, #20]
 8005bf4:	4983      	ldr	r1, [pc, #524]	; (8005e04 <HAL_RCC_OscConfig+0x31c>)
 8005bf6:	6823      	ldr	r3, [r4, #0]
 8005bf8:	400b      	ands	r3, r1
 8005bfa:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005bfc:	2a00      	cmp	r2, #0
 8005bfe:	d1d6      	bne.n	8005bae <HAL_RCC_OscConfig+0xc6>
        tickstart = HAL_GetTick();
 8005c00:	f7fd f8dc 	bl	8002dbc <HAL_GetTick>
 8005c04:	9001      	str	r0, [sp, #4]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005c06:	2280      	movs	r2, #128	; 0x80
 8005c08:	6823      	ldr	r3, [r4, #0]
 8005c0a:	0292      	lsls	r2, r2, #10
 8005c0c:	4213      	tst	r3, r2
 8005c0e:	d100      	bne.n	8005c12 <HAL_RCC_OscConfig+0x12a>
 8005c10:	e77a      	b.n	8005b08 <HAL_RCC_OscConfig+0x20>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c12:	f7fd f8d3 	bl	8002dbc <HAL_GetTick>
 8005c16:	9b01      	ldr	r3, [sp, #4]
 8005c18:	1ac0      	subs	r0, r0, r3
 8005c1a:	2864      	cmp	r0, #100	; 0x64
 8005c1c:	d9f3      	bls.n	8005c06 <HAL_RCC_OscConfig+0x11e>
 8005c1e:	e7d4      	b.n	8005bca <HAL_RCC_OscConfig+0xe2>
    hsi_state = RCC_OscInitStruct->HSIState;
 8005c20:	68ea      	ldr	r2, [r5, #12]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005c22:	2e04      	cmp	r6, #4
 8005c24:	d003      	beq.n	8005c2e <HAL_RCC_OscConfig+0x146>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005c26:	2e0c      	cmp	r6, #12
 8005c28:	d124      	bne.n	8005c74 <HAL_RCC_OscConfig+0x18c>
 8005c2a:	2f00      	cmp	r7, #0
 8005c2c:	d122      	bne.n	8005c74 <HAL_RCC_OscConfig+0x18c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8005c2e:	6823      	ldr	r3, [r4, #0]
 8005c30:	075b      	lsls	r3, r3, #29
 8005c32:	d501      	bpl.n	8005c38 <HAL_RCC_OscConfig+0x150>
 8005c34:	2a00      	cmp	r2, #0
 8005c36:	d0b2      	beq.n	8005b9e <HAL_RCC_OscConfig+0xb6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c38:	6861      	ldr	r1, [r4, #4]
 8005c3a:	692b      	ldr	r3, [r5, #16]
 8005c3c:	4872      	ldr	r0, [pc, #456]	; (8005e08 <HAL_RCC_OscConfig+0x320>)
 8005c3e:	021b      	lsls	r3, r3, #8
 8005c40:	4001      	ands	r1, r0
 8005c42:	430b      	orrs	r3, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005c44:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c46:	6063      	str	r3, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005c48:	6823      	ldr	r3, [r4, #0]
 8005c4a:	438b      	bics	r3, r1
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005c50:	f7ff ff02 	bl	8005a58 <HAL_RCC_GetSysClockFreq>
 8005c54:	68e3      	ldr	r3, [r4, #12]
 8005c56:	4a67      	ldr	r2, [pc, #412]	; (8005df4 <HAL_RCC_OscConfig+0x30c>)
 8005c58:	061b      	lsls	r3, r3, #24
 8005c5a:	0f1b      	lsrs	r3, r3, #28
 8005c5c:	5cd3      	ldrb	r3, [r2, r3]
 8005c5e:	40d8      	lsrs	r0, r3
 8005c60:	4b65      	ldr	r3, [pc, #404]	; (8005df8 <HAL_RCC_OscConfig+0x310>)
 8005c62:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (uwTickPrio);
 8005c64:	4b65      	ldr	r3, [pc, #404]	; (8005dfc <HAL_RCC_OscConfig+0x314>)
 8005c66:	6818      	ldr	r0, [r3, #0]
 8005c68:	f7fd f8a6 	bl	8002db8 <HAL_InitTick>
      if(status != HAL_OK)
 8005c6c:	2800      	cmp	r0, #0
 8005c6e:	d100      	bne.n	8005c72 <HAL_RCC_OscConfig+0x18a>
 8005c70:	e74e      	b.n	8005b10 <HAL_RCC_OscConfig+0x28>
 8005c72:	e7ab      	b.n	8005bcc <HAL_RCC_OscConfig+0xe4>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005c74:	6823      	ldr	r3, [r4, #0]
      if(hsi_state != RCC_HSI_OFF)
 8005c76:	2a00      	cmp	r2, #0
 8005c78:	d018      	beq.n	8005cac <HAL_RCC_OscConfig+0x1c4>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005c7a:	2109      	movs	r1, #9
 8005c7c:	438b      	bics	r3, r1
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005c82:	f7fd f89b 	bl	8002dbc <HAL_GetTick>
 8005c86:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c88:	2204      	movs	r2, #4
 8005c8a:	6823      	ldr	r3, [r4, #0]
 8005c8c:	4213      	tst	r3, r2
 8005c8e:	d007      	beq.n	8005ca0 <HAL_RCC_OscConfig+0x1b8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c90:	6862      	ldr	r2, [r4, #4]
 8005c92:	692b      	ldr	r3, [r5, #16]
 8005c94:	495c      	ldr	r1, [pc, #368]	; (8005e08 <HAL_RCC_OscConfig+0x320>)
 8005c96:	021b      	lsls	r3, r3, #8
 8005c98:	400a      	ands	r2, r1
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	6063      	str	r3, [r4, #4]
 8005c9e:	e737      	b.n	8005b10 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005ca0:	f7fd f88c 	bl	8002dbc <HAL_GetTick>
 8005ca4:	1bc0      	subs	r0, r0, r7
 8005ca6:	2802      	cmp	r0, #2
 8005ca8:	d9ee      	bls.n	8005c88 <HAL_RCC_OscConfig+0x1a0>
 8005caa:	e78e      	b.n	8005bca <HAL_RCC_OscConfig+0xe2>
        __HAL_RCC_HSI_DISABLE();
 8005cac:	2201      	movs	r2, #1
 8005cae:	4393      	bics	r3, r2
 8005cb0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005cb2:	f7fd f883 	bl	8002dbc <HAL_GetTick>
 8005cb6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005cb8:	2204      	movs	r2, #4
 8005cba:	6823      	ldr	r3, [r4, #0]
 8005cbc:	4213      	tst	r3, r2
 8005cbe:	d100      	bne.n	8005cc2 <HAL_RCC_OscConfig+0x1da>
 8005cc0:	e726      	b.n	8005b10 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005cc2:	f7fd f87b 	bl	8002dbc <HAL_GetTick>
 8005cc6:	1bc0      	subs	r0, r0, r7
 8005cc8:	2802      	cmp	r0, #2
 8005cca:	d9f5      	bls.n	8005cb8 <HAL_RCC_OscConfig+0x1d0>
 8005ccc:	e77d      	b.n	8005bca <HAL_RCC_OscConfig+0xe2>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005cce:	69ab      	ldr	r3, [r5, #24]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d020      	beq.n	8005d16 <HAL_RCC_OscConfig+0x22e>
        __HAL_RCC_MSI_ENABLE();
 8005cd4:	2380      	movs	r3, #128	; 0x80
 8005cd6:	6822      	ldr	r2, [r4, #0]
 8005cd8:	005b      	lsls	r3, r3, #1
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005cde:	f7fd f86d 	bl	8002dbc <HAL_GetTick>
 8005ce2:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005ce4:	2280      	movs	r2, #128	; 0x80
 8005ce6:	6823      	ldr	r3, [r4, #0]
 8005ce8:	0092      	lsls	r2, r2, #2
 8005cea:	4213      	tst	r3, r2
 8005cec:	d00d      	beq.n	8005d0a <HAL_RCC_OscConfig+0x222>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005cee:	6863      	ldr	r3, [r4, #4]
 8005cf0:	4a3f      	ldr	r2, [pc, #252]	; (8005df0 <HAL_RCC_OscConfig+0x308>)
 8005cf2:	4013      	ands	r3, r2
 8005cf4:	6a2a      	ldr	r2, [r5, #32]
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005cfa:	6862      	ldr	r2, [r4, #4]
 8005cfc:	69eb      	ldr	r3, [r5, #28]
 8005cfe:	0212      	lsls	r2, r2, #8
 8005d00:	061b      	lsls	r3, r3, #24
 8005d02:	0a12      	lsrs	r2, r2, #8
 8005d04:	4313      	orrs	r3, r2
 8005d06:	6063      	str	r3, [r4, #4]
 8005d08:	e72f      	b.n	8005b6a <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005d0a:	f7fd f857 	bl	8002dbc <HAL_GetTick>
 8005d0e:	1bc0      	subs	r0, r0, r7
 8005d10:	2802      	cmp	r0, #2
 8005d12:	d9e7      	bls.n	8005ce4 <HAL_RCC_OscConfig+0x1fc>
 8005d14:	e759      	b.n	8005bca <HAL_RCC_OscConfig+0xe2>
        __HAL_RCC_MSI_DISABLE();
 8005d16:	6823      	ldr	r3, [r4, #0]
 8005d18:	4a3c      	ldr	r2, [pc, #240]	; (8005e0c <HAL_RCC_OscConfig+0x324>)
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005d1e:	f7fd f84d 	bl	8002dbc <HAL_GetTick>
 8005d22:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005d24:	2280      	movs	r2, #128	; 0x80
 8005d26:	6823      	ldr	r3, [r4, #0]
 8005d28:	0092      	lsls	r2, r2, #2
 8005d2a:	4213      	tst	r3, r2
 8005d2c:	d100      	bne.n	8005d30 <HAL_RCC_OscConfig+0x248>
 8005d2e:	e71c      	b.n	8005b6a <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005d30:	f7fd f844 	bl	8002dbc <HAL_GetTick>
 8005d34:	1bc0      	subs	r0, r0, r7
 8005d36:	2802      	cmp	r0, #2
 8005d38:	d9f4      	bls.n	8005d24 <HAL_RCC_OscConfig+0x23c>
 8005d3a:	e746      	b.n	8005bca <HAL_RCC_OscConfig+0xe2>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005d3c:	696a      	ldr	r2, [r5, #20]
 8005d3e:	2301      	movs	r3, #1
 8005d40:	2a00      	cmp	r2, #0
 8005d42:	d010      	beq.n	8005d66 <HAL_RCC_OscConfig+0x27e>
      __HAL_RCC_LSI_ENABLE();
 8005d44:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8005d46:	4313      	orrs	r3, r2
 8005d48:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8005d4a:	f7fd f837 	bl	8002dbc <HAL_GetTick>
 8005d4e:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005d50:	2202      	movs	r2, #2
 8005d52:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005d54:	4213      	tst	r3, r2
 8005d56:	d000      	beq.n	8005d5a <HAL_RCC_OscConfig+0x272>
 8005d58:	e70b      	b.n	8005b72 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d5a:	f7fd f82f 	bl	8002dbc <HAL_GetTick>
 8005d5e:	1bc0      	subs	r0, r0, r7
 8005d60:	2802      	cmp	r0, #2
 8005d62:	d9f5      	bls.n	8005d50 <HAL_RCC_OscConfig+0x268>
 8005d64:	e731      	b.n	8005bca <HAL_RCC_OscConfig+0xe2>
      __HAL_RCC_LSI_DISABLE();
 8005d66:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8005d68:	439a      	bics	r2, r3
 8005d6a:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8005d6c:	f7fd f826 	bl	8002dbc <HAL_GetTick>
 8005d70:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005d72:	2202      	movs	r2, #2
 8005d74:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005d76:	4213      	tst	r3, r2
 8005d78:	d100      	bne.n	8005d7c <HAL_RCC_OscConfig+0x294>
 8005d7a:	e6fa      	b.n	8005b72 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d7c:	f7fd f81e 	bl	8002dbc <HAL_GetTick>
 8005d80:	1bc0      	subs	r0, r0, r7
 8005d82:	2802      	cmp	r0, #2
 8005d84:	d9f5      	bls.n	8005d72 <HAL_RCC_OscConfig+0x28a>
 8005d86:	e720      	b.n	8005bca <HAL_RCC_OscConfig+0xe2>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d88:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8005d8a:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d8c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005d8e:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8005d90:	9101      	str	r1, [sp, #4]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d92:	421a      	tst	r2, r3
 8005d94:	d104      	bne.n	8005da0 <HAL_RCC_OscConfig+0x2b8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d96:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	9301      	str	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005da0:	2280      	movs	r2, #128	; 0x80
 8005da2:	4f1b      	ldr	r7, [pc, #108]	; (8005e10 <HAL_RCC_OscConfig+0x328>)
 8005da4:	0052      	lsls	r2, r2, #1
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	4213      	tst	r3, r2
 8005daa:	d008      	beq.n	8005dbe <HAL_RCC_OscConfig+0x2d6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005dac:	2280      	movs	r2, #128	; 0x80
 8005dae:	68ab      	ldr	r3, [r5, #8]
 8005db0:	0052      	lsls	r2, r2, #1
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d12e      	bne.n	8005e14 <HAL_RCC_OscConfig+0x32c>
 8005db6:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8005db8:	4313      	orrs	r3, r2
 8005dba:	6523      	str	r3, [r4, #80]	; 0x50
 8005dbc:	e04f      	b.n	8005e5e <HAL_RCC_OscConfig+0x376>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005dbe:	2280      	movs	r2, #128	; 0x80
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	0052      	lsls	r2, r2, #1
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8005dc8:	f7fc fff8 	bl	8002dbc <HAL_GetTick>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dcc:	2380      	movs	r3, #128	; 0x80
 8005dce:	005b      	lsls	r3, r3, #1
      tickstart = HAL_GetTick();
 8005dd0:	9002      	str	r0, [sp, #8]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005dd2:	9303      	str	r3, [sp, #12]
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	9a03      	ldr	r2, [sp, #12]
 8005dd8:	4213      	tst	r3, r2
 8005dda:	d1e7      	bne.n	8005dac <HAL_RCC_OscConfig+0x2c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ddc:	f7fc ffee 	bl	8002dbc <HAL_GetTick>
 8005de0:	9b02      	ldr	r3, [sp, #8]
 8005de2:	1ac0      	subs	r0, r0, r3
 8005de4:	2864      	cmp	r0, #100	; 0x64
 8005de6:	d9f5      	bls.n	8005dd4 <HAL_RCC_OscConfig+0x2ec>
 8005de8:	e6ef      	b.n	8005bca <HAL_RCC_OscConfig+0xe2>
 8005dea:	46c0      	nop			; (mov r8, r8)
 8005dec:	40021000 	.word	0x40021000
 8005df0:	ffff1fff 	.word	0xffff1fff
 8005df4:	0800f460 	.word	0x0800f460
 8005df8:	2000004c 	.word	0x2000004c
 8005dfc:	20000054 	.word	0x20000054
 8005e00:	fffeffff 	.word	0xfffeffff
 8005e04:	fffbffff 	.word	0xfffbffff
 8005e08:	ffffe0ff 	.word	0xffffe0ff
 8005e0c:	fffffeff 	.word	0xfffffeff
 8005e10:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d116      	bne.n	8005e46 <HAL_RCC_OscConfig+0x35e>
 8005e18:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005e1a:	4a51      	ldr	r2, [pc, #324]	; (8005f60 <HAL_RCC_OscConfig+0x478>)
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	6523      	str	r3, [r4, #80]	; 0x50
 8005e20:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005e22:	4a50      	ldr	r2, [pc, #320]	; (8005f64 <HAL_RCC_OscConfig+0x47c>)
 8005e24:	4013      	ands	r3, r2
 8005e26:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8005e28:	f7fc ffc8 	bl	8002dbc <HAL_GetTick>
 8005e2c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005e2e:	2280      	movs	r2, #128	; 0x80
 8005e30:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005e32:	0092      	lsls	r2, r2, #2
 8005e34:	4213      	tst	r3, r2
 8005e36:	d01a      	beq.n	8005e6e <HAL_RCC_OscConfig+0x386>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e38:	f7fc ffc0 	bl	8002dbc <HAL_GetTick>
 8005e3c:	4b4a      	ldr	r3, [pc, #296]	; (8005f68 <HAL_RCC_OscConfig+0x480>)
 8005e3e:	1bc0      	subs	r0, r0, r7
 8005e40:	4298      	cmp	r0, r3
 8005e42:	d9f4      	bls.n	8005e2e <HAL_RCC_OscConfig+0x346>
 8005e44:	e6c1      	b.n	8005bca <HAL_RCC_OscConfig+0xe2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e46:	21a0      	movs	r1, #160	; 0xa0
 8005e48:	00c9      	lsls	r1, r1, #3
 8005e4a:	428b      	cmp	r3, r1
 8005e4c:	d118      	bne.n	8005e80 <HAL_RCC_OscConfig+0x398>
 8005e4e:	2380      	movs	r3, #128	; 0x80
 8005e50:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8005e52:	00db      	lsls	r3, r3, #3
 8005e54:	430b      	orrs	r3, r1
 8005e56:	6523      	str	r3, [r4, #80]	; 0x50
 8005e58:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005e5a:	431a      	orrs	r2, r3
 8005e5c:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8005e5e:	f7fc ffad 	bl	8002dbc <HAL_GetTick>
 8005e62:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e64:	2280      	movs	r2, #128	; 0x80
 8005e66:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005e68:	0092      	lsls	r2, r2, #2
 8005e6a:	4213      	tst	r3, r2
 8005e6c:	d010      	beq.n	8005e90 <HAL_RCC_OscConfig+0x3a8>
    if(pwrclkchanged == SET)
 8005e6e:	9b01      	ldr	r3, [sp, #4]
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d000      	beq.n	8005e76 <HAL_RCC_OscConfig+0x38e>
 8005e74:	e681      	b.n	8005b7a <HAL_RCC_OscConfig+0x92>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e76:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005e78:	4a3c      	ldr	r2, [pc, #240]	; (8005f6c <HAL_RCC_OscConfig+0x484>)
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	63a3      	str	r3, [r4, #56]	; 0x38
 8005e7e:	e67c      	b.n	8005b7a <HAL_RCC_OscConfig+0x92>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e80:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005e82:	4a37      	ldr	r2, [pc, #220]	; (8005f60 <HAL_RCC_OscConfig+0x478>)
 8005e84:	4013      	ands	r3, r2
 8005e86:	6523      	str	r3, [r4, #80]	; 0x50
 8005e88:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8005e8a:	4a36      	ldr	r2, [pc, #216]	; (8005f64 <HAL_RCC_OscConfig+0x47c>)
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	e794      	b.n	8005dba <HAL_RCC_OscConfig+0x2d2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e90:	f7fc ff94 	bl	8002dbc <HAL_GetTick>
 8005e94:	4b34      	ldr	r3, [pc, #208]	; (8005f68 <HAL_RCC_OscConfig+0x480>)
 8005e96:	1bc0      	subs	r0, r0, r7
 8005e98:	4298      	cmp	r0, r3
 8005e9a:	d9e3      	bls.n	8005e64 <HAL_RCC_OscConfig+0x37c>
 8005e9c:	e695      	b.n	8005bca <HAL_RCC_OscConfig+0xe2>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e9e:	2e0c      	cmp	r6, #12
 8005ea0:	d043      	beq.n	8005f2a <HAL_RCC_OscConfig+0x442>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ea2:	4a33      	ldr	r2, [pc, #204]	; (8005f70 <HAL_RCC_OscConfig+0x488>)
 8005ea4:	2b02      	cmp	r3, #2
 8005ea6:	d12e      	bne.n	8005f06 <HAL_RCC_OscConfig+0x41e>
        __HAL_RCC_PLL_DISABLE();
 8005ea8:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005eaa:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8005eac:	4013      	ands	r3, r2
 8005eae:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005eb0:	f7fc ff84 	bl	8002dbc <HAL_GetTick>
 8005eb4:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005eb6:	04bf      	lsls	r7, r7, #18
 8005eb8:	6823      	ldr	r3, [r4, #0]
 8005eba:	423b      	tst	r3, r7
 8005ebc:	d11d      	bne.n	8005efa <HAL_RCC_OscConfig+0x412>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ebe:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8005ec0:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8005ec2:	68e2      	ldr	r2, [r4, #12]
 8005ec4:	430b      	orrs	r3, r1
 8005ec6:	492b      	ldr	r1, [pc, #172]	; (8005f74 <HAL_RCC_OscConfig+0x48c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005ec8:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005eca:	400a      	ands	r2, r1
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	6b2a      	ldr	r2, [r5, #48]	; 0x30
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005ed0:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8005ed6:	2380      	movs	r3, #128	; 0x80
 8005ed8:	6822      	ldr	r2, [r4, #0]
 8005eda:	045b      	lsls	r3, r3, #17
 8005edc:	4313      	orrs	r3, r2
 8005ede:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005ee0:	f7fc ff6c 	bl	8002dbc <HAL_GetTick>
 8005ee4:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8005ee6:	6823      	ldr	r3, [r4, #0]
 8005ee8:	4233      	tst	r3, r6
 8005eea:	d000      	beq.n	8005eee <HAL_RCC_OscConfig+0x406>
 8005eec:	e649      	b.n	8005b82 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005eee:	f7fc ff65 	bl	8002dbc <HAL_GetTick>
 8005ef2:	1b40      	subs	r0, r0, r5
 8005ef4:	2802      	cmp	r0, #2
 8005ef6:	d9f6      	bls.n	8005ee6 <HAL_RCC_OscConfig+0x3fe>
 8005ef8:	e667      	b.n	8005bca <HAL_RCC_OscConfig+0xe2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005efa:	f7fc ff5f 	bl	8002dbc <HAL_GetTick>
 8005efe:	1b80      	subs	r0, r0, r6
 8005f00:	2802      	cmp	r0, #2
 8005f02:	d9d9      	bls.n	8005eb8 <HAL_RCC_OscConfig+0x3d0>
 8005f04:	e661      	b.n	8005bca <HAL_RCC_OscConfig+0xe2>
        __HAL_RCC_PLL_DISABLE();
 8005f06:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005f08:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8005f0a:	4013      	ands	r3, r2
 8005f0c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8005f0e:	f7fc ff55 	bl	8002dbc <HAL_GetTick>
 8005f12:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8005f14:	04b6      	lsls	r6, r6, #18
 8005f16:	6823      	ldr	r3, [r4, #0]
 8005f18:	4233      	tst	r3, r6
 8005f1a:	d100      	bne.n	8005f1e <HAL_RCC_OscConfig+0x436>
 8005f1c:	e631      	b.n	8005b82 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f1e:	f7fc ff4d 	bl	8002dbc <HAL_GetTick>
 8005f22:	1b40      	subs	r0, r0, r5
 8005f24:	2802      	cmp	r0, #2
 8005f26:	d9f6      	bls.n	8005f16 <HAL_RCC_OscConfig+0x42e>
 8005f28:	e64f      	b.n	8005bca <HAL_RCC_OscConfig+0xe2>
        return HAL_ERROR;
 8005f2a:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d100      	bne.n	8005f32 <HAL_RCC_OscConfig+0x44a>
 8005f30:	e64c      	b.n	8005bcc <HAL_RCC_OscConfig+0xe4>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f32:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 8005f34:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f36:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8005f38:	0252      	lsls	r2, r2, #9
 8005f3a:	401a      	ands	r2, r3
 8005f3c:	428a      	cmp	r2, r1
 8005f3e:	d000      	beq.n	8005f42 <HAL_RCC_OscConfig+0x45a>
 8005f40:	e62d      	b.n	8005b9e <HAL_RCC_OscConfig+0xb6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005f42:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f44:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005f46:	0392      	lsls	r2, r2, #14
 8005f48:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f4a:	428a      	cmp	r2, r1
 8005f4c:	d000      	beq.n	8005f50 <HAL_RCC_OscConfig+0x468>
 8005f4e:	e626      	b.n	8005b9e <HAL_RCC_OscConfig+0xb6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8005f50:	22c0      	movs	r2, #192	; 0xc0
 8005f52:	0412      	lsls	r2, r2, #16
 8005f54:	4013      	ands	r3, r2
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8005f56:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d100      	bne.n	8005f5e <HAL_RCC_OscConfig+0x476>
 8005f5c:	e611      	b.n	8005b82 <HAL_RCC_OscConfig+0x9a>
 8005f5e:	e61e      	b.n	8005b9e <HAL_RCC_OscConfig+0xb6>
 8005f60:	fffffeff 	.word	0xfffffeff
 8005f64:	fffffbff 	.word	0xfffffbff
 8005f68:	00001388 	.word	0x00001388
 8005f6c:	efffffff 	.word	0xefffffff
 8005f70:	feffffff 	.word	0xfeffffff
 8005f74:	ff02ffff 	.word	0xff02ffff

08005f78 <HAL_RCC_ClockConfig>:
{
 8005f78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f7a:	1e04      	subs	r4, r0, #0
 8005f7c:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 8005f7e:	d101      	bne.n	8005f84 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8005f80:	2001      	movs	r0, #1
}
 8005f82:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f84:	2601      	movs	r6, #1
 8005f86:	4d5b      	ldr	r5, [pc, #364]	; (80060f4 <HAL_RCC_ClockConfig+0x17c>)
 8005f88:	9a01      	ldr	r2, [sp, #4]
 8005f8a:	682b      	ldr	r3, [r5, #0]
 8005f8c:	4033      	ands	r3, r6
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d331      	bcc.n	8005ff6 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f92:	6822      	ldr	r2, [r4, #0]
 8005f94:	0793      	lsls	r3, r2, #30
 8005f96:	d443      	bmi.n	8006020 <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f98:	07d3      	lsls	r3, r2, #31
 8005f9a:	d449      	bmi.n	8006030 <HAL_RCC_ClockConfig+0xb8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005f9c:	2601      	movs	r6, #1
 8005f9e:	682b      	ldr	r3, [r5, #0]
 8005fa0:	9a01      	ldr	r2, [sp, #4]
 8005fa2:	4033      	ands	r3, r6
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d909      	bls.n	8005fbc <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fa8:	682b      	ldr	r3, [r5, #0]
 8005faa:	43b3      	bics	r3, r6
 8005fac:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8005fae:	f7fc ff05 	bl	8002dbc <HAL_GetTick>
 8005fb2:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fb4:	682b      	ldr	r3, [r5, #0]
 8005fb6:	4233      	tst	r3, r6
 8005fb8:	d000      	beq.n	8005fbc <HAL_RCC_ClockConfig+0x44>
 8005fba:	e08c      	b.n	80060d6 <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fbc:	6822      	ldr	r2, [r4, #0]
 8005fbe:	4d4e      	ldr	r5, [pc, #312]	; (80060f8 <HAL_RCC_ClockConfig+0x180>)
 8005fc0:	0753      	lsls	r3, r2, #29
 8005fc2:	d500      	bpl.n	8005fc6 <HAL_RCC_ClockConfig+0x4e>
 8005fc4:	e08f      	b.n	80060e6 <HAL_RCC_ClockConfig+0x16e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fc6:	0713      	lsls	r3, r2, #28
 8005fc8:	d506      	bpl.n	8005fd8 <HAL_RCC_ClockConfig+0x60>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005fca:	68ea      	ldr	r2, [r5, #12]
 8005fcc:	6923      	ldr	r3, [r4, #16]
 8005fce:	494b      	ldr	r1, [pc, #300]	; (80060fc <HAL_RCC_ClockConfig+0x184>)
 8005fd0:	00db      	lsls	r3, r3, #3
 8005fd2:	400a      	ands	r2, r1
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005fd8:	f7ff fd3e 	bl	8005a58 <HAL_RCC_GetSysClockFreq>
 8005fdc:	68eb      	ldr	r3, [r5, #12]
 8005fde:	4a48      	ldr	r2, [pc, #288]	; (8006100 <HAL_RCC_ClockConfig+0x188>)
 8005fe0:	061b      	lsls	r3, r3, #24
 8005fe2:	0f1b      	lsrs	r3, r3, #28
 8005fe4:	5cd3      	ldrb	r3, [r2, r3]
 8005fe6:	40d8      	lsrs	r0, r3
 8005fe8:	4b46      	ldr	r3, [pc, #280]	; (8006104 <HAL_RCC_ClockConfig+0x18c>)
 8005fea:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8005fec:	4b46      	ldr	r3, [pc, #280]	; (8006108 <HAL_RCC_ClockConfig+0x190>)
 8005fee:	6818      	ldr	r0, [r3, #0]
 8005ff0:	f7fc fee2 	bl	8002db8 <HAL_InitTick>
  if(status != HAL_OK)
 8005ff4:	e7c5      	b.n	8005f82 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ff6:	682b      	ldr	r3, [r5, #0]
 8005ff8:	9a01      	ldr	r2, [sp, #4]
 8005ffa:	43b3      	bics	r3, r6
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8006000:	f7fc fedc 	bl	8002dbc <HAL_GetTick>
 8006004:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006006:	682b      	ldr	r3, [r5, #0]
 8006008:	9a01      	ldr	r2, [sp, #4]
 800600a:	4033      	ands	r3, r6
 800600c:	4293      	cmp	r3, r2
 800600e:	d0c0      	beq.n	8005f92 <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006010:	f7fc fed4 	bl	8002dbc <HAL_GetTick>
 8006014:	4b3d      	ldr	r3, [pc, #244]	; (800610c <HAL_RCC_ClockConfig+0x194>)
 8006016:	1bc0      	subs	r0, r0, r7
 8006018:	4298      	cmp	r0, r3
 800601a:	d9f4      	bls.n	8006006 <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 800601c:	2003      	movs	r0, #3
 800601e:	e7b0      	b.n	8005f82 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006020:	20f0      	movs	r0, #240	; 0xf0
 8006022:	4935      	ldr	r1, [pc, #212]	; (80060f8 <HAL_RCC_ClockConfig+0x180>)
 8006024:	68cb      	ldr	r3, [r1, #12]
 8006026:	4383      	bics	r3, r0
 8006028:	68a0      	ldr	r0, [r4, #8]
 800602a:	4303      	orrs	r3, r0
 800602c:	60cb      	str	r3, [r1, #12]
 800602e:	e7b3      	b.n	8005f98 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006030:	4e31      	ldr	r6, [pc, #196]	; (80060f8 <HAL_RCC_ClockConfig+0x180>)
 8006032:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006034:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006036:	2a02      	cmp	r2, #2
 8006038:	d118      	bne.n	800606c <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800603a:	039b      	lsls	r3, r3, #14
 800603c:	d5a0      	bpl.n	8005f80 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800603e:	2103      	movs	r1, #3
 8006040:	68f3      	ldr	r3, [r6, #12]
 8006042:	438b      	bics	r3, r1
 8006044:	4313      	orrs	r3, r2
 8006046:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8006048:	f7fc feb8 	bl	8002dbc <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800604c:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 800604e:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006050:	2b02      	cmp	r3, #2
 8006052:	d118      	bne.n	8006086 <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006054:	220c      	movs	r2, #12
 8006056:	68f3      	ldr	r3, [r6, #12]
 8006058:	4013      	ands	r3, r2
 800605a:	2b08      	cmp	r3, #8
 800605c:	d09e      	beq.n	8005f9c <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800605e:	f7fc fead 	bl	8002dbc <HAL_GetTick>
 8006062:	4b2a      	ldr	r3, [pc, #168]	; (800610c <HAL_RCC_ClockConfig+0x194>)
 8006064:	1bc0      	subs	r0, r0, r7
 8006066:	4298      	cmp	r0, r3
 8006068:	d9f4      	bls.n	8006054 <HAL_RCC_ClockConfig+0xdc>
 800606a:	e7d7      	b.n	800601c <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800606c:	2a03      	cmp	r2, #3
 800606e:	d102      	bne.n	8006076 <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006070:	019b      	lsls	r3, r3, #6
 8006072:	d4e4      	bmi.n	800603e <HAL_RCC_ClockConfig+0xc6>
 8006074:	e784      	b.n	8005f80 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006076:	2a01      	cmp	r2, #1
 8006078:	d102      	bne.n	8006080 <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800607a:	075b      	lsls	r3, r3, #29
 800607c:	d4df      	bmi.n	800603e <HAL_RCC_ClockConfig+0xc6>
 800607e:	e77f      	b.n	8005f80 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006080:	059b      	lsls	r3, r3, #22
 8006082:	d4dc      	bmi.n	800603e <HAL_RCC_ClockConfig+0xc6>
 8006084:	e77c      	b.n	8005f80 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006086:	2b03      	cmp	r3, #3
 8006088:	d10b      	bne.n	80060a2 <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800608a:	220c      	movs	r2, #12
 800608c:	68f3      	ldr	r3, [r6, #12]
 800608e:	4013      	ands	r3, r2
 8006090:	4293      	cmp	r3, r2
 8006092:	d083      	beq.n	8005f9c <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006094:	f7fc fe92 	bl	8002dbc <HAL_GetTick>
 8006098:	4b1c      	ldr	r3, [pc, #112]	; (800610c <HAL_RCC_ClockConfig+0x194>)
 800609a:	1bc0      	subs	r0, r0, r7
 800609c:	4298      	cmp	r0, r3
 800609e:	d9f4      	bls.n	800608a <HAL_RCC_ClockConfig+0x112>
 80060a0:	e7bc      	b.n	800601c <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d011      	beq.n	80060ca <HAL_RCC_ClockConfig+0x152>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80060a6:	220c      	movs	r2, #12
 80060a8:	68f3      	ldr	r3, [r6, #12]
 80060aa:	4213      	tst	r3, r2
 80060ac:	d100      	bne.n	80060b0 <HAL_RCC_ClockConfig+0x138>
 80060ae:	e775      	b.n	8005f9c <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060b0:	f7fc fe84 	bl	8002dbc <HAL_GetTick>
 80060b4:	4b15      	ldr	r3, [pc, #84]	; (800610c <HAL_RCC_ClockConfig+0x194>)
 80060b6:	1bc0      	subs	r0, r0, r7
 80060b8:	4298      	cmp	r0, r3
 80060ba:	d9f4      	bls.n	80060a6 <HAL_RCC_ClockConfig+0x12e>
 80060bc:	e7ae      	b.n	800601c <HAL_RCC_ClockConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060be:	f7fc fe7d 	bl	8002dbc <HAL_GetTick>
 80060c2:	4b12      	ldr	r3, [pc, #72]	; (800610c <HAL_RCC_ClockConfig+0x194>)
 80060c4:	1bc0      	subs	r0, r0, r7
 80060c6:	4298      	cmp	r0, r3
 80060c8:	d8a8      	bhi.n	800601c <HAL_RCC_ClockConfig+0xa4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80060ca:	220c      	movs	r2, #12
 80060cc:	68f3      	ldr	r3, [r6, #12]
 80060ce:	4013      	ands	r3, r2
 80060d0:	2b04      	cmp	r3, #4
 80060d2:	d1f4      	bne.n	80060be <HAL_RCC_ClockConfig+0x146>
 80060d4:	e762      	b.n	8005f9c <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060d6:	f7fc fe71 	bl	8002dbc <HAL_GetTick>
 80060da:	4b0c      	ldr	r3, [pc, #48]	; (800610c <HAL_RCC_ClockConfig+0x194>)
 80060dc:	1bc0      	subs	r0, r0, r7
 80060de:	4298      	cmp	r0, r3
 80060e0:	d800      	bhi.n	80060e4 <HAL_RCC_ClockConfig+0x16c>
 80060e2:	e767      	b.n	8005fb4 <HAL_RCC_ClockConfig+0x3c>
 80060e4:	e79a      	b.n	800601c <HAL_RCC_ClockConfig+0xa4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80060e6:	68eb      	ldr	r3, [r5, #12]
 80060e8:	4909      	ldr	r1, [pc, #36]	; (8006110 <HAL_RCC_ClockConfig+0x198>)
 80060ea:	400b      	ands	r3, r1
 80060ec:	68e1      	ldr	r1, [r4, #12]
 80060ee:	430b      	orrs	r3, r1
 80060f0:	60eb      	str	r3, [r5, #12]
 80060f2:	e768      	b.n	8005fc6 <HAL_RCC_ClockConfig+0x4e>
 80060f4:	40022000 	.word	0x40022000
 80060f8:	40021000 	.word	0x40021000
 80060fc:	ffffc7ff 	.word	0xffffc7ff
 8006100:	0800f460 	.word	0x0800f460
 8006104:	2000004c 	.word	0x2000004c
 8006108:	20000054 	.word	0x20000054
 800610c:	00001388 	.word	0x00001388
 8006110:	fffff8ff 	.word	0xfffff8ff

08006114 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006114:	4b04      	ldr	r3, [pc, #16]	; (8006128 <HAL_RCC_GetPCLK1Freq+0x14>)
 8006116:	4a05      	ldr	r2, [pc, #20]	; (800612c <HAL_RCC_GetPCLK1Freq+0x18>)
 8006118:	68db      	ldr	r3, [r3, #12]
 800611a:	055b      	lsls	r3, r3, #21
 800611c:	0f5b      	lsrs	r3, r3, #29
 800611e:	5cd3      	ldrb	r3, [r2, r3]
 8006120:	4a03      	ldr	r2, [pc, #12]	; (8006130 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8006122:	6810      	ldr	r0, [r2, #0]
 8006124:	40d8      	lsrs	r0, r3
}
 8006126:	4770      	bx	lr
 8006128:	40021000 	.word	0x40021000
 800612c:	0800f470 	.word	0x0800f470
 8006130:	2000004c 	.word	0x2000004c

08006134 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006134:	4b04      	ldr	r3, [pc, #16]	; (8006148 <HAL_RCC_GetPCLK2Freq+0x14>)
 8006136:	4a05      	ldr	r2, [pc, #20]	; (800614c <HAL_RCC_GetPCLK2Freq+0x18>)
 8006138:	68db      	ldr	r3, [r3, #12]
 800613a:	049b      	lsls	r3, r3, #18
 800613c:	0f5b      	lsrs	r3, r3, #29
 800613e:	5cd3      	ldrb	r3, [r2, r3]
 8006140:	4a03      	ldr	r2, [pc, #12]	; (8006150 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8006142:	6810      	ldr	r0, [r2, #0]
 8006144:	40d8      	lsrs	r0, r3
}
 8006146:	4770      	bx	lr
 8006148:	40021000 	.word	0x40021000
 800614c:	0800f470 	.word	0x0800f470
 8006150:	2000004c 	.word	0x2000004c

08006154 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006154:	6803      	ldr	r3, [r0, #0]
{
 8006156:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006158:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800615a:	069b      	lsls	r3, r3, #26
 800615c:	d53d      	bpl.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x86>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800615e:	2380      	movs	r3, #128	; 0x80
  FlagStatus       pwrclkchanged = RESET;
 8006160:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006162:	4c54      	ldr	r4, [pc, #336]	; (80062b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006164:	055b      	lsls	r3, r3, #21
 8006166:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  FlagStatus       pwrclkchanged = RESET;
 8006168:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800616a:	421a      	tst	r2, r3
 800616c:	d104      	bne.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800616e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006170:	4313      	orrs	r3, r2
 8006172:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8006174:	2301      	movs	r3, #1
 8006176:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006178:	2780      	movs	r7, #128	; 0x80
 800617a:	4e4f      	ldr	r6, [pc, #316]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800617c:	007f      	lsls	r7, r7, #1
 800617e:	6833      	ldr	r3, [r6, #0]
 8006180:	423b      	tst	r3, r7
 8006182:	d05a      	beq.n	800623a <HAL_RCCEx_PeriphCLKConfig+0xe6>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8006184:	686b      	ldr	r3, [r5, #4]
 8006186:	22c0      	movs	r2, #192	; 0xc0
 8006188:	20c0      	movs	r0, #192	; 0xc0
 800618a:	001e      	movs	r6, r3
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800618c:	6821      	ldr	r1, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800618e:	0292      	lsls	r2, r2, #10
 8006190:	0380      	lsls	r0, r0, #14
 8006192:	0017      	movs	r7, r2
 8006194:	4016      	ands	r6, r2
 8006196:	4003      	ands	r3, r0
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8006198:	4001      	ands	r1, r0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800619a:	428b      	cmp	r3, r1
 800619c:	d15e      	bne.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x108>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800619e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80061a0:	001a      	movs	r2, r3
 80061a2:	403a      	ands	r2, r7

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80061a4:	423b      	tst	r3, r7
 80061a6:	d160      	bne.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x116>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80061a8:	6869      	ldr	r1, [r5, #4]
 80061aa:	23c0      	movs	r3, #192	; 0xc0
 80061ac:	000a      	movs	r2, r1
 80061ae:	029b      	lsls	r3, r3, #10
 80061b0:	401a      	ands	r2, r3
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d107      	bne.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80061b6:	6823      	ldr	r3, [r4, #0]
 80061b8:	4840      	ldr	r0, [pc, #256]	; (80062bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80061ba:	4003      	ands	r3, r0
 80061bc:	20c0      	movs	r0, #192	; 0xc0
 80061be:	0380      	lsls	r0, r0, #14
 80061c0:	4001      	ands	r1, r0
 80061c2:	430b      	orrs	r3, r1
 80061c4:	6023      	str	r3, [r4, #0]
 80061c6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80061c8:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80061ca:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80061cc:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d103      	bne.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80061d4:	4a3a      	ldr	r2, [pc, #232]	; (80062c0 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
 80061d6:	4013      	ands	r3, r2
 80061d8:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80061da:	682b      	ldr	r3, [r5, #0]
 80061dc:	07da      	lsls	r2, r3, #31
 80061de:	d506      	bpl.n	80061ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80061e0:	2003      	movs	r0, #3
 80061e2:	4934      	ldr	r1, [pc, #208]	; (80062b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061e4:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80061e6:	4382      	bics	r2, r0
 80061e8:	68a8      	ldr	r0, [r5, #8]
 80061ea:	4302      	orrs	r2, r0
 80061ec:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80061ee:	079a      	lsls	r2, r3, #30
 80061f0:	d506      	bpl.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80061f2:	200c      	movs	r0, #12
 80061f4:	492f      	ldr	r1, [pc, #188]	; (80062b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80061f6:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 80061f8:	4382      	bics	r2, r0
 80061fa:	68e8      	ldr	r0, [r5, #12]
 80061fc:	4302      	orrs	r2, r0
 80061fe:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006200:	075a      	lsls	r2, r3, #29
 8006202:	d506      	bpl.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0xbe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006204:	492b      	ldr	r1, [pc, #172]	; (80062b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006206:	482f      	ldr	r0, [pc, #188]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8006208:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800620a:	4002      	ands	r2, r0
 800620c:	6928      	ldr	r0, [r5, #16]
 800620e:	4302      	orrs	r2, r0
 8006210:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006212:	071a      	lsls	r2, r3, #28
 8006214:	d506      	bpl.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0xd0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006216:	4927      	ldr	r1, [pc, #156]	; (80062b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006218:	482b      	ldr	r0, [pc, #172]	; (80062c8 <HAL_RCCEx_PeriphCLKConfig+0x174>)
 800621a:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 800621c:	4002      	ands	r2, r0
 800621e:	6968      	ldr	r0, [r5, #20]
 8006220:	4302      	orrs	r2, r0
 8006222:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8006224:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006226:	061b      	lsls	r3, r3, #24
 8006228:	d517      	bpl.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x106>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800622a:	4a22      	ldr	r2, [pc, #136]	; (80062b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800622c:	4927      	ldr	r1, [pc, #156]	; (80062cc <HAL_RCCEx_PeriphCLKConfig+0x178>)
 800622e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8006230:	400b      	ands	r3, r1
 8006232:	69a9      	ldr	r1, [r5, #24]
 8006234:	430b      	orrs	r3, r1
 8006236:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006238:	e00f      	b.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x106>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800623a:	6833      	ldr	r3, [r6, #0]
 800623c:	433b      	orrs	r3, r7
 800623e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8006240:	f7fc fdbc 	bl	8002dbc <HAL_GetTick>
 8006244:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006246:	6833      	ldr	r3, [r6, #0]
 8006248:	423b      	tst	r3, r7
 800624a:	d19b      	bne.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800624c:	f7fc fdb6 	bl	8002dbc <HAL_GetTick>
 8006250:	9b01      	ldr	r3, [sp, #4]
 8006252:	1ac0      	subs	r0, r0, r3
 8006254:	2864      	cmp	r0, #100	; 0x64
 8006256:	d9f6      	bls.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0xf2>
          return HAL_TIMEOUT;
 8006258:	2003      	movs	r0, #3
}
 800625a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800625c:	4296      	cmp	r6, r2
 800625e:	d19e      	bne.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x4a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006260:	6823      	ldr	r3, [r4, #0]
          return HAL_ERROR;
 8006262:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006264:	039b      	lsls	r3, r3, #14
 8006266:	d59a      	bpl.n	800619e <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8006268:	e7f7      	b.n	800625a <HAL_RCCEx_PeriphCLKConfig+0x106>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800626a:	42b2      	cmp	r2, r6
 800626c:	d09c      	beq.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800626e:	682b      	ldr	r3, [r5, #0]
 8006270:	069b      	lsls	r3, r3, #26
 8006272:	d599      	bpl.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      __HAL_RCC_BACKUPRESET_FORCE();
 8006274:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8006276:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8006278:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800627a:	0312      	lsls	r2, r2, #12
 800627c:	4302      	orrs	r2, r0
 800627e:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006280:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8006282:	4b13      	ldr	r3, [pc, #76]	; (80062d0 <HAL_RCCEx_PeriphCLKConfig+0x17c>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006284:	4813      	ldr	r0, [pc, #76]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x180>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8006286:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006288:	4002      	ands	r2, r0
 800628a:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 800628c:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800628e:	05cb      	lsls	r3, r1, #23
 8006290:	d400      	bmi.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x140>
 8006292:	e789      	b.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x54>
        tickstart = HAL_GetTick();
 8006294:	f7fc fd92 	bl	8002dbc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006298:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 800629a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800629c:	00bf      	lsls	r7, r7, #2
 800629e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80062a0:	423b      	tst	r3, r7
 80062a2:	d000      	beq.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80062a4:	e780      	b.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x54>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062a6:	f7fc fd89 	bl	8002dbc <HAL_GetTick>
 80062aa:	4b0b      	ldr	r3, [pc, #44]	; (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80062ac:	1b80      	subs	r0, r0, r6
 80062ae:	4298      	cmp	r0, r3
 80062b0:	d9f5      	bls.n	800629e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80062b2:	e7d1      	b.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80062b4:	40021000 	.word	0x40021000
 80062b8:	40007000 	.word	0x40007000
 80062bc:	ffcfffff 	.word	0xffcfffff
 80062c0:	efffffff 	.word	0xefffffff
 80062c4:	fffff3ff 	.word	0xfffff3ff
 80062c8:	ffffcfff 	.word	0xffffcfff
 80062cc:	fff3ffff 	.word	0xfff3ffff
 80062d0:	fffcffff 	.word	0xfffcffff
 80062d4:	fff7ffff 	.word	0xfff7ffff
 80062d8:	00001388 	.word	0x00001388

080062dc <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80062dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80062de:	2502      	movs	r5, #2

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80062e0:	1c46      	adds	r6, r0, #1
 80062e2:	7ff3      	ldrb	r3, [r6, #31]
{
 80062e4:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 80062e6:	0028      	movs	r0, r5
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d025      	beq.n	8006338 <HAL_RTC_DeactivateAlarm+0x5c>
 80062ec:	2301      	movs	r3, #1

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80062ee:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 80062f0:	1967      	adds	r7, r4, r5
  __HAL_LOCK(hrtc);
 80062f2:	77f3      	strb	r3, [r6, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80062f4:	77fd      	strb	r5, [r7, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80062f6:	6823      	ldr	r3, [r4, #0]
 80062f8:	625a      	str	r2, [r3, #36]	; 0x24
 80062fa:	3a77      	subs	r2, #119	; 0x77
 80062fc:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 80062fe:	32ad      	adds	r2, #173	; 0xad
 8006300:	4291      	cmp	r1, r2
 8006302:	d12a      	bne.n	800635a <HAL_RTC_DeactivateAlarm+0x7e>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006304:	689a      	ldr	r2, [r3, #8]
 8006306:	4922      	ldr	r1, [pc, #136]	; (8006390 <HAL_RTC_DeactivateAlarm+0xb4>)
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);

    tickstart = HAL_GetTick();

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006308:	3d01      	subs	r5, #1
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800630a:	400a      	ands	r2, r1
 800630c:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800630e:	689a      	ldr	r2, [r3, #8]
 8006310:	4920      	ldr	r1, [pc, #128]	; (8006394 <HAL_RTC_DeactivateAlarm+0xb8>)
 8006312:	400a      	ands	r2, r1
 8006314:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8006316:	f7fc fd51 	bl	8002dbc <HAL_GetTick>
 800631a:	9000      	str	r0, [sp, #0]
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800631c:	6823      	ldr	r3, [r4, #0]
 800631e:	68db      	ldr	r3, [r3, #12]
 8006320:	001a      	movs	r2, r3
 8006322:	402a      	ands	r2, r5
 8006324:	9201      	str	r2, [sp, #4]
 8006326:	422b      	tst	r3, r5
 8006328:	d007      	beq.n	800633a <HAL_RTC_DeactivateAlarm+0x5e>
        return HAL_TIMEOUT;
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800632a:	22ff      	movs	r2, #255	; 0xff
 800632c:	6823      	ldr	r3, [r4, #0]

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800632e:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006330:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8006332:	2301      	movs	r3, #1
 8006334:	77fb      	strb	r3, [r7, #31]
  __HAL_UNLOCK(hrtc);
 8006336:	77f0      	strb	r0, [r6, #31]

  return HAL_OK;
}
 8006338:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800633a:	f7fc fd3f 	bl	8002dbc <HAL_GetTick>
 800633e:	9b00      	ldr	r3, [sp, #0]
 8006340:	1ac0      	subs	r0, r0, r3
 8006342:	23fa      	movs	r3, #250	; 0xfa
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	4298      	cmp	r0, r3
 8006348:	d9e8      	bls.n	800631c <HAL_RTC_DeactivateAlarm+0x40>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800634a:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800634c:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800634e:	6823      	ldr	r3, [r4, #0]
 8006350:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006352:	77f8      	strb	r0, [r7, #31]
        __HAL_UNLOCK(hrtc);
 8006354:	9b01      	ldr	r3, [sp, #4]
 8006356:	77f3      	strb	r3, [r6, #31]
        return HAL_TIMEOUT;
 8006358:	e7ee      	b.n	8006338 <HAL_RTC_DeactivateAlarm+0x5c>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800635a:	689a      	ldr	r2, [r3, #8]
 800635c:	490e      	ldr	r1, [pc, #56]	; (8006398 <HAL_RTC_DeactivateAlarm+0xbc>)
 800635e:	400a      	ands	r2, r1
 8006360:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8006362:	689a      	ldr	r2, [r3, #8]
 8006364:	490d      	ldr	r1, [pc, #52]	; (800639c <HAL_RTC_DeactivateAlarm+0xc0>)
 8006366:	400a      	ands	r2, r1
 8006368:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800636a:	f7fc fd27 	bl	8002dbc <HAL_GetTick>
 800636e:	9000      	str	r0, [sp, #0]
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006370:	6823      	ldr	r3, [r4, #0]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	001a      	movs	r2, r3
 8006376:	402a      	ands	r2, r5
 8006378:	9201      	str	r2, [sp, #4]
 800637a:	422b      	tst	r3, r5
 800637c:	d1d5      	bne.n	800632a <HAL_RTC_DeactivateAlarm+0x4e>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800637e:	f7fc fd1d 	bl	8002dbc <HAL_GetTick>
 8006382:	9b00      	ldr	r3, [sp, #0]
 8006384:	1ac0      	subs	r0, r0, r3
 8006386:	23fa      	movs	r3, #250	; 0xfa
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	4298      	cmp	r0, r3
 800638c:	d9f0      	bls.n	8006370 <HAL_RTC_DeactivateAlarm+0x94>
 800638e:	e7dc      	b.n	800634a <HAL_RTC_DeactivateAlarm+0x6e>
 8006390:	fffffeff 	.word	0xfffffeff
 8006394:	ffffefff 	.word	0xffffefff
 8006398:	fffffdff 	.word	0xfffffdff
 800639c:	ffffdfff 	.word	0xffffdfff

080063a0 <HAL_RTC_AlarmIRQHandler>:
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80063a0:	6803      	ldr	r3, [r0, #0]
{
 80063a2:	b510      	push	{r4, lr}
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80063a4:	689a      	ldr	r2, [r3, #8]
{
 80063a6:	0004      	movs	r4, r0
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80063a8:	04d2      	lsls	r2, r2, #19
 80063aa:	d50a      	bpl.n	80063c2 <HAL_RTC_AlarmIRQHandler+0x22>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	05db      	lsls	r3, r3, #23
 80063b0:	d507      	bpl.n	80063c2 <HAL_RTC_AlarmIRQHandler+0x22>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 80063b2:	f7fc fb30 	bl	8002a16 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80063b6:	6821      	ldr	r1, [r4, #0]
 80063b8:	4b0e      	ldr	r3, [pc, #56]	; (80063f4 <HAL_RTC_AlarmIRQHandler+0x54>)
 80063ba:	68ca      	ldr	r2, [r1, #12]
 80063bc:	b2d2      	uxtb	r2, r2
 80063be:	4313      	orrs	r3, r2
 80063c0:	60cb      	str	r3, [r1, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 80063c2:	6823      	ldr	r3, [r4, #0]
 80063c4:	689a      	ldr	r2, [r3, #8]
 80063c6:	0492      	lsls	r2, r2, #18
 80063c8:	d50b      	bpl.n	80063e2 <HAL_RTC_AlarmIRQHandler+0x42>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 80063ca:	68db      	ldr	r3, [r3, #12]
 80063cc:	059b      	lsls	r3, r3, #22
 80063ce:	d508      	bpl.n	80063e2 <HAL_RTC_AlarmIRQHandler+0x42>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80063d0:	0020      	movs	r0, r4
 80063d2:	f000 faf7 	bl	80069c4 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80063d6:	6821      	ldr	r1, [r4, #0]
 80063d8:	4b07      	ldr	r3, [pc, #28]	; (80063f8 <HAL_RTC_AlarmIRQHandler+0x58>)
 80063da:	68ca      	ldr	r2, [r1, #12]
 80063dc:	b2d2      	uxtb	r2, r2
 80063de:	4313      	orrs	r3, r2
 80063e0:	60cb      	str	r3, [r1, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80063e2:	2280      	movs	r2, #128	; 0x80
 80063e4:	4b05      	ldr	r3, [pc, #20]	; (80063fc <HAL_RTC_AlarmIRQHandler+0x5c>)
 80063e6:	0292      	lsls	r2, r2, #10
 80063e8:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80063ea:	2301      	movs	r3, #1
 80063ec:	3402      	adds	r4, #2
 80063ee:	77e3      	strb	r3, [r4, #31]
}
 80063f0:	bd10      	pop	{r4, pc}
 80063f2:	46c0      	nop			; (mov r8, r8)
 80063f4:	fffffe7f 	.word	0xfffffe7f
 80063f8:	fffffd7f 	.word	0xfffffd7f
 80063fc:	40010400 	.word	0x40010400

08006400 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006400:	21a0      	movs	r1, #160	; 0xa0
 8006402:	6802      	ldr	r2, [r0, #0]
{
 8006404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006406:	68d3      	ldr	r3, [r2, #12]
{
 8006408:	0004      	movs	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800640a:	438b      	bics	r3, r1
 800640c:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800640e:	f7fc fcd5 	bl	8002dbc <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006412:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 8006414:	0005      	movs	r5, r0
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006416:	2620      	movs	r6, #32
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006418:	00bf      	lsls	r7, r7, #2
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800641a:	6823      	ldr	r3, [r4, #0]
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	4233      	tst	r3, r6
 8006420:	d001      	beq.n	8006426 <HAL_RTC_WaitForSynchro+0x26>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8006422:	2000      	movs	r0, #0
}
 8006424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006426:	f7fc fcc9 	bl	8002dbc <HAL_GetTick>
 800642a:	1b40      	subs	r0, r0, r5
 800642c:	42b8      	cmp	r0, r7
 800642e:	d9f4      	bls.n	800641a <HAL_RTC_WaitForSynchro+0x1a>
      return HAL_TIMEOUT;
 8006430:	2003      	movs	r0, #3
 8006432:	e7f7      	b.n	8006424 <HAL_RTC_WaitForSynchro+0x24>

08006434 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006436:	2440      	movs	r4, #64	; 0x40
 8006438:	6803      	ldr	r3, [r0, #0]
{
 800643a:	0005      	movs	r5, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800643c:	68da      	ldr	r2, [r3, #12]
 800643e:	4222      	tst	r2, r4
 8006440:	d001      	beq.n	8006446 <RTC_EnterInitMode+0x12>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8006442:	2000      	movs	r0, #0
}
 8006444:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006446:	2201      	movs	r2, #1
 8006448:	4252      	negs	r2, r2
 800644a:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 800644c:	f7fc fcb6 	bl	8002dbc <HAL_GetTick>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006450:	27fa      	movs	r7, #250	; 0xfa
    tickstart = HAL_GetTick();
 8006452:	0006      	movs	r6, r0
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006454:	00bf      	lsls	r7, r7, #2
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8006456:	682b      	ldr	r3, [r5, #0]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	4223      	tst	r3, r4
 800645c:	d1f1      	bne.n	8006442 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800645e:	f7fc fcad 	bl	8002dbc <HAL_GetTick>
 8006462:	1b80      	subs	r0, r0, r6
 8006464:	42b8      	cmp	r0, r7
 8006466:	d9f6      	bls.n	8006456 <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 8006468:	2003      	movs	r0, #3
 800646a:	e7eb      	b.n	8006444 <RTC_EnterInitMode+0x10>

0800646c <HAL_RTC_Init>:
{
 800646c:	b570      	push	{r4, r5, r6, lr}
 800646e:	0004      	movs	r4, r0
    return HAL_ERROR;
 8006470:	2501      	movs	r5, #1
  if (hrtc == NULL)
 8006472:	2800      	cmp	r0, #0
 8006474:	d01a      	beq.n	80064ac <HAL_RTC_Init+0x40>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8006476:	1c86      	adds	r6, r0, #2
 8006478:	7ff3      	ldrb	r3, [r6, #31]
 800647a:	b2da      	uxtb	r2, r3
 800647c:	2b00      	cmp	r3, #0
 800647e:	d103      	bne.n	8006488 <HAL_RTC_Init+0x1c>
    hrtc->Lock = HAL_UNLOCKED;
 8006480:	1943      	adds	r3, r0, r5
 8006482:	77da      	strb	r2, [r3, #31]
    HAL_RTC_MspInit(hrtc);
 8006484:	f7fc f8dc 	bl	8002640 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006488:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800648a:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 800648c:	77f3      	strb	r3, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800648e:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006490:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006492:	625a      	str	r2, [r3, #36]	; 0x24
 8006494:	3a77      	subs	r2, #119	; 0x77
 8006496:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8006498:	f7ff ffcc 	bl	8006434 <RTC_EnterInitMode>
 800649c:	6823      	ldr	r3, [r4, #0]
 800649e:	1e05      	subs	r5, r0, #0
 80064a0:	d006      	beq.n	80064b0 <HAL_RTC_Init+0x44>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064a2:	22ff      	movs	r2, #255	; 0xff
 80064a4:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80064a6:	2304      	movs	r3, #4
 80064a8:	77f3      	strb	r3, [r6, #31]
        return HAL_ERROR;
 80064aa:	2501      	movs	r5, #1
}
 80064ac:	0028      	movs	r0, r5
 80064ae:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80064b0:	689a      	ldr	r2, [r3, #8]
 80064b2:	491b      	ldr	r1, [pc, #108]	; (8006520 <HAL_RTC_Init+0xb4>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80064b4:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80064b6:	400a      	ands	r2, r1
 80064b8:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80064ba:	6862      	ldr	r2, [r4, #4]
 80064bc:	6899      	ldr	r1, [r3, #8]
 80064be:	4302      	orrs	r2, r0
 80064c0:	69a0      	ldr	r0, [r4, #24]
 80064c2:	4302      	orrs	r2, r0
 80064c4:	430a      	orrs	r2, r1
 80064c6:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80064c8:	68e2      	ldr	r2, [r4, #12]
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80064ca:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80064cc:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80064ce:	68a2      	ldr	r2, [r4, #8]
 80064d0:	6919      	ldr	r1, [r3, #16]
 80064d2:	0412      	lsls	r2, r2, #16
 80064d4:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80064d6:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80064d8:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80064da:	68da      	ldr	r2, [r3, #12]
 80064dc:	438a      	bics	r2, r1
 80064de:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80064e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80064e2:	397d      	subs	r1, #125	; 0x7d
 80064e4:	438a      	bics	r2, r1
 80064e6:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80064e8:	69e2      	ldr	r2, [r4, #28]
 80064ea:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80064ec:	4302      	orrs	r2, r0
 80064ee:	430a      	orrs	r2, r1
 80064f0:	64da      	str	r2, [r3, #76]	; 0x4c
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	069b      	lsls	r3, r3, #26
 80064f6:	d40c      	bmi.n	8006512 <HAL_RTC_Init+0xa6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80064f8:	0020      	movs	r0, r4
 80064fa:	f7ff ff81 	bl	8006400 <HAL_RTC_WaitForSynchro>
 80064fe:	2800      	cmp	r0, #0
 8006500:	d007      	beq.n	8006512 <HAL_RTC_Init+0xa6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006502:	22ff      	movs	r2, #255	; 0xff
 8006504:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(hrtc);
 8006506:	3401      	adds	r4, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006508:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 800650a:	2304      	movs	r3, #4
 800650c:	77f3      	strb	r3, [r6, #31]
        __HAL_UNLOCK(hrtc);
 800650e:	77e5      	strb	r5, [r4, #31]
 8006510:	e7cb      	b.n	80064aa <HAL_RTC_Init+0x3e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006512:	22ff      	movs	r2, #255	; 0xff
 8006514:	6823      	ldr	r3, [r4, #0]
 8006516:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8006518:	2301      	movs	r3, #1
 800651a:	77f3      	strb	r3, [r6, #31]
    return HAL_OK;
 800651c:	e7c6      	b.n	80064ac <HAL_RTC_Init+0x40>
 800651e:	46c0      	nop			; (mov r8, r8)
 8006520:	ff8fffbf 	.word	0xff8fffbf

08006524 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8006524:	2300      	movs	r3, #0
  uint8_t Param = Value;

  while (Param >= 10U)
 8006526:	2809      	cmp	r0, #9
 8006528:	d803      	bhi.n	8006532 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Param -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 800652a:	011b      	lsls	r3, r3, #4
 800652c:	4318      	orrs	r0, r3
 800652e:	b2c0      	uxtb	r0, r0
}
 8006530:	4770      	bx	lr
    Param -= 10U;
 8006532:	380a      	subs	r0, #10
    bcdhigh++;
 8006534:	3301      	adds	r3, #1
    Param -= 10U;
 8006536:	b2c0      	uxtb	r0, r0
 8006538:	e7f5      	b.n	8006526 <RTC_ByteToBcd2+0x2>
	...

0800653c <HAL_RTC_SetTime>:
{
 800653c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 800653e:	1c43      	adds	r3, r0, #1
{
 8006540:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 8006542:	9302      	str	r3, [sp, #8]
{
 8006544:	000c      	movs	r4, r1
  __HAL_LOCK(hrtc);
 8006546:	7fd9      	ldrb	r1, [r3, #31]
 8006548:	2302      	movs	r3, #2
{
 800654a:	0005      	movs	r5, r0
  __HAL_LOCK(hrtc);
 800654c:	001f      	movs	r7, r3
 800654e:	2901      	cmp	r1, #1
 8006550:	d038      	beq.n	80065c4 <HAL_RTC_SetTime+0x88>
 8006552:	2101      	movs	r1, #1
 8006554:	1840      	adds	r0, r0, r1
 8006556:	77c1      	strb	r1, [r0, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006558:	18e9      	adds	r1, r5, r3
 800655a:	77cb      	strb	r3, [r1, #31]
  if (Format == RTC_FORMAT_BIN)
 800655c:	682b      	ldr	r3, [r5, #0]
 800655e:	7820      	ldrb	r0, [r4, #0]
 8006560:	9301      	str	r3, [sp, #4]
 8006562:	7866      	ldrb	r6, [r4, #1]
 8006564:	2340      	movs	r3, #64	; 0x40
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006566:	9103      	str	r1, [sp, #12]
  if (Format == RTC_FORMAT_BIN)
 8006568:	2a00      	cmp	r2, #0
 800656a:	d12e      	bne.n	80065ca <HAL_RTC_SetTime+0x8e>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800656c:	9a01      	ldr	r2, [sp, #4]
 800656e:	6892      	ldr	r2, [r2, #8]
 8006570:	0011      	movs	r1, r2
 8006572:	4019      	ands	r1, r3
 8006574:	421a      	tst	r2, r3
 8006576:	d100      	bne.n	800657a <HAL_RTC_SetTime+0x3e>
      sTime->TimeFormat = 0x00U;
 8006578:	70e1      	strb	r1, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800657a:	f7ff ffd3 	bl	8006524 <RTC_ByteToBcd2>
 800657e:	0007      	movs	r7, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006580:	0030      	movs	r0, r6
 8006582:	f7ff ffcf 	bl	8006524 <RTC_ByteToBcd2>
 8006586:	0006      	movs	r6, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8006588:	78a0      	ldrb	r0, [r4, #2]
 800658a:	f7ff ffcb 	bl	8006524 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800658e:	78e3      	ldrb	r3, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006590:	043f      	lsls	r7, r7, #16
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8006592:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006594:	4303      	orrs	r3, r0
 8006596:	431f      	orrs	r7, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006598:	0236      	lsls	r6, r6, #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800659a:	23ca      	movs	r3, #202	; 0xca
 800659c:	9a01      	ldr	r2, [sp, #4]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800659e:	0028      	movs	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80065a0:	6253      	str	r3, [r2, #36]	; 0x24
 80065a2:	3b77      	subs	r3, #119	; 0x77
 80065a4:	6253      	str	r3, [r2, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80065a6:	f7ff ff45 	bl	8006434 <RTC_EnterInitMode>
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80065aa:	433e      	orrs	r6, r7
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80065ac:	682b      	ldr	r3, [r5, #0]
 80065ae:	1e07      	subs	r7, r0, #0
 80065b0:	d01a      	beq.n	80065e8 <HAL_RTC_SetTime+0xac>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80065b2:	22ff      	movs	r2, #255	; 0xff
 80065b4:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80065b6:	2304      	movs	r3, #4
 80065b8:	9a03      	ldr	r2, [sp, #12]
 80065ba:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 80065bc:	2300      	movs	r3, #0
 80065be:	9a02      	ldr	r2, [sp, #8]
 80065c0:	77d3      	strb	r3, [r2, #31]
        return HAL_ERROR;
 80065c2:	2701      	movs	r7, #1
}
 80065c4:	0038      	movs	r0, r7
 80065c6:	b005      	add	sp, #20
 80065c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80065ca:	9a01      	ldr	r2, [sp, #4]
 80065cc:	6892      	ldr	r2, [r2, #8]
 80065ce:	0011      	movs	r1, r2
 80065d0:	4019      	ands	r1, r3
 80065d2:	421a      	tst	r2, r3
 80065d4:	d100      	bne.n	80065d8 <HAL_RTC_SetTime+0x9c>
      sTime->TimeFormat = 0x00U;
 80065d6:	70e1      	strb	r1, [r4, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80065d8:	0400      	lsls	r0, r0, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80065da:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80065dc:	4306      	orrs	r6, r0
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80065de:	78e7      	ldrb	r7, [r4, #3]
              ((uint32_t)sTime->Seconds) | \
 80065e0:	78a0      	ldrb	r0, [r4, #2]
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80065e2:	043f      	lsls	r7, r7, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80065e4:	4306      	orrs	r6, r0
 80065e6:	e7d8      	b.n	800659a <HAL_RTC_SetTime+0x5e>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80065e8:	4815      	ldr	r0, [pc, #84]	; (8006640 <HAL_RTC_SetTime+0x104>)
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80065ea:	4916      	ldr	r1, [pc, #88]	; (8006644 <HAL_RTC_SetTime+0x108>)
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80065ec:	4006      	ands	r6, r0
 80065ee:	601e      	str	r6, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80065f0:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80065f2:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80065f4:	400a      	ands	r2, r1
 80065f6:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80065f8:	68e2      	ldr	r2, [r4, #12]
 80065fa:	6899      	ldr	r1, [r3, #8]
 80065fc:	4302      	orrs	r2, r0
 80065fe:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006600:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006602:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8006604:	68da      	ldr	r2, [r3, #12]
 8006606:	438a      	bics	r2, r1
 8006608:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	069b      	lsls	r3, r3, #26
 800660e:	d40d      	bmi.n	800662c <HAL_RTC_SetTime+0xf0>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006610:	0028      	movs	r0, r5
 8006612:	f7ff fef5 	bl	8006400 <HAL_RTC_WaitForSynchro>
 8006616:	2800      	cmp	r0, #0
 8006618:	d008      	beq.n	800662c <HAL_RTC_SetTime+0xf0>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800661a:	22ff      	movs	r2, #255	; 0xff
 800661c:	682b      	ldr	r3, [r5, #0]
 800661e:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8006620:	2304      	movs	r3, #4
 8006622:	9a03      	ldr	r2, [sp, #12]
 8006624:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 8006626:	9b02      	ldr	r3, [sp, #8]
 8006628:	77df      	strb	r7, [r3, #31]
 800662a:	e7ca      	b.n	80065c2 <HAL_RTC_SetTime+0x86>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800662c:	22ff      	movs	r2, #255	; 0xff
 800662e:	682b      	ldr	r3, [r5, #0]
 8006630:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8006632:	2301      	movs	r3, #1
 8006634:	9a03      	ldr	r2, [sp, #12]
 8006636:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8006638:	2300      	movs	r3, #0
 800663a:	9a02      	ldr	r2, [sp, #8]
 800663c:	77d3      	strb	r3, [r2, #31]
    return HAL_OK;
 800663e:	e7c1      	b.n	80065c4 <HAL_RTC_SetTime+0x88>
 8006640:	007f7f7f 	.word	0x007f7f7f
 8006644:	fffbffff 	.word	0xfffbffff

08006648 <HAL_RTC_SetDate>:
  __HAL_LOCK(hrtc);
 8006648:	2302      	movs	r3, #2
{
 800664a:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 800664c:	1c47      	adds	r7, r0, #1
{
 800664e:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 8006650:	7ff9      	ldrb	r1, [r7, #31]
{
 8006652:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 8006654:	001d      	movs	r5, r3
{
 8006656:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 8006658:	2901      	cmp	r1, #1
 800665a:	d036      	beq.n	80066ca <HAL_RTC_SetDate+0x82>
 800665c:	2101      	movs	r1, #1
 800665e:	77f9      	strb	r1, [r7, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006660:	18c1      	adds	r1, r0, r3
 8006662:	77cb      	strb	r3, [r1, #31]
 8006664:	9101      	str	r1, [sp, #4]
 8006666:	7831      	ldrb	r1, [r6, #0]
 8006668:	78f0      	ldrb	r0, [r6, #3]
 800666a:	0349      	lsls	r1, r1, #13
 800666c:	7873      	ldrb	r3, [r6, #1]
 800666e:	78b5      	ldrb	r5, [r6, #2]
 8006670:	9102      	str	r1, [sp, #8]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006672:	2a00      	cmp	r2, #0
 8006674:	d14c      	bne.n	8006710 <HAL_RTC_SetDate+0xc8>
 8006676:	3210      	adds	r2, #16
 8006678:	4213      	tst	r3, r2
 800667a:	d002      	beq.n	8006682 <HAL_RTC_SetDate+0x3a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800667c:	4393      	bics	r3, r2
 800667e:	330a      	adds	r3, #10
 8006680:	7073      	strb	r3, [r6, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006682:	f7ff ff4f 	bl	8006524 <RTC_ByteToBcd2>
 8006686:	9003      	str	r0, [sp, #12]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006688:	7870      	ldrb	r0, [r6, #1]
 800668a:	f7ff ff4b 	bl	8006524 <RTC_ByteToBcd2>
 800668e:	0006      	movs	r6, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8006690:	0028      	movs	r0, r5
 8006692:	f7ff ff47 	bl	8006524 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006696:	9b03      	ldr	r3, [sp, #12]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006698:	0236      	lsls	r6, r6, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800669a:	041d      	lsls	r5, r3, #16
 800669c:	9b02      	ldr	r3, [sp, #8]
 800669e:	4318      	orrs	r0, r3
 80066a0:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80066a2:	22ca      	movs	r2, #202	; 0xca
 80066a4:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80066a6:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80066a8:	625a      	str	r2, [r3, #36]	; 0x24
 80066aa:	3a77      	subs	r2, #119	; 0x77
 80066ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80066ae:	f7ff fec1 	bl	8006434 <RTC_EnterInitMode>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80066b2:	432e      	orrs	r6, r5
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80066b4:	6823      	ldr	r3, [r4, #0]
 80066b6:	1e05      	subs	r5, r0, #0
 80066b8:	d00a      	beq.n	80066d0 <HAL_RTC_SetDate+0x88>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80066ba:	22ff      	movs	r2, #255	; 0xff
 80066bc:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 80066be:	2304      	movs	r3, #4
 80066c0:	9a01      	ldr	r2, [sp, #4]
 80066c2:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 80066c4:	2300      	movs	r3, #0
 80066c6:	77fb      	strb	r3, [r7, #31]
        return HAL_ERROR;
 80066c8:	2501      	movs	r5, #1
}
 80066ca:	0028      	movs	r0, r5
 80066cc:	b005      	add	sp, #20
 80066ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80066d0:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80066d2:	4812      	ldr	r0, [pc, #72]	; (800671c <HAL_RTC_SetDate+0xd4>)
 80066d4:	4006      	ands	r6, r0
 80066d6:	605e      	str	r6, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80066d8:	68da      	ldr	r2, [r3, #12]
 80066da:	438a      	bics	r2, r1
 80066dc:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	069b      	lsls	r3, r3, #26
 80066e2:	d40c      	bmi.n	80066fe <HAL_RTC_SetDate+0xb6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80066e4:	0020      	movs	r0, r4
 80066e6:	f7ff fe8b 	bl	8006400 <HAL_RTC_WaitForSynchro>
 80066ea:	2800      	cmp	r0, #0
 80066ec:	d007      	beq.n	80066fe <HAL_RTC_SetDate+0xb6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80066ee:	22ff      	movs	r2, #255	; 0xff
 80066f0:	6823      	ldr	r3, [r4, #0]
 80066f2:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80066f4:	2304      	movs	r3, #4
 80066f6:	9a01      	ldr	r2, [sp, #4]
 80066f8:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 80066fa:	77fd      	strb	r5, [r7, #31]
 80066fc:	e7e4      	b.n	80066c8 <HAL_RTC_SetDate+0x80>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80066fe:	22ff      	movs	r2, #255	; 0xff
 8006700:	6823      	ldr	r3, [r4, #0]
 8006702:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 8006704:	2301      	movs	r3, #1
 8006706:	9a01      	ldr	r2, [sp, #4]
 8006708:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 800670a:	2300      	movs	r3, #0
 800670c:	77fb      	strb	r3, [r7, #31]
    return HAL_OK;
 800670e:	e7dc      	b.n	80066ca <HAL_RTC_SetDate+0x82>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006710:	9a02      	ldr	r2, [sp, #8]
 8006712:	0400      	lsls	r0, r0, #16
 8006714:	4310      	orrs	r0, r2
 8006716:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->Month) << 8U) | \
 8006718:	021e      	lsls	r6, r3, #8
 800671a:	e7c2      	b.n	80066a2 <HAL_RTC_SetDate+0x5a>
 800671c:	00ffff3f 	.word	0x00ffff3f

08006720 <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 8006720:	2302      	movs	r3, #2
{
 8006722:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006724:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 8006726:	1c41      	adds	r1, r0, #1
 8006728:	7fce      	ldrb	r6, [r1, #31]
{
 800672a:	0004      	movs	r4, r0
 800672c:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 800672e:	0018      	movs	r0, r3
 8006730:	2e01      	cmp	r6, #1
 8006732:	d100      	bne.n	8006736 <HAL_RTC_SetAlarm_IT+0x16>
 8006734:	e095      	b.n	8006862 <HAL_RTC_SetAlarm_IT+0x142>
 8006736:	3801      	subs	r0, #1
 8006738:	77c8      	strb	r0, [r1, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800673a:	18e1      	adds	r1, r4, r3
 800673c:	77cb      	strb	r3, [r1, #31]
  if (Format == RTC_FORMAT_BIN)
 800673e:	7869      	ldrb	r1, [r5, #1]
 8006740:	6826      	ldr	r6, [r4, #0]
 8006742:	9101      	str	r1, [sp, #4]
 8006744:	7828      	ldrb	r0, [r5, #0]
 8006746:	78af      	ldrb	r7, [r5, #2]
 8006748:	333e      	adds	r3, #62	; 0x3e
 800674a:	2a00      	cmp	r2, #0
 800674c:	d165      	bne.n	800681a <HAL_RTC_SetAlarm_IT+0xfa>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800674e:	68b2      	ldr	r2, [r6, #8]
 8006750:	0011      	movs	r1, r2
 8006752:	4019      	ands	r1, r3
 8006754:	421a      	tst	r2, r3
 8006756:	d100      	bne.n	800675a <HAL_RTC_SetAlarm_IT+0x3a>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006758:	70e9      	strb	r1, [r5, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800675a:	f7ff fee3 	bl	8006524 <RTC_ByteToBcd2>
 800675e:	9002      	str	r0, [sp, #8]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8006760:	9801      	ldr	r0, [sp, #4]
 8006762:	f7ff fedf 	bl	8006524 <RTC_ByteToBcd2>
 8006766:	9001      	str	r0, [sp, #4]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8006768:	0038      	movs	r0, r7
 800676a:	f7ff fedb 	bl	8006524 <RTC_ByteToBcd2>
 800676e:	0007      	movs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006770:	1c6b      	adds	r3, r5, #1
 8006772:	7fd8      	ldrb	r0, [r3, #31]
 8006774:	f7ff fed6 	bl	8006524 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8006778:	696a      	ldr	r2, [r5, #20]
 800677a:	69eb      	ldr	r3, [r5, #28]
 800677c:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800677e:	78ea      	ldrb	r2, [r5, #3]
 8006780:	0412      	lsls	r2, r2, #16
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8006782:	4313      	orrs	r3, r2
 8006784:	431f      	orrs	r7, r3
 8006786:	9b02      	ldr	r3, [sp, #8]
 8006788:	041b      	lsls	r3, r3, #16
 800678a:	431f      	orrs	r7, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800678c:	9b01      	ldr	r3, [sp, #4]
 800678e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8006790:	431f      	orrs	r7, r3
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8006792:	69aa      	ldr	r2, [r5, #24]
 8006794:	686b      	ldr	r3, [r5, #4]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006796:	0600      	lsls	r0, r0, #24
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8006798:	4313      	orrs	r3, r2
 800679a:	9301      	str	r3, [sp, #4]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800679c:	23ca      	movs	r3, #202	; 0xca
  if (sAlarm->Alarm == RTC_ALARM_A)
 800679e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80067a0:	6273      	str	r3, [r6, #36]	; 0x24
 80067a2:	3b77      	subs	r3, #119	; 0x77
 80067a4:	6273      	str	r3, [r6, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 80067a6:	33ad      	adds	r3, #173	; 0xad
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80067a8:	4307      	orrs	r7, r0
  if (sAlarm->Alarm == RTC_ALARM_A)
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d15b      	bne.n	8006866 <HAL_RTC_SetAlarm_IT+0x146>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80067ae:	68b3      	ldr	r3, [r6, #8]
 80067b0:	4a41      	ldr	r2, [pc, #260]	; (80068b8 <HAL_RTC_SetAlarm_IT+0x198>)
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80067b2:	2501      	movs	r5, #1
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80067b4:	4013      	ands	r3, r2
 80067b6:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80067b8:	68f2      	ldr	r2, [r6, #12]
 80067ba:	4b40      	ldr	r3, [pc, #256]	; (80068bc <HAL_RTC_SetAlarm_IT+0x19c>)
 80067bc:	b2d2      	uxtb	r2, r2
 80067be:	4313      	orrs	r3, r2
 80067c0:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 80067c2:	f7fc fafb 	bl	8002dbc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80067c6:	26fa      	movs	r6, #250	; 0xfa
    tickstart = HAL_GetTick();
 80067c8:	9002      	str	r0, [sp, #8]
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80067ca:	00b6      	lsls	r6, r6, #2
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80067cc:	6823      	ldr	r3, [r4, #0]
 80067ce:	68da      	ldr	r2, [r3, #12]
 80067d0:	0011      	movs	r1, r2
 80067d2:	4029      	ands	r1, r5
 80067d4:	9103      	str	r1, [sp, #12]
 80067d6:	422a      	tst	r2, r5
 80067d8:	d034      	beq.n	8006844 <HAL_RTC_SetAlarm_IT+0x124>
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80067da:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80067dc:	61df      	str	r7, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80067de:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80067e0:	2280      	movs	r2, #128	; 0x80
 80067e2:	6899      	ldr	r1, [r3, #8]
 80067e4:	0052      	lsls	r2, r2, #1
 80067e6:	430a      	orrs	r2, r1
 80067e8:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80067ea:	2280      	movs	r2, #128	; 0x80
 80067ec:	6899      	ldr	r1, [r3, #8]
 80067ee:	0152      	lsls	r2, r2, #5
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80067f0:	430a      	orrs	r2, r1
 80067f2:	609a      	str	r2, [r3, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80067f4:	2280      	movs	r2, #128	; 0x80
 80067f6:	4b32      	ldr	r3, [pc, #200]	; (80068c0 <HAL_RTC_SetAlarm_IT+0x1a0>)
 80067f8:	0292      	lsls	r2, r2, #10
 80067fa:	6819      	ldr	r1, [r3, #0]
  __HAL_UNLOCK(hrtc);
 80067fc:	2000      	movs	r0, #0
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80067fe:	4311      	orrs	r1, r2
 8006800:	6019      	str	r1, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8006802:	6899      	ldr	r1, [r3, #8]
 8006804:	430a      	orrs	r2, r1
 8006806:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006808:	22ff      	movs	r2, #255	; 0xff
 800680a:	6823      	ldr	r3, [r4, #0]
 800680c:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800680e:	3afe      	subs	r2, #254	; 0xfe
 8006810:	1ca3      	adds	r3, r4, #2
  __HAL_UNLOCK(hrtc);
 8006812:	18a4      	adds	r4, r4, r2
  hrtc->State = HAL_RTC_STATE_READY;
 8006814:	77da      	strb	r2, [r3, #31]
  __HAL_UNLOCK(hrtc);
 8006816:	77e0      	strb	r0, [r4, #31]
  return HAL_OK;
 8006818:	e023      	b.n	8006862 <HAL_RTC_SetAlarm_IT+0x142>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800681a:	68b2      	ldr	r2, [r6, #8]
 800681c:	0011      	movs	r1, r2
 800681e:	4019      	ands	r1, r3
 8006820:	421a      	tst	r2, r3
 8006822:	d100      	bne.n	8006826 <HAL_RTC_SetAlarm_IT+0x106>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006824:	70e9      	strb	r1, [r5, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8006826:	69eb      	ldr	r3, [r5, #28]
 8006828:	696a      	ldr	r2, [r5, #20]
 800682a:	0400      	lsls	r0, r0, #16
 800682c:	4313      	orrs	r3, r2
 800682e:	431f      	orrs	r7, r3
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8006830:	9b01      	ldr	r3, [sp, #4]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8006832:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8006834:	0218      	lsls	r0, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8006836:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8006838:	78e8      	ldrb	r0, [r5, #3]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800683a:	1c6b      	adds	r3, r5, #1
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800683c:	0400      	lsls	r0, r0, #16
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800683e:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006840:	7fd8      	ldrb	r0, [r3, #31]
 8006842:	e7a6      	b.n	8006792 <HAL_RTC_SetAlarm_IT+0x72>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006844:	f7fc faba 	bl	8002dbc <HAL_GetTick>
 8006848:	9b02      	ldr	r3, [sp, #8]
 800684a:	1ac0      	subs	r0, r0, r3
 800684c:	42b0      	cmp	r0, r6
 800684e:	d9bd      	bls.n	80067cc <HAL_RTC_SetAlarm_IT+0xac>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006850:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006852:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006854:	6823      	ldr	r3, [r4, #0]
 8006856:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006858:	1ca3      	adds	r3, r4, #2
 800685a:	77d8      	strb	r0, [r3, #31]
        __HAL_UNLOCK(hrtc);
 800685c:	9b03      	ldr	r3, [sp, #12]
 800685e:	3401      	adds	r4, #1
 8006860:	77e3      	strb	r3, [r4, #31]
}
 8006862:	b005      	add	sp, #20
 8006864:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006866:	68b3      	ldr	r3, [r6, #8]
 8006868:	4a16      	ldr	r2, [pc, #88]	; (80068c4 <HAL_RTC_SetAlarm_IT+0x1a4>)
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800686a:	2502      	movs	r5, #2
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800686c:	4013      	ands	r3, r2
 800686e:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006870:	68f2      	ldr	r2, [r6, #12]
 8006872:	4b15      	ldr	r3, [pc, #84]	; (80068c8 <HAL_RTC_SetAlarm_IT+0x1a8>)
 8006874:	b2d2      	uxtb	r2, r2
 8006876:	4313      	orrs	r3, r2
 8006878:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 800687a:	f7fc fa9f 	bl	8002dbc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800687e:	26fa      	movs	r6, #250	; 0xfa
    tickstart = HAL_GetTick();
 8006880:	9002      	str	r0, [sp, #8]
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006882:	00b6      	lsls	r6, r6, #2
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8006884:	6823      	ldr	r3, [r4, #0]
 8006886:	68da      	ldr	r2, [r3, #12]
 8006888:	0011      	movs	r1, r2
 800688a:	4029      	ands	r1, r5
 800688c:	9103      	str	r1, [sp, #12]
 800688e:	422a      	tst	r2, r5
 8006890:	d00b      	beq.n	80068aa <HAL_RTC_SetAlarm_IT+0x18a>
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8006892:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8006894:	621f      	str	r7, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8006896:	649a      	str	r2, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8006898:	2280      	movs	r2, #128	; 0x80
 800689a:	6899      	ldr	r1, [r3, #8]
 800689c:	0092      	lsls	r2, r2, #2
 800689e:	430a      	orrs	r2, r1
 80068a0:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80068a2:	2280      	movs	r2, #128	; 0x80
 80068a4:	6899      	ldr	r1, [r3, #8]
 80068a6:	0192      	lsls	r2, r2, #6
 80068a8:	e7a2      	b.n	80067f0 <HAL_RTC_SetAlarm_IT+0xd0>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80068aa:	f7fc fa87 	bl	8002dbc <HAL_GetTick>
 80068ae:	9b02      	ldr	r3, [sp, #8]
 80068b0:	1ac0      	subs	r0, r0, r3
 80068b2:	42b0      	cmp	r0, r6
 80068b4:	d9e6      	bls.n	8006884 <HAL_RTC_SetAlarm_IT+0x164>
 80068b6:	e7cb      	b.n	8006850 <HAL_RTC_SetAlarm_IT+0x130>
 80068b8:	fffffeff 	.word	0xfffffeff
 80068bc:	fffffe7f 	.word	0xfffffe7f
 80068c0:	40010400 	.word	0x40010400
 80068c4:	fffffdff 	.word	0xfffffdff
 80068c8:	fffffd7f 	.word	0xfffffd7f

080068cc <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 80068cc:	0902      	lsrs	r2, r0, #4
{
 80068ce:	0003      	movs	r3, r0
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 80068d0:	200a      	movs	r0, #10
 80068d2:	4350      	muls	r0, r2
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80068d4:	220f      	movs	r2, #15
 80068d6:	4013      	ands	r3, r2
 80068d8:	18c0      	adds	r0, r0, r3
 80068da:	b2c0      	uxtb	r0, r0
}
 80068dc:	4770      	bx	lr
	...

080068e0 <HAL_RTC_GetTime>:
{
 80068e0:	b570      	push	{r4, r5, r6, lr}
 80068e2:	000c      	movs	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80068e4:	6801      	ldr	r1, [r0, #0]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80068e6:	203f      	movs	r0, #63	; 0x3f
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80068e8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80068ea:	6063      	str	r3, [r4, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80068ec:	690b      	ldr	r3, [r1, #16]
 80068ee:	045b      	lsls	r3, r3, #17
 80068f0:	0c5b      	lsrs	r3, r3, #17
 80068f2:	60a3      	str	r3, [r4, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80068f4:	680b      	ldr	r3, [r1, #0]
 80068f6:	490e      	ldr	r1, [pc, #56]	; (8006930 <HAL_RTC_GetTime+0x50>)
 80068f8:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80068fa:	0c19      	lsrs	r1, r3, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80068fc:	0a1e      	lsrs	r6, r3, #8
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80068fe:	b2dd      	uxtb	r5, r3
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8006900:	2340      	movs	r3, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8006902:	4008      	ands	r0, r1
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8006904:	b2f6      	uxtb	r6, r6
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8006906:	4019      	ands	r1, r3
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8006908:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800690a:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800690c:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800690e:	70e1      	strb	r1, [r4, #3]
  if (Format == RTC_FORMAT_BIN)
 8006910:	2a00      	cmp	r2, #0
 8006912:	d10a      	bne.n	800692a <HAL_RTC_GetTime+0x4a>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006914:	f7ff ffda 	bl	80068cc <RTC_Bcd2ToByte>
 8006918:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800691a:	0030      	movs	r0, r6
 800691c:	f7ff ffd6 	bl	80068cc <RTC_Bcd2ToByte>
 8006920:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006922:	0028      	movs	r0, r5
 8006924:	f7ff ffd2 	bl	80068cc <RTC_Bcd2ToByte>
 8006928:	70a0      	strb	r0, [r4, #2]
}
 800692a:	2000      	movs	r0, #0
 800692c:	bd70      	pop	{r4, r5, r6, pc}
 800692e:	46c0      	nop			; (mov r8, r8)
 8006930:	007f7f7f 	.word	0x007f7f7f

08006934 <HAL_RTC_GetDate>:
{
 8006934:	b570      	push	{r4, r5, r6, lr}
 8006936:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8006938:	6803      	ldr	r3, [r0, #0]
 800693a:	490e      	ldr	r1, [pc, #56]	; (8006974 <HAL_RTC_GetDate+0x40>)
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8006940:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8006942:	04dd      	lsls	r5, r3, #19
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006944:	b2de      	uxtb	r6, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8006946:	041b      	lsls	r3, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8006948:	0eed      	lsrs	r5, r5, #27
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800694a:	0f5b      	lsrs	r3, r3, #29
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800694c:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800694e:	7065      	strb	r5, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8006950:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8006952:	7023      	strb	r3, [r4, #0]
  if (Format == RTC_FORMAT_BIN)
 8006954:	2a00      	cmp	r2, #0
 8006956:	d10a      	bne.n	800696e <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006958:	f7ff ffb8 	bl	80068cc <RTC_Bcd2ToByte>
 800695c:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800695e:	0028      	movs	r0, r5
 8006960:	f7ff ffb4 	bl	80068cc <RTC_Bcd2ToByte>
 8006964:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006966:	0030      	movs	r0, r6
 8006968:	f7ff ffb0 	bl	80068cc <RTC_Bcd2ToByte>
 800696c:	70a0      	strb	r0, [r4, #2]
}
 800696e:	2000      	movs	r0, #0
 8006970:	bd70      	pop	{r4, r5, r6, pc}
 8006972:	46c0      	nop			; (mov r8, r8)
 8006974:	00ffff3f 	.word	0x00ffff3f

08006978 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8006978:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4U);
 800697a:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800697c:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);
 800697e:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8006980:	600a      	str	r2, [r1, #0]
}
 8006982:	4770      	bx	lr

08006984 <HAL_RTCEx_BKUPRead>:
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8006984:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4U);
 8006986:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8006988:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);
 800698a:	18c9      	adds	r1, r1, r3

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800698c:	6808      	ldr	r0, [r1, #0]
}
 800698e:	4770      	bx	lr

08006990 <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006990:	2202      	movs	r2, #2
{
 8006992:	b510      	push	{r4, lr}
  __HAL_LOCK(hrtc);
 8006994:	1c41      	adds	r1, r0, #1
 8006996:	7fcc      	ldrb	r4, [r1, #31]
{
 8006998:	0003      	movs	r3, r0
  __HAL_LOCK(hrtc);
 800699a:	0010      	movs	r0, r2
 800699c:	2c01      	cmp	r4, #1
 800699e:	d010      	beq.n	80069c2 <HAL_RTCEx_EnableBypassShadow+0x32>

  hrtc->State = HAL_RTC_STATE_BUSY;
 80069a0:	1898      	adds	r0, r3, r2
 80069a2:	77c2      	strb	r2, [r0, #31]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	32c8      	adds	r2, #200	; 0xc8
 80069a8:	625a      	str	r2, [r3, #36]	; 0x24
 80069aa:	3a77      	subs	r2, #119	; 0x77
 80069ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 80069ae:	689c      	ldr	r4, [r3, #8]
 80069b0:	3a33      	subs	r2, #51	; 0x33
 80069b2:	4322      	orrs	r2, r4
 80069b4:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80069b6:	22ff      	movs	r2, #255	; 0xff
 80069b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80069ba:	2301      	movs	r3, #1
 80069bc:	77c3      	strb	r3, [r0, #31]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80069be:	2000      	movs	r0, #0
 80069c0:	77c8      	strb	r0, [r1, #31]

  return HAL_OK;
}
 80069c2:	bd10      	pop	{r4, pc}

080069c4 <HAL_RTCEx_AlarmBEventCallback>:
 80069c4:	4770      	bx	lr
	...

080069c8 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80069c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069ca:	001d      	movs	r5, r3
 80069cc:	0017      	movs	r7, r2
 80069ce:	b085      	sub	sp, #20
 80069d0:	000e      	movs	r6, r1
 80069d2:	0004      	movs	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80069d4:	f7fc f9f2 	bl	8002dbc <HAL_GetTick>
 80069d8:	19ed      	adds	r5, r5, r7
 80069da:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 80069dc:	f7fc f9ee 	bl	8002dbc <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80069e0:	4b25      	ldr	r3, [pc, #148]	; (8006a78 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb0>)
  tmp_tickstart = HAL_GetTick();
 80069e2:	9001      	str	r0, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	015b      	lsls	r3, r3, #5
 80069e8:	0d1b      	lsrs	r3, r3, #20
 80069ea:	436b      	muls	r3, r5

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80069ec:	6822      	ldr	r2, [r4, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 80069ee:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80069f0:	6893      	ldr	r3, [r2, #8]
 80069f2:	4033      	ands	r3, r6
 80069f4:	429e      	cmp	r6, r3
 80069f6:	d001      	beq.n	80069fc <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
    }
  }

  return HAL_OK;
 80069f8:	2000      	movs	r0, #0
 80069fa:	e032      	b.n	8006a62 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9a>
    if (Timeout != HAL_MAX_DELAY)
 80069fc:	1c7b      	adds	r3, r7, #1
 80069fe:	d0f7      	beq.n	80069f0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006a00:	f7fc f9dc 	bl	8002dbc <HAL_GetTick>
 8006a04:	9b01      	ldr	r3, [sp, #4]
 8006a06:	1ac0      	subs	r0, r0, r3
 8006a08:	42a8      	cmp	r0, r5
 8006a0a:	d32c      	bcc.n	8006a66 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9e>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a0c:	21e0      	movs	r1, #224	; 0xe0
 8006a0e:	6823      	ldr	r3, [r4, #0]
 8006a10:	685a      	ldr	r2, [r3, #4]
 8006a12:	438a      	bics	r2, r1
 8006a14:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a16:	2282      	movs	r2, #130	; 0x82
 8006a18:	6861      	ldr	r1, [r4, #4]
 8006a1a:	0052      	lsls	r2, r2, #1
 8006a1c:	4291      	cmp	r1, r2
 8006a1e:	d10c      	bne.n	8006a3a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
 8006a20:	2180      	movs	r1, #128	; 0x80
 8006a22:	68a2      	ldr	r2, [r4, #8]
 8006a24:	0209      	lsls	r1, r1, #8
 8006a26:	428a      	cmp	r2, r1
 8006a28:	d003      	beq.n	8006a32 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a2a:	2180      	movs	r1, #128	; 0x80
 8006a2c:	00c9      	lsls	r1, r1, #3
 8006a2e:	428a      	cmp	r2, r1
 8006a30:	d103      	bne.n	8006a3a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
          __HAL_SPI_DISABLE(hspi);
 8006a32:	2140      	movs	r1, #64	; 0x40
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	438a      	bics	r2, r1
 8006a38:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a3a:	2180      	movs	r1, #128	; 0x80
 8006a3c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006a3e:	0189      	lsls	r1, r1, #6
 8006a40:	428a      	cmp	r2, r1
 8006a42:	d106      	bne.n	8006a52 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x8a>
          SPI_RESET_CRC(hspi);
 8006a44:	6819      	ldr	r1, [r3, #0]
 8006a46:	480d      	ldr	r0, [pc, #52]	; (8006a7c <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb4>)
 8006a48:	4001      	ands	r1, r0
 8006a4a:	6019      	str	r1, [r3, #0]
 8006a4c:	6819      	ldr	r1, [r3, #0]
 8006a4e:	430a      	orrs	r2, r1
 8006a50:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8006a52:	0023      	movs	r3, r4
 8006a54:	2201      	movs	r2, #1
 8006a56:	3351      	adds	r3, #81	; 0x51
 8006a58:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	2003      	movs	r0, #3
 8006a5e:	3450      	adds	r4, #80	; 0x50
 8006a60:	7023      	strb	r3, [r4, #0]
}
 8006a62:	b005      	add	sp, #20
 8006a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(count == 0U)
 8006a66:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 8006a68:	1e5a      	subs	r2, r3, #1
 8006a6a:	4193      	sbcs	r3, r2
 8006a6c:	425b      	negs	r3, r3
 8006a6e:	401d      	ands	r5, r3
      count--;
 8006a70:	9b03      	ldr	r3, [sp, #12]
 8006a72:	3b01      	subs	r3, #1
 8006a74:	e7ba      	b.n	80069ec <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
 8006a76:	46c0      	nop			; (mov r8, r8)
 8006a78:	2000004c 	.word	0x2000004c
 8006a7c:	ffffdfff 	.word	0xffffdfff

08006a80 <SPI_EndRxTxTransaction>:
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006a80:	4b16      	ldr	r3, [pc, #88]	; (8006adc <SPI_EndRxTxTransaction+0x5c>)
{
 8006a82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006a84:	0004      	movs	r4, r0
 8006a86:	000d      	movs	r5, r1
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006a88:	6818      	ldr	r0, [r3, #0]
 8006a8a:	4915      	ldr	r1, [pc, #84]	; (8006ae0 <SPI_EndRxTxTransaction+0x60>)
{
 8006a8c:	0016      	movs	r6, r2
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006a8e:	f7f9 fb61 	bl	8000154 <__udivsi3>
 8006a92:	23fa      	movs	r3, #250	; 0xfa
 8006a94:	009b      	lsls	r3, r3, #2
 8006a96:	4343      	muls	r3, r0
 8006a98:	9301      	str	r3, [sp, #4]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a9a:	2382      	movs	r3, #130	; 0x82
 8006a9c:	6861      	ldr	r1, [r4, #4]
      if (count == 0U)
      {
        break;
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006a9e:	2280      	movs	r2, #128	; 0x80
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006aa0:	005b      	lsls	r3, r3, #1
 8006aa2:	4299      	cmp	r1, r3
 8006aa4:	d10d      	bne.n	8006ac2 <SPI_EndRxTxTransaction+0x42>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006aa6:	0033      	movs	r3, r6
 8006aa8:	002a      	movs	r2, r5
 8006aaa:	2180      	movs	r1, #128	; 0x80
 8006aac:	0020      	movs	r0, r4
 8006aae:	f7ff ff8b 	bl	80069c8 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8006ab2:	2800      	cmp	r0, #0
 8006ab4:	d00f      	beq.n	8006ad6 <SPI_EndRxTxTransaction+0x56>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ab6:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 8006ab8:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006aba:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8006abc:	4313      	orrs	r3, r2
 8006abe:	6563      	str	r3, [r4, #84]	; 0x54
  }

  return HAL_OK;
}
 8006ac0:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
      if (count == 0U)
 8006ac2:	9b01      	ldr	r3, [sp, #4]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d006      	beq.n	8006ad6 <SPI_EndRxTxTransaction+0x56>
      count--;
 8006ac8:	9b01      	ldr	r3, [sp, #4]
 8006aca:	3b01      	subs	r3, #1
 8006acc:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006ace:	6823      	ldr	r3, [r4, #0]
 8006ad0:	689b      	ldr	r3, [r3, #8]
 8006ad2:	4213      	tst	r3, r2
 8006ad4:	d1f5      	bne.n	8006ac2 <SPI_EndRxTxTransaction+0x42>
  return HAL_OK;
 8006ad6:	2000      	movs	r0, #0
 8006ad8:	e7f2      	b.n	8006ac0 <SPI_EndRxTxTransaction+0x40>
 8006ada:	46c0      	nop			; (mov r8, r8)
 8006adc:	2000004c 	.word	0x2000004c
 8006ae0:	016e3600 	.word	0x016e3600

08006ae4 <HAL_SPI_MspInit>:
}
 8006ae4:	4770      	bx	lr
	...

08006ae8 <HAL_SPI_Init>:
{
 8006ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aea:	0004      	movs	r4, r0
    return HAL_ERROR;
 8006aec:	2001      	movs	r0, #1
  if (hspi == NULL)
 8006aee:	2c00      	cmp	r4, #0
 8006af0:	d054      	beq.n	8006b9c <HAL_SPI_Init+0xb4>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006af2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d152      	bne.n	8006b9e <HAL_SPI_Init+0xb6>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006af8:	2282      	movs	r2, #130	; 0x82
 8006afa:	6861      	ldr	r1, [r4, #4]
 8006afc:	0052      	lsls	r2, r2, #1
 8006afe:	4291      	cmp	r1, r2
 8006b00:	d000      	beq.n	8006b04 <HAL_SPI_Init+0x1c>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006b02:	61e3      	str	r3, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b04:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b06:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b08:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b0a:	3551      	adds	r5, #81	; 0x51
 8006b0c:	782b      	ldrb	r3, [r5, #0]
 8006b0e:	b2da      	uxtb	r2, r3
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d105      	bne.n	8006b20 <HAL_SPI_Init+0x38>
    hspi->Lock = HAL_UNLOCKED;
 8006b14:	0023      	movs	r3, r4
 8006b16:	3350      	adds	r3, #80	; 0x50
    HAL_SPI_MspInit(hspi);
 8006b18:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8006b1a:	701a      	strb	r2, [r3, #0]
    HAL_SPI_MspInit(hspi);
 8006b1c:	f7ff ffe2 	bl	8006ae4 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8006b20:	2002      	movs	r0, #2
  __HAL_SPI_DISABLE(hspi);
 8006b22:	2240      	movs	r2, #64	; 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 8006b24:	7028      	strb	r0, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8006b26:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006b28:	6866      	ldr	r6, [r4, #4]
  __HAL_SPI_DISABLE(hspi);
 8006b2a:	680b      	ldr	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006b2c:	68a7      	ldr	r7, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8006b2e:	4393      	bics	r3, r2
 8006b30:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006b32:	2382      	movs	r3, #130	; 0x82
 8006b34:	005b      	lsls	r3, r3, #1
 8006b36:	4033      	ands	r3, r6
 8006b38:	2684      	movs	r6, #132	; 0x84
 8006b3a:	0236      	lsls	r6, r6, #8
 8006b3c:	403e      	ands	r6, r7
 8006b3e:	4333      	orrs	r3, r6
 8006b40:	2680      	movs	r6, #128	; 0x80
 8006b42:	68e7      	ldr	r7, [r4, #12]
 8006b44:	0136      	lsls	r6, r6, #4
 8006b46:	403e      	ands	r6, r7
 8006b48:	4333      	orrs	r3, r6
 8006b4a:	6926      	ldr	r6, [r4, #16]
 8006b4c:	69a2      	ldr	r2, [r4, #24]
 8006b4e:	4030      	ands	r0, r6
 8006b50:	2601      	movs	r6, #1
 8006b52:	4303      	orrs	r3, r0
 8006b54:	6960      	ldr	r0, [r4, #20]
 8006b56:	69e7      	ldr	r7, [r4, #28]
 8006b58:	4030      	ands	r0, r6
 8006b5a:	4303      	orrs	r3, r0
 8006b5c:	2080      	movs	r0, #128	; 0x80
 8006b5e:	0080      	lsls	r0, r0, #2
 8006b60:	4010      	ands	r0, r2
 8006b62:	4303      	orrs	r3, r0
 8006b64:	2038      	movs	r0, #56	; 0x38
 8006b66:	4038      	ands	r0, r7
 8006b68:	4303      	orrs	r3, r0
 8006b6a:	2080      	movs	r0, #128	; 0x80
 8006b6c:	6a27      	ldr	r7, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006b6e:	0c12      	lsrs	r2, r2, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006b70:	4038      	ands	r0, r7
 8006b72:	4303      	orrs	r3, r0
 8006b74:	2080      	movs	r0, #128	; 0x80
 8006b76:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8006b78:	0180      	lsls	r0, r0, #6
 8006b7a:	4038      	ands	r0, r7
 8006b7c:	4303      	orrs	r3, r0
 8006b7e:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006b80:	2304      	movs	r3, #4
 8006b82:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006b84:	401a      	ands	r2, r3
 8006b86:	330c      	adds	r3, #12
 8006b88:	4003      	ands	r3, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b8a:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006b8c:	431a      	orrs	r2, r3
 8006b8e:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006b90:	69cb      	ldr	r3, [r1, #28]
 8006b92:	4a05      	ldr	r2, [pc, #20]	; (8006ba8 <HAL_SPI_Init+0xc0>)
 8006b94:	4013      	ands	r3, r2
 8006b96:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b98:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006b9a:	702e      	strb	r6, [r5, #0]
}
 8006b9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006ba2:	6163      	str	r3, [r4, #20]
 8006ba4:	e7ae      	b.n	8006b04 <HAL_SPI_Init+0x1c>
 8006ba6:	46c0      	nop			; (mov r8, r8)
 8006ba8:	fffff7ff 	.word	0xfffff7ff

08006bac <HAL_SPI_TransmitReceive>:
{
 8006bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bae:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 8006bb0:	0003      	movs	r3, r0
 8006bb2:	3350      	adds	r3, #80	; 0x50
{
 8006bb4:	0017      	movs	r7, r2
  __HAL_LOCK(hspi);
 8006bb6:	781a      	ldrb	r2, [r3, #0]
{
 8006bb8:	0004      	movs	r4, r0
 8006bba:	000d      	movs	r5, r1
  __HAL_LOCK(hspi);
 8006bbc:	2002      	movs	r0, #2
{
 8006bbe:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 8006bc0:	2a01      	cmp	r2, #1
 8006bc2:	d100      	bne.n	8006bc6 <HAL_SPI_TransmitReceive+0x1a>
 8006bc4:	e092      	b.n	8006cec <HAL_SPI_TransmitReceive+0x140>
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8006bca:	f7fc f8f7 	bl	8002dbc <HAL_GetTick>
  tmp_state           = hspi->State;
 8006bce:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 8006bd0:	9001      	str	r0, [sp, #4]
  tmp_state           = hspi->State;
 8006bd2:	3351      	adds	r3, #81	; 0x51
 8006bd4:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8006bd6:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8006bd8:	b2da      	uxtb	r2, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d00a      	beq.n	8006bf4 <HAL_SPI_TransmitReceive+0x48>
 8006bde:	2382      	movs	r3, #130	; 0x82
    errorcode = HAL_BUSY;
 8006be0:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006be2:	005b      	lsls	r3, r3, #1
 8006be4:	4299      	cmp	r1, r3
 8006be6:	d000      	beq.n	8006bea <HAL_SPI_TransmitReceive+0x3e>
 8006be8:	e079      	b.n	8006cde <HAL_SPI_TransmitReceive+0x132>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006bea:	68a3      	ldr	r3, [r4, #8]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d176      	bne.n	8006cde <HAL_SPI_TransmitReceive+0x132>
 8006bf0:	2a04      	cmp	r2, #4
 8006bf2:	d174      	bne.n	8006cde <HAL_SPI_TransmitReceive+0x132>
    errorcode = HAL_ERROR;
 8006bf4:	2001      	movs	r0, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006bf6:	2d00      	cmp	r5, #0
 8006bf8:	d071      	beq.n	8006cde <HAL_SPI_TransmitReceive+0x132>
 8006bfa:	2f00      	cmp	r7, #0
 8006bfc:	d06f      	beq.n	8006cde <HAL_SPI_TransmitReceive+0x132>
 8006bfe:	2e00      	cmp	r6, #0
 8006c00:	d06d      	beq.n	8006cde <HAL_SPI_TransmitReceive+0x132>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006c02:	0023      	movs	r3, r4
 8006c04:	3351      	adds	r3, #81	; 0x51
 8006c06:	781a      	ldrb	r2, [r3, #0]
 8006c08:	2a04      	cmp	r2, #4
 8006c0a:	d001      	beq.n	8006c10 <HAL_SPI_TransmitReceive+0x64>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006c0c:	2205      	movs	r2, #5
 8006c0e:	701a      	strb	r2, [r3, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c10:	2300      	movs	r3, #0
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c12:	2240      	movs	r2, #64	; 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c14:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8006c16:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006c18:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c1a:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8006c1c:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8006c1e:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c20:	6818      	ldr	r0, [r3, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006c22:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006c24:	87a6      	strh	r6, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006c26:	6325      	str	r5, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006c28:	86a6      	strh	r6, [r4, #52]	; 0x34
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c2a:	4210      	tst	r0, r2
 8006c2c:	d102      	bne.n	8006c34 <HAL_SPI_TransmitReceive+0x88>
    __HAL_SPI_ENABLE(hspi);
 8006c2e:	6818      	ldr	r0, [r3, #0]
 8006c30:	4302      	orrs	r2, r0
 8006c32:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006c34:	2280      	movs	r2, #128	; 0x80
 8006c36:	68e0      	ldr	r0, [r4, #12]
 8006c38:	0112      	lsls	r2, r2, #4
 8006c3a:	4290      	cmp	r0, r2
 8006c3c:	d158      	bne.n	8006cf0 <HAL_SPI_TransmitReceive+0x144>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c3e:	2900      	cmp	r1, #0
 8006c40:	d001      	beq.n	8006c46 <HAL_SPI_TransmitReceive+0x9a>
 8006c42:	2e01      	cmp	r6, #1
 8006c44:	d107      	bne.n	8006c56 <HAL_SPI_TransmitReceive+0xaa>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c46:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c48:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c4a:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8006c4c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c4e:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8006c50:	3b01      	subs	r3, #1
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8006c56:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006c58:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006c5a:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006c5c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d10e      	bne.n	8006c80 <HAL_SPI_TransmitReceive+0xd4>
 8006c62:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d10b      	bne.n	8006c80 <HAL_SPI_TransmitReceive+0xd4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006c68:	0020      	movs	r0, r4
 8006c6a:	9a01      	ldr	r2, [sp, #4]
 8006c6c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006c6e:	f7ff ff07 	bl	8006a80 <SPI_EndRxTxTransaction>
 8006c72:	2800      	cmp	r0, #0
 8006c74:	d100      	bne.n	8006c78 <HAL_SPI_TransmitReceive+0xcc>
 8006c76:	e083      	b.n	8006d80 <HAL_SPI_TransmitReceive+0x1d4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c78:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 8006c7a:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c7c:	6563      	str	r3, [r4, #84]	; 0x54
    goto error;
 8006c7e:	e02e      	b.n	8006cde <HAL_SPI_TransmitReceive+0x132>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006c80:	6821      	ldr	r1, [r4, #0]
 8006c82:	688b      	ldr	r3, [r1, #8]
 8006c84:	423b      	tst	r3, r7
 8006c86:	d00e      	beq.n	8006ca6 <HAL_SPI_TransmitReceive+0xfa>
 8006c88:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d00b      	beq.n	8006ca6 <HAL_SPI_TransmitReceive+0xfa>
 8006c8e:	2d01      	cmp	r5, #1
 8006c90:	d109      	bne.n	8006ca6 <HAL_SPI_TransmitReceive+0xfa>
        txallowed = 0U;
 8006c92:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c94:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006c96:	881a      	ldrh	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c98:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c9a:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c9c:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8006c9e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006ca0:	3b01      	subs	r3, #1
 8006ca2:	b29b      	uxth	r3, r3
 8006ca4:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006ca6:	688b      	ldr	r3, [r1, #8]
 8006ca8:	001a      	movs	r2, r3
 8006caa:	4032      	ands	r2, r6
 8006cac:	4233      	tst	r3, r6
 8006cae:	d00c      	beq.n	8006cca <HAL_SPI_TransmitReceive+0x11e>
 8006cb0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d009      	beq.n	8006cca <HAL_SPI_TransmitReceive+0x11e>
        txallowed = 1U;
 8006cb6:	0015      	movs	r5, r2
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006cb8:	68c9      	ldr	r1, [r1, #12]
 8006cba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006cbc:	8019      	strh	r1, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006cbe:	3302      	adds	r3, #2
 8006cc0:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8006cc2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006cc4:	3b01      	subs	r3, #1
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006cca:	f7fc f877 	bl	8002dbc <HAL_GetTick>
 8006cce:	9b01      	ldr	r3, [sp, #4]
 8006cd0:	1ac0      	subs	r0, r0, r3
 8006cd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006cd4:	4298      	cmp	r0, r3
 8006cd6:	d3c1      	bcc.n	8006c5c <HAL_SPI_TransmitReceive+0xb0>
 8006cd8:	3301      	adds	r3, #1
 8006cda:	d0bf      	beq.n	8006c5c <HAL_SPI_TransmitReceive+0xb0>
        errorcode = HAL_TIMEOUT;
 8006cdc:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8006cde:	0023      	movs	r3, r4
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	3351      	adds	r3, #81	; 0x51
 8006ce4:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	3450      	adds	r4, #80	; 0x50
 8006cea:	7023      	strb	r3, [r4, #0]
}
 8006cec:	b005      	add	sp, #20
 8006cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006cf0:	2900      	cmp	r1, #0
 8006cf2:	d001      	beq.n	8006cf8 <HAL_SPI_TransmitReceive+0x14c>
 8006cf4:	2e01      	cmp	r6, #1
 8006cf6:	d108      	bne.n	8006d0a <HAL_SPI_TransmitReceive+0x15e>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006cf8:	782a      	ldrb	r2, [r5, #0]
 8006cfa:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006cfc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006cfe:	3301      	adds	r3, #1
 8006d00:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8006d02:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006d04:	3b01      	subs	r3, #1
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8006d0a:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006d0c:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006d0e:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d10:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d102      	bne.n	8006d1c <HAL_SPI_TransmitReceive+0x170>
 8006d16:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d0a5      	beq.n	8006c68 <HAL_SPI_TransmitReceive+0xbc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006d1c:	6823      	ldr	r3, [r4, #0]
 8006d1e:	689a      	ldr	r2, [r3, #8]
 8006d20:	423a      	tst	r2, r7
 8006d22:	d00f      	beq.n	8006d44 <HAL_SPI_TransmitReceive+0x198>
 8006d24:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8006d26:	2a00      	cmp	r2, #0
 8006d28:	d00c      	beq.n	8006d44 <HAL_SPI_TransmitReceive+0x198>
 8006d2a:	2d01      	cmp	r5, #1
 8006d2c:	d10a      	bne.n	8006d44 <HAL_SPI_TransmitReceive+0x198>
        txallowed = 0U;
 8006d2e:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006d30:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006d32:	7812      	ldrb	r2, [r2, #0]
 8006d34:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8006d36:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006d38:	3301      	adds	r3, #1
 8006d3a:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8006d3c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006d3e:	3b01      	subs	r3, #1
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006d44:	6823      	ldr	r3, [r4, #0]
 8006d46:	6899      	ldr	r1, [r3, #8]
 8006d48:	000a      	movs	r2, r1
 8006d4a:	4032      	ands	r2, r6
 8006d4c:	4231      	tst	r1, r6
 8006d4e:	d00d      	beq.n	8006d6c <HAL_SPI_TransmitReceive+0x1c0>
 8006d50:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 8006d52:	2900      	cmp	r1, #0
 8006d54:	d00a      	beq.n	8006d6c <HAL_SPI_TransmitReceive+0x1c0>
        txallowed = 1U;
 8006d56:	0015      	movs	r5, r2
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006d5c:	700b      	strb	r3, [r1, #0]
        hspi->pRxBuffPtr++;
 8006d5e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006d60:	3301      	adds	r3, #1
 8006d62:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8006d64:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006d66:	3b01      	subs	r3, #1
 8006d68:	b29b      	uxth	r3, r3
 8006d6a:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006d6c:	f7fc f826 	bl	8002dbc <HAL_GetTick>
 8006d70:	9b01      	ldr	r3, [sp, #4]
 8006d72:	1ac0      	subs	r0, r0, r3
 8006d74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d76:	4298      	cmp	r0, r3
 8006d78:	d3ca      	bcc.n	8006d10 <HAL_SPI_TransmitReceive+0x164>
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	d0c8      	beq.n	8006d10 <HAL_SPI_TransmitReceive+0x164>
 8006d7e:	e7ad      	b.n	8006cdc <HAL_SPI_TransmitReceive+0x130>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006d80:	68a3      	ldr	r3, [r4, #8]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d1ab      	bne.n	8006cde <HAL_SPI_TransmitReceive+0x132>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d86:	6823      	ldr	r3, [r4, #0]
 8006d88:	9003      	str	r0, [sp, #12]
 8006d8a:	68da      	ldr	r2, [r3, #12]
 8006d8c:	9203      	str	r2, [sp, #12]
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	9303      	str	r3, [sp, #12]
 8006d92:	9b03      	ldr	r3, [sp, #12]
 8006d94:	e7a3      	b.n	8006cde <HAL_SPI_TransmitReceive+0x132>

08006d96 <HAL_SPI_GetState>:
  return hspi->State;
 8006d96:	3051      	adds	r0, #81	; 0x51
 8006d98:	7800      	ldrb	r0, [r0, #0]
 8006d9a:	b2c0      	uxtb	r0, r0
}
 8006d9c:	4770      	bx	lr
	...

08006da0 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006da0:	6803      	ldr	r3, [r0, #0]
 8006da2:	490b      	ldr	r1, [pc, #44]	; (8006dd0 <UART_EndRxTransfer+0x30>)
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	400a      	ands	r2, r1
 8006da8:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006daa:	689a      	ldr	r2, [r3, #8]
 8006dac:	3123      	adds	r1, #35	; 0x23
 8006dae:	31ff      	adds	r1, #255	; 0xff
 8006db0:	438a      	bics	r2, r1
 8006db2:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006db4:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8006db6:	428a      	cmp	r2, r1
 8006db8:	d103      	bne.n	8006dc2 <UART_EndRxTransfer+0x22>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	310f      	adds	r1, #15
 8006dbe:	438a      	bics	r2, r1
 8006dc0:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006dc2:	2320      	movs	r3, #32
 8006dc4:	67c3      	str	r3, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006dca:	6643      	str	r3, [r0, #100]	; 0x64
}
 8006dcc:	4770      	bx	lr
 8006dce:	46c0      	nop			; (mov r8, r8)
 8006dd0:	fffffedf 	.word	0xfffffedf

08006dd4 <HAL_UART_Transmit_DMA>:
{
 8006dd4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006dd6:	0013      	movs	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8006dd8:	6f82      	ldr	r2, [r0, #120]	; 0x78
{
 8006dda:	0004      	movs	r4, r0
    return HAL_BUSY;
 8006ddc:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8006dde:	2a20      	cmp	r2, #32
 8006de0:	d13a      	bne.n	8006e58 <HAL_UART_Transmit_DMA+0x84>
      return HAL_ERROR;
 8006de2:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8006de4:	2900      	cmp	r1, #0
 8006de6:	d037      	beq.n	8006e58 <HAL_UART_Transmit_DMA+0x84>
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d035      	beq.n	8006e58 <HAL_UART_Transmit_DMA+0x84>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006dec:	2280      	movs	r2, #128	; 0x80
 8006dee:	68a0      	ldr	r0, [r4, #8]
 8006df0:	0152      	lsls	r2, r2, #5
 8006df2:	4290      	cmp	r0, r2
 8006df4:	d106      	bne.n	8006e04 <HAL_UART_Transmit_DMA+0x30>
 8006df6:	6922      	ldr	r2, [r4, #16]
 8006df8:	2a00      	cmp	r2, #0
 8006dfa:	d103      	bne.n	8006e04 <HAL_UART_Transmit_DMA+0x30>
      if ((((uint32_t)pData) & 1U) != 0U)
 8006dfc:	3201      	adds	r2, #1
      return HAL_ERROR;
 8006dfe:	0010      	movs	r0, r2
      if ((((uint32_t)pData) & 1U) != 0U)
 8006e00:	4211      	tst	r1, r2
 8006e02:	d129      	bne.n	8006e58 <HAL_UART_Transmit_DMA+0x84>
    __HAL_LOCK(huart);
 8006e04:	0025      	movs	r5, r4
 8006e06:	3574      	adds	r5, #116	; 0x74
 8006e08:	782a      	ldrb	r2, [r5, #0]
    return HAL_BUSY;
 8006e0a:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8006e0c:	2a01      	cmp	r2, #1
 8006e0e:	d023      	beq.n	8006e58 <HAL_UART_Transmit_DMA+0x84>
 8006e10:	2201      	movs	r2, #1
 8006e12:	702a      	strb	r2, [r5, #0]
    huart->TxXferSize  = Size;
 8006e14:	0022      	movs	r2, r4
 8006e16:	3250      	adds	r2, #80	; 0x50
    huart->pTxBuffPtr  = pData;
 8006e18:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e1a:	2600      	movs	r6, #0
    huart->TxXferSize  = Size;
 8006e1c:	8013      	strh	r3, [r2, #0]
    huart->TxXferCount = Size;
 8006e1e:	8053      	strh	r3, [r2, #2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e20:	2221      	movs	r2, #33	; 0x21
    if (huart->hdmatx != NULL)
 8006e22:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e24:	1d27      	adds	r7, r4, #4
 8006e26:	67fe      	str	r6, [r7, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e28:	67a2      	str	r2, [r4, #120]	; 0x78
    if (huart->hdmatx != NULL)
 8006e2a:	42b0      	cmp	r0, r6
 8006e2c:	d015      	beq.n	8006e5a <HAL_UART_Transmit_DMA+0x86>
 8006e2e:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferAbortCallback = NULL;
 8006e30:	6386      	str	r6, [r0, #56]	; 0x38
 8006e32:	9201      	str	r2, [sp, #4]
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006e34:	4a0e      	ldr	r2, [pc, #56]	; (8006e70 <HAL_UART_Transmit_DMA+0x9c>)
 8006e36:	62c2      	str	r2, [r0, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006e38:	4a0e      	ldr	r2, [pc, #56]	; (8006e74 <HAL_UART_Transmit_DMA+0xa0>)
 8006e3a:	6302      	str	r2, [r0, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006e3c:	4a0e      	ldr	r2, [pc, #56]	; (8006e78 <HAL_UART_Transmit_DMA+0xa4>)
 8006e3e:	6342      	str	r2, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006e40:	9a01      	ldr	r2, [sp, #4]
 8006e42:	3228      	adds	r2, #40	; 0x28
 8006e44:	f7fd fe62 	bl	8004b0c <HAL_DMA_Start_IT>
 8006e48:	42b0      	cmp	r0, r6
 8006e4a:	d006      	beq.n	8006e5a <HAL_UART_Transmit_DMA+0x86>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006e4c:	2310      	movs	r3, #16
        return HAL_ERROR;
 8006e4e:	2001      	movs	r0, #1
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006e50:	67fb      	str	r3, [r7, #124]	; 0x7c
        huart->gState = HAL_UART_STATE_READY;
 8006e52:	18db      	adds	r3, r3, r3
        __HAL_UNLOCK(huart);
 8006e54:	702e      	strb	r6, [r5, #0]
        huart->gState = HAL_UART_STATE_READY;
 8006e56:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8006e58:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006e5a:	2240      	movs	r2, #64	; 0x40
    __HAL_UNLOCK(huart);
 8006e5c:	2000      	movs	r0, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006e5e:	6823      	ldr	r3, [r4, #0]
    __HAL_UNLOCK(huart);
 8006e60:	3474      	adds	r4, #116	; 0x74
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006e62:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 8006e64:	7020      	strb	r0, [r4, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006e66:	6899      	ldr	r1, [r3, #8]
 8006e68:	1892      	adds	r2, r2, r2
 8006e6a:	430a      	orrs	r2, r1
 8006e6c:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 8006e6e:	e7f3      	b.n	8006e58 <HAL_UART_Transmit_DMA+0x84>
 8006e70:	08006e7d 	.word	0x08006e7d
 8006e74:	08006eb3 	.word	0x08006eb3
 8006e78:	08006ebf 	.word	0x08006ebf

08006e7c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006e7c:	0003      	movs	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006e7e:	681b      	ldr	r3, [r3, #0]
{
 8006e80:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	2320      	movs	r3, #32
 8006e86:	0011      	movs	r1, r2
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e88:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006e8a:	4019      	ands	r1, r3
 8006e8c:	421a      	tst	r2, r3
 8006e8e:	d10c      	bne.n	8006eaa <UART_DMATransmitCplt+0x2e>
  {
    huart->TxXferCount = 0U;
 8006e90:	0003      	movs	r3, r0
 8006e92:	3352      	adds	r3, #82	; 0x52
 8006e94:	8019      	strh	r1, [r3, #0]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006e96:	2180      	movs	r1, #128	; 0x80
 8006e98:	6803      	ldr	r3, [r0, #0]
 8006e9a:	689a      	ldr	r2, [r3, #8]
 8006e9c:	438a      	bics	r2, r1
 8006e9e:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006ea0:	2240      	movs	r2, #64	; 0x40
 8006ea2:	6819      	ldr	r1, [r3, #0]
 8006ea4:	430a      	orrs	r2, r1
 8006ea6:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006ea8:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 8006eaa:	f7fd f84f 	bl	8003f4c <HAL_UART_TxCpltCallback>
}
 8006eae:	e7fb      	b.n	8006ea8 <UART_DMATransmitCplt+0x2c>

08006eb0 <HAL_UART_TxHalfCpltCallback>:
 8006eb0:	4770      	bx	lr

08006eb2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006eb2:	b510      	push	{r4, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006eb4:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8006eb6:	f7ff fffb 	bl	8006eb0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006eba:	bd10      	pop	{r4, pc}

08006ebc <HAL_UART_ErrorCallback>:
 8006ebc:	4770      	bx	lr

08006ebe <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006ebe:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ec0:	6a84      	ldr	r4, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006ec2:	6823      	ldr	r3, [r4, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006ec4:	6fa2      	ldr	r2, [r4, #120]	; 0x78
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006ec6:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006ec8:	6898      	ldr	r0, [r3, #8]
 8006eca:	0600      	lsls	r0, r0, #24
 8006ecc:	d50b      	bpl.n	8006ee6 <UART_DMAError+0x28>
 8006ece:	2a21      	cmp	r2, #33	; 0x21
 8006ed0:	d109      	bne.n	8006ee6 <UART_DMAError+0x28>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006ed2:	0022      	movs	r2, r4
 8006ed4:	2000      	movs	r0, #0
 8006ed6:	3252      	adds	r2, #82	; 0x52
 8006ed8:	8010      	strh	r0, [r2, #0]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	30c0      	adds	r0, #192	; 0xc0
 8006ede:	4382      	bics	r2, r0
 8006ee0:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8006ee2:	2220      	movs	r2, #32
 8006ee4:	67a2      	str	r2, [r4, #120]	; 0x78
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	065b      	lsls	r3, r3, #25
 8006eea:	d508      	bpl.n	8006efe <UART_DMAError+0x40>
 8006eec:	2922      	cmp	r1, #34	; 0x22
 8006eee:	d106      	bne.n	8006efe <UART_DMAError+0x40>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006ef0:	0023      	movs	r3, r4
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	335a      	adds	r3, #90	; 0x5a
    UART_EndRxTransfer(huart);
 8006ef6:	0020      	movs	r0, r4
    huart->RxXferCount = 0U;
 8006ef8:	801a      	strh	r2, [r3, #0]
    UART_EndRxTransfer(huart);
 8006efa:	f7ff ff51 	bl	8006da0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006efe:	2310      	movs	r3, #16
 8006f00:	1d22      	adds	r2, r4, #4
 8006f02:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f04:	0020      	movs	r0, r4
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006f06:	430b      	orrs	r3, r1
 8006f08:	67d3      	str	r3, [r2, #124]	; 0x7c
  HAL_UART_ErrorCallback(huart);
 8006f0a:	f7ff ffd7 	bl	8006ebc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f0e:	bd10      	pop	{r4, pc}

08006f10 <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f10:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8006f12:	2300      	movs	r3, #0
 8006f14:	0002      	movs	r2, r0
{
 8006f16:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 8006f18:	325a      	adds	r2, #90	; 0x5a
 8006f1a:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 8006f1c:	3a08      	subs	r2, #8
 8006f1e:	8013      	strh	r3, [r2, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f20:	f7ff ffcc 	bl	8006ebc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f24:	bd10      	pop	{r4, pc}
	...

08006f28 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006f28:	6803      	ldr	r3, [r0, #0]
{
 8006f2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006f2c:	69d9      	ldr	r1, [r3, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006f2e:	4a85      	ldr	r2, [pc, #532]	; (8007144 <HAL_UART_IRQHandler+0x21c>)
{
 8006f30:	0004      	movs	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006f32:	6818      	ldr	r0, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006f34:	689e      	ldr	r6, [r3, #8]
  if (errorflags == 0U)
 8006f36:	4211      	tst	r1, r2
 8006f38:	d10b      	bne.n	8006f52 <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006f3a:	2220      	movs	r2, #32
 8006f3c:	4211      	tst	r1, r2
 8006f3e:	d100      	bne.n	8006f42 <HAL_UART_IRQHandler+0x1a>
 8006f40:	e076      	b.n	8007030 <HAL_UART_IRQHandler+0x108>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006f42:	4210      	tst	r0, r2
 8006f44:	d100      	bne.n	8006f48 <HAL_UART_IRQHandler+0x20>
 8006f46:	e073      	b.n	8007030 <HAL_UART_IRQHandler+0x108>
      if (huart->RxISR != NULL)
 8006f48:	6e63      	ldr	r3, [r4, #100]	; 0x64
      huart->TxISR(huart);
 8006f4a:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d165      	bne.n	800701c <HAL_UART_IRQHandler+0xf4>
 8006f50:	e065      	b.n	800701e <HAL_UART_IRQHandler+0xf6>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006f52:	2201      	movs	r2, #1
 8006f54:	0037      	movs	r7, r6
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006f56:	4d7c      	ldr	r5, [pc, #496]	; (8007148 <HAL_UART_IRQHandler+0x220>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006f58:	4017      	ands	r7, r2
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006f5a:	4005      	ands	r5, r0
 8006f5c:	433d      	orrs	r5, r7
 8006f5e:	d067      	beq.n	8007030 <HAL_UART_IRQHandler+0x108>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006f60:	1d25      	adds	r5, r4, #4
 8006f62:	4211      	tst	r1, r2
 8006f64:	d005      	beq.n	8006f72 <HAL_UART_IRQHandler+0x4a>
 8006f66:	05c6      	lsls	r6, r0, #23
 8006f68:	d503      	bpl.n	8006f72 <HAL_UART_IRQHandler+0x4a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006f6a:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f6c:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 8006f6e:	4332      	orrs	r2, r6
 8006f70:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f72:	2202      	movs	r2, #2
 8006f74:	4211      	tst	r1, r2
 8006f76:	d006      	beq.n	8006f86 <HAL_UART_IRQHandler+0x5e>
 8006f78:	2f00      	cmp	r7, #0
 8006f7a:	d004      	beq.n	8006f86 <HAL_UART_IRQHandler+0x5e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006f7c:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f7e:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 8006f80:	1892      	adds	r2, r2, r2
 8006f82:	4332      	orrs	r2, r6
 8006f84:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f86:	2204      	movs	r2, #4
 8006f88:	4211      	tst	r1, r2
 8006f8a:	d006      	beq.n	8006f9a <HAL_UART_IRQHandler+0x72>
 8006f8c:	2f00      	cmp	r7, #0
 8006f8e:	d004      	beq.n	8006f9a <HAL_UART_IRQHandler+0x72>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006f90:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f92:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 8006f94:	3a02      	subs	r2, #2
 8006f96:	4332      	orrs	r2, r6
 8006f98:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006f9a:	2208      	movs	r2, #8
 8006f9c:	4211      	tst	r1, r2
 8006f9e:	d007      	beq.n	8006fb0 <HAL_UART_IRQHandler+0x88>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006fa0:	2620      	movs	r6, #32
 8006fa2:	4006      	ands	r6, r0
 8006fa4:	433e      	orrs	r6, r7
 8006fa6:	d003      	beq.n	8006fb0 <HAL_UART_IRQHandler+0x88>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006fa8:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006faa:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 8006fac:	4332      	orrs	r2, r6
 8006fae:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006fb0:	2280      	movs	r2, #128	; 0x80
 8006fb2:	0112      	lsls	r2, r2, #4
 8006fb4:	4211      	tst	r1, r2
 8006fb6:	d006      	beq.n	8006fc6 <HAL_UART_IRQHandler+0x9e>
 8006fb8:	0146      	lsls	r6, r0, #5
 8006fba:	d504      	bpl.n	8006fc6 <HAL_UART_IRQHandler+0x9e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006fbc:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006fbe:	2320      	movs	r3, #32
 8006fc0:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	67eb      	str	r3, [r5, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006fc6:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d028      	beq.n	800701e <HAL_UART_IRQHandler+0xf6>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006fcc:	2320      	movs	r3, #32
 8006fce:	4219      	tst	r1, r3
 8006fd0:	d006      	beq.n	8006fe0 <HAL_UART_IRQHandler+0xb8>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006fd2:	4218      	tst	r0, r3
 8006fd4:	d004      	beq.n	8006fe0 <HAL_UART_IRQHandler+0xb8>
        if (huart->RxISR != NULL)
 8006fd6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d001      	beq.n	8006fe0 <HAL_UART_IRQHandler+0xb8>
          huart->RxISR(huart);
 8006fdc:	0020      	movs	r0, r4
 8006fde:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006fe0:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 8006fe2:	6feb      	ldr	r3, [r5, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006fe4:	2740      	movs	r7, #64	; 0x40
 8006fe6:	6896      	ldr	r6, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006fe8:	2228      	movs	r2, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006fea:	403e      	ands	r6, r7
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006fec:	4013      	ands	r3, r2
        UART_EndRxTransfer(huart);
 8006fee:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006ff0:	431e      	orrs	r6, r3
 8006ff2:	d019      	beq.n	8007028 <HAL_UART_IRQHandler+0x100>
        UART_EndRxTransfer(huart);
 8006ff4:	f7ff fed4 	bl	8006da0 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ff8:	6823      	ldr	r3, [r4, #0]
 8006ffa:	689a      	ldr	r2, [r3, #8]
 8006ffc:	423a      	tst	r2, r7
 8006ffe:	d00f      	beq.n	8007020 <HAL_UART_IRQHandler+0xf8>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007000:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8007002:	6f20      	ldr	r0, [r4, #112]	; 0x70
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007004:	43ba      	bics	r2, r7
 8007006:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8007008:	2800      	cmp	r0, #0
 800700a:	d009      	beq.n	8007020 <HAL_UART_IRQHandler+0xf8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800700c:	4b4f      	ldr	r3, [pc, #316]	; (800714c <HAL_UART_IRQHandler+0x224>)
 800700e:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007010:	f7fd fddc 	bl	8004bcc <HAL_DMA_Abort_IT>
 8007014:	2800      	cmp	r0, #0
 8007016:	d002      	beq.n	800701e <HAL_UART_IRQHandler+0xf6>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007018:	6f20      	ldr	r0, [r4, #112]	; 0x70
 800701a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800701c:	4798      	blx	r3
}
 800701e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 8007020:	0020      	movs	r0, r4
 8007022:	f7ff ff4b 	bl	8006ebc <HAL_UART_ErrorCallback>
 8007026:	e7fa      	b.n	800701e <HAL_UART_IRQHandler+0xf6>
        HAL_UART_ErrorCallback(huart);
 8007028:	f7ff ff48 	bl	8006ebc <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800702c:	67ee      	str	r6, [r5, #124]	; 0x7c
 800702e:	e7f6      	b.n	800701e <HAL_UART_IRQHandler+0xf6>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007030:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8007032:	2d01      	cmp	r5, #1
 8007034:	d161      	bne.n	80070fa <HAL_UART_IRQHandler+0x1d2>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8007036:	2210      	movs	r2, #16
 8007038:	4211      	tst	r1, r2
 800703a:	d05e      	beq.n	80070fa <HAL_UART_IRQHandler+0x1d2>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 800703c:	4210      	tst	r0, r2
 800703e:	d05c      	beq.n	80070fa <HAL_UART_IRQHandler+0x1d2>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007040:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007042:	6899      	ldr	r1, [r3, #8]
 8007044:	2640      	movs	r6, #64	; 0x40
 8007046:	000f      	movs	r7, r1
 8007048:	4037      	ands	r7, r6
 800704a:	4231      	tst	r1, r6
 800704c:	d038      	beq.n	80070c0 <HAL_UART_IRQHandler+0x198>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800704e:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8007050:	680f      	ldr	r7, [r1, #0]
 8007052:	9100      	str	r1, [sp, #0]
 8007054:	6879      	ldr	r1, [r7, #4]
 8007056:	b289      	uxth	r1, r1
      if (  (nb_remaining_rx_data > 0U)
 8007058:	2900      	cmp	r1, #0
 800705a:	d0e0      	beq.n	800701e <HAL_UART_IRQHandler+0xf6>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800705c:	2058      	movs	r0, #88	; 0x58
 800705e:	4684      	mov	ip, r0
 8007060:	44a4      	add	ip, r4
 8007062:	4660      	mov	r0, ip
 8007064:	8800      	ldrh	r0, [r0, #0]
 8007066:	4288      	cmp	r0, r1
 8007068:	d9d9      	bls.n	800701e <HAL_UART_IRQHandler+0xf6>
        huart->RxXferCount = nb_remaining_rx_data;
 800706a:	205a      	movs	r0, #90	; 0x5a
 800706c:	4684      	mov	ip, r0
 800706e:	44a4      	add	ip, r4
 8007070:	4660      	mov	r0, ip
 8007072:	8001      	strh	r1, [r0, #0]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007074:	683f      	ldr	r7, [r7, #0]
 8007076:	2120      	movs	r1, #32
 8007078:	0038      	movs	r0, r7
 800707a:	4008      	ands	r0, r1
 800707c:	9001      	str	r0, [sp, #4]
 800707e:	420f      	tst	r7, r1
 8007080:	d112      	bne.n	80070a8 <HAL_UART_IRQHandler+0x180>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007082:	681f      	ldr	r7, [r3, #0]
 8007084:	4832      	ldr	r0, [pc, #200]	; (8007150 <HAL_UART_IRQHandler+0x228>)
 8007086:	4007      	ands	r7, r0
 8007088:	601f      	str	r7, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800708a:	689f      	ldr	r7, [r3, #8]
          (void)HAL_DMA_Abort(huart->hdmarx);
 800708c:	9800      	ldr	r0, [sp, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800708e:	43af      	bics	r7, r5
 8007090:	609f      	str	r7, [r3, #8]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007092:	689d      	ldr	r5, [r3, #8]
 8007094:	43b5      	bics	r5, r6
 8007096:	609d      	str	r5, [r3, #8]
          huart->RxState = HAL_UART_STATE_READY;
 8007098:	67e1      	str	r1, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800709a:	9901      	ldr	r1, [sp, #4]
 800709c:	6621      	str	r1, [r4, #96]	; 0x60
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800709e:	6819      	ldr	r1, [r3, #0]
 80070a0:	4391      	bics	r1, r2
 80070a2:	6019      	str	r1, [r3, #0]
          (void)HAL_DMA_Abort(huart->hdmarx);
 80070a4:	f7fd fd72 	bl	8004b8c <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80070a8:	0023      	movs	r3, r4
 80070aa:	0022      	movs	r2, r4
 80070ac:	335a      	adds	r3, #90	; 0x5a
 80070ae:	3258      	adds	r2, #88	; 0x58
 80070b0:	881b      	ldrh	r3, [r3, #0]
 80070b2:	8811      	ldrh	r1, [r2, #0]
 80070b4:	1ac9      	subs	r1, r1, r3
 80070b6:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80070b8:	0020      	movs	r0, r4
 80070ba:	f7fc ff6b 	bl	8003f94 <HAL_UARTEx_RxEventCallback>
 80070be:	e7ae      	b.n	800701e <HAL_UART_IRQHandler+0xf6>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80070c0:	0026      	movs	r6, r4
 80070c2:	365a      	adds	r6, #90	; 0x5a
 80070c4:	8830      	ldrh	r0, [r6, #0]
      if (  (huart->RxXferCount > 0U)
 80070c6:	8831      	ldrh	r1, [r6, #0]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80070c8:	b280      	uxth	r0, r0
      if (  (huart->RxXferCount > 0U)
 80070ca:	2900      	cmp	r1, #0
 80070cc:	d0a7      	beq.n	800701e <HAL_UART_IRQHandler+0xf6>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80070ce:	0021      	movs	r1, r4
 80070d0:	3158      	adds	r1, #88	; 0x58
 80070d2:	8809      	ldrh	r1, [r1, #0]
 80070d4:	1a09      	subs	r1, r1, r0
 80070d6:	b289      	uxth	r1, r1
          &&(nb_rx_data > 0U) )
 80070d8:	2900      	cmp	r1, #0
 80070da:	d0a0      	beq.n	800701e <HAL_UART_IRQHandler+0xf6>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070dc:	6818      	ldr	r0, [r3, #0]
 80070de:	4e1d      	ldr	r6, [pc, #116]	; (8007154 <HAL_UART_IRQHandler+0x22c>)
 80070e0:	4030      	ands	r0, r6
 80070e2:	6018      	str	r0, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070e4:	6898      	ldr	r0, [r3, #8]
 80070e6:	43a8      	bics	r0, r5
 80070e8:	6098      	str	r0, [r3, #8]
        huart->RxState = HAL_UART_STATE_READY;
 80070ea:	2020      	movs	r0, #32
 80070ec:	67e0      	str	r0, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070ee:	6627      	str	r7, [r4, #96]	; 0x60
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070f0:	6818      	ldr	r0, [r3, #0]
        huart->RxISR = NULL;
 80070f2:	6667      	str	r7, [r4, #100]	; 0x64
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070f4:	4390      	bics	r0, r2
 80070f6:	6018      	str	r0, [r3, #0]
 80070f8:	e7de      	b.n	80070b8 <HAL_UART_IRQHandler+0x190>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80070fa:	2280      	movs	r2, #128	; 0x80
 80070fc:	0352      	lsls	r2, r2, #13
 80070fe:	4211      	tst	r1, r2
 8007100:	d006      	beq.n	8007110 <HAL_UART_IRQHandler+0x1e8>
 8007102:	0275      	lsls	r5, r6, #9
 8007104:	d504      	bpl.n	8007110 <HAL_UART_IRQHandler+0x1e8>
    HAL_UARTEx_WakeupCallback(huart);
 8007106:	0020      	movs	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007108:	621a      	str	r2, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800710a:	f000 fb45 	bl	8007798 <HAL_UARTEx_WakeupCallback>
    return;
 800710e:	e786      	b.n	800701e <HAL_UART_IRQHandler+0xf6>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007110:	2280      	movs	r2, #128	; 0x80
 8007112:	4211      	tst	r1, r2
 8007114:	d003      	beq.n	800711e <HAL_UART_IRQHandler+0x1f6>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007116:	4210      	tst	r0, r2
 8007118:	d001      	beq.n	800711e <HAL_UART_IRQHandler+0x1f6>
    if (huart->TxISR != NULL)
 800711a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800711c:	e715      	b.n	8006f4a <HAL_UART_IRQHandler+0x22>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800711e:	2540      	movs	r5, #64	; 0x40
 8007120:	4229      	tst	r1, r5
 8007122:	d100      	bne.n	8007126 <HAL_UART_IRQHandler+0x1fe>
 8007124:	e77b      	b.n	800701e <HAL_UART_IRQHandler+0xf6>
 8007126:	4228      	tst	r0, r5
 8007128:	d100      	bne.n	800712c <HAL_UART_IRQHandler+0x204>
 800712a:	e778      	b.n	800701e <HAL_UART_IRQHandler+0xf6>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800712c:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800712e:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007130:	43aa      	bics	r2, r5
 8007132:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8007134:	2320      	movs	r3, #32
 8007136:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->TxISR = NULL;
 8007138:	2300      	movs	r3, #0
 800713a:	66a3      	str	r3, [r4, #104]	; 0x68
  HAL_UART_TxCpltCallback(huart);
 800713c:	f7fc ff06 	bl	8003f4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007140:	e76d      	b.n	800701e <HAL_UART_IRQHandler+0xf6>
 8007142:	46c0      	nop			; (mov r8, r8)
 8007144:	0000080f 	.word	0x0000080f
 8007148:	04000120 	.word	0x04000120
 800714c:	08006f11 	.word	0x08006f11
 8007150:	fffffeff 	.word	0xfffffeff
 8007154:	fffffedf 	.word	0xfffffedf

08007158 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007158:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
{
 800715a:	b510      	push	{r4, lr}
 800715c:	6803      	ldr	r3, [r0, #0]
 800715e:	0004      	movs	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007160:	2a22      	cmp	r2, #34	; 0x22
 8007162:	d134      	bne.n	80071ce <UART_RxISR_8BIT+0x76>
  uint16_t uhMask = huart->Mask;
 8007164:	0002      	movs	r2, r0
 8007166:	325c      	adds	r2, #92	; 0x5c
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800716a:	8812      	ldrh	r2, [r2, #0]
 800716c:	4013      	ands	r3, r2
 800716e:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8007170:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
    huart->RxXferCount--;
 8007172:	0002      	movs	r2, r0
    huart->pRxBuffPtr++;
 8007174:	6d43      	ldr	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8007176:	325a      	adds	r2, #90	; 0x5a
    huart->pRxBuffPtr++;
 8007178:	3301      	adds	r3, #1
 800717a:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 800717c:	8813      	ldrh	r3, [r2, #0]
 800717e:	3b01      	subs	r3, #1
 8007180:	b29b      	uxth	r3, r3
 8007182:	8013      	strh	r3, [r2, #0]

    if (huart->RxXferCount == 0U)
 8007184:	8813      	ldrh	r3, [r2, #0]
 8007186:	b299      	uxth	r1, r3
 8007188:	2b00      	cmp	r3, #0
 800718a:	d11b      	bne.n	80071c4 <UART_RxISR_8BIT+0x6c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800718c:	6803      	ldr	r3, [r0, #0]
 800718e:	4812      	ldr	r0, [pc, #72]	; (80071d8 <UART_RxISR_8BIT+0x80>)
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	4002      	ands	r2, r0
 8007194:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007196:	689a      	ldr	r2, [r3, #8]
 8007198:	3023      	adds	r0, #35	; 0x23
 800719a:	30ff      	adds	r0, #255	; 0xff
 800719c:	4382      	bics	r2, r0
 800719e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80071a0:	2220      	movs	r2, #32
 80071a2:	67e2      	str	r2, [r4, #124]	; 0x7c
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071a4:	6e22      	ldr	r2, [r4, #96]	; 0x60
      huart->RxISR = NULL;
 80071a6:	6661      	str	r1, [r4, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071a8:	4282      	cmp	r2, r0
 80071aa:	d10c      	bne.n	80071c6 <UART_RxISR_8BIT+0x6e>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071ac:	2110      	movs	r1, #16
 80071ae:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80071b0:	0020      	movs	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071b2:	438a      	bics	r2, r1
 80071b4:	601a      	str	r2, [r3, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80071b6:	0023      	movs	r3, r4
 80071b8:	3358      	adds	r3, #88	; 0x58
 80071ba:	8819      	ldrh	r1, [r3, #0]
 80071bc:	f7fc feea 	bl	8003f94 <HAL_UARTEx_RxEventCallback>
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071c0:	2300      	movs	r3, #0
 80071c2:	6623      	str	r3, [r4, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80071c4:	bd10      	pop	{r4, pc}
        HAL_UART_RxCpltCallback(huart);
 80071c6:	0020      	movs	r0, r4
 80071c8:	f7fc fec8 	bl	8003f5c <HAL_UART_RxCpltCallback>
 80071cc:	e7f8      	b.n	80071c0 <UART_RxISR_8BIT+0x68>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80071ce:	2208      	movs	r2, #8
 80071d0:	6999      	ldr	r1, [r3, #24]
 80071d2:	430a      	orrs	r2, r1
 80071d4:	619a      	str	r2, [r3, #24]
}
 80071d6:	e7f5      	b.n	80071c4 <UART_RxISR_8BIT+0x6c>
 80071d8:	fffffedf 	.word	0xfffffedf

080071dc <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80071dc:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
{
 80071de:	b510      	push	{r4, lr}
 80071e0:	6803      	ldr	r3, [r0, #0]
 80071e2:	0004      	movs	r4, r0
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80071e4:	2a22      	cmp	r2, #34	; 0x22
 80071e6:	d131      	bne.n	800724c <UART_RxISR_16BIT+0x70>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80071e8:	6d42      	ldr	r2, [r0, #84]	; 0x54
  uint16_t uhMask = huart->Mask;
 80071ea:	305c      	adds	r0, #92	; 0x5c
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80071ec:	6a59      	ldr	r1, [r3, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 80071ee:	8800      	ldrh	r0, [r0, #0]
 80071f0:	4001      	ands	r1, r0
 80071f2:	8011      	strh	r1, [r2, #0]
    huart->pRxBuffPtr += 2U;
    huart->RxXferCount--;
 80071f4:	0021      	movs	r1, r4
    huart->pRxBuffPtr += 2U;
 80071f6:	3202      	adds	r2, #2
    huart->RxXferCount--;
 80071f8:	315a      	adds	r1, #90	; 0x5a
    huart->pRxBuffPtr += 2U;
 80071fa:	6562      	str	r2, [r4, #84]	; 0x54
    huart->RxXferCount--;
 80071fc:	880a      	ldrh	r2, [r1, #0]
 80071fe:	3a01      	subs	r2, #1
 8007200:	b292      	uxth	r2, r2
 8007202:	800a      	strh	r2, [r1, #0]

    if (huart->RxXferCount == 0U)
 8007204:	880a      	ldrh	r2, [r1, #0]
 8007206:	b291      	uxth	r1, r2
 8007208:	2a00      	cmp	r2, #0
 800720a:	d11a      	bne.n	8007242 <UART_RxISR_16BIT+0x66>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	4812      	ldr	r0, [pc, #72]	; (8007258 <UART_RxISR_16BIT+0x7c>)
 8007210:	4002      	ands	r2, r0
 8007212:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007214:	689a      	ldr	r2, [r3, #8]
 8007216:	3023      	adds	r0, #35	; 0x23
 8007218:	30ff      	adds	r0, #255	; 0xff
 800721a:	4382      	bics	r2, r0
 800721c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800721e:	2220      	movs	r2, #32
 8007220:	67e2      	str	r2, [r4, #124]	; 0x7c
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007222:	6e22      	ldr	r2, [r4, #96]	; 0x60
      huart->RxISR = NULL;
 8007224:	6661      	str	r1, [r4, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007226:	4282      	cmp	r2, r0
 8007228:	d10c      	bne.n	8007244 <UART_RxISR_16BIT+0x68>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800722a:	2110      	movs	r1, #16
 800722c:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800722e:	0020      	movs	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007230:	438a      	bics	r2, r1
 8007232:	601a      	str	r2, [r3, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007234:	0023      	movs	r3, r4
 8007236:	3358      	adds	r3, #88	; 0x58
 8007238:	8819      	ldrh	r1, [r3, #0]
 800723a:	f7fc feab 	bl	8003f94 <HAL_UARTEx_RxEventCallback>
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800723e:	2300      	movs	r3, #0
 8007240:	6623      	str	r3, [r4, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007242:	bd10      	pop	{r4, pc}
        HAL_UART_RxCpltCallback(huart);
 8007244:	0020      	movs	r0, r4
 8007246:	f7fc fe89 	bl	8003f5c <HAL_UART_RxCpltCallback>
 800724a:	e7f8      	b.n	800723e <UART_RxISR_16BIT+0x62>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800724c:	2208      	movs	r2, #8
 800724e:	6999      	ldr	r1, [r3, #24]
 8007250:	430a      	orrs	r2, r1
 8007252:	619a      	str	r2, [r3, #24]
}
 8007254:	e7f5      	b.n	8007242 <UART_RxISR_16BIT+0x66>
 8007256:	46c0      	nop			; (mov r8, r8)
 8007258:	fffffedf 	.word	0xfffffedf

0800725c <UART_SetConfig>:
{
 800725c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800725e:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007260:	6925      	ldr	r5, [r4, #16]
 8007262:	68a1      	ldr	r1, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 8007264:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007266:	4329      	orrs	r1, r5
 8007268:	6965      	ldr	r5, [r4, #20]
 800726a:	69c3      	ldr	r3, [r0, #28]
 800726c:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800726e:	6810      	ldr	r0, [r2, #0]
 8007270:	4d72      	ldr	r5, [pc, #456]	; (800743c <UART_SetConfig+0x1e0>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007272:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007274:	4028      	ands	r0, r5
 8007276:	4301      	orrs	r1, r0
 8007278:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800727a:	6851      	ldr	r1, [r2, #4]
 800727c:	4870      	ldr	r0, [pc, #448]	; (8007440 <UART_SetConfig+0x1e4>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800727e:	4d71      	ldr	r5, [pc, #452]	; (8007444 <UART_SetConfig+0x1e8>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007280:	4001      	ands	r1, r0
 8007282:	68e0      	ldr	r0, [r4, #12]
 8007284:	4301      	orrs	r1, r0
 8007286:	6051      	str	r1, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007288:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800728a:	42aa      	cmp	r2, r5
 800728c:	d001      	beq.n	8007292 <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 800728e:	6a21      	ldr	r1, [r4, #32]
 8007290:	4308      	orrs	r0, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007292:	6891      	ldr	r1, [r2, #8]
 8007294:	4e6c      	ldr	r6, [pc, #432]	; (8007448 <UART_SetConfig+0x1ec>)
 8007296:	4031      	ands	r1, r6
 8007298:	4301      	orrs	r1, r0
 800729a:	6091      	str	r1, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800729c:	496b      	ldr	r1, [pc, #428]	; (800744c <UART_SetConfig+0x1f0>)
 800729e:	428a      	cmp	r2, r1
 80072a0:	d10f      	bne.n	80072c2 <UART_SetConfig+0x66>
 80072a2:	2103      	movs	r1, #3
 80072a4:	4a6a      	ldr	r2, [pc, #424]	; (8007450 <UART_SetConfig+0x1f4>)
 80072a6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80072a8:	400a      	ands	r2, r1
 80072aa:	3a01      	subs	r2, #1
 80072ac:	4969      	ldr	r1, [pc, #420]	; (8007454 <UART_SetConfig+0x1f8>)
 80072ae:	2a02      	cmp	r2, #2
 80072b0:	d90f      	bls.n	80072d2 <UART_SetConfig+0x76>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072b2:	2280      	movs	r2, #128	; 0x80
 80072b4:	0212      	lsls	r2, r2, #8
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d100      	bne.n	80072bc <UART_SetConfig+0x60>
 80072ba:	e069      	b.n	8007390 <UART_SetConfig+0x134>
        pclk = HAL_RCC_GetPCLK2Freq();
 80072bc:	f7fe ff3a 	bl	8006134 <HAL_RCC_GetPCLK2Freq>
        break;
 80072c0:	e09c      	b.n	80073fc <UART_SetConfig+0x1a0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072c2:	4965      	ldr	r1, [pc, #404]	; (8007458 <UART_SetConfig+0x1fc>)
 80072c4:	428a      	cmp	r2, r1
 80072c6:	d113      	bne.n	80072f0 <UART_SetConfig+0x94>
 80072c8:	210c      	movs	r1, #12
 80072ca:	4a61      	ldr	r2, [pc, #388]	; (8007450 <UART_SetConfig+0x1f4>)
 80072cc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80072ce:	400a      	ands	r2, r1
 80072d0:	4962      	ldr	r1, [pc, #392]	; (800745c <UART_SetConfig+0x200>)
 80072d2:	5c88      	ldrb	r0, [r1, r2]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072d4:	2280      	movs	r2, #128	; 0x80
 80072d6:	0212      	lsls	r2, r2, #8
 80072d8:	4293      	cmp	r3, r2
 80072da:	d000      	beq.n	80072de <UART_SetConfig+0x82>
 80072dc:	e07f      	b.n	80073de <UART_SetConfig+0x182>
    switch (clocksource)
 80072de:	2808      	cmp	r0, #8
 80072e0:	d818      	bhi.n	8007314 <UART_SetConfig+0xb8>
 80072e2:	f7f8 ff19 	bl	8000118 <__gnu_thumb1_case_uqi>
 80072e6:	5550      	.short	0x5550
 80072e8:	17791758 	.word	0x17791758
 80072ec:	1717      	.short	0x1717
 80072ee:	63          	.byte	0x63
 80072ef:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072f0:	42aa      	cmp	r2, r5
 80072f2:	d10f      	bne.n	8007314 <UART_SetConfig+0xb8>
 80072f4:	21c0      	movs	r1, #192	; 0xc0
 80072f6:	2080      	movs	r0, #128	; 0x80
 80072f8:	4a55      	ldr	r2, [pc, #340]	; (8007450 <UART_SetConfig+0x1f4>)
 80072fa:	0109      	lsls	r1, r1, #4
 80072fc:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80072fe:	0100      	lsls	r0, r0, #4
 8007300:	400b      	ands	r3, r1
 8007302:	4283      	cmp	r3, r0
 8007304:	d016      	beq.n	8007334 <UART_SetConfig+0xd8>
 8007306:	d807      	bhi.n	8007318 <UART_SetConfig+0xbc>
 8007308:	2b00      	cmp	r3, #0
 800730a:	d00a      	beq.n	8007322 <UART_SetConfig+0xc6>
 800730c:	2280      	movs	r2, #128	; 0x80
 800730e:	00d2      	lsls	r2, r2, #3
 8007310:	4293      	cmp	r3, r2
 8007312:	d035      	beq.n	8007380 <UART_SetConfig+0x124>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007314:	2001      	movs	r0, #1
 8007316:	e009      	b.n	800732c <UART_SetConfig+0xd0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007318:	428b      	cmp	r3, r1
 800731a:	d1fb      	bne.n	8007314 <UART_SetConfig+0xb8>
 800731c:	2080      	movs	r0, #128	; 0x80
 800731e:	0200      	lsls	r0, r0, #8
 8007320:	e012      	b.n	8007348 <UART_SetConfig+0xec>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007322:	f7fe fef7 	bl	8006114 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8007326:	2800      	cmp	r0, #0
 8007328:	d10e      	bne.n	8007348 <UART_SetConfig+0xec>
 800732a:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 800732c:	2300      	movs	r3, #0
 800732e:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 8007330:	66a3      	str	r3, [r4, #104]	; 0x68
}
 8007332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007334:	2310      	movs	r3, #16
 8007336:	6810      	ldr	r0, [r2, #0]
 8007338:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800733a:	4243      	negs	r3, r0
 800733c:	4158      	adcs	r0, r3
 800733e:	4b48      	ldr	r3, [pc, #288]	; (8007460 <UART_SetConfig+0x204>)
 8007340:	4240      	negs	r0, r0
 8007342:	4018      	ands	r0, r3
 8007344:	4b47      	ldr	r3, [pc, #284]	; (8007464 <UART_SetConfig+0x208>)
 8007346:	18c0      	adds	r0, r0, r3
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007348:	2203      	movs	r2, #3
 800734a:	6863      	ldr	r3, [r4, #4]
 800734c:	435a      	muls	r2, r3
 800734e:	4282      	cmp	r2, r0
 8007350:	d8e0      	bhi.n	8007314 <UART_SetConfig+0xb8>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007352:	031a      	lsls	r2, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007354:	4282      	cmp	r2, r0
 8007356:	d3dd      	bcc.n	8007314 <UART_SetConfig+0xb8>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007358:	2700      	movs	r7, #0
 800735a:	0e02      	lsrs	r2, r0, #24
 800735c:	0201      	lsls	r1, r0, #8
 800735e:	085e      	lsrs	r6, r3, #1
 8007360:	1989      	adds	r1, r1, r6
 8007362:	417a      	adcs	r2, r7
 8007364:	0008      	movs	r0, r1
 8007366:	0011      	movs	r1, r2
 8007368:	001a      	movs	r2, r3
 800736a:	003b      	movs	r3, r7
 800736c:	f7f9 f8a6 	bl	80004bc <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007370:	4b3d      	ldr	r3, [pc, #244]	; (8007468 <UART_SetConfig+0x20c>)
 8007372:	18c2      	adds	r2, r0, r3
 8007374:	4b3d      	ldr	r3, [pc, #244]	; (800746c <UART_SetConfig+0x210>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007376:	429a      	cmp	r2, r3
 8007378:	d8cc      	bhi.n	8007314 <UART_SetConfig+0xb8>
        huart->Instance->BRR = usartdiv;
 800737a:	6823      	ldr	r3, [r4, #0]
 800737c:	60d8      	str	r0, [r3, #12]
 800737e:	e7d4      	b.n	800732a <UART_SetConfig+0xce>
        pclk = HAL_RCC_GetSysClockFreq();
 8007380:	f7fe fb6a 	bl	8005a58 <HAL_RCC_GetSysClockFreq>
        break;
 8007384:	e7cf      	b.n	8007326 <UART_SetConfig+0xca>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007386:	f7fe fec5 	bl	8006114 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 800738a:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 800738c:	d0cd      	beq.n	800732a <UART_SetConfig+0xce>
 800738e:	e00d      	b.n	80073ac <UART_SetConfig+0x150>
        pclk = HAL_RCC_GetPCLK2Freq();
 8007390:	f7fe fed0 	bl	8006134 <HAL_RCC_GetPCLK2Freq>
 8007394:	e7f9      	b.n	800738a <UART_SetConfig+0x12e>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007396:	4b2e      	ldr	r3, [pc, #184]	; (8007450 <UART_SetConfig+0x1f4>)
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8007398:	4a32      	ldr	r2, [pc, #200]	; (8007464 <UART_SetConfig+0x208>)
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800739a:	6818      	ldr	r0, [r3, #0]
 800739c:	2310      	movs	r3, #16
 800739e:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80073a0:	4243      	negs	r3, r0
 80073a2:	4158      	adcs	r0, r3
 80073a4:	4b2e      	ldr	r3, [pc, #184]	; (8007460 <UART_SetConfig+0x204>)
 80073a6:	4240      	negs	r0, r0
 80073a8:	4003      	ands	r3, r0
 80073aa:	189b      	adds	r3, r3, r2
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80073ac:	0058      	lsls	r0, r3, #1
 80073ae:	6863      	ldr	r3, [r4, #4]
 80073b0:	6861      	ldr	r1, [r4, #4]
 80073b2:	085b      	lsrs	r3, r3, #1
 80073b4:	18c0      	adds	r0, r0, r3
 80073b6:	f7f8 fecd 	bl	8000154 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073ba:	492d      	ldr	r1, [pc, #180]	; (8007470 <UART_SetConfig+0x214>)
 80073bc:	b282      	uxth	r2, r0
 80073be:	3a10      	subs	r2, #16
 80073c0:	0403      	lsls	r3, r0, #16
 80073c2:	428a      	cmp	r2, r1
 80073c4:	d8a6      	bhi.n	8007314 <UART_SetConfig+0xb8>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80073c6:	220f      	movs	r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80073c8:	031b      	lsls	r3, r3, #12
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80073ca:	4390      	bics	r0, r2
 80073cc:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 80073ce:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80073d0:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 80073d2:	4318      	orrs	r0, r3
 80073d4:	60d0      	str	r0, [r2, #12]
 80073d6:	e7a8      	b.n	800732a <UART_SetConfig+0xce>
        pclk = HAL_RCC_GetSysClockFreq();
 80073d8:	f7fe fb3e 	bl	8005a58 <HAL_RCC_GetSysClockFreq>
 80073dc:	e7d5      	b.n	800738a <UART_SetConfig+0x12e>
    switch (clocksource)
 80073de:	2808      	cmp	r0, #8
 80073e0:	d898      	bhi.n	8007314 <UART_SetConfig+0xb8>
 80073e2:	f7f8 fea3 	bl	800012c <__gnu_thumb1_case_shi>
 80073e6:	0009      	.short	0x0009
 80073e8:	000fff6b 	.word	0x000fff6b
 80073ec:	0025ff97 	.word	0x0025ff97
 80073f0:	ff97ff97 	.word	0xff97ff97
 80073f4:	0028ff97 	.word	0x0028ff97
        pclk = HAL_RCC_GetPCLK1Freq();
 80073f8:	f7fe fe8c 	bl	8006114 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80073fc:	2800      	cmp	r0, #0
 80073fe:	d100      	bne.n	8007402 <UART_SetConfig+0x1a6>
 8007400:	e793      	b.n	800732a <UART_SetConfig+0xce>
 8007402:	e00a      	b.n	800741a <UART_SetConfig+0x1be>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007404:	4b12      	ldr	r3, [pc, #72]	; (8007450 <UART_SetConfig+0x1f4>)
 8007406:	6818      	ldr	r0, [r3, #0]
 8007408:	2310      	movs	r3, #16
 800740a:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800740c:	4243      	negs	r3, r0
 800740e:	4158      	adcs	r0, r3
 8007410:	4b13      	ldr	r3, [pc, #76]	; (8007460 <UART_SetConfig+0x204>)
 8007412:	4240      	negs	r0, r0
 8007414:	4018      	ands	r0, r3
 8007416:	4b13      	ldr	r3, [pc, #76]	; (8007464 <UART_SetConfig+0x208>)
 8007418:	18c0      	adds	r0, r0, r3
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800741a:	6863      	ldr	r3, [r4, #4]
 800741c:	6861      	ldr	r1, [r4, #4]
 800741e:	085b      	lsrs	r3, r3, #1
 8007420:	1818      	adds	r0, r3, r0
 8007422:	f7f8 fe97 	bl	8000154 <__udivsi3>
 8007426:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007428:	0002      	movs	r2, r0
 800742a:	4b11      	ldr	r3, [pc, #68]	; (8007470 <UART_SetConfig+0x214>)
 800742c:	3a10      	subs	r2, #16
 800742e:	e7a2      	b.n	8007376 <UART_SetConfig+0x11a>
        pclk = HAL_RCC_GetSysClockFreq();
 8007430:	f7fe fb12 	bl	8005a58 <HAL_RCC_GetSysClockFreq>
        break;
 8007434:	e7e2      	b.n	80073fc <UART_SetConfig+0x1a0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007436:	2080      	movs	r0, #128	; 0x80
 8007438:	0200      	lsls	r0, r0, #8
 800743a:	e7ee      	b.n	800741a <UART_SetConfig+0x1be>
 800743c:	efff69f3 	.word	0xefff69f3
 8007440:	ffffcfff 	.word	0xffffcfff
 8007444:	40004800 	.word	0x40004800
 8007448:	fffff4ff 	.word	0xfffff4ff
 800744c:	40013800 	.word	0x40013800
 8007450:	40021000 	.word	0x40021000
 8007454:	0800f481 	.word	0x0800f481
 8007458:	40004400 	.word	0x40004400
 800745c:	0800f484 	.word	0x0800f484
 8007460:	00b71b00 	.word	0x00b71b00
 8007464:	003d0900 	.word	0x003d0900
 8007468:	fffffd00 	.word	0xfffffd00
 800746c:	000ffcff 	.word	0x000ffcff
 8007470:	0000ffef 	.word	0x0000ffef

08007474 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007474:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8007476:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007478:	07da      	lsls	r2, r3, #31
 800747a:	d506      	bpl.n	800748a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800747c:	6801      	ldr	r1, [r0, #0]
 800747e:	4c28      	ldr	r4, [pc, #160]	; (8007520 <UART_AdvFeatureConfig+0xac>)
 8007480:	684a      	ldr	r2, [r1, #4]
 8007482:	4022      	ands	r2, r4
 8007484:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8007486:	4322      	orrs	r2, r4
 8007488:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800748a:	079a      	lsls	r2, r3, #30
 800748c:	d506      	bpl.n	800749c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800748e:	6801      	ldr	r1, [r0, #0]
 8007490:	4c24      	ldr	r4, [pc, #144]	; (8007524 <UART_AdvFeatureConfig+0xb0>)
 8007492:	684a      	ldr	r2, [r1, #4]
 8007494:	4022      	ands	r2, r4
 8007496:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8007498:	4322      	orrs	r2, r4
 800749a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800749c:	075a      	lsls	r2, r3, #29
 800749e:	d506      	bpl.n	80074ae <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80074a0:	6801      	ldr	r1, [r0, #0]
 80074a2:	4c21      	ldr	r4, [pc, #132]	; (8007528 <UART_AdvFeatureConfig+0xb4>)
 80074a4:	684a      	ldr	r2, [r1, #4]
 80074a6:	4022      	ands	r2, r4
 80074a8:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80074aa:	4322      	orrs	r2, r4
 80074ac:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80074ae:	071a      	lsls	r2, r3, #28
 80074b0:	d506      	bpl.n	80074c0 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80074b2:	6801      	ldr	r1, [r0, #0]
 80074b4:	4c1d      	ldr	r4, [pc, #116]	; (800752c <UART_AdvFeatureConfig+0xb8>)
 80074b6:	684a      	ldr	r2, [r1, #4]
 80074b8:	4022      	ands	r2, r4
 80074ba:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80074bc:	4322      	orrs	r2, r4
 80074be:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80074c0:	06da      	lsls	r2, r3, #27
 80074c2:	d506      	bpl.n	80074d2 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80074c4:	6801      	ldr	r1, [r0, #0]
 80074c6:	4c1a      	ldr	r4, [pc, #104]	; (8007530 <UART_AdvFeatureConfig+0xbc>)
 80074c8:	688a      	ldr	r2, [r1, #8]
 80074ca:	4022      	ands	r2, r4
 80074cc:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80074ce:	4322      	orrs	r2, r4
 80074d0:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80074d2:	069a      	lsls	r2, r3, #26
 80074d4:	d506      	bpl.n	80074e4 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80074d6:	6801      	ldr	r1, [r0, #0]
 80074d8:	4c16      	ldr	r4, [pc, #88]	; (8007534 <UART_AdvFeatureConfig+0xc0>)
 80074da:	688a      	ldr	r2, [r1, #8]
 80074dc:	4022      	ands	r2, r4
 80074de:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80074e0:	4322      	orrs	r2, r4
 80074e2:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80074e4:	065a      	lsls	r2, r3, #25
 80074e6:	d510      	bpl.n	800750a <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80074e8:	6801      	ldr	r1, [r0, #0]
 80074ea:	4d13      	ldr	r5, [pc, #76]	; (8007538 <UART_AdvFeatureConfig+0xc4>)
 80074ec:	684a      	ldr	r2, [r1, #4]
 80074ee:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80074f0:	402a      	ands	r2, r5
 80074f2:	4322      	orrs	r2, r4
 80074f4:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80074f6:	2280      	movs	r2, #128	; 0x80
 80074f8:	0352      	lsls	r2, r2, #13
 80074fa:	4294      	cmp	r4, r2
 80074fc:	d105      	bne.n	800750a <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80074fe:	684a      	ldr	r2, [r1, #4]
 8007500:	4c0e      	ldr	r4, [pc, #56]	; (800753c <UART_AdvFeatureConfig+0xc8>)
 8007502:	4022      	ands	r2, r4
 8007504:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8007506:	4322      	orrs	r2, r4
 8007508:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800750a:	061b      	lsls	r3, r3, #24
 800750c:	d506      	bpl.n	800751c <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800750e:	6802      	ldr	r2, [r0, #0]
 8007510:	490b      	ldr	r1, [pc, #44]	; (8007540 <UART_AdvFeatureConfig+0xcc>)
 8007512:	6853      	ldr	r3, [r2, #4]
 8007514:	400b      	ands	r3, r1
 8007516:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8007518:	430b      	orrs	r3, r1
 800751a:	6053      	str	r3, [r2, #4]
}
 800751c:	bd30      	pop	{r4, r5, pc}
 800751e:	46c0      	nop			; (mov r8, r8)
 8007520:	fffdffff 	.word	0xfffdffff
 8007524:	fffeffff 	.word	0xfffeffff
 8007528:	fffbffff 	.word	0xfffbffff
 800752c:	ffff7fff 	.word	0xffff7fff
 8007530:	ffffefff 	.word	0xffffefff
 8007534:	ffffdfff 	.word	0xffffdfff
 8007538:	ffefffff 	.word	0xffefffff
 800753c:	ff9fffff 	.word	0xff9fffff
 8007540:	fff7ffff 	.word	0xfff7ffff

08007544 <UART_WaitOnFlagUntilTimeout>:
{
 8007544:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007546:	2780      	movs	r7, #128	; 0x80
{
 8007548:	0004      	movs	r4, r0
 800754a:	000d      	movs	r5, r1
 800754c:	0016      	movs	r6, r2
 800754e:	9301      	str	r3, [sp, #4]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007550:	013f      	lsls	r7, r7, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007552:	6822      	ldr	r2, [r4, #0]
 8007554:	69d3      	ldr	r3, [r2, #28]
 8007556:	402b      	ands	r3, r5
 8007558:	1b5b      	subs	r3, r3, r5
 800755a:	4259      	negs	r1, r3
 800755c:	414b      	adcs	r3, r1
 800755e:	42b3      	cmp	r3, r6
 8007560:	d001      	beq.n	8007566 <UART_WaitOnFlagUntilTimeout+0x22>
  return HAL_OK;
 8007562:	2000      	movs	r0, #0
 8007564:	e01c      	b.n	80075a0 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 8007566:	9b08      	ldr	r3, [sp, #32]
 8007568:	3301      	adds	r3, #1
 800756a:	d0f3      	beq.n	8007554 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800756c:	f7fb fc26 	bl	8002dbc <HAL_GetTick>
 8007570:	9b01      	ldr	r3, [sp, #4]
 8007572:	9a08      	ldr	r2, [sp, #32]
 8007574:	1ac0      	subs	r0, r0, r3
 8007576:	6823      	ldr	r3, [r4, #0]
 8007578:	4290      	cmp	r0, r2
 800757a:	d801      	bhi.n	8007580 <UART_WaitOnFlagUntilTimeout+0x3c>
 800757c:	2a00      	cmp	r2, #0
 800757e:	d110      	bne.n	80075a2 <UART_WaitOnFlagUntilTimeout+0x5e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	4913      	ldr	r1, [pc, #76]	; (80075d0 <UART_WaitOnFlagUntilTimeout+0x8c>)
 8007584:	400a      	ands	r2, r1
 8007586:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007588:	689a      	ldr	r2, [r3, #8]
 800758a:	31a3      	adds	r1, #163	; 0xa3
 800758c:	31ff      	adds	r1, #255	; 0xff
 800758e:	438a      	bics	r2, r1
 8007590:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8007592:	2320      	movs	r3, #32
 8007594:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007596:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 8007598:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 800759a:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 800759c:	3474      	adds	r4, #116	; 0x74
 800759e:	7023      	strb	r3, [r4, #0]
}
 80075a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80075a2:	2104      	movs	r1, #4
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	420a      	tst	r2, r1
 80075a8:	d0d3      	beq.n	8007552 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80075aa:	69da      	ldr	r2, [r3, #28]
 80075ac:	423a      	tst	r2, r7
 80075ae:	d0d0      	beq.n	8007552 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80075b0:	621f      	str	r7, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	4906      	ldr	r1, [pc, #24]	; (80075d0 <UART_WaitOnFlagUntilTimeout+0x8c>)
 80075b6:	400a      	ands	r2, r1
 80075b8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075ba:	689a      	ldr	r2, [r3, #8]
 80075bc:	31a3      	adds	r1, #163	; 0xa3
 80075be:	31ff      	adds	r1, #255	; 0xff
 80075c0:	438a      	bics	r2, r1
 80075c2:	609a      	str	r2, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 80075c4:	2320      	movs	r3, #32
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80075c6:	1d22      	adds	r2, r4, #4
          huart->gState = HAL_UART_STATE_READY;
 80075c8:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80075ca:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80075cc:	67d3      	str	r3, [r2, #124]	; 0x7c
 80075ce:	e7e3      	b.n	8007598 <UART_WaitOnFlagUntilTimeout+0x54>
 80075d0:	fffffe5f 	.word	0xfffffe5f

080075d4 <UART_CheckIdleState>:
{
 80075d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075d6:	2600      	movs	r6, #0
{
 80075d8:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075da:	1d03      	adds	r3, r0, #4
 80075dc:	67de      	str	r6, [r3, #124]	; 0x7c
  tickstart = HAL_GetTick();
 80075de:	f7fb fbed 	bl	8002dbc <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80075e2:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80075e4:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	071b      	lsls	r3, r3, #28
 80075ea:	d416      	bmi.n	800761a <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80075ec:	6823      	ldr	r3, [r4, #0]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	075b      	lsls	r3, r3, #29
 80075f2:	d50a      	bpl.n	800760a <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075f4:	2180      	movs	r1, #128	; 0x80
 80075f6:	4b0f      	ldr	r3, [pc, #60]	; (8007634 <UART_CheckIdleState+0x60>)
 80075f8:	2200      	movs	r2, #0
 80075fa:	9300      	str	r3, [sp, #0]
 80075fc:	0020      	movs	r0, r4
 80075fe:	002b      	movs	r3, r5
 8007600:	03c9      	lsls	r1, r1, #15
 8007602:	f7ff ff9f 	bl	8007544 <UART_WaitOnFlagUntilTimeout>
 8007606:	2800      	cmp	r0, #0
 8007608:	d112      	bne.n	8007630 <UART_CheckIdleState+0x5c>
  huart->gState = HAL_UART_STATE_READY;
 800760a:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800760c:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800760e:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007610:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007612:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 8007614:	3474      	adds	r4, #116	; 0x74
 8007616:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8007618:	e00b      	b.n	8007632 <UART_CheckIdleState+0x5e>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800761a:	2180      	movs	r1, #128	; 0x80
 800761c:	4b05      	ldr	r3, [pc, #20]	; (8007634 <UART_CheckIdleState+0x60>)
 800761e:	0032      	movs	r2, r6
 8007620:	9300      	str	r3, [sp, #0]
 8007622:	0389      	lsls	r1, r1, #14
 8007624:	0003      	movs	r3, r0
 8007626:	0020      	movs	r0, r4
 8007628:	f7ff ff8c 	bl	8007544 <UART_WaitOnFlagUntilTimeout>
 800762c:	2800      	cmp	r0, #0
 800762e:	d0dd      	beq.n	80075ec <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8007630:	2003      	movs	r0, #3
}
 8007632:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8007634:	01ffffff 	.word	0x01ffffff

08007638 <HAL_UART_Init>:
{
 8007638:	b510      	push	{r4, lr}
 800763a:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 800763c:	d101      	bne.n	8007642 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 800763e:	2001      	movs	r0, #1
}
 8007640:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8007642:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8007644:	2b00      	cmp	r3, #0
 8007646:	d104      	bne.n	8007652 <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8007648:	0002      	movs	r2, r0
 800764a:	3274      	adds	r2, #116	; 0x74
 800764c:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 800764e:	f7fc fb63 	bl	8003d18 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8007652:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8007654:	2101      	movs	r1, #1
 8007656:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007658:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 800765a:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800765c:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 800765e:	438b      	bics	r3, r1
 8007660:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007662:	f7ff fdfb 	bl	800725c <UART_SetConfig>
 8007666:	2801      	cmp	r0, #1
 8007668:	d0e9      	beq.n	800763e <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800766a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800766c:	2b00      	cmp	r3, #0
 800766e:	d002      	beq.n	8007676 <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 8007670:	0020      	movs	r0, r4
 8007672:	f7ff feff 	bl	8007474 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007676:	6823      	ldr	r3, [r4, #0]
 8007678:	4907      	ldr	r1, [pc, #28]	; (8007698 <HAL_UART_Init+0x60>)
 800767a:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 800767c:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800767e:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007680:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007682:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007684:	689a      	ldr	r2, [r3, #8]
 8007686:	438a      	bics	r2, r1
 8007688:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800768a:	2201      	movs	r2, #1
 800768c:	6819      	ldr	r1, [r3, #0]
 800768e:	430a      	orrs	r2, r1
 8007690:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8007692:	f7ff ff9f 	bl	80075d4 <UART_CheckIdleState>
 8007696:	e7d3      	b.n	8007640 <HAL_UART_Init+0x8>
 8007698:	ffffb7ff 	.word	0xffffb7ff

0800769c <UART_Start_Receive_IT>:
  huart->RxXferSize  = Size;
 800769c:	0003      	movs	r3, r0
 800769e:	3358      	adds	r3, #88	; 0x58
{
 80076a0:	b510      	push	{r4, lr}
  huart->pRxBuffPtr  = pData;
 80076a2:	6541      	str	r1, [r0, #84]	; 0x54
  UART_MASK_COMPUTATION(huart);
 80076a4:	2480      	movs	r4, #128	; 0x80
  huart->RxXferSize  = Size;
 80076a6:	801a      	strh	r2, [r3, #0]
  huart->RxXferCount = Size;
 80076a8:	805a      	strh	r2, [r3, #2]
  huart->RxISR       = NULL;
 80076aa:	2200      	movs	r2, #0
  UART_MASK_COMPUTATION(huart);
 80076ac:	6881      	ldr	r1, [r0, #8]
  huart->RxISR       = NULL;
 80076ae:	6642      	str	r2, [r0, #100]	; 0x64
  UART_MASK_COMPUTATION(huart);
 80076b0:	0164      	lsls	r4, r4, #5
 80076b2:	3304      	adds	r3, #4
 80076b4:	42a1      	cmp	r1, r4
 80076b6:	d124      	bne.n	8007702 <UART_Start_Receive_IT+0x66>
 80076b8:	6902      	ldr	r2, [r0, #16]
 80076ba:	2a00      	cmp	r2, #0
 80076bc:	d11f      	bne.n	80076fe <UART_Start_Receive_IT+0x62>
 80076be:	4a19      	ldr	r2, [pc, #100]	; (8007724 <UART_Start_Receive_IT+0x88>)
 80076c0:	801a      	strh	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076c2:	2200      	movs	r2, #0
 80076c4:	1d03      	adds	r3, r0, #4
 80076c6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80076c8:	2322      	movs	r3, #34	; 0x22
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076ca:	6802      	ldr	r2, [r0, #0]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80076cc:	67c3      	str	r3, [r0, #124]	; 0x7c
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076ce:	6894      	ldr	r4, [r2, #8]
 80076d0:	3b21      	subs	r3, #33	; 0x21
 80076d2:	4323      	orrs	r3, r4
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076d4:	2480      	movs	r4, #128	; 0x80
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076d6:	6093      	str	r3, [r2, #8]
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076d8:	0164      	lsls	r4, r4, #5
    huart->RxISR = UART_RxISR_8BIT;
 80076da:	4b13      	ldr	r3, [pc, #76]	; (8007728 <UART_Start_Receive_IT+0x8c>)
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076dc:	42a1      	cmp	r1, r4
 80076de:	d103      	bne.n	80076e8 <UART_Start_Receive_IT+0x4c>
 80076e0:	6901      	ldr	r1, [r0, #16]
 80076e2:	2900      	cmp	r1, #0
 80076e4:	d100      	bne.n	80076e8 <UART_Start_Receive_IT+0x4c>
    huart->RxISR = UART_RxISR_16BIT;
 80076e6:	4b11      	ldr	r3, [pc, #68]	; (800772c <UART_Start_Receive_IT+0x90>)
 80076e8:	6643      	str	r3, [r0, #100]	; 0x64
  __HAL_UNLOCK(huart);
 80076ea:	0003      	movs	r3, r0
 80076ec:	2000      	movs	r0, #0
 80076ee:	3374      	adds	r3, #116	; 0x74
 80076f0:	7018      	strb	r0, [r3, #0]
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80076f2:	2390      	movs	r3, #144	; 0x90
 80076f4:	6811      	ldr	r1, [r2, #0]
 80076f6:	005b      	lsls	r3, r3, #1
 80076f8:	430b      	orrs	r3, r1
 80076fa:	6013      	str	r3, [r2, #0]
}
 80076fc:	bd10      	pop	{r4, pc}
  UART_MASK_COMPUTATION(huart);
 80076fe:	22ff      	movs	r2, #255	; 0xff
 8007700:	e7de      	b.n	80076c0 <UART_Start_Receive_IT+0x24>
 8007702:	2900      	cmp	r1, #0
 8007704:	d104      	bne.n	8007710 <UART_Start_Receive_IT+0x74>
 8007706:	6902      	ldr	r2, [r0, #16]
 8007708:	2a00      	cmp	r2, #0
 800770a:	d0f8      	beq.n	80076fe <UART_Start_Receive_IT+0x62>
 800770c:	227f      	movs	r2, #127	; 0x7f
 800770e:	e7d7      	b.n	80076c0 <UART_Start_Receive_IT+0x24>
 8007710:	2480      	movs	r4, #128	; 0x80
 8007712:	0564      	lsls	r4, r4, #21
 8007714:	42a1      	cmp	r1, r4
 8007716:	d1d3      	bne.n	80076c0 <UART_Start_Receive_IT+0x24>
 8007718:	6902      	ldr	r2, [r0, #16]
 800771a:	2a00      	cmp	r2, #0
 800771c:	d0f6      	beq.n	800770c <UART_Start_Receive_IT+0x70>
 800771e:	223f      	movs	r2, #63	; 0x3f
 8007720:	e7ce      	b.n	80076c0 <UART_Start_Receive_IT+0x24>
 8007722:	46c0      	nop			; (mov r8, r8)
 8007724:	000001ff 	.word	0x000001ff
 8007728:	08007159 	.word	0x08007159
 800772c:	080071dd 	.word	0x080071dd

08007730 <HAL_UART_Receive_IT>:
{
 8007730:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8007732:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
    return HAL_BUSY;
 8007734:	2302      	movs	r3, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 8007736:	2c20      	cmp	r4, #32
 8007738:	d129      	bne.n	800778e <HAL_UART_Receive_IT+0x5e>
      return HAL_ERROR;
 800773a:	3b01      	subs	r3, #1
    if ((pData == NULL) || (Size == 0U))
 800773c:	2900      	cmp	r1, #0
 800773e:	d026      	beq.n	800778e <HAL_UART_Receive_IT+0x5e>
 8007740:	2a00      	cmp	r2, #0
 8007742:	d024      	beq.n	800778e <HAL_UART_Receive_IT+0x5e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007744:	2380      	movs	r3, #128	; 0x80
 8007746:	6884      	ldr	r4, [r0, #8]
 8007748:	015b      	lsls	r3, r3, #5
 800774a:	429c      	cmp	r4, r3
 800774c:	d106      	bne.n	800775c <HAL_UART_Receive_IT+0x2c>
 800774e:	6903      	ldr	r3, [r0, #16]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d103      	bne.n	800775c <HAL_UART_Receive_IT+0x2c>
      if ((((uint32_t)pData) & 1U) != 0U)
 8007754:	2401      	movs	r4, #1
      return HAL_ERROR;
 8007756:	0023      	movs	r3, r4
      if ((((uint32_t)pData) & 1U) != 0U)
 8007758:	4221      	tst	r1, r4
 800775a:	d118      	bne.n	800778e <HAL_UART_Receive_IT+0x5e>
    __HAL_LOCK(huart);
 800775c:	0004      	movs	r4, r0
 800775e:	3474      	adds	r4, #116	; 0x74
 8007760:	7825      	ldrb	r5, [r4, #0]
    return HAL_BUSY;
 8007762:	2302      	movs	r3, #2
    __HAL_LOCK(huart);
 8007764:	2d01      	cmp	r5, #1
 8007766:	d012      	beq.n	800778e <HAL_UART_Receive_IT+0x5e>
 8007768:	3b01      	subs	r3, #1
 800776a:	7023      	strb	r3, [r4, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800776c:	2300      	movs	r3, #0
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800776e:	4c09      	ldr	r4, [pc, #36]	; (8007794 <HAL_UART_Receive_IT+0x64>)
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007770:	6603      	str	r3, [r0, #96]	; 0x60
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007772:	6803      	ldr	r3, [r0, #0]
 8007774:	42a3      	cmp	r3, r4
 8007776:	d007      	beq.n	8007788 <HAL_UART_Receive_IT+0x58>
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007778:	685c      	ldr	r4, [r3, #4]
 800777a:	0224      	lsls	r4, r4, #8
 800777c:	d504      	bpl.n	8007788 <HAL_UART_Receive_IT+0x58>
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800777e:	2480      	movs	r4, #128	; 0x80
 8007780:	681d      	ldr	r5, [r3, #0]
 8007782:	04e4      	lsls	r4, r4, #19
 8007784:	432c      	orrs	r4, r5
 8007786:	601c      	str	r4, [r3, #0]
    return(UART_Start_Receive_IT(huart, pData, Size));
 8007788:	f7ff ff88 	bl	800769c <UART_Start_Receive_IT>
 800778c:	0003      	movs	r3, r0
}
 800778e:	0018      	movs	r0, r3
 8007790:	bd70      	pop	{r4, r5, r6, pc}
 8007792:	46c0      	nop			; (mov r8, r8)
 8007794:	40004800 	.word	0x40004800

08007798 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007798:	4770      	bx	lr
	...

0800779c <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 800779c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800779e:	0005      	movs	r5, r0
{
 80077a0:	9102      	str	r1, [sp, #8]
 80077a2:	9203      	str	r2, [sp, #12]
  __HAL_LOCK(huart);
 80077a4:	3574      	adds	r5, #116	; 0x74
 80077a6:	782b      	ldrb	r3, [r5, #0]
{
 80077a8:	0004      	movs	r4, r0
 80077aa:	ae02      	add	r6, sp, #8
  __HAL_LOCK(huart);
 80077ac:	2002      	movs	r0, #2
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d030      	beq.n	8007814 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x78>

  huart->gState = HAL_UART_STATE_BUSY;
 80077b2:	2324      	movs	r3, #36	; 0x24
  __HAL_LOCK(huart);
 80077b4:	3801      	subs	r0, #1
 80077b6:	7028      	strb	r0, [r5, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80077b8:	67a3      	str	r3, [r4, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80077ba:	6823      	ldr	r3, [r4, #0]
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	4382      	bics	r2, r0
 80077c0:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 80077c2:	689a      	ldr	r2, [r3, #8]
 80077c4:	4815      	ldr	r0, [pc, #84]	; (800781c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x80>)
 80077c6:	4002      	ands	r2, r0
 80077c8:	430a      	orrs	r2, r1
 80077ca:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 80077cc:	2900      	cmp	r1, #0
 80077ce:	d10c      	bne.n	80077ea <HAL_UARTEx_StopModeWakeUpSourceConfig+0x4e>
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 80077d0:	2210      	movs	r2, #16
 80077d2:	6859      	ldr	r1, [r3, #4]
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 80077d4:	79b0      	ldrb	r0, [r6, #6]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 80077d6:	4391      	bics	r1, r2
 80077d8:	88b2      	ldrh	r2, [r6, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 80077da:	0600      	lsls	r0, r0, #24
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 80077dc:	4311      	orrs	r1, r2
 80077de:	6059      	str	r1, [r3, #4]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 80077e0:	685a      	ldr	r2, [r3, #4]
 80077e2:	0212      	lsls	r2, r2, #8
 80077e4:	0a12      	lsrs	r2, r2, #8
 80077e6:	4302      	orrs	r2, r0
 80077e8:	605a      	str	r2, [r3, #4]
  __HAL_UART_ENABLE(huart);
 80077ea:	2201      	movs	r2, #1
 80077ec:	6819      	ldr	r1, [r3, #0]
 80077ee:	430a      	orrs	r2, r1
 80077f0:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80077f2:	f7fb fae3 	bl	8002dbc <HAL_GetTick>
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077f6:	2180      	movs	r1, #128	; 0x80
 80077f8:	4a09      	ldr	r2, [pc, #36]	; (8007820 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x84>)
  tickstart = HAL_GetTick();
 80077fa:	0003      	movs	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077fc:	9200      	str	r2, [sp, #0]
 80077fe:	0020      	movs	r0, r4
 8007800:	2200      	movs	r2, #0
 8007802:	03c9      	lsls	r1, r1, #15
 8007804:	f7ff fe9e 	bl	8007544 <UART_WaitOnFlagUntilTimeout>
 8007808:	2800      	cmp	r0, #0
 800780a:	d105      	bne.n	8007818 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7c>
    huart->gState = HAL_UART_STATE_READY;
 800780c:	2320      	movs	r3, #32
 800780e:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8007810:	2300      	movs	r3, #0
 8007812:	702b      	strb	r3, [r5, #0]
}
 8007814:	b004      	add	sp, #16
 8007816:	bd70      	pop	{r4, r5, r6, pc}
    status = HAL_TIMEOUT;
 8007818:	2003      	movs	r0, #3
 800781a:	e7f9      	b.n	8007810 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x74>
 800781c:	ffcfffff 	.word	0xffcfffff
 8007820:	01ffffff 	.word	0x01ffffff

08007824 <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 8007824:	0001      	movs	r1, r0
 8007826:	2302      	movs	r3, #2
{
 8007828:	b510      	push	{r4, lr}
  __HAL_LOCK(huart);
 800782a:	3174      	adds	r1, #116	; 0x74
 800782c:	780c      	ldrb	r4, [r1, #0]
{
 800782e:	0002      	movs	r2, r0
  __HAL_LOCK(huart);
 8007830:	0018      	movs	r0, r3
 8007832:	2c01      	cmp	r4, #1
 8007834:	d005      	beq.n	8007842 <HAL_UARTEx_EnableStopMode+0x1e>
  SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8007836:	6812      	ldr	r2, [r2, #0]
 8007838:	6810      	ldr	r0, [r2, #0]
 800783a:	4303      	orrs	r3, r0
  __HAL_UNLOCK(huart);
 800783c:	2000      	movs	r0, #0
  SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800783e:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(huart);
 8007840:	7008      	strb	r0, [r1, #0]
}
 8007842:	bd10      	pop	{r4, pc}

08007844 <HAL_WWDG_Init>:
  * @param  hwwdg  pointer to a WWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified WWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Init(WWDG_HandleTypeDef *hwwdg)
{
 8007844:	b510      	push	{r4, lr}
 8007846:	0004      	movs	r4, r0
  /* Check the WWDG handle allocation */
  if (hwwdg == NULL)
  {
    return HAL_ERROR;
 8007848:	2001      	movs	r0, #1
  if (hwwdg == NULL)
 800784a:	2c00      	cmp	r4, #0
 800784c:	d00e      	beq.n	800786c <HAL_WWDG_Init+0x28>

  /* Init the low level hardware */
  hwwdg->MspInitCallback(hwwdg);
#else
  /* Init the low level hardware */
  HAL_WWDG_MspInit(hwwdg);
 800784e:	0020      	movs	r0, r4
 8007850:	f7fb f942 	bl	8002ad8 <HAL_WWDG_MspInit>
#endif /* USE_HAL_WWDG_REGISTER_CALLBACKS */

  /* Set WWDG Counter */
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 8007854:	2380      	movs	r3, #128	; 0x80

  /* Set WWDG Prescaler and Window */
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));

  /* Return function status */
  return HAL_OK;
 8007856:	2000      	movs	r0, #0
  WRITE_REG(hwwdg->Instance->CR, (WWDG_CR_WDGA | hwwdg->Init.Counter));
 8007858:	68e1      	ldr	r1, [r4, #12]
 800785a:	6822      	ldr	r2, [r4, #0]
 800785c:	430b      	orrs	r3, r1
 800785e:	6013      	str	r3, [r2, #0]
  WRITE_REG(hwwdg->Instance->CFR, (hwwdg->Init.EWIMode | hwwdg->Init.Prescaler | hwwdg->Init.Window));
 8007860:	6861      	ldr	r1, [r4, #4]
 8007862:	6923      	ldr	r3, [r4, #16]
 8007864:	430b      	orrs	r3, r1
 8007866:	68a1      	ldr	r1, [r4, #8]
 8007868:	430b      	orrs	r3, r1
 800786a:	6053      	str	r3, [r2, #4]
}
 800786c:	bd10      	pop	{r4, pc}

0800786e <HAL_WWDG_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_WWDG_Refresh(WWDG_HandleTypeDef *hwwdg)
{
  /* Write to WWDG CR the WWDG Counter value to refresh with */
  WRITE_REG(hwwdg->Instance->CR, (hwwdg->Init.Counter));
 800786e:	6803      	ldr	r3, [r0, #0]
 8007870:	68c2      	ldr	r2, [r0, #12]

  /* Return function status */
  return HAL_OK;
}
 8007872:	2000      	movs	r0, #0
  WRITE_REG(hwwdg->Instance->CR, (hwwdg->Init.Counter));
 8007874:	601a      	str	r2, [r3, #0]
}
 8007876:	4770      	bx	lr

08007878 <MX_LoRaWAN_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void){
 8007878:	b510      	push	{r4, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 800787a:	f7fb f9db 	bl	8002c34 <SystemApp_Init>
  /* USER CODE END MX_LoRaWAN_Init_2 */
  //LoRaWAN_Init();
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800787e:	bd10      	pop	{r4, pc}

08007880 <MX_LoRaWAN_Process>:
void MX_LoRaWAN_Process(void)
{
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8007880:	2001      	movs	r0, #1
{
 8007882:	b510      	push	{r4, lr}
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8007884:	4240      	negs	r0, r0
 8007886:	f007 f867 	bl	800e958 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 800788a:	bd10      	pop	{r4, pc}

0800788c <LoraInfo_Init>:
/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
  loraInfo.ActivationMode = 0;
  loraInfo.Region = 0;
  loraInfo.ClassB = 0;
 800788c:	2200      	movs	r2, #0
 800788e:	4b04      	ldr	r3, [pc, #16]	; (80078a0 <LoraInfo_Init+0x14>)
 8007890:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 8007892:	60da      	str	r2, [r3, #12]

#ifdef  REGION_AS923
  loraInfo.Region |= (1 << LORAMAC_REGION_AS923) ;
#endif /* REGION_AS923 */
#ifdef  REGION_AU915
  loraInfo.Region |= (1 << LORAMAC_REGION_AU915) ;
 8007894:	3202      	adds	r2, #2
 8007896:	605a      	str	r2, [r3, #4]
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
  loraInfo.ActivationMode = 3;
 8007898:	3201      	adds	r2, #1
 800789a:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALISATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800789c:	4770      	bx	lr
 800789e:	46c0      	nop			; (mov r8, r8)
 80078a0:	20000374 	.word	0x20000374

080078a4 <LoraInfo_GetPtr>:
{
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
}
 80078a4:	4800      	ldr	r0, [pc, #0]	; (80078a8 <LoraInfo_GetPtr+0x4>)
 80078a6:	4770      	bx	lr
 80078a8:	20000374 	.word	0x20000374

080078ac <BSP_SPI1_SendRecv>:
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t len)
{
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;

  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 80078ac:	23fa      	movs	r3, #250	; 0xfa
{
 80078ae:	b513      	push	{r0, r1, r4, lr}
  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 80078b0:	009b      	lsls	r3, r3, #2
{
 80078b2:	0014      	movs	r4, r2
  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 80078b4:	9300      	str	r3, [sp, #0]
 80078b6:	0013      	movs	r3, r2
 80078b8:	000a      	movs	r2, r1
 80078ba:	0001      	movs	r1, r0
 80078bc:	4804      	ldr	r0, [pc, #16]	; (80078d0 <BSP_SPI1_SendRecv+0x24>)
 80078be:	f7ff f975 	bl	8006bac <HAL_SPI_TransmitReceive>
 80078c2:	2800      	cmp	r0, #0
 80078c4:	d101      	bne.n	80078ca <BSP_SPI1_SendRecv+0x1e>
  {
    ret = len;
 80078c6:	0020      	movs	r0, r4
  }
  return ret;
}
 80078c8:	bd16      	pop	{r1, r2, r4, pc}
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 80078ca:	2006      	movs	r0, #6
 80078cc:	4240      	negs	r0, r0
  return ret;
 80078ce:	e7fb      	b.n	80078c8 <BSP_SPI1_SendRecv+0x1c>
 80078d0:	20001754 	.word	0x20001754

080078d4 <MX_SPI1_Init>:
/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef *hspi)
{
  HAL_StatusTypeDef ret = HAL_OK;
  hspi->Instance = SPI1;
 80078d4:	4b14      	ldr	r3, [pc, #80]	; (8007928 <MX_SPI1_Init+0x54>)
{
 80078d6:	b570      	push	{r4, r5, r6, lr}
  hspi->Instance = SPI1;
 80078d8:	6003      	str	r3, [r0, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 80078da:	2382      	movs	r3, #130	; 0x82
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 80078dc:	2500      	movs	r5, #0
  hspi->Init.Mode = SPI_MODE_MASTER;
 80078de:	005b      	lsls	r3, r3, #1
 80078e0:	6043      	str	r3, [r0, #4]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi->Init.NSS = SPI_NSS_SOFT;
 80078e2:	33fc      	adds	r3, #252	; 0xfc
 80078e4:	6183      	str	r3, [r0, #24]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 80078e6:	6085      	str	r5, [r0, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 80078e8:	60c5      	str	r5, [r0, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80078ea:	6105      	str	r5, [r0, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 80078ec:	6145      	str	r5, [r0, #20]
{
 80078ee:	0004      	movs	r4, r0
  /* SPI1 is on APB2 for L0x3 -> HAL_RCC_GetPCLK2Freq */
  hspi->Init.BaudRatePrescaler = SPI_GetPrescaler(HAL_RCC_GetPCLK2Freq(), RADIO_SPI_BAUDRATE);
 80078f0:	f7fe fc20 	bl	8006134 <HAL_RCC_GetPCLK2Freq>
  /* USER CODE END SPI1_MspDeInit 1 */
}

static uint32_t SPI_GetPrescaler(uint32_t clock_src_hz, uint32_t baudrate_mbps)
{
  uint32_t divisor = 0;
 80078f4:	002b      	movs	r3, r5
    SPI_BAUDRATEPRESCALER_64,
    SPI_BAUDRATEPRESCALER_128,
    SPI_BAUDRATEPRESCALER_256,
  };

  while (spi_clk > baudrate_mbps)
 80078f6:	4a0d      	ldr	r2, [pc, #52]	; (800792c <MX_SPI1_Init+0x58>)
  {
    presc = baudrate[divisor];
 80078f8:	490d      	ldr	r1, [pc, #52]	; (8007930 <MX_SPI1_Init+0x5c>)
  while (spi_clk > baudrate_mbps)
 80078fa:	4290      	cmp	r0, r2
 80078fc:	d80d      	bhi.n	800791a <MX_SPI1_Init+0x46>
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 80078fe:	2300      	movs	r3, #0
 8007900:	6223      	str	r3, [r4, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8007902:	6263      	str	r3, [r4, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007904:	62a3      	str	r3, [r4, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8007906:	3307      	adds	r3, #7
  hspi->Init.BaudRatePrescaler = SPI_GetPrescaler(HAL_RCC_GetPCLK2Freq(), RADIO_SPI_BAUDRATE);
 8007908:	61e5      	str	r5, [r4, #28]
  hspi->Init.CRCPolynomial = 7;
 800790a:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 800790c:	0020      	movs	r0, r4
 800790e:	f7ff f8eb 	bl	8006ae8 <HAL_SPI_Init>
 8007912:	1e43      	subs	r3, r0, #1
 8007914:	4198      	sbcs	r0, r3
  return ret;
 8007916:	b2c0      	uxtb	r0, r0
}
 8007918:	bd70      	pop	{r4, r5, r6, pc}
    presc = baudrate[divisor];
 800791a:	009d      	lsls	r5, r3, #2
    if (++divisor > 7)
 800791c:	3301      	adds	r3, #1
    presc = baudrate[divisor];
 800791e:	586d      	ldr	r5, [r5, r1]
    if (++divisor > 7)
 8007920:	2b08      	cmp	r3, #8
 8007922:	d0ec      	beq.n	80078fe <MX_SPI1_Init+0x2a>
    {
      break;
    }

    spi_clk = (spi_clk >> 1);
 8007924:	0840      	lsrs	r0, r0, #1
 8007926:	e7e8      	b.n	80078fa <MX_SPI1_Init+0x26>
 8007928:	40013000 	.word	0x40013000
 800792c:	00989680 	.word	0x00989680
 8007930:	0800f494 	.word	0x0800f494

08007934 <BSP_SPI1_Init>:
{
 8007934:	b530      	push	{r4, r5, lr}
  hspi1.Instance  = SPI1;
 8007936:	4d1b      	ldr	r5, [pc, #108]	; (80079a4 <BSP_SPI1_Init+0x70>)
 8007938:	4b1b      	ldr	r3, [pc, #108]	; (80079a8 <BSP_SPI1_Init+0x74>)
  if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 800793a:	0028      	movs	r0, r5
{
 800793c:	b087      	sub	sp, #28
  hspi1.Instance  = SPI1;
 800793e:	602b      	str	r3, [r5, #0]
  if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8007940:	f7ff fa29 	bl	8006d96 <HAL_SPI_GetState>
 8007944:	1e04      	subs	r4, r0, #0
 8007946:	d002      	beq.n	800794e <BSP_SPI1_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 8007948:	2000      	movs	r0, #0
}
 800794a:	b007      	add	sp, #28
 800794c:	bd30      	pop	{r4, r5, pc}
  __HAL_RCC_SPI1_CLK_ENABLE();
 800794e:	2380      	movs	r3, #128	; 0x80
 8007950:	4a16      	ldr	r2, [pc, #88]	; (80079ac <BSP_SPI1_Init+0x78>)
 8007952:	015b      	lsls	r3, r3, #5
 8007954:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8007956:	430b      	orrs	r3, r1
 8007958:	6353      	str	r3, [r2, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800795a:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800795c:	9003      	str	r0, [sp, #12]
  GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 800795e:	9005      	str	r0, [sp, #20]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8007960:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007962:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007964:	3301      	adds	r3, #1
 8007966:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8007968:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 800796a:	337d      	adds	r3, #125	; 0x7d
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800796c:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 800796e:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8007970:	f7fd fb60 	bl	8005034 <HAL_GPIO_Init>
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8007974:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8007976:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8007978:	a901      	add	r1, sp, #4
 800797a:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 800797c:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 800797e:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8007980:	f7fd fb58 	bl	8005034 <HAL_GPIO_Init>
  HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8007984:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8007986:	2320      	movs	r3, #32
  HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8007988:	05c0      	lsls	r0, r0, #23
 800798a:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 800798c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 800798e:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8007990:	f7fd fb50 	bl	8005034 <HAL_GPIO_Init>
    if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8007994:	0028      	movs	r0, r5
 8007996:	f7ff ff9d 	bl	80078d4 <MX_SPI1_Init>
 800799a:	2800      	cmp	r0, #0
 800799c:	d0d4      	beq.n	8007948 <BSP_SPI1_Init+0x14>
      ret = BSP_ERROR_BUS_FAILURE;
 800799e:	2008      	movs	r0, #8
 80079a0:	4240      	negs	r0, r0
  return ret;
 80079a2:	e7d2      	b.n	800794a <BSP_SPI1_Init+0x16>
 80079a4:	20001754 	.word	0x20001754
 80079a8:	40013000 	.word	0x40013000
 80079ac:	40021000 	.word	0x40021000

080079b0 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 80079b0:	b510      	push	{r4, lr}
 80079b2:	0004      	movs	r4, r0
    memset1( ctx->X, 0, sizeof ctx->X );
 80079b4:	2210      	movs	r2, #16
 80079b6:	2100      	movs	r1, #0
 80079b8:	30f1      	adds	r0, #241	; 0xf1
 80079ba:	f005 fd73 	bl	800d4a4 <memset1>
    ctx->M_n = 0;
 80079be:	0023      	movs	r3, r4
 80079c0:	2100      	movs	r1, #0
 80079c2:	33fc      	adds	r3, #252	; 0xfc
    memset1( ctx->rijndael.ksch, '\0', 240 );
 80079c4:	22f0      	movs	r2, #240	; 0xf0
 80079c6:	0020      	movs	r0, r4
    ctx->M_n = 0;
 80079c8:	6199      	str	r1, [r3, #24]
    memset1( ctx->rijndael.ksch, '\0', 240 );
 80079ca:	f005 fd6b 	bl	800d4a4 <memset1>
}
 80079ce:	bd10      	pop	{r4, pc}

080079d0 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 80079d0:	b510      	push	{r4, lr}
 80079d2:	0002      	movs	r2, r0
 80079d4:	0008      	movs	r0, r1
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 80079d6:	2110      	movs	r1, #16
 80079d8:	f000 f9a0 	bl	8007d1c <lorawan_aes_set_key>
}
 80079dc:	bd10      	pop	{r4, pc}

080079de <AES_CMAC_Update>:
void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 80079de:	0003      	movs	r3, r0
{
 80079e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079e2:	0004      	movs	r4, r0
    if( ctx->M_n > 0 )
 80079e4:	33fc      	adds	r3, #252	; 0xfc
 80079e6:	6998      	ldr	r0, [r3, #24]
 80079e8:	1ca3      	adds	r3, r4, #2
{
 80079ea:	b087      	sub	sp, #28
 80079ec:	33ff      	adds	r3, #255	; 0xff
 80079ee:	000e      	movs	r6, r1
 80079f0:	0015      	movs	r5, r2
 80079f2:	9301      	str	r3, [sp, #4]
    if( ctx->M_n > 0 )
 80079f4:	2800      	cmp	r0, #0
 80079f6:	d036      	beq.n	8007a66 <AES_CMAC_Update+0x88>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 80079f8:	2710      	movs	r7, #16
 80079fa:	1a3f      	subs	r7, r7, r0
 80079fc:	9700      	str	r7, [sp, #0]
 80079fe:	4297      	cmp	r7, r2
 8007a00:	d900      	bls.n	8007a04 <AES_CMAC_Update+0x26>
 8007a02:	9200      	str	r2, [sp, #0]
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 8007a04:	466b      	mov	r3, sp
 8007a06:	881a      	ldrh	r2, [r3, #0]
 8007a08:	1ca3      	adds	r3, r4, #2
 8007a0a:	33ff      	adds	r3, #255	; 0xff
 8007a0c:	0031      	movs	r1, r6
 8007a0e:	1818      	adds	r0, r3, r0
 8007a10:	f005 fd32 	bl	800d478 <memcpy1>
        ctx->M_n += mlen;
 8007a14:	0022      	movs	r2, r4
 8007a16:	32fc      	adds	r2, #252	; 0xfc
 8007a18:	6991      	ldr	r1, [r2, #24]
 8007a1a:	9b00      	ldr	r3, [sp, #0]
 8007a1c:	185b      	adds	r3, r3, r1
 8007a1e:	6193      	str	r3, [r2, #24]
        if( ctx->M_n < 16 || len == mlen )
 8007a20:	2b0f      	cmp	r3, #15
 8007a22:	d929      	bls.n	8007a78 <AES_CMAC_Update+0x9a>
 8007a24:	42af      	cmp	r7, r5
 8007a26:	d227      	bcs.n	8007a78 <AES_CMAC_Update+0x9a>
 8007a28:	0023      	movs	r3, r4
 8007a2a:	1ca1      	adds	r1, r4, #2
 8007a2c:	33f1      	adds	r3, #241	; 0xf1
 8007a2e:	31ff      	adds	r1, #255	; 0xff
            return;
        XOR( ctx->M_last, ctx->X );
 8007a30:	781a      	ldrb	r2, [r3, #0]
 8007a32:	7c18      	ldrb	r0, [r3, #16]
 8007a34:	4042      	eors	r2, r0
 8007a36:	701a      	strb	r2, [r3, #0]
 8007a38:	3301      	adds	r3, #1
 8007a3a:	428b      	cmp	r3, r1
 8007a3c:	d1f8      	bne.n	8007a30 <AES_CMAC_Update+0x52>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8007a3e:	0027      	movs	r7, r4
 8007a40:	37f1      	adds	r7, #241	; 0xf1
 8007a42:	2210      	movs	r2, #16
 8007a44:	0039      	movs	r1, r7
 8007a46:	a802      	add	r0, sp, #8
 8007a48:	f005 fd16 	bl	800d478 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 8007a4c:	a902      	add	r1, sp, #8
 8007a4e:	0022      	movs	r2, r4
 8007a50:	0008      	movs	r0, r1
 8007a52:	f000 f9e9 	bl	8007e28 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8007a56:	2210      	movs	r2, #16
 8007a58:	0038      	movs	r0, r7
 8007a5a:	a902      	add	r1, sp, #8
 8007a5c:	f005 fd0c 	bl	800d478 <memcpy1>

        data += mlen;
 8007a60:	9b00      	ldr	r3, [sp, #0]
 8007a62:	18f6      	adds	r6, r6, r3
        len -= mlen;
 8007a64:	1aed      	subs	r5, r5, r3
    }
    while( len > 16 )
 8007a66:	2d10      	cmp	r5, #16
 8007a68:	d808      	bhi.n	8007a7c <AES_CMAC_Update+0x9e>

        data += 16;
        len -= 16;
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 8007a6a:	0031      	movs	r1, r6
 8007a6c:	9801      	ldr	r0, [sp, #4]
 8007a6e:	b2aa      	uxth	r2, r5
    ctx->M_n = len;
 8007a70:	34fc      	adds	r4, #252	; 0xfc
    memcpy1( ctx->M_last, data, len );
 8007a72:	f005 fd01 	bl	800d478 <memcpy1>
    ctx->M_n = len;
 8007a76:	61a5      	str	r5, [r4, #24]
}
 8007a78:	b007      	add	sp, #28
 8007a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a7c:	0023      	movs	r3, r4
 8007a7e:	0032      	movs	r2, r6
 8007a80:	1ca0      	adds	r0, r4, #2
 8007a82:	33f1      	adds	r3, #241	; 0xf1
 8007a84:	30ff      	adds	r0, #255	; 0xff
        XOR( data, ctx->X );
 8007a86:	7819      	ldrb	r1, [r3, #0]
 8007a88:	7817      	ldrb	r7, [r2, #0]
 8007a8a:	3201      	adds	r2, #1
 8007a8c:	4079      	eors	r1, r7
 8007a8e:	7019      	strb	r1, [r3, #0]
 8007a90:	3301      	adds	r3, #1
 8007a92:	4283      	cmp	r3, r0
 8007a94:	d1f7      	bne.n	8007a86 <AES_CMAC_Update+0xa8>
        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8007a96:	0027      	movs	r7, r4
 8007a98:	37f1      	adds	r7, #241	; 0xf1
 8007a9a:	2210      	movs	r2, #16
 8007a9c:	0039      	movs	r1, r7
 8007a9e:	a802      	add	r0, sp, #8
 8007aa0:	f005 fcea 	bl	800d478 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 8007aa4:	a902      	add	r1, sp, #8
 8007aa6:	0022      	movs	r2, r4
 8007aa8:	0008      	movs	r0, r1
 8007aaa:	f000 f9bd 	bl	8007e28 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8007aae:	2210      	movs	r2, #16
 8007ab0:	0038      	movs	r0, r7
 8007ab2:	a902      	add	r1, sp, #8
 8007ab4:	f005 fce0 	bl	800d478 <memcpy1>
        data += 16;
 8007ab8:	3610      	adds	r6, #16
        len -= 16;
 8007aba:	3d10      	subs	r5, #16
 8007abc:	e7d3      	b.n	8007a66 <AES_CMAC_Update+0x88>

08007abe <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 8007abe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ac0:	000c      	movs	r4, r1
 8007ac2:	b089      	sub	sp, #36	; 0x24
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 8007ac4:	2210      	movs	r2, #16
 8007ac6:	2100      	movs	r1, #0
{
 8007ac8:	0005      	movs	r5, r0
    memset1( K, '\0', 16 );
 8007aca:	4668      	mov	r0, sp
 8007acc:	f005 fcea 	bl	800d4a4 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 8007ad0:	0022      	movs	r2, r4
 8007ad2:	4669      	mov	r1, sp
 8007ad4:	4668      	mov	r0, sp
 8007ad6:	f000 f9a7 	bl	8007e28 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 8007ada:	466b      	mov	r3, sp
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	2b7f      	cmp	r3, #127	; 0x7f
 8007ae0:	d940      	bls.n	8007b64 <AES_CMAC_Final+0xa6>
 8007ae2:	466b      	mov	r3, sp
    {
        LSHIFT( K, K );
 8007ae4:	2100      	movs	r1, #0
 8007ae6:	781a      	ldrb	r2, [r3, #0]
 8007ae8:	7858      	ldrb	r0, [r3, #1]
 8007aea:	0052      	lsls	r2, r2, #1
 8007aec:	09c0      	lsrs	r0, r0, #7
 8007aee:	4302      	orrs	r2, r0
 8007af0:	3101      	adds	r1, #1
 8007af2:	701a      	strb	r2, [r3, #0]
 8007af4:	3301      	adds	r3, #1
 8007af6:	290f      	cmp	r1, #15
 8007af8:	d1f5      	bne.n	8007ae6 <AES_CMAC_Final+0x28>
 8007afa:	466b      	mov	r3, sp
 8007afc:	7bda      	ldrb	r2, [r3, #15]
        K[15] ^= 0x87;
 8007afe:	2379      	movs	r3, #121	; 0x79
        LSHIFT( K, K );
 8007b00:	0052      	lsls	r2, r2, #1
        K[15] ^= 0x87;
 8007b02:	425b      	negs	r3, r3
 8007b04:	4053      	eors	r3, r2
    }
    else
        LSHIFT( K, K );

    if( ctx->M_n == 16 )
 8007b06:	0020      	movs	r0, r4
        LSHIFT( K, K );
 8007b08:	466a      	mov	r2, sp
    if( ctx->M_n == 16 )
 8007b0a:	30fc      	adds	r0, #252	; 0xfc
 8007b0c:	6986      	ldr	r6, [r0, #24]
        LSHIFT( K, K );
 8007b0e:	73d3      	strb	r3, [r2, #15]
    if( ctx->M_n == 16 )
 8007b10:	2e10      	cmp	r6, #16
 8007b12:	d137      	bne.n	8007b84 <AES_CMAC_Final+0xc6>
 8007b14:	466a      	mov	r2, sp
 8007b16:	1ca3      	adds	r3, r4, #2
 8007b18:	33ff      	adds	r3, #255	; 0xff
 8007b1a:	3015      	adds	r0, #21
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 8007b1c:	7819      	ldrb	r1, [r3, #0]
 8007b1e:	7816      	ldrb	r6, [r2, #0]
 8007b20:	3201      	adds	r2, #1
 8007b22:	4071      	eors	r1, r6
 8007b24:	7019      	strb	r1, [r3, #0]
 8007b26:	3301      	adds	r3, #1
 8007b28:	4298      	cmp	r0, r3
 8007b2a:	d1f7      	bne.n	8007b1c <AES_CMAC_Final+0x5e>
 8007b2c:	0023      	movs	r3, r4
 8007b2e:	33f1      	adds	r3, #241	; 0xf1
 8007b30:	0019      	movs	r1, r3
 8007b32:	1ca0      	adds	r0, r4, #2
 8007b34:	30ff      	adds	r0, #255	; 0xff
        while( ++ctx->M_n < 16 )
            ctx->M_last[ctx->M_n] = 0;

        XOR( K, ctx->M_last );
    }
    XOR( ctx->M_last, ctx->X );
 8007b36:	781a      	ldrb	r2, [r3, #0]
 8007b38:	7c1e      	ldrb	r6, [r3, #16]
 8007b3a:	4072      	eors	r2, r6
 8007b3c:	701a      	strb	r2, [r3, #0]
 8007b3e:	3301      	adds	r3, #1
 8007b40:	4298      	cmp	r0, r3
 8007b42:	d1f8      	bne.n	8007b36 <AES_CMAC_Final+0x78>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 8007b44:	a804      	add	r0, sp, #16
 8007b46:	2210      	movs	r2, #16
 8007b48:	f005 fc96 	bl	800d478 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 8007b4c:	0022      	movs	r2, r4
 8007b4e:	0029      	movs	r1, r5
 8007b50:	a804      	add	r0, sp, #16
 8007b52:	f000 f969 	bl	8007e28 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 8007b56:	2210      	movs	r2, #16
 8007b58:	2100      	movs	r1, #0
 8007b5a:	4668      	mov	r0, sp
 8007b5c:	f005 fca2 	bl	800d4a4 <memset1>
}
 8007b60:	b009      	add	sp, #36	; 0x24
 8007b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b64:	466b      	mov	r3, sp
        LSHIFT( K, K );
 8007b66:	2100      	movs	r1, #0
 8007b68:	781a      	ldrb	r2, [r3, #0]
 8007b6a:	7858      	ldrb	r0, [r3, #1]
 8007b6c:	0052      	lsls	r2, r2, #1
 8007b6e:	09c0      	lsrs	r0, r0, #7
 8007b70:	4302      	orrs	r2, r0
 8007b72:	3101      	adds	r1, #1
 8007b74:	701a      	strb	r2, [r3, #0]
 8007b76:	3301      	adds	r3, #1
 8007b78:	290f      	cmp	r1, #15
 8007b7a:	d1f5      	bne.n	8007b68 <AES_CMAC_Final+0xaa>
 8007b7c:	466b      	mov	r3, sp
 8007b7e:	7bdb      	ldrb	r3, [r3, #15]
 8007b80:	005b      	lsls	r3, r3, #1
 8007b82:	e7c0      	b.n	8007b06 <AES_CMAC_Final+0x48>
        if( K[0] & 0x80 )
 8007b84:	7813      	ldrb	r3, [r2, #0]
 8007b86:	2b7f      	cmp	r3, #127	; 0x7f
 8007b88:	d932      	bls.n	8007bf0 <AES_CMAC_Final+0x132>
 8007b8a:	466b      	mov	r3, sp
            LSHIFT( K, K );
 8007b8c:	2100      	movs	r1, #0
 8007b8e:	781a      	ldrb	r2, [r3, #0]
 8007b90:	785f      	ldrb	r7, [r3, #1]
 8007b92:	0052      	lsls	r2, r2, #1
 8007b94:	09ff      	lsrs	r7, r7, #7
 8007b96:	433a      	orrs	r2, r7
 8007b98:	3101      	adds	r1, #1
 8007b9a:	701a      	strb	r2, [r3, #0]
 8007b9c:	3301      	adds	r3, #1
 8007b9e:	290f      	cmp	r1, #15
 8007ba0:	d1f5      	bne.n	8007b8e <AES_CMAC_Final+0xd0>
 8007ba2:	466b      	mov	r3, sp
 8007ba4:	7bda      	ldrb	r2, [r3, #15]
            K[15] ^= 0x87;
 8007ba6:	2379      	movs	r3, #121	; 0x79
            LSHIFT( K, K );
 8007ba8:	0052      	lsls	r2, r2, #1
            K[15] ^= 0x87;
 8007baa:	425b      	negs	r3, r3
 8007bac:	4053      	eors	r3, r2
            LSHIFT( K, K );
 8007bae:	466a      	mov	r2, sp
 8007bb0:	73d3      	strb	r3, [r2, #15]
        ctx->M_last[ctx->M_n] = 0x80;
 8007bb2:	2280      	movs	r2, #128	; 0x80
 8007bb4:	19a3      	adds	r3, r4, r6
 8007bb6:	33ff      	adds	r3, #255	; 0xff
 8007bb8:	1c77      	adds	r7, r6, #1
 8007bba:	709a      	strb	r2, [r3, #2]
        while( ++ctx->M_n < 16 )
 8007bbc:	0039      	movs	r1, r7
            ctx->M_last[ctx->M_n] = 0;
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	1ca3      	adds	r3, r4, #2
 8007bc2:	33ff      	adds	r3, #255	; 0xff
        while( ++ctx->M_n < 16 )
 8007bc4:	290f      	cmp	r1, #15
 8007bc6:	d923      	bls.n	8007c10 <AES_CMAC_Final+0x152>
 8007bc8:	2200      	movs	r2, #0
 8007bca:	2f10      	cmp	r7, #16
 8007bcc:	d801      	bhi.n	8007bd2 <AES_CMAC_Final+0x114>
 8007bce:	320f      	adds	r2, #15
 8007bd0:	1b92      	subs	r2, r2, r6
 8007bd2:	19d2      	adds	r2, r2, r7
 8007bd4:	6182      	str	r2, [r0, #24]
 8007bd6:	0020      	movs	r0, r4
 8007bd8:	466a      	mov	r2, sp
 8007bda:	3012      	adds	r0, #18
 8007bdc:	30ff      	adds	r0, #255	; 0xff
        XOR( K, ctx->M_last );
 8007bde:	7819      	ldrb	r1, [r3, #0]
 8007be0:	7816      	ldrb	r6, [r2, #0]
 8007be2:	3201      	adds	r2, #1
 8007be4:	4071      	eors	r1, r6
 8007be6:	7019      	strb	r1, [r3, #0]
 8007be8:	3301      	adds	r3, #1
 8007bea:	4298      	cmp	r0, r3
 8007bec:	d1f7      	bne.n	8007bde <AES_CMAC_Final+0x120>
 8007bee:	e79d      	b.n	8007b2c <AES_CMAC_Final+0x6e>
 8007bf0:	466b      	mov	r3, sp
            LSHIFT( K, K );
 8007bf2:	2100      	movs	r1, #0
 8007bf4:	781a      	ldrb	r2, [r3, #0]
 8007bf6:	785f      	ldrb	r7, [r3, #1]
 8007bf8:	0052      	lsls	r2, r2, #1
 8007bfa:	09ff      	lsrs	r7, r7, #7
 8007bfc:	433a      	orrs	r2, r7
 8007bfe:	3101      	adds	r1, #1
 8007c00:	701a      	strb	r2, [r3, #0]
 8007c02:	3301      	adds	r3, #1
 8007c04:	290f      	cmp	r1, #15
 8007c06:	d1f5      	bne.n	8007bf4 <AES_CMAC_Final+0x136>
 8007c08:	466b      	mov	r3, sp
 8007c0a:	7bdb      	ldrb	r3, [r3, #15]
 8007c0c:	005b      	lsls	r3, r3, #1
 8007c0e:	e7ce      	b.n	8007bae <AES_CMAC_Final+0xf0>
            ctx->M_last[ctx->M_n] = 0;
 8007c10:	545a      	strb	r2, [r3, r1]
 8007c12:	3101      	adds	r1, #1
 8007c14:	e7d6      	b.n	8007bc4 <AES_CMAC_Final+0x106>

08007c16 <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 8007c16:	780a      	ldrb	r2, [r1, #0]
 8007c18:	7803      	ldrb	r3, [r0, #0]
 8007c1a:	4053      	eors	r3, r2
 8007c1c:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 8007c1e:	784a      	ldrb	r2, [r1, #1]
 8007c20:	7843      	ldrb	r3, [r0, #1]
 8007c22:	4053      	eors	r3, r2
 8007c24:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 8007c26:	788a      	ldrb	r2, [r1, #2]
 8007c28:	7883      	ldrb	r3, [r0, #2]
 8007c2a:	4053      	eors	r3, r2
 8007c2c:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 8007c2e:	78ca      	ldrb	r2, [r1, #3]
 8007c30:	78c3      	ldrb	r3, [r0, #3]
 8007c32:	4053      	eors	r3, r2
 8007c34:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 8007c36:	790a      	ldrb	r2, [r1, #4]
 8007c38:	7903      	ldrb	r3, [r0, #4]
 8007c3a:	4053      	eors	r3, r2
 8007c3c:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 8007c3e:	794a      	ldrb	r2, [r1, #5]
 8007c40:	7943      	ldrb	r3, [r0, #5]
 8007c42:	4053      	eors	r3, r2
 8007c44:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 8007c46:	798a      	ldrb	r2, [r1, #6]
 8007c48:	7983      	ldrb	r3, [r0, #6]
 8007c4a:	4053      	eors	r3, r2
 8007c4c:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 8007c4e:	79ca      	ldrb	r2, [r1, #7]
 8007c50:	79c3      	ldrb	r3, [r0, #7]
 8007c52:	4053      	eors	r3, r2
 8007c54:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 8007c56:	7a0a      	ldrb	r2, [r1, #8]
 8007c58:	7a03      	ldrb	r3, [r0, #8]
 8007c5a:	4053      	eors	r3, r2
 8007c5c:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 8007c5e:	7a4a      	ldrb	r2, [r1, #9]
 8007c60:	7a43      	ldrb	r3, [r0, #9]
 8007c62:	4053      	eors	r3, r2
 8007c64:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 8007c66:	7a8a      	ldrb	r2, [r1, #10]
 8007c68:	7a83      	ldrb	r3, [r0, #10]
 8007c6a:	4053      	eors	r3, r2
 8007c6c:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 8007c6e:	7aca      	ldrb	r2, [r1, #11]
 8007c70:	7ac3      	ldrb	r3, [r0, #11]
 8007c72:	4053      	eors	r3, r2
 8007c74:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 8007c76:	7b0a      	ldrb	r2, [r1, #12]
 8007c78:	7b03      	ldrb	r3, [r0, #12]
 8007c7a:	4053      	eors	r3, r2
 8007c7c:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 8007c7e:	7b4a      	ldrb	r2, [r1, #13]
 8007c80:	7b43      	ldrb	r3, [r0, #13]
 8007c82:	4053      	eors	r3, r2
 8007c84:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 8007c86:	7b8a      	ldrb	r2, [r1, #14]
 8007c88:	7b83      	ldrb	r3, [r0, #14]
 8007c8a:	4053      	eors	r3, r2
 8007c8c:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 8007c8e:	7bca      	ldrb	r2, [r1, #15]
 8007c90:	7bc3      	ldrb	r3, [r0, #15]
 8007c92:	4053      	eors	r3, r2
 8007c94:	73c3      	strb	r3, [r0, #15]
#endif
}
 8007c96:	4770      	bx	lr

08007c98 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 8007c98:	b510      	push	{r4, lr}
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 8007c9a:	780b      	ldrb	r3, [r1, #0]
 8007c9c:	7814      	ldrb	r4, [r2, #0]
 8007c9e:	4063      	eors	r3, r4
 8007ca0:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 8007ca2:	7854      	ldrb	r4, [r2, #1]
 8007ca4:	784b      	ldrb	r3, [r1, #1]
 8007ca6:	4063      	eors	r3, r4
 8007ca8:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 8007caa:	7894      	ldrb	r4, [r2, #2]
 8007cac:	788b      	ldrb	r3, [r1, #2]
 8007cae:	4063      	eors	r3, r4
 8007cb0:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 8007cb2:	78d4      	ldrb	r4, [r2, #3]
 8007cb4:	78cb      	ldrb	r3, [r1, #3]
 8007cb6:	4063      	eors	r3, r4
 8007cb8:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 8007cba:	7914      	ldrb	r4, [r2, #4]
 8007cbc:	790b      	ldrb	r3, [r1, #4]
 8007cbe:	4063      	eors	r3, r4
 8007cc0:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 8007cc2:	7954      	ldrb	r4, [r2, #5]
 8007cc4:	794b      	ldrb	r3, [r1, #5]
 8007cc6:	4063      	eors	r3, r4
 8007cc8:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 8007cca:	7994      	ldrb	r4, [r2, #6]
 8007ccc:	798b      	ldrb	r3, [r1, #6]
 8007cce:	4063      	eors	r3, r4
 8007cd0:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 8007cd2:	79d4      	ldrb	r4, [r2, #7]
 8007cd4:	79cb      	ldrb	r3, [r1, #7]
 8007cd6:	4063      	eors	r3, r4
 8007cd8:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 8007cda:	7a14      	ldrb	r4, [r2, #8]
 8007cdc:	7a0b      	ldrb	r3, [r1, #8]
 8007cde:	4063      	eors	r3, r4
 8007ce0:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 8007ce2:	7a4b      	ldrb	r3, [r1, #9]
 8007ce4:	7a54      	ldrb	r4, [r2, #9]
 8007ce6:	4063      	eors	r3, r4
 8007ce8:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 8007cea:	7a8b      	ldrb	r3, [r1, #10]
 8007cec:	7a94      	ldrb	r4, [r2, #10]
 8007cee:	4063      	eors	r3, r4
 8007cf0:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 8007cf2:	7ad4      	ldrb	r4, [r2, #11]
 8007cf4:	7acb      	ldrb	r3, [r1, #11]
 8007cf6:	4063      	eors	r3, r4
 8007cf8:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 8007cfa:	7b14      	ldrb	r4, [r2, #12]
 8007cfc:	7b0b      	ldrb	r3, [r1, #12]
 8007cfe:	4063      	eors	r3, r4
 8007d00:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 8007d02:	7b54      	ldrb	r4, [r2, #13]
 8007d04:	7b4b      	ldrb	r3, [r1, #13]
 8007d06:	4063      	eors	r3, r4
 8007d08:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 8007d0a:	7b94      	ldrb	r4, [r2, #14]
 8007d0c:	7b8b      	ldrb	r3, [r1, #14]
 8007d0e:	4063      	eors	r3, r4
 8007d10:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 8007d12:	7bcb      	ldrb	r3, [r1, #15]
 8007d14:	7bd2      	ldrb	r2, [r2, #15]
 8007d16:	4053      	eors	r3, r2
 8007d18:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 8007d1a:	bd10      	pop	{r4, pc}

08007d1c <lorawan_aes_set_key>:

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
    uint8_t cc, rc, hi;

    switch( keylen )
 8007d1c:	000b      	movs	r3, r1
{
 8007d1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d20:	3b10      	subs	r3, #16
 8007d22:	b2db      	uxtb	r3, r3
 8007d24:	000e      	movs	r6, r1
 8007d26:	0014      	movs	r4, r2
 8007d28:	b087      	sub	sp, #28
 8007d2a:	2b10      	cmp	r3, #16
 8007d2c:	d805      	bhi.n	8007d3a <lorawan_aes_set_key+0x1e>
 8007d2e:	2201      	movs	r2, #1
 8007d30:	409a      	lsls	r2, r3
 8007d32:	0013      	movs	r3, r2
 8007d34:	4a3a      	ldr	r2, [pc, #232]	; (8007e20 <lorawan_aes_set_key+0x104>)
 8007d36:	4213      	tst	r3, r2
 8007d38:	d105      	bne.n	8007d46 <lorawan_aes_set_key+0x2a>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 8007d3a:	2300      	movs	r3, #0
        return ( uint8_t )-1;
 8007d3c:	20ff      	movs	r0, #255	; 0xff
        ctx->rnd = 0;
 8007d3e:	34f0      	adds	r4, #240	; 0xf0
 8007d40:	7023      	strb	r3, [r4, #0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 8007d42:	b007      	add	sp, #28
 8007d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    while( nn-- )
 8007d46:	2300      	movs	r3, #0
 8007d48:	429e      	cmp	r6, r3
 8007d4a:	d153      	bne.n	8007df4 <lorawan_aes_set_key+0xd8>
    hi = (keylen + 28) << 2;
 8007d4c:	0033      	movs	r3, r6
    ctx->rnd = (hi >> 4) - 1;
 8007d4e:	0022      	movs	r2, r4
    hi = (keylen + 28) << 2;
 8007d50:	331c      	adds	r3, #28
 8007d52:	009b      	lsls	r3, r3, #2
 8007d54:	b2db      	uxtb	r3, r3
 8007d56:	9305      	str	r3, [sp, #20]
    ctx->rnd = (hi >> 4) - 1;
 8007d58:	091b      	lsrs	r3, r3, #4
 8007d5a:	3b01      	subs	r3, #1
 8007d5c:	32f0      	adds	r2, #240	; 0xf0
 8007d5e:	7013      	strb	r3, [r2, #0]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8007d60:	2301      	movs	r3, #1
    ctx->rnd = (hi >> 4) - 1;
 8007d62:	0035      	movs	r5, r6
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8007d64:	9304      	str	r3, [sp, #16]
        t0 = ctx->ksch[cc - 4];
 8007d66:	1963      	adds	r3, r4, r5
 8007d68:	1f1a      	subs	r2, r3, #4
 8007d6a:	7817      	ldrb	r7, [r2, #0]
        t1 = ctx->ksch[cc - 3];
 8007d6c:	1eda      	subs	r2, r3, #3
 8007d6e:	7812      	ldrb	r2, [r2, #0]
        if( cc % keylen == 0 )
 8007d70:	0031      	movs	r1, r6
        t1 = ctx->ksch[cc - 3];
 8007d72:	9201      	str	r2, [sp, #4]
        t2 = ctx->ksch[cc - 2];
 8007d74:	1e9a      	subs	r2, r3, #2
        t3 = ctx->ksch[cc - 1];
 8007d76:	3b01      	subs	r3, #1
        t2 = ctx->ksch[cc - 2];
 8007d78:	7812      	ldrb	r2, [r2, #0]
        t3 = ctx->ksch[cc - 1];
 8007d7a:	781b      	ldrb	r3, [r3, #0]
        if( cc % keylen == 0 )
 8007d7c:	0028      	movs	r0, r5
        t2 = ctx->ksch[cc - 2];
 8007d7e:	9202      	str	r2, [sp, #8]
        t3 = ctx->ksch[cc - 1];
 8007d80:	9303      	str	r3, [sp, #12]
        if( cc % keylen == 0 )
 8007d82:	f7f8 fa6d 	bl	8000260 <__aeabi_uidivmod>
 8007d86:	b2c9      	uxtb	r1, r1
 8007d88:	2900      	cmp	r1, #0
 8007d8a:	d137      	bne.n	8007dfc <lorawan_aes_set_key+0xe0>
            t0 = s_box(t1) ^ rc;
 8007d8c:	4b25      	ldr	r3, [pc, #148]	; (8007e24 <lorawan_aes_set_key+0x108>)
 8007d8e:	9a01      	ldr	r2, [sp, #4]
            t1 = s_box(t2);
 8007d90:	9902      	ldr	r1, [sp, #8]
            t0 = s_box(t1) ^ rc;
 8007d92:	5c9a      	ldrb	r2, [r3, r2]
 8007d94:	9b04      	ldr	r3, [sp, #16]
 8007d96:	405a      	eors	r2, r3
            t1 = s_box(t2);
 8007d98:	4b22      	ldr	r3, [pc, #136]	; (8007e24 <lorawan_aes_set_key+0x108>)
 8007d9a:	5c5b      	ldrb	r3, [r3, r1]
            t2 = s_box(t3);
 8007d9c:	9903      	ldr	r1, [sp, #12]
            t1 = s_box(t2);
 8007d9e:	9301      	str	r3, [sp, #4]
            t2 = s_box(t3);
 8007da0:	4b20      	ldr	r3, [pc, #128]	; (8007e24 <lorawan_aes_set_key+0x108>)
 8007da2:	5c5b      	ldrb	r3, [r3, r1]
            rc = f2(rc);
 8007da4:	211b      	movs	r1, #27
            t2 = s_box(t3);
 8007da6:	9302      	str	r3, [sp, #8]
            t3 = s_box(tt);
 8007da8:	4b1e      	ldr	r3, [pc, #120]	; (8007e24 <lorawan_aes_set_key+0x108>)
 8007daa:	5ddb      	ldrb	r3, [r3, r7]
            t0 = s_box(t1) ^ rc;
 8007dac:	0017      	movs	r7, r2
            t3 = s_box(tt);
 8007dae:	9303      	str	r3, [sp, #12]
            rc = f2(rc);
 8007db0:	9b04      	ldr	r3, [sp, #16]
 8007db2:	09db      	lsrs	r3, r3, #7
 8007db4:	434b      	muls	r3, r1
 8007db6:	9904      	ldr	r1, [sp, #16]
 8007db8:	0049      	lsls	r1, r1, #1
 8007dba:	404b      	eors	r3, r1
 8007dbc:	b2db      	uxtb	r3, r3
 8007dbe:	9304      	str	r3, [sp, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 8007dc0:	1bab      	subs	r3, r5, r6
 8007dc2:	b2db      	uxtb	r3, r3
 8007dc4:	5ce2      	ldrb	r2, [r4, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 8007dc6:	18e3      	adds	r3, r4, r3
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 8007dc8:	4057      	eors	r7, r2
 8007dca:	5567      	strb	r7, [r4, r5]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 8007dcc:	785a      	ldrb	r2, [r3, #1]
 8007dce:	9801      	ldr	r0, [sp, #4]
 8007dd0:	1961      	adds	r1, r4, r5
 8007dd2:	4050      	eors	r0, r2
 8007dd4:	7048      	strb	r0, [r1, #1]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 8007dd6:	789a      	ldrb	r2, [r3, #2]
 8007dd8:	9802      	ldr	r0, [sp, #8]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8007dda:	3504      	adds	r5, #4
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 8007ddc:	4050      	eors	r0, r2
 8007dde:	7088      	strb	r0, [r1, #2]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8007de0:	78db      	ldrb	r3, [r3, #3]
 8007de2:	9a03      	ldr	r2, [sp, #12]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8007de4:	b2ed      	uxtb	r5, r5
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8007de6:	405a      	eors	r2, r3
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8007de8:	9b05      	ldr	r3, [sp, #20]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8007dea:	70ca      	strb	r2, [r1, #3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8007dec:	42ab      	cmp	r3, r5
 8007dee:	d8ba      	bhi.n	8007d66 <lorawan_aes_set_key+0x4a>
    return 0;
 8007df0:	2000      	movs	r0, #0
 8007df2:	e7a6      	b.n	8007d42 <lorawan_aes_set_key+0x26>
        *d++ = *s++;
 8007df4:	5cc2      	ldrb	r2, [r0, r3]
 8007df6:	54e2      	strb	r2, [r4, r3]
 8007df8:	3301      	adds	r3, #1
 8007dfa:	e7a5      	b.n	8007d48 <lorawan_aes_set_key+0x2c>
        else if( keylen > 24 && cc % keylen == 16 )
 8007dfc:	2e18      	cmp	r6, #24
 8007dfe:	d9df      	bls.n	8007dc0 <lorawan_aes_set_key+0xa4>
 8007e00:	2910      	cmp	r1, #16
 8007e02:	d1dd      	bne.n	8007dc0 <lorawan_aes_set_key+0xa4>
            t1 = s_box(t1);
 8007e04:	9a01      	ldr	r2, [sp, #4]
            t0 = s_box(t0);
 8007e06:	4b07      	ldr	r3, [pc, #28]	; (8007e24 <lorawan_aes_set_key+0x108>)
 8007e08:	5ddf      	ldrb	r7, [r3, r7]
            t1 = s_box(t1);
 8007e0a:	5c9b      	ldrb	r3, [r3, r2]
            t2 = s_box(t2);
 8007e0c:	9a02      	ldr	r2, [sp, #8]
            t1 = s_box(t1);
 8007e0e:	9301      	str	r3, [sp, #4]
            t2 = s_box(t2);
 8007e10:	4b04      	ldr	r3, [pc, #16]	; (8007e24 <lorawan_aes_set_key+0x108>)
 8007e12:	5c9b      	ldrb	r3, [r3, r2]
            t3 = s_box(t3);
 8007e14:	9a03      	ldr	r2, [sp, #12]
            t2 = s_box(t2);
 8007e16:	9302      	str	r3, [sp, #8]
            t3 = s_box(t3);
 8007e18:	4b02      	ldr	r3, [pc, #8]	; (8007e24 <lorawan_aes_set_key+0x108>)
 8007e1a:	5c9b      	ldrb	r3, [r3, r2]
 8007e1c:	9303      	str	r3, [sp, #12]
 8007e1e:	e7cf      	b.n	8007dc0 <lorawan_aes_set_key+0xa4>
 8007e20:	00010101 	.word	0x00010101
 8007e24:	0800f6b4 	.word	0x0800f6b4

08007e28 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 8007e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e2a:	b0a5      	sub	sp, #148	; 0x94
 8007e2c:	0016      	movs	r6, r2
 8007e2e:	911f      	str	r1, [sp, #124]	; 0x7c
    if( ctx->rnd )
 8007e30:	32f0      	adds	r2, #240	; 0xf0
 8007e32:	7812      	ldrb	r2, [r2, #0]
{
 8007e34:	0003      	movs	r3, r0
#endif
        shift_sub_rows( s1 );
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
    }
    else
        return ( uint8_t )-1;
 8007e36:	20ff      	movs	r0, #255	; 0xff
    if( ctx->rnd )
 8007e38:	2a00      	cmp	r2, #0
 8007e3a:	d100      	bne.n	8007e3e <lorawan_aes_encrypt+0x16>
 8007e3c:	e08a      	b.n	8007f54 <lorawan_aes_encrypt+0x12c>
        copy_and_key( s1, in, ctx->ksch );
 8007e3e:	0032      	movs	r2, r6
 8007e40:	0019      	movs	r1, r3
 8007e42:	a820      	add	r0, sp, #128	; 0x80
 8007e44:	f7ff ff28 	bl	8007c98 <copy_and_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 8007e48:	2501      	movs	r5, #1
 8007e4a:	012a      	lsls	r2, r5, #4
 8007e4c:	18b3      	adds	r3, r6, r2
 8007e4e:	469c      	mov	ip, r3
 8007e50:	ab20      	add	r3, sp, #128	; 0x80
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	9301      	str	r3, [sp, #4]
 8007e56:	ab20      	add	r3, sp, #128	; 0x80
 8007e58:	795b      	ldrb	r3, [r3, #5]
 8007e5a:	9302      	str	r3, [sp, #8]
 8007e5c:	ab20      	add	r3, sp, #128	; 0x80
 8007e5e:	7a9f      	ldrb	r7, [r3, #10]
 8007e60:	4b91      	ldr	r3, [pc, #580]	; (80080a8 <lorawan_aes_encrypt+0x280>)
 8007e62:	5dda      	ldrb	r2, [r3, r7]
 8007e64:	9203      	str	r2, [sp, #12]
 8007e66:	aa20      	add	r2, sp, #128	; 0x80
 8007e68:	7bd2      	ldrb	r2, [r2, #15]
 8007e6a:	9204      	str	r2, [sp, #16]
 8007e6c:	5c9a      	ldrb	r2, [r3, r2]
 8007e6e:	9205      	str	r2, [sp, #20]
 8007e70:	9a01      	ldr	r2, [sp, #4]
 8007e72:	5c98      	ldrb	r0, [r3, r2]
 8007e74:	9a02      	ldr	r2, [sp, #8]
 8007e76:	5c9a      	ldrb	r2, [r3, r2]
 8007e78:	9206      	str	r2, [sp, #24]
 8007e7a:	aa20      	add	r2, sp, #128	; 0x80
 8007e7c:	7912      	ldrb	r2, [r2, #4]
 8007e7e:	9207      	str	r2, [sp, #28]
 8007e80:	aa20      	add	r2, sp, #128	; 0x80
 8007e82:	7a52      	ldrb	r2, [r2, #9]
 8007e84:	9208      	str	r2, [sp, #32]
 8007e86:	aa20      	add	r2, sp, #128	; 0x80
 8007e88:	7b92      	ldrb	r2, [r2, #14]
 8007e8a:	9209      	str	r2, [sp, #36]	; 0x24
 8007e8c:	5c9a      	ldrb	r2, [r3, r2]
 8007e8e:	920a      	str	r2, [sp, #40]	; 0x28
 8007e90:	aa20      	add	r2, sp, #128	; 0x80
 8007e92:	78d2      	ldrb	r2, [r2, #3]
 8007e94:	920b      	str	r2, [sp, #44]	; 0x2c
 8007e96:	5c9a      	ldrb	r2, [r3, r2]
 8007e98:	920c      	str	r2, [sp, #48]	; 0x30
 8007e9a:	9a07      	ldr	r2, [sp, #28]
 8007e9c:	5c9a      	ldrb	r2, [r3, r2]
 8007e9e:	920d      	str	r2, [sp, #52]	; 0x34
 8007ea0:	9a08      	ldr	r2, [sp, #32]
 8007ea2:	5c9a      	ldrb	r2, [r3, r2]
 8007ea4:	920e      	str	r2, [sp, #56]	; 0x38
 8007ea6:	aa20      	add	r2, sp, #128	; 0x80
 8007ea8:	7a12      	ldrb	r2, [r2, #8]
 8007eaa:	920f      	str	r2, [sp, #60]	; 0x3c
 8007eac:	aa20      	add	r2, sp, #128	; 0x80
 8007eae:	7b52      	ldrb	r2, [r2, #13]
 8007eb0:	9210      	str	r2, [sp, #64]	; 0x40
 8007eb2:	aa20      	add	r2, sp, #128	; 0x80
 8007eb4:	7892      	ldrb	r2, [r2, #2]
 8007eb6:	9211      	str	r2, [sp, #68]	; 0x44
 8007eb8:	5c9a      	ldrb	r2, [r3, r2]
 8007eba:	9212      	str	r2, [sp, #72]	; 0x48
 8007ebc:	aa20      	add	r2, sp, #128	; 0x80
 8007ebe:	79d2      	ldrb	r2, [r2, #7]
 8007ec0:	9213      	str	r2, [sp, #76]	; 0x4c
 8007ec2:	5c9a      	ldrb	r2, [r3, r2]
 8007ec4:	9214      	str	r2, [sp, #80]	; 0x50
 8007ec6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007ec8:	5c9a      	ldrb	r2, [r3, r2]
 8007eca:	9215      	str	r2, [sp, #84]	; 0x54
 8007ecc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007ece:	5c9a      	ldrb	r2, [r3, r2]
 8007ed0:	9216      	str	r2, [sp, #88]	; 0x58
 8007ed2:	aa20      	add	r2, sp, #128	; 0x80
 8007ed4:	7b12      	ldrb	r2, [r2, #12]
 8007ed6:	9217      	str	r2, [sp, #92]	; 0x5c
 8007ed8:	aa20      	add	r2, sp, #128	; 0x80
 8007eda:	7852      	ldrb	r2, [r2, #1]
 8007edc:	9218      	str	r2, [sp, #96]	; 0x60
 8007ede:	aa20      	add	r2, sp, #128	; 0x80
 8007ee0:	7992      	ldrb	r2, [r2, #6]
 8007ee2:	9219      	str	r2, [sp, #100]	; 0x64
 8007ee4:	5c9a      	ldrb	r2, [r3, r2]
 8007ee6:	921a      	str	r2, [sp, #104]	; 0x68
 8007ee8:	aa20      	add	r2, sp, #128	; 0x80
 8007eea:	7ad2      	ldrb	r2, [r2, #11]
 8007eec:	921b      	str	r2, [sp, #108]	; 0x6c
 8007eee:	5c9a      	ldrb	r2, [r3, r2]
 8007ef0:	921c      	str	r2, [sp, #112]	; 0x70
 8007ef2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007ef4:	5c9a      	ldrb	r2, [r3, r2]
 8007ef6:	921d      	str	r2, [sp, #116]	; 0x74
 8007ef8:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007efa:	5c9b      	ldrb	r3, [r3, r2]
 8007efc:	931e      	str	r3, [sp, #120]	; 0x78
 8007efe:	0033      	movs	r3, r6
 8007f00:	33f0      	adds	r3, #240	; 0xf0
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	42ab      	cmp	r3, r5
 8007f06:	d827      	bhi.n	8007f58 <lorawan_aes_encrypt+0x130>
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 8007f08:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007f0a:	ab20      	add	r3, sp, #128	; 0x80
 8007f0c:	711a      	strb	r2, [r3, #4]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 8007f0e:	9a15      	ldr	r2, [sp, #84]	; 0x54
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 8007f10:	7018      	strb	r0, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 8007f12:	721a      	strb	r2, [r3, #8]
 8007f14:	9a1d      	ldr	r2, [sp, #116]	; 0x74
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8007f16:	981f      	ldr	r0, [sp, #124]	; 0x7c
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 8007f18:	731a      	strb	r2, [r3, #12]
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 8007f1a:	9a06      	ldr	r2, [sp, #24]
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8007f1c:	0019      	movs	r1, r3
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 8007f1e:	705a      	strb	r2, [r3, #1]
 8007f20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007f22:	715a      	strb	r2, [r3, #5]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 8007f24:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007f26:	725a      	strb	r2, [r3, #9]
 8007f28:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007f2a:	735a      	strb	r2, [r3, #13]
    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 8007f2c:	9a03      	ldr	r2, [sp, #12]
 8007f2e:	709a      	strb	r2, [r3, #2]
 8007f30:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007f32:	729a      	strb	r2, [r3, #10]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 8007f34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f36:	719a      	strb	r2, [r3, #6]
 8007f38:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007f3a:	739a      	strb	r2, [r3, #14]
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 8007f3c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007f3e:	73da      	strb	r2, [r3, #15]
 8007f40:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007f42:	72da      	strb	r2, [r3, #11]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 8007f44:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007f46:	71da      	strb	r2, [r3, #7]
 8007f48:	9a05      	ldr	r2, [sp, #20]
 8007f4a:	70da      	strb	r2, [r3, #3]
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8007f4c:	4662      	mov	r2, ip
 8007f4e:	f7ff fea3 	bl	8007c98 <copy_and_key>
    return 0;
 8007f52:	2000      	movs	r0, #0
}
 8007f54:	b025      	add	sp, #148	; 0x94
 8007f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8007f58:	4b54      	ldr	r3, [pc, #336]	; (80080ac <lorawan_aes_encrypt+0x284>)
 8007f5a:	9c01      	ldr	r4, [sp, #4]
 8007f5c:	9905      	ldr	r1, [sp, #20]
 8007f5e:	9a03      	ldr	r2, [sp, #12]
 8007f60:	5d1c      	ldrb	r4, [r3, r4]
 8007f62:	404a      	eors	r2, r1
 8007f64:	4054      	eors	r4, r2
 8007f66:	9902      	ldr	r1, [sp, #8]
 8007f68:	4a51      	ldr	r2, [pc, #324]	; (80080b0 <lorawan_aes_encrypt+0x288>)
        for( r = 1 ; r < ctx->rnd ; ++r )
 8007f6a:	3501      	adds	r5, #1
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8007f6c:	5c51      	ldrb	r1, [r2, r1]
        for( r = 1 ; r < ctx->rnd ; ++r )
 8007f6e:	b2ed      	uxtb	r5, r5
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8007f70:	404c      	eors	r4, r1
 8007f72:	a920      	add	r1, sp, #128	; 0x80
 8007f74:	700c      	strb	r4, [r1, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 8007f76:	9c02      	ldr	r4, [sp, #8]
 8007f78:	9905      	ldr	r1, [sp, #20]
 8007f7a:	5d1c      	ldrb	r4, [r3, r4]
 8007f7c:	4041      	eors	r1, r0
 8007f7e:	4061      	eors	r1, r4
 8007f80:	5dd4      	ldrb	r4, [r2, r7]
 8007f82:	4061      	eors	r1, r4
 8007f84:	ac20      	add	r4, sp, #128	; 0x80
 8007f86:	7061      	strb	r1, [r4, #1]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 8007f88:	9906      	ldr	r1, [sp, #24]
 8007f8a:	4048      	eors	r0, r1
 8007f8c:	5dd9      	ldrb	r1, [r3, r7]
 8007f8e:	4048      	eors	r0, r1
 8007f90:	9904      	ldr	r1, [sp, #16]
 8007f92:	5c51      	ldrb	r1, [r2, r1]
 8007f94:	4048      	eors	r0, r1
 8007f96:	70a0      	strb	r0, [r4, #2]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 8007f98:	9903      	ldr	r1, [sp, #12]
 8007f9a:	9806      	ldr	r0, [sp, #24]
 8007f9c:	4041      	eors	r1, r0
 8007f9e:	9801      	ldr	r0, [sp, #4]
 8007fa0:	5c10      	ldrb	r0, [r2, r0]
 8007fa2:	4041      	eors	r1, r0
 8007fa4:	9804      	ldr	r0, [sp, #16]
 8007fa6:	5c18      	ldrb	r0, [r3, r0]
 8007fa8:	4041      	eors	r1, r0
 8007faa:	70e1      	strb	r1, [r4, #3]
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8007fac:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007fae:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007fb0:	4041      	eors	r1, r0
 8007fb2:	9807      	ldr	r0, [sp, #28]
 8007fb4:	5c18      	ldrb	r0, [r3, r0]
 8007fb6:	4041      	eors	r1, r0
 8007fb8:	9808      	ldr	r0, [sp, #32]
 8007fba:	5c10      	ldrb	r0, [r2, r0]
 8007fbc:	4041      	eors	r1, r0
 8007fbe:	7121      	strb	r1, [r4, #4]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 8007fc0:	980d      	ldr	r0, [sp, #52]	; 0x34
 8007fc2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007fc4:	4041      	eors	r1, r0
 8007fc6:	9808      	ldr	r0, [sp, #32]
 8007fc8:	5c18      	ldrb	r0, [r3, r0]
 8007fca:	4041      	eors	r1, r0
 8007fcc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007fce:	5c10      	ldrb	r0, [r2, r0]
 8007fd0:	4041      	eors	r1, r0
 8007fd2:	7161      	strb	r1, [r4, #5]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8007fd4:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007fd6:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007fd8:	4041      	eors	r1, r0
 8007fda:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007fdc:	5c18      	ldrb	r0, [r3, r0]
 8007fde:	4041      	eors	r1, r0
 8007fe0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007fe2:	5c10      	ldrb	r0, [r2, r0]
 8007fe4:	4041      	eors	r1, r0
 8007fe6:	71a1      	strb	r1, [r4, #6]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 8007fe8:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007fea:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007fec:	4041      	eors	r1, r0
 8007fee:	9807      	ldr	r0, [sp, #28]
 8007ff0:	5c10      	ldrb	r0, [r2, r0]
 8007ff2:	4041      	eors	r1, r0
 8007ff4:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007ff6:	5c18      	ldrb	r0, [r3, r0]
 8007ff8:	4041      	eors	r1, r0
 8007ffa:	71e1      	strb	r1, [r4, #7]
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8007ffc:	9814      	ldr	r0, [sp, #80]	; 0x50
 8007ffe:	9912      	ldr	r1, [sp, #72]	; 0x48
 8008000:	4041      	eors	r1, r0
 8008002:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8008004:	5c18      	ldrb	r0, [r3, r0]
 8008006:	4041      	eors	r1, r0
 8008008:	9810      	ldr	r0, [sp, #64]	; 0x40
 800800a:	5c10      	ldrb	r0, [r2, r0]
 800800c:	4041      	eors	r1, r0
 800800e:	7221      	strb	r1, [r4, #8]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 8008010:	9815      	ldr	r0, [sp, #84]	; 0x54
 8008012:	9914      	ldr	r1, [sp, #80]	; 0x50
 8008014:	4041      	eors	r1, r0
 8008016:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008018:	5c18      	ldrb	r0, [r3, r0]
 800801a:	4041      	eors	r1, r0
 800801c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800801e:	5c10      	ldrb	r0, [r2, r0]
 8008020:	4041      	eors	r1, r0
 8008022:	7261      	strb	r1, [r4, #9]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 8008024:	9816      	ldr	r0, [sp, #88]	; 0x58
 8008026:	9915      	ldr	r1, [sp, #84]	; 0x54
 8008028:	4041      	eors	r1, r0
 800802a:	9811      	ldr	r0, [sp, #68]	; 0x44
 800802c:	5c18      	ldrb	r0, [r3, r0]
 800802e:	4041      	eors	r1, r0
 8008030:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8008032:	5c10      	ldrb	r0, [r2, r0]
 8008034:	4041      	eors	r1, r0
 8008036:	72a1      	strb	r1, [r4, #10]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 8008038:	9816      	ldr	r0, [sp, #88]	; 0x58
 800803a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800803c:	4041      	eors	r1, r0
 800803e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8008040:	5c10      	ldrb	r0, [r2, r0]
 8008042:	4041      	eors	r1, r0
 8008044:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8008046:	5c18      	ldrb	r0, [r3, r0]
 8008048:	4041      	eors	r1, r0
 800804a:	72e1      	strb	r1, [r4, #11]
    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800804c:	981c      	ldr	r0, [sp, #112]	; 0x70
 800804e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008050:	4041      	eors	r1, r0
 8008052:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008054:	5c18      	ldrb	r0, [r3, r0]
 8008056:	4041      	eors	r1, r0
 8008058:	9818      	ldr	r0, [sp, #96]	; 0x60
 800805a:	5c10      	ldrb	r0, [r2, r0]
 800805c:	4041      	eors	r1, r0
 800805e:	7321      	strb	r1, [r4, #12]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 8008060:	981d      	ldr	r0, [sp, #116]	; 0x74
 8008062:	991c      	ldr	r1, [sp, #112]	; 0x70
 8008064:	4041      	eors	r1, r0
 8008066:	9818      	ldr	r0, [sp, #96]	; 0x60
 8008068:	5c18      	ldrb	r0, [r3, r0]
 800806a:	4041      	eors	r1, r0
 800806c:	9819      	ldr	r0, [sp, #100]	; 0x64
 800806e:	5c10      	ldrb	r0, [r2, r0]
 8008070:	4041      	eors	r1, r0
 8008072:	7361      	strb	r1, [r4, #13]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 8008074:	991d      	ldr	r1, [sp, #116]	; 0x74
 8008076:	981e      	ldr	r0, [sp, #120]	; 0x78
 8008078:	4041      	eors	r1, r0
 800807a:	9819      	ldr	r0, [sp, #100]	; 0x64
 800807c:	5c18      	ldrb	r0, [r3, r0]
 800807e:	4041      	eors	r1, r0
 8008080:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8008082:	5c10      	ldrb	r0, [r2, r0]
 8008084:	4041      	eors	r1, r0
 8008086:	73a1      	strb	r1, [r4, #14]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8008088:	981e      	ldr	r0, [sp, #120]	; 0x78
 800808a:	991a      	ldr	r1, [sp, #104]	; 0x68
 800808c:	4041      	eors	r1, r0
 800808e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008090:	5c12      	ldrb	r2, [r2, r0]
    xor_block(d, k);
 8008092:	0020      	movs	r0, r4
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8008094:	404a      	eors	r2, r1
 8008096:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8008098:	5c5b      	ldrb	r3, [r3, r1]
    xor_block(d, k);
 800809a:	4661      	mov	r1, ip
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800809c:	4053      	eors	r3, r2
 800809e:	73e3      	strb	r3, [r4, #15]
    xor_block(d, k);
 80080a0:	f7ff fdb9 	bl	8007c16 <xor_block>
        for( r = 1 ; r < ctx->rnd ; ++r )
 80080a4:	e6d1      	b.n	8007e4a <lorawan_aes_encrypt+0x22>
 80080a6:	46c0      	nop			; (mov r8, r8)
 80080a8:	0800f6b4 	.word	0x0800f6b4
 80080ac:	0800f4b4 	.word	0x0800f4b4
 80080b0:	0800f5b4 	.word	0x0800f5b4

080080b4 <GetKeyByID>:
 * \param[OUT] keyItem        - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID(KeyIdentifier_t keyID, Key_t **keyItem)
{
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 80080b4:	4a09      	ldr	r2, [pc, #36]	; (80080dc <GetKeyByID+0x28>)
{
 80080b6:	b530      	push	{r4, r5, lr}
 80080b8:	2300      	movs	r3, #0
 80080ba:	0014      	movs	r4, r2
  {
    if (SeNvmCtx.KeyList[i].KeyID == keyID)
 80080bc:	7c15      	ldrb	r5, [r2, #16]
 80080be:	4285      	cmp	r5, r0
 80080c0:	d106      	bne.n	80080d0 <GetKeyByID+0x1c>
    {
      *keyItem = &(SeNvmCtx.KeyList[i]);
 80080c2:	2211      	movs	r2, #17
      return SECURE_ELEMENT_SUCCESS;
 80080c4:	2000      	movs	r0, #0
      *keyItem = &(SeNvmCtx.KeyList[i]);
 80080c6:	4353      	muls	r3, r2
 80080c8:	3310      	adds	r3, #16
 80080ca:	18e3      	adds	r3, r4, r3
 80080cc:	600b      	str	r3, [r1, #0]
    }
  }
  return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
}
 80080ce:	bd30      	pop	{r4, r5, pc}
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 80080d0:	3301      	adds	r3, #1
 80080d2:	3211      	adds	r2, #17
 80080d4:	2b0a      	cmp	r3, #10
 80080d6:	d1f1      	bne.n	80080bc <GetKeyByID+0x8>
  return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80080d8:	2003      	movs	r0, #3
 80080da:	e7f8      	b.n	80080ce <GetKeyByID+0x1a>
 80080dc:	20000058 	.word	0x20000058

080080e0 <DummyCB>:
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB(void)
{
  return;
}
 80080e0:	4770      	bx	lr

080080e2 <ComputeCmac>:
 * \param[OUT] cmac           - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac(uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID,
                                         uint32_t *cmac)
{
 80080e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080e4:	b0cf      	sub	sp, #316	; 0x13c
 80080e6:	0006      	movs	r6, r0
 80080e8:	000d      	movs	r5, r1
 80080ea:	0017      	movs	r7, r2
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
  if ((buffer == NULL) || (cmac == NULL))
  {
    return SECURE_ELEMENT_ERROR_NPE;
 80080ec:	2402      	movs	r4, #2
{
 80080ee:	9301      	str	r3, [sp, #4]
  if ((buffer == NULL) || (cmac == NULL))
 80080f0:	2900      	cmp	r1, #0
 80080f2:	d023      	beq.n	800813c <ComputeCmac+0x5a>
 80080f4:	9b54      	ldr	r3, [sp, #336]	; 0x150
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d020      	beq.n	800813c <ComputeCmac+0x5a>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  uint8_t Cmac[16];
  AES_CMAC_CTX aesCmacCtx[1];

  AES_CMAC_Init(aesCmacCtx);
 80080fa:	a808      	add	r0, sp, #32
 80080fc:	f7ff fc58 	bl	80079b0 <AES_CMAC_Init>

  Key_t *keyItem;
  retval = GetKeyByID(keyID, &keyItem);
 8008100:	9801      	ldr	r0, [sp, #4]
 8008102:	a903      	add	r1, sp, #12
 8008104:	f7ff ffd6 	bl	80080b4 <GetKeyByID>
 8008108:	1e04      	subs	r4, r0, #0

  if (retval == SECURE_ELEMENT_SUCCESS)
 800810a:	d117      	bne.n	800813c <ComputeCmac+0x5a>
  {
    AES_CMAC_SetKey(aesCmacCtx, keyItem->KeyValue);
 800810c:	9b03      	ldr	r3, [sp, #12]
 800810e:	a808      	add	r0, sp, #32
 8008110:	1c59      	adds	r1, r3, #1
 8008112:	f7ff fc5d 	bl	80079d0 <AES_CMAC_SetKey>

    if (micBxBuffer != NULL)
 8008116:	2e00      	cmp	r6, #0
 8008118:	d004      	beq.n	8008124 <ComputeCmac+0x42>
    {
      AES_CMAC_Update(aesCmacCtx, micBxBuffer, 16);
 800811a:	2210      	movs	r2, #16
 800811c:	0031      	movs	r1, r6
 800811e:	a808      	add	r0, sp, #32
 8008120:	f7ff fc5d 	bl	80079de <AES_CMAC_Update>
    }

    AES_CMAC_Update(aesCmacCtx, buffer, size);
 8008124:	003a      	movs	r2, r7
 8008126:	0029      	movs	r1, r5
 8008128:	a808      	add	r0, sp, #32
 800812a:	f7ff fc58 	bl	80079de <AES_CMAC_Update>

    AES_CMAC_Final(Cmac, aesCmacCtx);
 800812e:	a908      	add	r1, sp, #32
 8008130:	a804      	add	r0, sp, #16
 8008132:	f7ff fcc4 	bl	8007abe <AES_CMAC_Final>

    /* Bring into the required format */
    *cmac = (uint32_t)((uint32_t) Cmac[3] << 24 | (uint32_t) Cmac[2] << 16 | (uint32_t) Cmac[1] << 8 |
 8008136:	9b54      	ldr	r3, [sp, #336]	; 0x150
 8008138:	9a04      	ldr	r2, [sp, #16]
 800813a:	601a      	str	r2, [r3, #0]
    retval = SECURE_ELEMENT_ERROR;
  }
#endif /* LORAWAN_KMS */

  return retval;
}
 800813c:	0020      	movs	r0, r4
 800813e:	b04f      	add	sp, #316	; 0x13c
 8008140:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08008144 <SecureElementInit>:
/*
 * API functions
 */

SecureElementStatus_t SecureElementInit(SecureElementNvmEvent seNvmCtxChanged)
{
 8008144:	b530      	push	{r4, r5, lr}
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  Key_t *keyItem;
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;

  /* Initialize LoRaWAN Key List buffer */
  memcpy1((uint8_t *)(SeNvmCtx.KeyList), (const uint8_t *)InitialKeyList, sizeof(Key_t)*NUM_OF_KEYS);
 8008146:	22aa      	movs	r2, #170	; 0xaa
{
 8008148:	b093      	sub	sp, #76	; 0x4c
  memcpy1((uint8_t *)(SeNvmCtx.KeyList), (const uint8_t *)InitialKeyList, sizeof(Key_t)*NUM_OF_KEYS);
 800814a:	4968      	ldr	r1, [pc, #416]	; (80082ec <SecureElementInit+0x1a8>)
{
 800814c:	0004      	movs	r4, r0
  memcpy1((uint8_t *)(SeNvmCtx.KeyList), (const uint8_t *)InitialKeyList, sizeof(Key_t)*NUM_OF_KEYS);
 800814e:	4868      	ldr	r0, [pc, #416]	; (80082f0 <SecureElementInit+0x1ac>)
 8008150:	f005 f992 	bl	800d478 <memcpy1>

  retval = GetKeyByID(APP_KEY, &keyItem);
 8008154:	a911      	add	r1, sp, #68	; 0x44
 8008156:	2000      	movs	r0, #0
 8008158:	f7ff ffac 	bl	80080b4 <GetKeyByID>
  KEY_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800815c:	2200      	movs	r2, #0
  retval = GetKeyByID(APP_KEY, &keyItem);
 800815e:	0005      	movs	r5, r0
  KEY_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 8008160:	0011      	movs	r1, r2
 8008162:	2002      	movs	r0, #2
 8008164:	4b63      	ldr	r3, [pc, #396]	; (80082f4 <SecureElementInit+0x1b0>)
 8008166:	f006 febf 	bl	800eee8 <UTIL_ADV_TRACE_COND_FSend>
  if (retval == SECURE_ELEMENT_SUCCESS)
 800816a:	2d00      	cmp	r5, #0
 800816c:	d126      	bne.n	80081bc <SecureElementInit+0x78>
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "###### AppKey:  %02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X\r\n", HEX16(keyItem->KeyValue));
 800816e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008170:	0029      	movs	r1, r5
 8008172:	7c1a      	ldrb	r2, [r3, #16]
 8008174:	2002      	movs	r0, #2
 8008176:	920f      	str	r2, [sp, #60]	; 0x3c
 8008178:	7bda      	ldrb	r2, [r3, #15]
 800817a:	920e      	str	r2, [sp, #56]	; 0x38
 800817c:	7b9a      	ldrb	r2, [r3, #14]
 800817e:	920d      	str	r2, [sp, #52]	; 0x34
 8008180:	7b5a      	ldrb	r2, [r3, #13]
 8008182:	920c      	str	r2, [sp, #48]	; 0x30
 8008184:	7b1a      	ldrb	r2, [r3, #12]
 8008186:	920b      	str	r2, [sp, #44]	; 0x2c
 8008188:	7ada      	ldrb	r2, [r3, #11]
 800818a:	920a      	str	r2, [sp, #40]	; 0x28
 800818c:	7a9a      	ldrb	r2, [r3, #10]
 800818e:	9209      	str	r2, [sp, #36]	; 0x24
 8008190:	7a5a      	ldrb	r2, [r3, #9]
 8008192:	9208      	str	r2, [sp, #32]
 8008194:	7a1a      	ldrb	r2, [r3, #8]
 8008196:	9207      	str	r2, [sp, #28]
 8008198:	79da      	ldrb	r2, [r3, #7]
 800819a:	9206      	str	r2, [sp, #24]
 800819c:	799a      	ldrb	r2, [r3, #6]
 800819e:	9205      	str	r2, [sp, #20]
 80081a0:	795a      	ldrb	r2, [r3, #5]
 80081a2:	9204      	str	r2, [sp, #16]
 80081a4:	791a      	ldrb	r2, [r3, #4]
 80081a6:	9203      	str	r2, [sp, #12]
 80081a8:	78da      	ldrb	r2, [r3, #3]
 80081aa:	9202      	str	r2, [sp, #8]
 80081ac:	789a      	ldrb	r2, [r3, #2]
 80081ae:	9201      	str	r2, [sp, #4]
 80081b0:	785b      	ldrb	r3, [r3, #1]
 80081b2:	002a      	movs	r2, r5
 80081b4:	9300      	str	r3, [sp, #0]
 80081b6:	4b50      	ldr	r3, [pc, #320]	; (80082f8 <SecureElementInit+0x1b4>)
 80081b8:	f006 fe96 	bl	800eee8 <UTIL_ADV_TRACE_COND_FSend>
  }
  retval = GetKeyByID(NWK_KEY, &keyItem);
 80081bc:	a911      	add	r1, sp, #68	; 0x44
 80081be:	2001      	movs	r0, #1
 80081c0:	f7ff ff78 	bl	80080b4 <GetKeyByID>
 80081c4:	1e01      	subs	r1, r0, #0
  if (retval == SECURE_ELEMENT_SUCCESS)
 80081c6:	d125      	bne.n	8008214 <SecureElementInit+0xd0>
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:  %02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X\r\n", HEX16(keyItem->KeyValue));
 80081c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80081ca:	7c1a      	ldrb	r2, [r3, #16]
 80081cc:	920f      	str	r2, [sp, #60]	; 0x3c
 80081ce:	7bda      	ldrb	r2, [r3, #15]
 80081d0:	920e      	str	r2, [sp, #56]	; 0x38
 80081d2:	7b9a      	ldrb	r2, [r3, #14]
 80081d4:	920d      	str	r2, [sp, #52]	; 0x34
 80081d6:	7b5a      	ldrb	r2, [r3, #13]
 80081d8:	920c      	str	r2, [sp, #48]	; 0x30
 80081da:	7b1a      	ldrb	r2, [r3, #12]
 80081dc:	920b      	str	r2, [sp, #44]	; 0x2c
 80081de:	7ada      	ldrb	r2, [r3, #11]
 80081e0:	920a      	str	r2, [sp, #40]	; 0x28
 80081e2:	7a9a      	ldrb	r2, [r3, #10]
 80081e4:	9209      	str	r2, [sp, #36]	; 0x24
 80081e6:	7a5a      	ldrb	r2, [r3, #9]
 80081e8:	9208      	str	r2, [sp, #32]
 80081ea:	7a1a      	ldrb	r2, [r3, #8]
 80081ec:	9207      	str	r2, [sp, #28]
 80081ee:	79da      	ldrb	r2, [r3, #7]
 80081f0:	9206      	str	r2, [sp, #24]
 80081f2:	799a      	ldrb	r2, [r3, #6]
 80081f4:	9205      	str	r2, [sp, #20]
 80081f6:	795a      	ldrb	r2, [r3, #5]
 80081f8:	9204      	str	r2, [sp, #16]
 80081fa:	791a      	ldrb	r2, [r3, #4]
 80081fc:	9203      	str	r2, [sp, #12]
 80081fe:	78da      	ldrb	r2, [r3, #3]
 8008200:	9202      	str	r2, [sp, #8]
 8008202:	789a      	ldrb	r2, [r3, #2]
 8008204:	9201      	str	r2, [sp, #4]
 8008206:	785b      	ldrb	r3, [r3, #1]
 8008208:	0002      	movs	r2, r0
 800820a:	9300      	str	r3, [sp, #0]
 800820c:	2002      	movs	r0, #2
 800820e:	4b3b      	ldr	r3, [pc, #236]	; (80082fc <SecureElementInit+0x1b8>)
 8008210:	f006 fe6a 	bl	800eee8 <UTIL_ADV_TRACE_COND_FSend>
  }
  KEY_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 8008214:	2200      	movs	r2, #0
 8008216:	4b3a      	ldr	r3, [pc, #232]	; (8008300 <SecureElementInit+0x1bc>)
 8008218:	0011      	movs	r1, r2
 800821a:	2002      	movs	r0, #2
 800821c:	f006 fe64 	bl	800eee8 <UTIL_ADV_TRACE_COND_FSend>
  retval = GetKeyByID(APP_S_KEY, &keyItem);
 8008220:	a911      	add	r1, sp, #68	; 0x44
 8008222:	2003      	movs	r0, #3
 8008224:	f7ff ff46 	bl	80080b4 <GetKeyByID>
 8008228:	1e01      	subs	r1, r0, #0
  if (retval == SECURE_ELEMENT_SUCCESS)
 800822a:	d125      	bne.n	8008278 <SecureElementInit+0x134>
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "###### AppSKey: %02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X\r\n", HEX16(keyItem->KeyValue));
 800822c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800822e:	7c1a      	ldrb	r2, [r3, #16]
 8008230:	920f      	str	r2, [sp, #60]	; 0x3c
 8008232:	7bda      	ldrb	r2, [r3, #15]
 8008234:	920e      	str	r2, [sp, #56]	; 0x38
 8008236:	7b9a      	ldrb	r2, [r3, #14]
 8008238:	920d      	str	r2, [sp, #52]	; 0x34
 800823a:	7b5a      	ldrb	r2, [r3, #13]
 800823c:	920c      	str	r2, [sp, #48]	; 0x30
 800823e:	7b1a      	ldrb	r2, [r3, #12]
 8008240:	920b      	str	r2, [sp, #44]	; 0x2c
 8008242:	7ada      	ldrb	r2, [r3, #11]
 8008244:	920a      	str	r2, [sp, #40]	; 0x28
 8008246:	7a9a      	ldrb	r2, [r3, #10]
 8008248:	9209      	str	r2, [sp, #36]	; 0x24
 800824a:	7a5a      	ldrb	r2, [r3, #9]
 800824c:	9208      	str	r2, [sp, #32]
 800824e:	7a1a      	ldrb	r2, [r3, #8]
 8008250:	9207      	str	r2, [sp, #28]
 8008252:	79da      	ldrb	r2, [r3, #7]
 8008254:	9206      	str	r2, [sp, #24]
 8008256:	799a      	ldrb	r2, [r3, #6]
 8008258:	9205      	str	r2, [sp, #20]
 800825a:	795a      	ldrb	r2, [r3, #5]
 800825c:	9204      	str	r2, [sp, #16]
 800825e:	791a      	ldrb	r2, [r3, #4]
 8008260:	9203      	str	r2, [sp, #12]
 8008262:	78da      	ldrb	r2, [r3, #3]
 8008264:	9202      	str	r2, [sp, #8]
 8008266:	789a      	ldrb	r2, [r3, #2]
 8008268:	9201      	str	r2, [sp, #4]
 800826a:	785b      	ldrb	r3, [r3, #1]
 800826c:	0002      	movs	r2, r0
 800826e:	9300      	str	r3, [sp, #0]
 8008270:	2002      	movs	r0, #2
 8008272:	4b24      	ldr	r3, [pc, #144]	; (8008304 <SecureElementInit+0x1c0>)
 8008274:	f006 fe38 	bl	800eee8 <UTIL_ADV_TRACE_COND_FSend>
  }
  retval = GetKeyByID(NWK_S_KEY, &keyItem);
 8008278:	a911      	add	r1, sp, #68	; 0x44
 800827a:	2002      	movs	r0, #2
 800827c:	f7ff ff1a 	bl	80080b4 <GetKeyByID>
 8008280:	1e01      	subs	r1, r0, #0
  if (retval == SECURE_ELEMENT_SUCCESS)
 8008282:	d125      	bne.n	80082d0 <SecureElementInit+0x18c>
  {
    KEY_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey: %02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X\r\n", HEX16(keyItem->KeyValue));
 8008284:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008286:	7c1a      	ldrb	r2, [r3, #16]
 8008288:	920f      	str	r2, [sp, #60]	; 0x3c
 800828a:	7bda      	ldrb	r2, [r3, #15]
 800828c:	920e      	str	r2, [sp, #56]	; 0x38
 800828e:	7b9a      	ldrb	r2, [r3, #14]
 8008290:	920d      	str	r2, [sp, #52]	; 0x34
 8008292:	7b5a      	ldrb	r2, [r3, #13]
 8008294:	920c      	str	r2, [sp, #48]	; 0x30
 8008296:	7b1a      	ldrb	r2, [r3, #12]
 8008298:	920b      	str	r2, [sp, #44]	; 0x2c
 800829a:	7ada      	ldrb	r2, [r3, #11]
 800829c:	920a      	str	r2, [sp, #40]	; 0x28
 800829e:	7a9a      	ldrb	r2, [r3, #10]
 80082a0:	9209      	str	r2, [sp, #36]	; 0x24
 80082a2:	7a5a      	ldrb	r2, [r3, #9]
 80082a4:	9208      	str	r2, [sp, #32]
 80082a6:	7a1a      	ldrb	r2, [r3, #8]
 80082a8:	9207      	str	r2, [sp, #28]
 80082aa:	79da      	ldrb	r2, [r3, #7]
 80082ac:	9206      	str	r2, [sp, #24]
 80082ae:	799a      	ldrb	r2, [r3, #6]
 80082b0:	9205      	str	r2, [sp, #20]
 80082b2:	795a      	ldrb	r2, [r3, #5]
 80082b4:	9204      	str	r2, [sp, #16]
 80082b6:	791a      	ldrb	r2, [r3, #4]
 80082b8:	9203      	str	r2, [sp, #12]
 80082ba:	78da      	ldrb	r2, [r3, #3]
 80082bc:	9202      	str	r2, [sp, #8]
 80082be:	789a      	ldrb	r2, [r3, #2]
 80082c0:	9201      	str	r2, [sp, #4]
 80082c2:	785b      	ldrb	r3, [r3, #1]
 80082c4:	0002      	movs	r2, r0
 80082c6:	9300      	str	r3, [sp, #0]
 80082c8:	2002      	movs	r0, #2
 80082ca:	4b0f      	ldr	r3, [pc, #60]	; (8008308 <SecureElementInit+0x1c4>)
 80082cc:	f006 fe0c 	bl	800eee8 <UTIL_ADV_TRACE_COND_FSend>
  SeNvmCtx.KeyList[itr].KeyID = SLOT_RAND_ZERO_KEY;

#endif /* LORAWAN_KMS */

  /* Assign callback */
  if (seNvmCtxChanged != 0)
 80082d0:	2c00      	cmp	r4, #0
 80082d2:	d100      	bne.n	80082d6 <SecureElementInit+0x192>
  {
    SeNvmCtxChanged = seNvmCtxChanged;
  }
  else
  {
    SeNvmCtxChanged = DummyCB;
 80082d4:	4c0d      	ldr	r4, [pc, #52]	; (800830c <SecureElementInit+0x1c8>)
 80082d6:	4d0e      	ldr	r5, [pc, #56]	; (8008310 <SecureElementInit+0x1cc>)
  }

#if !defined( SECURE_ELEMENT_PRE_PROVISIONED )
#if ( STATIC_DEVICE_EUI == 0 )
  /* Get a DevEUI from MCU unique ID */
  GetUniqueId(SeNvmCtx.DevEui);
 80082d8:	480e      	ldr	r0, [pc, #56]	; (8008314 <SecureElementInit+0x1d0>)
 80082da:	602c      	str	r4, [r5, #0]
 80082dc:	f7fa fd36 	bl	8002d4c <GetUniqueId>
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
  SeNvmCtxChanged();
 80082e0:	682b      	ldr	r3, [r5, #0]
 80082e2:	4798      	blx	r3

  return SECURE_ELEMENT_SUCCESS;
}
 80082e4:	2000      	movs	r0, #0
 80082e6:	b013      	add	sp, #76	; 0x4c
 80082e8:	bd30      	pop	{r4, r5, pc}
 80082ea:	46c0      	nop			; (mov r8, r8)
 80082ec:	0800f92a 	.word	0x0800f92a
 80082f0:	20000068 	.word	0x20000068
 80082f4:	0800f7b4 	.word	0x0800f7b4
 80082f8:	0800f7c9 	.word	0x0800f7c9
 80082fc:	0800f81c 	.word	0x0800f81c
 8008300:	0800f86f 	.word	0x0800f86f
 8008304:	0800f884 	.word	0x0800f884
 8008308:	0800f8d7 	.word	0x0800f8d7
 800830c:	080080e1 	.word	0x080080e1
 8008310:	20000384 	.word	0x20000384
 8008314:	20000058 	.word	0x20000058

08008318 <SecureElementRestoreNvmCtx>:
  return SECURE_ELEMENT_SUCCESS;
#endif /* LORAWAN_KMS == 1 */
}

SecureElementStatus_t SecureElementRestoreNvmCtx(void *seNvmCtx)
{
 8008318:	0001      	movs	r1, r0
 800831a:	b510      	push	{r4, lr}
    memcpy1((uint8_t *) &SeNvmCtx, (uint8_t *) seNvmCtx, sizeof(SeNvmCtx));
    return SECURE_ELEMENT_SUCCESS;
  }
  else
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800831c:	2002      	movs	r0, #2
  if (seNvmCtx != 0)
 800831e:	2900      	cmp	r1, #0
 8008320:	d004      	beq.n	800832c <SecureElementRestoreNvmCtx+0x14>
    memcpy1((uint8_t *) &SeNvmCtx, (uint8_t *) seNvmCtx, sizeof(SeNvmCtx));
 8008322:	4803      	ldr	r0, [pc, #12]	; (8008330 <SecureElementRestoreNvmCtx+0x18>)
 8008324:	22ba      	movs	r2, #186	; 0xba
 8008326:	f005 f8a7 	bl	800d478 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800832a:	2000      	movs	r0, #0
  }
}
 800832c:	bd10      	pop	{r4, pc}
 800832e:	46c0      	nop			; (mov r8, r8)
 8008330:	20000058 	.word	0x20000058

08008334 <SecureElementGetNvmCtx>:

void *SecureElementGetNvmCtx(size_t *seNvmCtxSize)
{
  *seNvmCtxSize = sizeof(SeNvmCtx);
 8008334:	23ba      	movs	r3, #186	; 0xba
 8008336:	6003      	str	r3, [r0, #0]
  return &SeNvmCtx;
}
 8008338:	4800      	ldr	r0, [pc, #0]	; (800833c <SecureElementGetNvmCtx+0x8>)
 800833a:	4770      	bx	lr
 800833c:	20000058 	.word	0x20000058

08008340 <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac(uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size,
                                                  KeyIdentifier_t keyID, uint32_t *cmac)
{
 8008340:	b513      	push	{r0, r1, r4, lr}
 8008342:	0004      	movs	r4, r0
  if (keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS)
  {
    /* Never accept multicast key identifier for cmac computation */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8008344:	2003      	movs	r0, #3
  if (keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS)
 8008346:	2b7e      	cmp	r3, #126	; 0x7e
 8008348:	d804      	bhi.n	8008354 <SecureElementComputeAesCmac+0x14>
  }

  return ComputeCmac(micBxBuffer, buffer, size, keyID, cmac);
 800834a:	9804      	ldr	r0, [sp, #16]
 800834c:	9000      	str	r0, [sp, #0]
 800834e:	0020      	movs	r0, r4
 8008350:	f7ff fec7 	bl	80080e2 <ComputeCmac>
}
 8008354:	bd16      	pop	{r1, r2, r4, pc}

08008356 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac(uint8_t *buffer, uint16_t size, uint32_t expectedCmac,
                                                 KeyIdentifier_t keyID)
{
 8008356:	b530      	push	{r4, r5, lr}
 8008358:	0004      	movs	r4, r0
 800835a:	0015      	movs	r5, r2
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
  if (buffer == NULL)
  {
    return SECURE_ELEMENT_ERROR_NPE;
 800835c:	2002      	movs	r0, #2
{
 800835e:	b085      	sub	sp, #20
  if (buffer == NULL)
 8008360:	2c00      	cmp	r4, #0
 8008362:	d00e      	beq.n	8008382 <SecureElementVerifyAesCmac+0x2c>
  }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  uint32_t compCmac = 0;
 8008364:	2000      	movs	r0, #0

  retval = ComputeCmac(NULL, buffer, size, keyID, &compCmac);
 8008366:	aa03      	add	r2, sp, #12
 8008368:	9200      	str	r2, [sp, #0]
 800836a:	000a      	movs	r2, r1
 800836c:	0021      	movs	r1, r4
  uint32_t compCmac = 0;
 800836e:	9003      	str	r0, [sp, #12]
  retval = ComputeCmac(NULL, buffer, size, keyID, &compCmac);
 8008370:	f7ff feb7 	bl	80080e2 <ComputeCmac>
  if (retval != SECURE_ELEMENT_SUCCESS)
 8008374:	2800      	cmp	r0, #0
 8008376:	d104      	bne.n	8008382 <SecureElementVerifyAesCmac+0x2c>
  {
    return retval;
  }

  if (expectedCmac != compCmac)
 8008378:	9b03      	ldr	r3, [sp, #12]
 800837a:	1b58      	subs	r0, r3, r5
 800837c:	1e42      	subs	r2, r0, #1
 800837e:	4190      	sbcs	r0, r2
    return SECURE_ELEMENT_ERROR_NPE;
 8008380:	b2c0      	uxtb	r0, r0
  }

#endif /* LORAWAN_KMS */

  return retval;
}
 8008382:	b005      	add	sp, #20
 8008384:	bd30      	pop	{r4, r5, pc}

08008386 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt(uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID,
                                              uint8_t *encBuffer)
{
 8008386:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008388:	b0c1      	sub	sp, #260	; 0x104
 800838a:	000e      	movs	r6, r1
 800838c:	0015      	movs	r5, r2
 800838e:	001f      	movs	r7, r3
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
  if (buffer == NULL || encBuffer == NULL)
  {
    return SECURE_ELEMENT_ERROR_NPE;
 8008390:	2402      	movs	r4, #2
{
 8008392:	9001      	str	r0, [sp, #4]
  if (buffer == NULL || encBuffer == NULL)
 8008394:	2800      	cmp	r0, #0
 8008396:	d01b      	beq.n	80083d0 <SecureElementAesEncrypt+0x4a>
 8008398:	2f00      	cmp	r7, #0
 800839a:	d019      	beq.n	80083d0 <SecureElementAesEncrypt+0x4a>
  }

  /* Check if the size is divisible by 16 */
  if ((size % 16) != 0)
 800839c:	230f      	movs	r3, #15
  {
    return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800839e:	3403      	adds	r4, #3
  if ((size % 16) != 0)
 80083a0:	4019      	ands	r1, r3
 80083a2:	421e      	tst	r6, r3
 80083a4:	d114      	bne.n	80083d0 <SecureElementAesEncrypt+0x4a>
  }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  lorawan_aes_context aesContext;
  memset1(aesContext.ksch, '\0', 240);
 80083a6:	22f0      	movs	r2, #240	; 0xf0
 80083a8:	a803      	add	r0, sp, #12
 80083aa:	f005 f87b 	bl	800d4a4 <memset1>

  Key_t *pItem;
  retval = GetKeyByID(keyID, &pItem);
 80083ae:	0028      	movs	r0, r5
 80083b0:	a902      	add	r1, sp, #8
 80083b2:	f7ff fe7f 	bl	80080b4 <GetKeyByID>
 80083b6:	1e04      	subs	r4, r0, #0

  if (retval == SECURE_ELEMENT_SUCCESS)
 80083b8:	d10a      	bne.n	80083d0 <SecureElementAesEncrypt+0x4a>
  {
    lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 80083ba:	9b02      	ldr	r3, [sp, #8]
 80083bc:	2110      	movs	r1, #16
 80083be:	1c58      	adds	r0, r3, #1
 80083c0:	aa03      	add	r2, sp, #12
 80083c2:	f7ff fcab 	bl	8007d1c <lorawan_aes_set_key>

    uint8_t block = 0;

    while (size != 0)
 80083c6:	0035      	movs	r5, r6
 80083c8:	1b70      	subs	r0, r6, r5
 80083ca:	b2c0      	uxtb	r0, r0
 80083cc:	2d00      	cmp	r5, #0
 80083ce:	d102      	bne.n	80083d6 <SecureElementAesEncrypt+0x50>
    retval = SECURE_ELEMENT_ERROR;
  }
#endif /* LORAWAN_KMS */

  return retval;
}
 80083d0:	0020      	movs	r0, r4
 80083d2:	b041      	add	sp, #260	; 0x104
 80083d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 80083d6:	9b01      	ldr	r3, [sp, #4]
 80083d8:	1839      	adds	r1, r7, r0
 80083da:	aa03      	add	r2, sp, #12
 80083dc:	1818      	adds	r0, r3, r0
      size = size - 16;
 80083de:	3d10      	subs	r5, #16
      lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 80083e0:	f7ff fd22 	bl	8007e28 <lorawan_aes_encrypt>
      size = size - 16;
 80083e4:	b2ad      	uxth	r5, r5
 80083e6:	e7ef      	b.n	80083c8 <SecureElementAesEncrypt+0x42>

080083e8 <SecureElementSetKey.part.0>:
SecureElementStatus_t SecureElementSetKey(KeyIdentifier_t keyID, uint8_t *key)
 80083e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80083ea:	4a19      	ldr	r2, [pc, #100]	; (8008450 <SecureElementSetKey.part.0+0x68>)
 80083ec:	000c      	movs	r4, r1
 80083ee:	2300      	movs	r3, #0
 80083f0:	0015      	movs	r5, r2
    if (SeNvmCtx.KeyList[i].KeyID == keyID)
 80083f2:	7c11      	ldrb	r1, [r2, #16]
 80083f4:	3301      	adds	r3, #1
 80083f6:	4281      	cmp	r1, r0
 80083f8:	d125      	bne.n	8008446 <SecureElementSetKey.part.0+0x5e>
      if (keyID == MC_KEY_0)
 80083fa:	2211      	movs	r2, #17
 80083fc:	4353      	muls	r3, r2
 80083fe:	4e15      	ldr	r6, [pc, #84]	; (8008454 <SecureElementSetKey.part.0+0x6c>)
 8008400:	18ed      	adds	r5, r5, r3
 8008402:	2880      	cmp	r0, #128	; 0x80
 8008404:	d116      	bne.n	8008434 <SecureElementSetKey.part.0+0x4c>
        uint8_t decryptedKey[16] = { 0 };
 8008406:	2100      	movs	r1, #0
 8008408:	3a05      	subs	r2, #5
 800840a:	a801      	add	r0, sp, #4
 800840c:	9100      	str	r1, [sp, #0]
 800840e:	f006 fe48 	bl	800f0a2 <memset>
        retval = SecureElementAesEncrypt(key, 16, MC_KE_KEY, decryptedKey);
 8008412:	466b      	mov	r3, sp
 8008414:	227f      	movs	r2, #127	; 0x7f
 8008416:	2110      	movs	r1, #16
 8008418:	0020      	movs	r0, r4
 800841a:	f7ff ffb4 	bl	8008386 <SecureElementAesEncrypt>
        memcpy1(SeNvmCtx.KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE);
 800841e:	2210      	movs	r2, #16
        retval = SecureElementAesEncrypt(key, 16, MC_KE_KEY, decryptedKey);
 8008420:	0004      	movs	r4, r0
        memcpy1(SeNvmCtx.KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE);
 8008422:	4669      	mov	r1, sp
 8008424:	0028      	movs	r0, r5
 8008426:	f005 f827 	bl	800d478 <memcpy1>
        SeNvmCtxChanged();
 800842a:	6833      	ldr	r3, [r6, #0]
 800842c:	4798      	blx	r3
}
 800842e:	0020      	movs	r0, r4
 8008430:	b004      	add	sp, #16
 8008432:	bd70      	pop	{r4, r5, r6, pc}
        memcpy1(SeNvmCtx.KeyList[i].KeyValue, key, SE_KEY_SIZE);
 8008434:	0021      	movs	r1, r4
 8008436:	2210      	movs	r2, #16
 8008438:	0028      	movs	r0, r5
 800843a:	f005 f81d 	bl	800d478 <memcpy1>
        SeNvmCtxChanged();
 800843e:	6833      	ldr	r3, [r6, #0]
 8008440:	4798      	blx	r3
        return SECURE_ELEMENT_SUCCESS;
 8008442:	2400      	movs	r4, #0
 8008444:	e7f3      	b.n	800842e <SecureElementSetKey.part.0+0x46>
  for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 8008446:	3211      	adds	r2, #17
 8008448:	2b0a      	cmp	r3, #10
 800844a:	d1d2      	bne.n	80083f2 <SecureElementSetKey.part.0+0xa>
  return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800844c:	2403      	movs	r4, #3
 800844e:	e7ee      	b.n	800842e <SecureElementSetKey.part.0+0x46>
 8008450:	20000058 	.word	0x20000058
 8008454:	20000384 	.word	0x20000384

08008458 <SecureElementSetKey>:
{
 8008458:	0003      	movs	r3, r0
 800845a:	b510      	push	{r4, lr}
    return SECURE_ELEMENT_ERROR_NPE;
 800845c:	2002      	movs	r0, #2
  if (key == NULL)
 800845e:	2900      	cmp	r1, #0
 8008460:	d002      	beq.n	8008468 <SecureElementSetKey+0x10>
 8008462:	0018      	movs	r0, r3
 8008464:	f7ff ffc0 	bl	80083e8 <SecureElementSetKey.part.0>
}
 8008468:	bd10      	pop	{r4, pc}

0800846a <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey(Version_t version, uint8_t *input, KeyIdentifier_t rootKeyID,
                                                     KeyIdentifier_t targetKeyID)
{
 800846a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800846c:	000d      	movs	r5, r1
 800846e:	0016      	movs	r6, r2
 8008470:	001c      	movs	r4, r3
  SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
  if (input == NULL)
  {
    return SECURE_ELEMENT_ERROR_NPE;
 8008472:	2002      	movs	r0, #2
  if (input == NULL)
 8008474:	2900      	cmp	r1, #0
 8008476:	d016      	beq.n	80084a6 <SecureElementDeriveAndStoreKey+0x3c>
  }

  /* In case of MC_KE_KEY, only McRootKey can be used as root key */
  if (targetKeyID == MC_KE_KEY)
 8008478:	2b7f      	cmp	r3, #127	; 0x7f
 800847a:	d102      	bne.n	8008482 <SecureElementDeriveAndStoreKey+0x18>
  {
    if (rootKeyID != MC_ROOT_KEY)
    {
      return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800847c:	3001      	adds	r0, #1
    if (rootKeyID != MC_ROOT_KEY)
 800847e:	2a04      	cmp	r2, #4
 8008480:	d111      	bne.n	80084a6 <SecureElementDeriveAndStoreKey+0x3c>
    }
  }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  uint8_t key[16] = { 0 };
 8008482:	2100      	movs	r1, #0
 8008484:	220c      	movs	r2, #12
 8008486:	a801      	add	r0, sp, #4
 8008488:	9100      	str	r1, [sp, #0]
 800848a:	f006 fe0a 	bl	800f0a2 <memset>
  /* Derive key */
  retval = SecureElementAesEncrypt(input, 16, rootKeyID, key);
 800848e:	466b      	mov	r3, sp
 8008490:	0032      	movs	r2, r6
 8008492:	2110      	movs	r1, #16
 8008494:	0028      	movs	r0, r5
 8008496:	f7ff ff76 	bl	8008386 <SecureElementAesEncrypt>
  if (retval != SECURE_ELEMENT_SUCCESS)
 800849a:	2800      	cmp	r0, #0
 800849c:	d103      	bne.n	80084a6 <SecureElementDeriveAndStoreKey+0x3c>
  if (key == NULL)
 800849e:	4669      	mov	r1, sp
 80084a0:	0020      	movs	r0, r4
 80084a2:	f7ff ffa1 	bl	80083e8 <SecureElementSetKey.part.0>
    retval = SECURE_ELEMENT_ERROR;
  }
#endif /* LORAWAN_KMS */

  return retval;
}
 80084a6:	b004      	add	sp, #16
 80084a8:	bd70      	pop	{r4, r5, r6, pc}
	...

080084ac <SecureElementRandomNumber>:

  return SECURE_ELEMENT_SUCCESS;
}

SecureElementStatus_t SecureElementRandomNumber(uint32_t *randomNum)
{
 80084ac:	b513      	push	{r0, r1, r4, lr}
 80084ae:	0004      	movs	r4, r0
  if (randomNum == NULL)
  {
    return SECURE_ELEMENT_ERROR_NPE;
 80084b0:	2002      	movs	r0, #2
  if (randomNum == NULL)
 80084b2:	2c00      	cmp	r4, #0
 80084b4:	d005      	beq.n	80084c2 <SecureElementRandomNumber+0x16>
  }
  *randomNum = Radio.Random( );
 80084b6:	4b03      	ldr	r3, [pc, #12]	; (80084c4 <SecureElementRandomNumber+0x18>)
 80084b8:	691b      	ldr	r3, [r3, #16]
 80084ba:	9301      	str	r3, [sp, #4]
 80084bc:	4798      	blx	r3
 80084be:	6020      	str	r0, [r4, #0]
  return SECURE_ELEMENT_SUCCESS;
 80084c0:	2000      	movs	r0, #0
}
 80084c2:	bd16      	pop	{r1, r2, r4, pc}
 80084c4:	0800fd8c 	.word	0x0800fd8c

080084c8 <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui(uint8_t *devEui)
{
 80084c8:	0001      	movs	r1, r0
 80084ca:	b510      	push	{r4, lr}
  if (devEui == NULL)
  {
    return SECURE_ELEMENT_ERROR_NPE;
 80084cc:	2002      	movs	r0, #2
  if (devEui == NULL)
 80084ce:	2900      	cmp	r1, #0
 80084d0:	d007      	beq.n	80084e2 <SecureElementSetDevEui+0x1a>
  }
  memcpy1(SeNvmCtx.DevEui, devEui, SE_EUI_SIZE);
 80084d2:	4804      	ldr	r0, [pc, #16]	; (80084e4 <SecureElementSetDevEui+0x1c>)
 80084d4:	2208      	movs	r2, #8
 80084d6:	f004 ffcf 	bl	800d478 <memcpy1>
  SeNvmCtxChanged();
 80084da:	4b03      	ldr	r3, [pc, #12]	; (80084e8 <SecureElementSetDevEui+0x20>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4798      	blx	r3
  return SECURE_ELEMENT_SUCCESS;
 80084e0:	2000      	movs	r0, #0
}
 80084e2:	bd10      	pop	{r4, pc}
 80084e4:	20000058 	.word	0x20000058
 80084e8:	20000384 	.word	0x20000384

080084ec <SecureElementGetDevEui>:

uint8_t *SecureElementGetDevEui(void)
{
  return SeNvmCtx.DevEui;
}
 80084ec:	4800      	ldr	r0, [pc, #0]	; (80084f0 <SecureElementGetDevEui+0x4>)
 80084ee:	4770      	bx	lr
 80084f0:	20000058 	.word	0x20000058

080084f4 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui(uint8_t *joinEui)
{
 80084f4:	0001      	movs	r1, r0
 80084f6:	b510      	push	{r4, lr}
  if (joinEui == NULL)
  {
    return SECURE_ELEMENT_ERROR_NPE;
 80084f8:	2002      	movs	r0, #2
  if (joinEui == NULL)
 80084fa:	2900      	cmp	r1, #0
 80084fc:	d007      	beq.n	800850e <SecureElementSetJoinEui+0x1a>
  }
  memcpy1(SeNvmCtx.JoinEui, joinEui, SE_EUI_SIZE);
 80084fe:	4804      	ldr	r0, [pc, #16]	; (8008510 <SecureElementSetJoinEui+0x1c>)
 8008500:	2208      	movs	r2, #8
 8008502:	f004 ffb9 	bl	800d478 <memcpy1>
  SeNvmCtxChanged();
 8008506:	4b03      	ldr	r3, [pc, #12]	; (8008514 <SecureElementSetJoinEui+0x20>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4798      	blx	r3
  return SECURE_ELEMENT_SUCCESS;
 800850c:	2000      	movs	r0, #0
}
 800850e:	bd10      	pop	{r4, pc}
 8008510:	20000060 	.word	0x20000060
 8008514:	20000384 	.word	0x20000384

08008518 <SecureElementGetJoinEui>:

uint8_t *SecureElementGetJoinEui(void)
{
  return SeNvmCtx.JoinEui;
}
 8008518:	4800      	ldr	r0, [pc, #0]	; (800851c <SecureElementGetJoinEui+0x4>)
 800851a:	4770      	bx	lr
 800851c:	20000060 	.word	0x20000060

08008520 <MlmeIndication>:
  }
}

static void MlmeIndication(MlmeIndication_t *mlmeIndication)
{
  RxParams.IsMcpsIndication = 0;
 8008520:	2200      	movs	r2, #0
 8008522:	4b02      	ldr	r3, [pc, #8]	; (800852c <MlmeIndication+0xc>)
 8008524:	701a      	strb	r2, [r3, #0]
  RxParams.Status = mlmeIndication->Status;
 8008526:	7842      	ldrb	r2, [r0, #1]
 8008528:	705a      	strb	r2, [r3, #1]
    }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    default:
      break;
  }
}
 800852a:	4770      	bx	lr
 800852c:	2000013c 	.word	0x2000013c

08008530 <LmHandlerDeviceTimeReq>:
{
 8008530:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  mlmeReq.Type = MLME_DEVICE_TIME;
 8008532:	230a      	movs	r3, #10
 8008534:	a801      	add	r0, sp, #4
 8008536:	7003      	strb	r3, [r0, #0]
  status = LoRaMacMlmeRequest(&mlmeReq);
 8008538:	f002 fe68 	bl	800b20c <LoRaMacMlmeRequest>
  if (status == LORAMAC_STATUS_OK)
 800853c:	1e43      	subs	r3, r0, #1
 800853e:	4198      	sbcs	r0, r3
 8008540:	4240      	negs	r0, r0
}
 8008542:	b007      	add	sp, #28
 8008544:	bd00      	pop	{pc}
	...

08008548 <McpsConfirm>:
  TxParams.IsMcpsConfirm = 1;
 8008548:	2301      	movs	r3, #1
{
 800854a:	b570      	push	{r4, r5, r6, lr}
 800854c:	0004      	movs	r4, r0
  TxParams.IsMcpsConfirm = 1;
 800854e:	4810      	ldr	r0, [pc, #64]	; (8008590 <McpsConfirm+0x48>)
 8008550:	7003      	strb	r3, [r0, #0]
  TxParams.Status = mcpsConfirm->Status;
 8008552:	7863      	ldrb	r3, [r4, #1]
 8008554:	7043      	strb	r3, [r0, #1]
  TxParams.Datarate = mcpsConfirm->Datarate;
 8008556:	78a3      	ldrb	r3, [r4, #2]
 8008558:	7103      	strb	r3, [r0, #4]
  TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800855a:	68e3      	ldr	r3, [r4, #12]
 800855c:	6083      	str	r3, [r0, #8]
  TxParams.TxPower = mcpsConfirm->TxPower;
 800855e:	78e3      	ldrb	r3, [r4, #3]
 8008560:	7503      	strb	r3, [r0, #20]
  TxParams.Channel = mcpsConfirm->Channel;
 8008562:	6923      	ldr	r3, [r4, #16]
 8008564:	7543      	strb	r3, [r0, #21]
  TxParams.AckReceived = mcpsConfirm->AckReceived;
 8008566:	7923      	ldrb	r3, [r4, #4]
 8008568:	70c3      	strb	r3, [r0, #3]
  LmHandlerCallbacks.OnTxData(&TxParams);
 800856a:	4b0a      	ldr	r3, [pc, #40]	; (8008594 <McpsConfirm+0x4c>)
 800856c:	691b      	ldr	r3, [r3, #16]
 800856e:	4798      	blx	r3
  }
}

static void LmHandlerPackagesNotify(PackageNotifyTypes_t notifyType, void *params)
{
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 8008570:	4d09      	ldr	r5, [pc, #36]	; (8008598 <McpsConfirm+0x50>)
 8008572:	002e      	movs	r6, r5
 8008574:	3614      	adds	r6, #20
  {
    if (LmHandlerPackages[i] != NULL)
 8008576:	682b      	ldr	r3, [r5, #0]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d004      	beq.n	8008586 <McpsConfirm+0x3e>
    {
      switch (notifyType)
      {
        case PACKAGE_MCPS_CONFIRM:
        {
          if (LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL)
 800857c:	695b      	ldr	r3, [r3, #20]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d001      	beq.n	8008586 <McpsConfirm+0x3e>
          {
            LmHandlerPackages[i]->OnMcpsConfirmProcess(params);
 8008582:	0020      	movs	r0, r4
 8008584:	4798      	blx	r3
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 8008586:	3504      	adds	r5, #4
 8008588:	42b5      	cmp	r5, r6
 800858a:	d1f4      	bne.n	8008576 <McpsConfirm+0x2e>
}
 800858c:	bd70      	pop	{r4, r5, r6, pc}
 800858e:	46c0      	nop			; (mov r8, r8)
 8008590:	200004d8 	.word	0x200004d8
 8008594:	2000047c 	.word	0x2000047c
 8008598:	2000049c 	.word	0x2000049c

0800859c <LmHandlerConfigure>:
{
 800859c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (0U != ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800859e:	2701      	movs	r7, #1
  UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 80085a0:	4e4b      	ldr	r6, [pc, #300]	; (80086d0 <LmHandlerConfigure+0x134>)
{
 80085a2:	0001      	movs	r1, r0
  UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 80085a4:	2206      	movs	r2, #6
 80085a6:	0030      	movs	r0, r6
{
 80085a8:	b097      	sub	sp, #92	; 0x5c
  UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 80085aa:	f005 ffcb 	bl	800e544 <UTIL_MEM_cpy_8>
  loraInfo = LoraInfo_GetPtr();
 80085ae:	f7ff f979 	bl	80078a4 <LoraInfo_GetPtr>
  if (0U != ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 80085b2:	003b      	movs	r3, r7
 80085b4:	7832      	ldrb	r2, [r6, #0]
 80085b6:	6841      	ldr	r1, [r0, #4]
 80085b8:	4093      	lsls	r3, r2
 80085ba:	0008      	movs	r0, r1
 80085bc:	4018      	ands	r0, r3
 80085be:	4219      	tst	r1, r3
 80085c0:	d009      	beq.n	80085d6 <LmHandlerConfigure+0x3a>
    if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 80085c2:	4944      	ldr	r1, [pc, #272]	; (80086d4 <LmHandlerConfigure+0x138>)
 80085c4:	4844      	ldr	r0, [pc, #272]	; (80086d8 <LmHandlerConfigure+0x13c>)
 80085c6:	f002 f8c7 	bl	800a758 <LoRaMacInitialization>
 80085ca:	9009      	str	r0, [sp, #36]	; 0x24
 80085cc:	2800      	cmp	r0, #0
 80085ce:	d008      	beq.n	80085e2 <LmHandlerConfigure+0x46>
      return LORAMAC_HANDLER_ERROR;
 80085d0:	2001      	movs	r0, #1
 80085d2:	4240      	negs	r0, r0
 80085d4:	e061      	b.n	800869a <LmHandlerConfigure+0xfe>
    MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 80085d6:	003a      	movs	r2, r7
 80085d8:	0001      	movs	r1, r0
 80085da:	4b40      	ldr	r3, [pc, #256]	; (80086dc <LmHandlerConfigure+0x140>)
 80085dc:	f006 fc84 	bl	800eee8 <UTIL_ADV_TRACE_COND_FSend>
    while (1) {}  /* error: Region is not defined in the MW */
 80085e0:	e7fe      	b.n	80085e0 <LmHandlerConfigure+0x44>
  if (NvmCtxMgmtRestore() == NVMCTXMGMT_STATUS_SUCCESS)
 80085e2:	f000 faec 	bl	8008bbe <NvmCtxMgmtRestore>
 80085e6:	ac0d      	add	r4, sp, #52	; 0x34
 80085e8:	4b3d      	ldr	r3, [pc, #244]	; (80086e0 <LmHandlerConfigure+0x144>)
 80085ea:	4d3e      	ldr	r5, [pc, #248]	; (80086e4 <LmHandlerConfigure+0x148>)
 80085ec:	2800      	cmp	r0, #0
 80085ee:	d156      	bne.n	800869e <LmHandlerConfigure+0x102>
    CtxRestoreDone = true;
 80085f0:	701f      	strb	r7, [r3, #0]
  MW_LOG(TS_OFF, VLEVEL_M, "DevEui:  %02X%02X%02X%02X%02X%02X%02X%02X\r\n",
 80085f2:	2200      	movs	r2, #0
 80085f4:	79eb      	ldrb	r3, [r5, #7]
 80085f6:	0011      	movs	r1, r2
 80085f8:	9307      	str	r3, [sp, #28]
 80085fa:	79ab      	ldrb	r3, [r5, #6]
 80085fc:	2002      	movs	r0, #2
 80085fe:	9306      	str	r3, [sp, #24]
 8008600:	796b      	ldrb	r3, [r5, #5]
  mibReq.Type = MIB_PUBLIC_NETWORK;
 8008602:	270f      	movs	r7, #15
  MW_LOG(TS_OFF, VLEVEL_M, "DevEui:  %02X%02X%02X%02X%02X%02X%02X%02X\r\n",
 8008604:	9305      	str	r3, [sp, #20]
 8008606:	792b      	ldrb	r3, [r5, #4]
 8008608:	9304      	str	r3, [sp, #16]
 800860a:	78eb      	ldrb	r3, [r5, #3]
 800860c:	9303      	str	r3, [sp, #12]
 800860e:	78ab      	ldrb	r3, [r5, #2]
 8008610:	9302      	str	r3, [sp, #8]
 8008612:	786b      	ldrb	r3, [r5, #1]
 8008614:	9301      	str	r3, [sp, #4]
 8008616:	782b      	ldrb	r3, [r5, #0]
 8008618:	9300      	str	r3, [sp, #0]
 800861a:	4b33      	ldr	r3, [pc, #204]	; (80086e8 <LmHandlerConfigure+0x14c>)
 800861c:	f006 fc64 	bl	800eee8 <UTIL_ADV_TRACE_COND_FSend>
  MW_LOG(TS_OFF, VLEVEL_M, "AppEui:  %02X%02X%02X%02X%02X%02X%02X%02X\r\n",
 8008620:	2200      	movs	r2, #0
 8008622:	7beb      	ldrb	r3, [r5, #15]
 8008624:	0011      	movs	r1, r2
 8008626:	9307      	str	r3, [sp, #28]
 8008628:	7bab      	ldrb	r3, [r5, #14]
 800862a:	2002      	movs	r0, #2
 800862c:	9306      	str	r3, [sp, #24]
 800862e:	7b6b      	ldrb	r3, [r5, #13]
 8008630:	9305      	str	r3, [sp, #20]
 8008632:	7b2b      	ldrb	r3, [r5, #12]
 8008634:	9304      	str	r3, [sp, #16]
 8008636:	7aeb      	ldrb	r3, [r5, #11]
 8008638:	9303      	str	r3, [sp, #12]
 800863a:	7aab      	ldrb	r3, [r5, #10]
 800863c:	9302      	str	r3, [sp, #8]
 800863e:	7a6b      	ldrb	r3, [r5, #9]
 8008640:	9301      	str	r3, [sp, #4]
 8008642:	7a2b      	ldrb	r3, [r5, #8]
  mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 8008644:	2500      	movs	r5, #0
  MW_LOG(TS_OFF, VLEVEL_M, "AppEui:  %02X%02X%02X%02X%02X%02X%02X%02X\r\n",
 8008646:	9300      	str	r3, [sp, #0]
 8008648:	4b28      	ldr	r3, [pc, #160]	; (80086ec <LmHandlerConfigure+0x150>)
 800864a:	f006 fc4d 	bl	800eee8 <UTIL_ADV_TRACE_COND_FSend>
  mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800864e:	2301      	movs	r3, #1
  LoRaMacMibSetRequestConfirm(&mibReq);
 8008650:	0020      	movs	r0, r4
  mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 8008652:	7123      	strb	r3, [r4, #4]
  mibReq.Type = MIB_PUBLIC_NETWORK;
 8008654:	7027      	strb	r7, [r4, #0]
  LoRaMacMibSetRequestConfirm(&mibReq);
 8008656:	f002 fbbb 	bl	800add0 <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_REPEATER_SUPPORT;
 800865a:	2310      	movs	r3, #16
  LoRaMacMibSetRequestConfirm(&mibReq);
 800865c:	0020      	movs	r0, r4
  mibReq.Type = MIB_REPEATER_SUPPORT;
 800865e:	7023      	strb	r3, [r4, #0]
  mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 8008660:	7125      	strb	r5, [r4, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 8008662:	f002 fbb5 	bl	800add0 <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_ADR;
 8008666:	2304      	movs	r3, #4
 8008668:	7023      	strb	r3, [r4, #0]
  mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800866a:	78b3      	ldrb	r3, [r6, #2]
  LoRaMacMibSetRequestConfirm(&mibReq);
 800866c:	0020      	movs	r0, r4
  mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800866e:	7123      	strb	r3, [r4, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 8008670:	f002 fbae 	bl	800add0 <LoRaMacMibSetRequestConfirm>
  mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 8008674:	2322      	movs	r3, #34	; 0x22
  LoRaMacMibSetRequestConfirm(&mibReq);
 8008676:	0020      	movs	r0, r4
  mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 8008678:	7023      	strb	r3, [r4, #0]
  mibReq.Param.SystemMaxRxError = 20;
 800867a:	3b0e      	subs	r3, #14
 800867c:	6063      	str	r3, [r4, #4]
  LoRaMacMibSetRequestConfirm(&mibReq);
 800867e:	f002 fba7 	bl	800add0 <LoRaMacMibSetRequestConfirm>
  getPhy.Attribute = PHY_DUTY_CYCLE;
 8008682:	a90b      	add	r1, sp, #44	; 0x2c
  phyParam = RegionGetPhyParam(LmHandlerParams.ActiveRegion, &getPhy);
 8008684:	7830      	ldrb	r0, [r6, #0]
  getPhy.Attribute = PHY_DUTY_CYCLE;
 8008686:	700f      	strb	r7, [r1, #0]
  phyParam = RegionGetPhyParam(LmHandlerParams.ActiveRegion, &getPhy);
 8008688:	f003 fe9d 	bl	800c3c6 <RegionGetPhyParam>
  LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800868c:	1e43      	subs	r3, r0, #1
 800868e:	4198      	sbcs	r0, r3
 8008690:	b2c0      	uxtb	r0, r0
 8008692:	7130      	strb	r0, [r6, #4]
  LoRaMacTestSetDutyCycleOn(LmHandlerParams.DutyCycleEnabled);
 8008694:	f003 f874 	bl	800b780 <LoRaMacTestSetDutyCycleOn>
  return LORAMAC_HANDLER_SUCCESS;
 8008698:	0028      	movs	r0, r5
}
 800869a:	b017      	add	sp, #92	; 0x5c
 800869c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    CtxRestoreDone = false;
 800869e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    LoRaMacMibGetRequestConfirm(&mibReq);
 80086a0:	0020      	movs	r0, r4
    CtxRestoreDone = false;
 80086a2:	701a      	strb	r2, [r3, #0]
    mibReq.Type = MIB_DEV_EUI;
 80086a4:	2302      	movs	r3, #2
 80086a6:	7023      	strb	r3, [r4, #0]
    LoRaMacMibGetRequestConfirm(&mibReq);
 80086a8:	f002 fa94 	bl	800abd4 <LoRaMacMibGetRequestConfirm>
    memcpy1(CommissioningParams.DevEui, mibReq.Param.DevEui, 8);
 80086ac:	6861      	ldr	r1, [r4, #4]
 80086ae:	2208      	movs	r2, #8
 80086b0:	0028      	movs	r0, r5
 80086b2:	f004 fee1 	bl	800d478 <memcpy1>
    mibReq.Type = MIB_JOIN_EUI;
 80086b6:	2303      	movs	r3, #3
    LoRaMacMibGetRequestConfirm(&mibReq);
 80086b8:	0020      	movs	r0, r4
    mibReq.Type = MIB_JOIN_EUI;
 80086ba:	7023      	strb	r3, [r4, #0]
    LoRaMacMibGetRequestConfirm(&mibReq);
 80086bc:	f002 fa8a 	bl	800abd4 <LoRaMacMibGetRequestConfirm>
    memcpy1(CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8);
 80086c0:	0028      	movs	r0, r5
 80086c2:	2208      	movs	r2, #8
 80086c4:	6861      	ldr	r1, [r4, #4]
 80086c6:	3008      	adds	r0, #8
 80086c8:	f004 fed6 	bl	800d478 <memcpy1>
 80086cc:	e791      	b.n	80085f2 <LmHandlerConfigure+0x56>
 80086ce:	46c0      	nop			; (mov r8, r8)
 80086d0:	200004b0 	.word	0x200004b0
 80086d4:	200004b8 	.word	0x200004b8
 80086d8:	200004c8 	.word	0x200004c8
 80086dc:	0800f9d4 	.word	0x0800f9d4
 80086e0:	2000047a 	.word	0x2000047a
 80086e4:	20000114 	.word	0x20000114
 80086e8:	0800fa1d 	.word	0x0800fa1d
 80086ec:	0800fa49 	.word	0x0800fa49

080086f0 <LmHandlerProcess>:
{
 80086f0:	b570      	push	{r4, r5, r6, lr}
  LoRaMacProcess();
 80086f2:	f001 fb7b 	bl	8009dec <LoRaMacProcess>
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 80086f6:	4c0c      	ldr	r4, [pc, #48]	; (8008728 <LmHandlerProcess+0x38>)
 80086f8:	0025      	movs	r5, r4
 80086fa:	3514      	adds	r5, #20
    if ((LmHandlerPackages[i] != NULL) &&
 80086fc:	6823      	ldr	r3, [r4, #0]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d00b      	beq.n	800871a <LmHandlerProcess+0x2a>
 8008702:	691a      	ldr	r2, [r3, #16]
 8008704:	2a00      	cmp	r2, #0
 8008706:	d008      	beq.n	800871a <LmHandlerProcess+0x2a>
  if ((id < PKG_MAX_NUMBER) && (LmHandlerPackages[id]->IsInitialized != NULL))
 8008708:	689b      	ldr	r3, [r3, #8]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d005      	beq.n	800871a <LmHandlerProcess+0x2a>
    return LmHandlerPackages[id]->IsInitialized();
 800870e:	4798      	blx	r3
        (LmHandlerPackages[i]->Process != NULL) &&
 8008710:	2800      	cmp	r0, #0
 8008712:	d002      	beq.n	800871a <LmHandlerProcess+0x2a>
      LmHandlerPackages[i]->Process();
 8008714:	6823      	ldr	r3, [r4, #0]
 8008716:	691b      	ldr	r3, [r3, #16]
 8008718:	4798      	blx	r3
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 800871a:	3404      	adds	r4, #4
 800871c:	42a5      	cmp	r5, r4
 800871e:	d1ed      	bne.n	80086fc <LmHandlerProcess+0xc>
  NvmCtxMgmtStore();
 8008720:	f000 fa4b 	bl	8008bba <NvmCtxMgmtStore>
}
 8008724:	bd70      	pop	{r4, r5, r6, pc}
 8008726:	46c0      	nop			; (mov r8, r8)
 8008728:	2000049c 	.word	0x2000049c

0800872c <LmHandlerJoinStatus>:
{
 800872c:	b500      	push	{lr}
 800872e:	b08b      	sub	sp, #44	; 0x2c
  mibReq.Type = MIB_NETWORK_ACTIVATION;
 8008730:	2301      	movs	r3, #1
 8008732:	466a      	mov	r2, sp
  status = LoRaMacMibGetRequestConfirm(&mibReq);
 8008734:	a801      	add	r0, sp, #4
  mibReq.Type = MIB_NETWORK_ACTIVATION;
 8008736:	7113      	strb	r3, [r2, #4]
  status = LoRaMacMibGetRequestConfirm(&mibReq);
 8008738:	f002 fa4c 	bl	800abd4 <LoRaMacMibGetRequestConfirm>
    return LORAMAC_HANDLER_RESET;
 800873c:	2300      	movs	r3, #0
  if (status == LORAMAC_STATUS_OK)
 800873e:	4298      	cmp	r0, r3
 8008740:	d104      	bne.n	800874c <LmHandlerJoinStatus+0x20>
    if (mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE)
 8008742:	466b      	mov	r3, sp
 8008744:	7a1b      	ldrb	r3, [r3, #8]
 8008746:	1e58      	subs	r0, r3, #1
 8008748:	4183      	sbcs	r3, r0
      return LORAMAC_HANDLER_RESET;
 800874a:	b2db      	uxtb	r3, r3
}
 800874c:	0018      	movs	r0, r3
 800874e:	b00b      	add	sp, #44	; 0x2c
 8008750:	bd00      	pop	{pc}
	...

08008754 <LmHandlerRequestClass>:
{
 8008754:	b570      	push	{r4, r5, r6, lr}
 8008756:	b08a      	sub	sp, #40	; 0x28
 8008758:	0005      	movs	r5, r0
  if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800875a:	f7ff ffe7 	bl	800872c <LmHandlerJoinStatus>
 800875e:	2801      	cmp	r0, #1
 8008760:	d133      	bne.n	80087ca <LmHandlerRequestClass+0x76>
  mibReq.Type = MIB_DEVICE_CLASS;
 8008762:	2300      	movs	r3, #0
 8008764:	ae01      	add	r6, sp, #4
  if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8008766:	0030      	movs	r0, r6
  mibReq.Type = MIB_DEVICE_CLASS;
 8008768:	7033      	strb	r3, [r6, #0]
  if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 800876a:	f002 fa33 	bl	800abd4 <LoRaMacMibGetRequestConfirm>
 800876e:	1e04      	subs	r4, r0, #0
 8008770:	d001      	beq.n	8008776 <LmHandlerRequestClass+0x22>
    switch (newClass)
 8008772:	2401      	movs	r4, #1
 8008774:	e02a      	b.n	80087cc <LmHandlerRequestClass+0x78>
  currentClass = mibReq.Param.Class;
 8008776:	7933      	ldrb	r3, [r6, #4]
  if (currentClass != newClass)
 8008778:	42ab      	cmp	r3, r5
 800877a:	d103      	bne.n	8008784 <LmHandlerRequestClass+0x30>
  LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800877c:	2400      	movs	r4, #0
}
 800877e:	0020      	movs	r0, r4
 8008780:	b00a      	add	sp, #40	; 0x28
 8008782:	bd70      	pop	{r4, r5, r6, pc}
    switch (newClass)
 8008784:	2d01      	cmp	r5, #1
 8008786:	d0f4      	beq.n	8008772 <LmHandlerRequestClass+0x1e>
 8008788:	2d02      	cmp	r5, #2
 800878a:	d010      	beq.n	80087ae <LmHandlerRequestClass+0x5a>
 800878c:	2d00      	cmp	r5, #0
 800878e:	d1f6      	bne.n	800877e <LmHandlerRequestClass+0x2a>
        if (currentClass != CLASS_A)
 8008790:	2b00      	cmp	r3, #0
 8008792:	d0f3      	beq.n	800877c <LmHandlerRequestClass+0x28>
          mibReq.Param.Class = CLASS_A;
 8008794:	7130      	strb	r0, [r6, #4]
          if (LoRaMacMibSetRequestConfirm(&mibReq) == LORAMAC_STATUS_OK)
 8008796:	0030      	movs	r0, r6
 8008798:	f002 fb1a 	bl	800add0 <LoRaMacMibSetRequestConfirm>
 800879c:	2800      	cmp	r0, #0
 800879e:	d1e8      	bne.n	8008772 <LmHandlerRequestClass+0x1e>
            if (LmHandlerCallbacks.OnClassChange != NULL)
 80087a0:	4b0b      	ldr	r3, [pc, #44]	; (80087d0 <LmHandlerRequestClass+0x7c>)
              LmHandlerCallbacks.OnClassChange( CLASS_A );
 80087a2:	0020      	movs	r0, r4
            if (LmHandlerCallbacks.OnClassChange != NULL)
 80087a4:	699b      	ldr	r3, [r3, #24]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d0e8      	beq.n	800877c <LmHandlerRequestClass+0x28>
              LmHandlerCallbacks.OnClassChange( CLASS_C );
 80087aa:	4798      	blx	r3
 80087ac:	e7e7      	b.n	800877e <LmHandlerRequestClass+0x2a>
        if (currentClass != CLASS_A)
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d1df      	bne.n	8008772 <LmHandlerRequestClass+0x1e>
          if (LoRaMacMibSetRequestConfirm(&mibReq) == LORAMAC_STATUS_OK)
 80087b2:	0030      	movs	r0, r6
          mibReq.Param.Class = CLASS_C;
 80087b4:	7135      	strb	r5, [r6, #4]
          if (LoRaMacMibSetRequestConfirm(&mibReq) == LORAMAC_STATUS_OK)
 80087b6:	f002 fb0b 	bl	800add0 <LoRaMacMibSetRequestConfirm>
 80087ba:	1e04      	subs	r4, r0, #0
 80087bc:	d1d9      	bne.n	8008772 <LmHandlerRequestClass+0x1e>
            if (LmHandlerCallbacks.OnClassChange != NULL)
 80087be:	4b04      	ldr	r3, [pc, #16]	; (80087d0 <LmHandlerRequestClass+0x7c>)
 80087c0:	699b      	ldr	r3, [r3, #24]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d0da      	beq.n	800877c <LmHandlerRequestClass+0x28>
              LmHandlerCallbacks.OnClassChange( CLASS_C );
 80087c6:	0028      	movs	r0, r5
 80087c8:	e7ef      	b.n	80087aa <LmHandlerRequestClass+0x56>
    return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 80087ca:	2403      	movs	r4, #3
    switch (newClass)
 80087cc:	4264      	negs	r4, r4
 80087ce:	e7d6      	b.n	800877e <LmHandlerRequestClass+0x2a>
 80087d0:	2000047c 	.word	0x2000047c

080087d4 <LmHandlerJoin>:
    JoinParams.Mode = ACTIVATION_TYPE_ABP;
 80087d4:	2301      	movs	r3, #1
{
 80087d6:	b5f0      	push	{r4, r5, r6, r7, lr}
    JoinParams.Mode = ACTIVATION_TYPE_ABP;
 80087d8:	4d1d      	ldr	r5, [pc, #116]	; (8008850 <LmHandlerJoin+0x7c>)
{
 80087da:	b08d      	sub	sp, #52	; 0x34
    JoinParams.Mode = ACTIVATION_TYPE_ABP;
 80087dc:	70ab      	strb	r3, [r5, #2]
    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 80087de:	2300      	movs	r3, #0
 80087e0:	706b      	strb	r3, [r5, #1]
    if (CtxRestoreDone == false)
 80087e2:	4b1c      	ldr	r3, [pc, #112]	; (8008854 <LmHandlerJoin+0x80>)
 80087e4:	ac03      	add	r4, sp, #12
 80087e6:	781e      	ldrb	r6, [r3, #0]
 80087e8:	2e00      	cmp	r6, #0
 80087ea:	d11f      	bne.n	800882c <LmHandlerJoin+0x58>
      mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 80087ec:	2327      	movs	r3, #39	; 0x27
 80087ee:	7023      	strb	r3, [r4, #0]
      mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 80087f0:	4b19      	ldr	r3, [pc, #100]	; (8008858 <LmHandlerJoin+0x84>)
      LoRaMacMibSetRequestConfirm(&mibReq);
 80087f2:	0020      	movs	r0, r4
      mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 80087f4:	6063      	str	r3, [r4, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 80087f6:	f002 faeb 	bl	800add0 <LoRaMacMibSetRequestConfirm>
      mibReq.Type = MIB_NET_ID;
 80087fa:	2305      	movs	r3, #5
      mibReq.Param.NetID = CommissioningParams.NetworkId;
 80087fc:	4f17      	ldr	r7, [pc, #92]	; (800885c <LmHandlerJoin+0x88>)
      mibReq.Type = MIB_NET_ID;
 80087fe:	7023      	strb	r3, [r4, #0]
      mibReq.Param.NetID = CommissioningParams.NetworkId;
 8008800:	693b      	ldr	r3, [r7, #16]
      LoRaMacMibSetRequestConfirm(&mibReq);
 8008802:	0020      	movs	r0, r4
      mibReq.Param.NetID = CommissioningParams.NetworkId;
 8008804:	6063      	str	r3, [r4, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 8008806:	f002 fae3 	bl	800add0 <LoRaMacMibSetRequestConfirm>
      CommissioningParams.DevAddr = GetDevAddr();
 800880a:	f7fa fac3 	bl	8002d94 <GetDevAddr>
      mibReq.Type = MIB_DEV_ADDR;
 800880e:	2306      	movs	r3, #6
      CommissioningParams.DevAddr = GetDevAddr();
 8008810:	6178      	str	r0, [r7, #20]
      mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 8008812:	6060      	str	r0, [r4, #4]
      LoRaMacMibSetRequestConfirm(&mibReq);
 8008814:	0020      	movs	r0, r4
      mibReq.Type = MIB_DEV_ADDR;
 8008816:	7023      	strb	r3, [r4, #0]
      LoRaMacMibSetRequestConfirm(&mibReq);
 8008818:	f002 fada 	bl	800add0 <LoRaMacMibSetRequestConfirm>
      MW_LOG(TS_OFF, VLEVEL_M, "DevAddr:   %08X\r\n", CommissioningParams.DevAddr);
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	0032      	movs	r2, r6
 8008820:	9300      	str	r3, [sp, #0]
 8008822:	0031      	movs	r1, r6
 8008824:	2002      	movs	r0, #2
 8008826:	4b0e      	ldr	r3, [pc, #56]	; (8008860 <LmHandlerJoin+0x8c>)
 8008828:	f006 fb5e 	bl	800eee8 <UTIL_ADV_TRACE_COND_FSend>
    LoRaMacStart();
 800882c:	f002 f96e 	bl	800ab0c <LoRaMacStart>
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 8008830:	2301      	movs	r3, #1
    LoRaMacMibSetRequestConfirm(&mibReq);
 8008832:	0020      	movs	r0, r4
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 8008834:	7023      	strb	r3, [r4, #0]
    mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 8008836:	7123      	strb	r3, [r4, #4]
    LoRaMacMibSetRequestConfirm(&mibReq);
 8008838:	f002 faca 	bl	800add0 <LoRaMacMibSetRequestConfirm>
    LmHandlerCallbacks.OnJoinRequest(&JoinParams);
 800883c:	4b09      	ldr	r3, [pc, #36]	; (8008864 <LmHandlerJoin+0x90>)
 800883e:	0028      	movs	r0, r5
 8008840:	68db      	ldr	r3, [r3, #12]
 8008842:	4798      	blx	r3
    LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 8008844:	4b08      	ldr	r3, [pc, #32]	; (8008868 <LmHandlerJoin+0x94>)
 8008846:	7858      	ldrb	r0, [r3, #1]
 8008848:	f7ff ff84 	bl	8008754 <LmHandlerRequestClass>
}
 800884c:	b00d      	add	sp, #52	; 0x34
 800884e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008850:	2000012c 	.word	0x2000012c
 8008854:	2000047a 	.word	0x2000047a
 8008858:	01000300 	.word	0x01000300
 800885c:	20000114 	.word	0x20000114
 8008860:	0800fa75 	.word	0x0800fa75
 8008864:	2000047c 	.word	0x2000047c
 8008868:	200004b0 	.word	0x200004b0

0800886c <LmHandlerSend>:
{
 800886c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800886e:	b089      	sub	sp, #36	; 0x24
 8008870:	0005      	movs	r5, r0
 8008872:	000e      	movs	r6, r1
 8008874:	0017      	movs	r7, r2
 8008876:	9301      	str	r3, [sp, #4]
  if (LoRaMacIsBusy() == true)
 8008878:	f001 faa6 	bl	8009dc8 <LoRaMacIsBusy>
 800887c:	2800      	cmp	r0, #0
 800887e:	d14c      	bne.n	800891a <LmHandlerSend+0xae>
  if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 8008880:	f7ff ff54 	bl	800872c <LmHandlerJoinStatus>
 8008884:	2801      	cmp	r0, #1
 8008886:	d006      	beq.n	8008896 <LmHandlerSend+0x2a>
    LmHandlerJoin(JoinParams.Mode);
 8008888:	4b27      	ldr	r3, [pc, #156]	; (8008928 <LmHandlerSend+0xbc>)
 800888a:	7898      	ldrb	r0, [r3, #2]
 800888c:	f7ff ffa2 	bl	80087d4 <LmHandlerJoin>
    return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8008890:	2003      	movs	r0, #3
    return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 8008892:	4240      	negs	r0, r0
 8008894:	e02f      	b.n	80088f6 <LmHandlerSend+0x8a>
  if ((LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() == true)
 8008896:	4c25      	ldr	r4, [pc, #148]	; (800892c <LmHandlerSend+0xc0>)
 8008898:	6823      	ldr	r3, [r4, #0]
 800889a:	68db      	ldr	r3, [r3, #12]
 800889c:	4798      	blx	r3
 800889e:	2800      	cmp	r0, #0
 80088a0:	d006      	beq.n	80088b0 <LmHandlerSend+0x44>
      && (appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port) && (appData->Port != 0))
 80088a2:	6822      	ldr	r2, [r4, #0]
 80088a4:	782b      	ldrb	r3, [r5, #0]
 80088a6:	7812      	ldrb	r2, [r2, #0]
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d001      	beq.n	80088b0 <LmHandlerSend+0x44>
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d136      	bne.n	800891e <LmHandlerSend+0xb2>
  mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 80088b0:	4b1f      	ldr	r3, [pc, #124]	; (8008930 <LmHandlerSend+0xc4>)
 80088b2:	ac03      	add	r4, sp, #12
 80088b4:	78db      	ldrb	r3, [r3, #3]
  if ((status = LoRaMacQueryTxPossible(appData->BufferSize, &txInfo)) != LORAMAC_STATUS_OK)
 80088b6:	a902      	add	r1, sp, #8
  mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 80088b8:	73a3      	strb	r3, [r4, #14]
  if ((status = LoRaMacQueryTxPossible(appData->BufferSize, &txInfo)) != LORAMAC_STATUS_OK)
 80088ba:	7868      	ldrb	r0, [r5, #1]
 80088bc:	f002 f92e 	bl	800ab1c <LoRaMacQueryTxPossible>
 80088c0:	4b1c      	ldr	r3, [pc, #112]	; (8008934 <LmHandlerSend+0xc8>)
 80088c2:	2800      	cmp	r0, #0
 80088c4:	d019      	beq.n	80088fa <LmHandlerSend+0x8e>
    TxParams.MsgType = LORAMAC_HANDLER_UNCONFIRMED_MSG;
 80088c6:	2200      	movs	r2, #0
 80088c8:	709a      	strb	r2, [r3, #2]
    mcpsReq.Type = MCPS_UNCONFIRMED;
 80088ca:	7022      	strb	r2, [r4, #0]
    mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 80088cc:	60a2      	str	r2, [r4, #8]
    mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 80088ce:	81a2      	strh	r2, [r4, #12]
  TxParams.AppData = *appData;
 80088d0:	001a      	movs	r2, r3
 80088d2:	320c      	adds	r2, #12
 80088d4:	cd03      	ldmia	r5!, {r0, r1}
 80088d6:	c203      	stmia	r2!, {r0, r1}
  TxParams.Datarate = LmHandlerParams.TxDatarate;
 80088d8:	4a15      	ldr	r2, [pc, #84]	; (8008930 <LmHandlerSend+0xc4>)
  status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 80088da:	0020      	movs	r0, r4
  TxParams.Datarate = LmHandlerParams.TxDatarate;
 80088dc:	78d2      	ldrb	r2, [r2, #3]
  status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 80088de:	9901      	ldr	r1, [sp, #4]
  TxParams.Datarate = LmHandlerParams.TxDatarate;
 80088e0:	711a      	strb	r2, [r3, #4]
  status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 80088e2:	f002 fd8b 	bl	800b3fc <LoRaMacMcpsRequest>
  if (nextTxIn != NULL)
 80088e6:	2f00      	cmp	r7, #0
 80088e8:	d001      	beq.n	80088ee <LmHandlerSend+0x82>
    *nextTxIn = mcpsReq.ReqReturn.DutyCycleWaitTime;
 80088ea:	6923      	ldr	r3, [r4, #16]
 80088ec:	603b      	str	r3, [r7, #0]
  switch(status)
 80088ee:	2811      	cmp	r0, #17
 80088f0:	d817      	bhi.n	8008922 <LmHandlerSend+0xb6>
 80088f2:	4b11      	ldr	r3, [pc, #68]	; (8008938 <LmHandlerSend+0xcc>)
 80088f4:	5618      	ldrsb	r0, [r3, r0]
}
 80088f6:	b009      	add	sp, #36	; 0x24
 80088f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    TxParams.MsgType = isTxConfirmed;
 80088fa:	709e      	strb	r6, [r3, #2]
    mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 80088fc:	782a      	ldrb	r2, [r5, #0]
 80088fe:	7122      	strb	r2, [r4, #4]
    mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 8008900:	786a      	ldrb	r2, [r5, #1]
 8008902:	81a2      	strh	r2, [r4, #12]
    mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 8008904:	686a      	ldr	r2, [r5, #4]
 8008906:	60a2      	str	r2, [r4, #8]
    if (isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG)
 8008908:	2e00      	cmp	r6, #0
 800890a:	d101      	bne.n	8008910 <LmHandlerSend+0xa4>
      mcpsReq.Type = MCPS_UNCONFIRMED;
 800890c:	7026      	strb	r6, [r4, #0]
 800890e:	e7df      	b.n	80088d0 <LmHandlerSend+0x64>
      mcpsReq.Type = MCPS_CONFIRMED;
 8008910:	2201      	movs	r2, #1
 8008912:	7022      	strb	r2, [r4, #0]
      mcpsReq.Req.Confirmed.NbTrials = 8;
 8008914:	3207      	adds	r2, #7
 8008916:	73e2      	strb	r2, [r4, #15]
 8008918:	e7da      	b.n	80088d0 <LmHandlerSend+0x64>
    return LORAMAC_HANDLER_BUSY_ERROR;
 800891a:	2002      	movs	r0, #2
 800891c:	e7b9      	b.n	8008892 <LmHandlerSend+0x26>
    return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 800891e:	2004      	movs	r0, #4
 8008920:	e7b7      	b.n	8008892 <LmHandlerSend+0x26>
 8008922:	2001      	movs	r0, #1
 8008924:	e7b5      	b.n	8008892 <LmHandlerSend+0x26>
 8008926:	46c0      	nop			; (mov r8, r8)
 8008928:	2000012c 	.word	0x2000012c
 800892c:	2000049c 	.word	0x2000049c
 8008930:	200004b0 	.word	0x200004b0
 8008934:	200004d8 	.word	0x200004d8
 8008938:	0800fa87 	.word	0x0800fa87

0800893c <LmHandlerPackageRegister>:
{
 800893c:	b570      	push	{r4, r5, r6, lr}
 800893e:	0004      	movs	r4, r0
 8008940:	000d      	movs	r5, r1
  switch (id)
 8008942:	2800      	cmp	r0, #0
 8008944:	d002      	beq.n	800894c <LmHandlerPackageRegister+0x10>
    return LORAMAC_HANDLER_ERROR;
 8008946:	2001      	movs	r0, #1
 8008948:	4240      	negs	r0, r0
}
 800894a:	bd70      	pop	{r4, r5, r6, pc}
      package = LmphCompliancePackageFactory();
 800894c:	f000 faa6 	bl	8008e9c <LmphCompliancePackageFactory>
  if (package != NULL)
 8008950:	2800      	cmp	r0, #0
 8008952:	d0f8      	beq.n	8008946 <LmHandlerPackageRegister+0xa>
    LmHandlerPackages[id] = package;
 8008954:	4b07      	ldr	r3, [pc, #28]	; (8008974 <LmHandlerPackageRegister+0x38>)
    LmHandlerPackages[id]->Init(params, AppData.Buffer, LORAWAN_APP_DATA_BUFFER_MAX_SIZE);
 8008956:	22f2      	movs	r2, #242	; 0xf2
    LmHandlerPackages[id] = package;
 8008958:	6018      	str	r0, [r3, #0]
    LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800895a:	4b07      	ldr	r3, [pc, #28]	; (8008978 <LmHandlerPackageRegister+0x3c>)
    LmHandlerPackages[id]->Init(params, AppData.Buffer, LORAWAN_APP_DATA_BUFFER_MAX_SIZE);
 800895c:	4907      	ldr	r1, [pc, #28]	; (800897c <LmHandlerPackageRegister+0x40>)
    LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800895e:	6203      	str	r3, [r0, #32]
    LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 8008960:	4b07      	ldr	r3, [pc, #28]	; (8008980 <LmHandlerPackageRegister+0x44>)
 8008962:	6243      	str	r3, [r0, #36]	; 0x24
    LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 8008964:	4b07      	ldr	r3, [pc, #28]	; (8008984 <LmHandlerPackageRegister+0x48>)
 8008966:	6283      	str	r3, [r0, #40]	; 0x28
    LmHandlerPackages[id]->Init(params, AppData.Buffer, LORAWAN_APP_DATA_BUFFER_MAX_SIZE);
 8008968:	6843      	ldr	r3, [r0, #4]
 800896a:	0028      	movs	r0, r5
 800896c:	4798      	blx	r3
    return LORAMAC_HANDLER_SUCCESS;
 800896e:	0020      	movs	r0, r4
 8008970:	e7eb      	b.n	800894a <LmHandlerPackageRegister+0xe>
 8008972:	46c0      	nop			; (mov r8, r8)
 8008974:	2000049c 	.word	0x2000049c
 8008978:	080087d5 	.word	0x080087d5
 800897c:	20000388 	.word	0x20000388
 8008980:	0800886d 	.word	0x0800886d
 8008984:	08008531 	.word	0x08008531

08008988 <LmHandlerInit>:
{
 8008988:	b510      	push	{r4, lr}
  UTIL_MEM_cpy_8((void *)&LmHandlerCallbacks, (const void *)handlerCallbacks, sizeof(LmHandlerCallbacks_t));
 800898a:	4c10      	ldr	r4, [pc, #64]	; (80089cc <LmHandlerInit+0x44>)
{
 800898c:	0001      	movs	r1, r0
  UTIL_MEM_cpy_8((void *)&LmHandlerCallbacks, (const void *)handlerCallbacks, sizeof(LmHandlerCallbacks_t));
 800898e:	2220      	movs	r2, #32
 8008990:	0020      	movs	r0, r4
 8008992:	f005 fdd7 	bl	800e544 <UTIL_MEM_cpy_8>
  LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 8008996:	4b0e      	ldr	r3, [pc, #56]	; (80089d0 <LmHandlerInit+0x48>)
 8008998:	4a0e      	ldr	r2, [pc, #56]	; (80089d4 <LmHandlerInit+0x4c>)
  if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800899a:	490f      	ldr	r1, [pc, #60]	; (80089d8 <LmHandlerInit+0x50>)
  LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800899c:	601a      	str	r2, [r3, #0]
  LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800899e:	4a0f      	ldr	r2, [pc, #60]	; (80089dc <LmHandlerInit+0x54>)
  if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 80089a0:	2000      	movs	r0, #0
  LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 80089a2:	605a      	str	r2, [r3, #4]
  LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 80089a4:	4a0e      	ldr	r2, [pc, #56]	; (80089e0 <LmHandlerInit+0x58>)
 80089a6:	609a      	str	r2, [r3, #8]
  LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 80089a8:	4a0e      	ldr	r2, [pc, #56]	; (80089e4 <LmHandlerInit+0x5c>)
 80089aa:	60da      	str	r2, [r3, #12]
  LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks.GetBatteryLevel;
 80089ac:	4b0e      	ldr	r3, [pc, #56]	; (80089e8 <LmHandlerInit+0x60>)
 80089ae:	6822      	ldr	r2, [r4, #0]
 80089b0:	601a      	str	r2, [r3, #0]
  LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks.GetTemperature;
 80089b2:	6862      	ldr	r2, [r4, #4]
 80089b4:	605a      	str	r2, [r3, #4]
  LoRaMacCallbacks.NvmContextChange = NvmCtxMgmtEvent;
 80089b6:	4a0d      	ldr	r2, [pc, #52]	; (80089ec <LmHandlerInit+0x64>)
 80089b8:	609a      	str	r2, [r3, #8]
  LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks.OnMacProcess;
 80089ba:	68a2      	ldr	r2, [r4, #8]
 80089bc:	60da      	str	r2, [r3, #12]
  if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 80089be:	f7ff ffbd 	bl	800893c <LmHandlerPackageRegister>
 80089c2:	1e43      	subs	r3, r0, #1
 80089c4:	4198      	sbcs	r0, r3
 80089c6:	4240      	negs	r0, r0
}
 80089c8:	bd10      	pop	{r4, pc}
 80089ca:	46c0      	nop			; (mov r8, r8)
 80089cc:	2000047c 	.word	0x2000047c
 80089d0:	200004c8 	.word	0x200004c8
 80089d4:	08008549 	.word	0x08008549
 80089d8:	20000130 	.word	0x20000130
 80089dc:	08008a1d 	.word	0x08008a1d
 80089e0:	08008b15 	.word	0x08008b15
 80089e4:	08008521 	.word	0x08008521
 80089e8:	200004b8 	.word	0x200004b8
 80089ec:	08008bb9 	.word	0x08008bb9

080089f0 <LmHandlerGetCurrentClass>:
{
 80089f0:	b510      	push	{r4, lr}
 80089f2:	0004      	movs	r4, r0
 80089f4:	b08a      	sub	sp, #40	; 0x28
  if (deviceClass == NULL)
 80089f6:	2800      	cmp	r0, #0
 80089f8:	d103      	bne.n	8008a02 <LmHandlerGetCurrentClass+0x12>
    return LORAMAC_HANDLER_ERROR;
 80089fa:	2001      	movs	r0, #1
 80089fc:	4240      	negs	r0, r0
}
 80089fe:	b00a      	add	sp, #40	; 0x28
 8008a00:	bd10      	pop	{r4, pc}
  mibReq.Type = MIB_DEVICE_CLASS;
 8008a02:	2300      	movs	r3, #0
 8008a04:	466a      	mov	r2, sp
  if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8008a06:	a801      	add	r0, sp, #4
  mibReq.Type = MIB_DEVICE_CLASS;
 8008a08:	7113      	strb	r3, [r2, #4]
  if (LoRaMacMibGetRequestConfirm(&mibReq) != LORAMAC_STATUS_OK)
 8008a0a:	f002 f8e3 	bl	800abd4 <LoRaMacMibGetRequestConfirm>
 8008a0e:	2800      	cmp	r0, #0
 8008a10:	d1f3      	bne.n	80089fa <LmHandlerGetCurrentClass+0xa>
  *deviceClass = mibReq.Param.Class;
 8008a12:	466b      	mov	r3, sp
 8008a14:	7a1b      	ldrb	r3, [r3, #8]
 8008a16:	7023      	strb	r3, [r4, #0]
  return LORAMAC_HANDLER_SUCCESS;
 8008a18:	e7f1      	b.n	80089fe <LmHandlerGetCurrentClass+0xe>
	...

08008a1c <McpsIndication>:
  RxParams.IsMcpsIndication = 1;
 8008a1c:	2301      	movs	r3, #1
{
 8008a1e:	b5f0      	push	{r4, r5, r6, r7, lr}
  RxParams.IsMcpsIndication = 1;
 8008a20:	492c      	ldr	r1, [pc, #176]	; (8008ad4 <McpsIndication+0xb8>)
{
 8008a22:	0004      	movs	r4, r0
  RxParams.IsMcpsIndication = 1;
 8008a24:	700b      	strb	r3, [r1, #0]
  RxParams.Status = mcpsIndication->Status;
 8008a26:	7843      	ldrb	r3, [r0, #1]
{
 8008a28:	b087      	sub	sp, #28
  RxParams.Status = mcpsIndication->Status;
 8008a2a:	704b      	strb	r3, [r1, #1]
  if (RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK)
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d146      	bne.n	8008abe <McpsIndication+0xa2>
  if (mcpsIndication->BufferSize > 0)
 8008a30:	7b03      	ldrb	r3, [r0, #12]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d013      	beq.n	8008a5e <McpsIndication+0x42>
    RxParams.Datarate = mcpsIndication->RxDatarate;
 8008a36:	7902      	ldrb	r2, [r0, #4]
 8008a38:	708a      	strb	r2, [r1, #2]
    RxParams.Rssi = mcpsIndication->Rssi;
 8008a3a:	89c2      	ldrh	r2, [r0, #14]
 8008a3c:	70ca      	strb	r2, [r1, #3]
    RxParams.Snr = mcpsIndication->Snr;
 8008a3e:	7c02      	ldrb	r2, [r0, #16]
 8008a40:	710a      	strb	r2, [r1, #4]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 8008a42:	6942      	ldr	r2, [r0, #20]
 8008a44:	608a      	str	r2, [r1, #8]
    RxParams.RxSlot = mcpsIndication->RxSlot;
 8008a46:	7c42      	ldrb	r2, [r0, #17]
 8008a48:	730a      	strb	r2, [r1, #12]
    appData.Port = mcpsIndication->Port;
 8008a4a:	78c2      	ldrb	r2, [r0, #3]
 8008a4c:	4668      	mov	r0, sp
    appData.BufferSize = mcpsIndication->BufferSize;
 8008a4e:	7243      	strb	r3, [r0, #9]
    appData.Buffer = mcpsIndication->Buffer;
 8008a50:	68a3      	ldr	r3, [r4, #8]
    appData.Port = mcpsIndication->Port;
 8008a52:	7202      	strb	r2, [r0, #8]
    appData.Buffer = mcpsIndication->Buffer;
 8008a54:	9303      	str	r3, [sp, #12]
    LmHandlerCallbacks.OnRxData(&appData, &RxParams);
 8008a56:	4b20      	ldr	r3, [pc, #128]	; (8008ad8 <McpsIndication+0xbc>)
 8008a58:	a802      	add	r0, sp, #8
 8008a5a:	695b      	ldr	r3, [r3, #20]
 8008a5c:	4798      	blx	r3
    if( mcpsIndication->DeviceTimeAnsReceived == true )
 8008a5e:	7f23      	ldrb	r3, [r4, #28]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d004      	beq.n	8008a6e <McpsIndication+0x52>
      if( LmHandlerCallbacks.OnSysTimeUpdate != NULL)
 8008a64:	4b1c      	ldr	r3, [pc, #112]	; (8008ad8 <McpsIndication+0xbc>)
 8008a66:	69db      	ldr	r3, [r3, #28]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d000      	beq.n	8008a6e <McpsIndication+0x52>
        LmHandlerCallbacks.OnSysTimeUpdate( );
 8008a6c:	4798      	blx	r3
 8008a6e:	4e1b      	ldr	r6, [pc, #108]	; (8008adc <McpsIndication+0xc0>)
{
 8008a70:	2500      	movs	r5, #0
 8008a72:	0037      	movs	r7, r6
    if (LmHandlerPackages[i] != NULL)
 8008a74:	6833      	ldr	r3, [r6, #0]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d00a      	beq.n	8008a90 <McpsIndication+0x74>
          }
          break;
        }
        case PACKAGE_MCPS_INDICATION:
        {
          if ((LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL) &&
 8008a7a:	699a      	ldr	r2, [r3, #24]
 8008a7c:	2a00      	cmp	r2, #0
 8008a7e:	d007      	beq.n	8008a90 <McpsIndication+0x74>
 8008a80:	781a      	ldrb	r2, [r3, #0]
 8008a82:	78e3      	ldrb	r3, [r4, #3]
 8008a84:	429a      	cmp	r2, r3
 8008a86:	d11c      	bne.n	8008ac2 <McpsIndication+0xa6>
              ((LmHandlerPackages[i]->Port == ((McpsIndication_t *)params)->Port) ||
               ((i == PACKAGE_ID_COMPLIANCE) && (LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning()))))
          {
            LmHandlerPackages[i]->OnMcpsIndicationProcess(params);
 8008a88:	6833      	ldr	r3, [r6, #0]
 8008a8a:	0020      	movs	r0, r4
 8008a8c:	699b      	ldr	r3, [r3, #24]
 8008a8e:	4798      	blx	r3
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 8008a90:	3501      	adds	r5, #1
 8008a92:	b2eb      	uxtb	r3, r5
 8008a94:	3604      	adds	r6, #4
 8008a96:	b26d      	sxtb	r5, r5
 8008a98:	2b05      	cmp	r3, #5
 8008a9a:	d1eb      	bne.n	8008a74 <McpsIndication+0x58>
  LmHandlerGetCurrentClass(&deviceClass);
 8008a9c:	466b      	mov	r3, sp
 8008a9e:	1ddd      	adds	r5, r3, #7
 8008aa0:	0028      	movs	r0, r5
 8008aa2:	f7ff ffa5 	bl	80089f0 <LmHandlerGetCurrentClass>
  if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 8008aa6:	7963      	ldrb	r3, [r4, #5]
 8008aa8:	2b01      	cmp	r3, #1
 8008aaa:	d108      	bne.n	8008abe <McpsIndication+0xa2>
 8008aac:	7829      	ldrb	r1, [r5, #0]
 8008aae:	2900      	cmp	r1, #0
 8008ab0:	d105      	bne.n	8008abe <McpsIndication+0xa2>
    LmHandlerAppData_t appData =
 8008ab2:	a804      	add	r0, sp, #16
    LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 8008ab4:	000a      	movs	r2, r1
    LmHandlerAppData_t appData =
 8008ab6:	8001      	strh	r1, [r0, #0]
 8008ab8:	6041      	str	r1, [r0, #4]
    LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 8008aba:	f7ff fed7 	bl	800886c <LmHandlerSend>
}
 8008abe:	b007      	add	sp, #28
 8008ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
              ((LmHandlerPackages[i]->Port == ((McpsIndication_t *)params)->Port) ||
 8008ac2:	2d00      	cmp	r5, #0
 8008ac4:	d1e4      	bne.n	8008a90 <McpsIndication+0x74>
               ((i == PACKAGE_ID_COMPLIANCE) && (LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning()))))
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	68db      	ldr	r3, [r3, #12]
 8008aca:	4798      	blx	r3
 8008acc:	2800      	cmp	r0, #0
 8008ace:	d1db      	bne.n	8008a88 <McpsIndication+0x6c>
 8008ad0:	e7de      	b.n	8008a90 <McpsIndication+0x74>
 8008ad2:	46c0      	nop			; (mov r8, r8)
 8008ad4:	2000013c 	.word	0x2000013c
 8008ad8:	2000047c 	.word	0x2000047c
 8008adc:	2000049c 	.word	0x2000049c

08008ae0 <LmHandlerGetTxDatarate>:
{
 8008ae0:	b510      	push	{r4, lr}
 8008ae2:	0004      	movs	r4, r0
 8008ae4:	b08a      	sub	sp, #40	; 0x28
  if (txDatarate == NULL)
 8008ae6:	2800      	cmp	r0, #0
 8008ae8:	d103      	bne.n	8008af2 <LmHandlerGetTxDatarate+0x12>
    return LORAMAC_HANDLER_ERROR;
 8008aea:	2001      	movs	r0, #1
 8008aec:	4240      	negs	r0, r0
}
 8008aee:	b00a      	add	sp, #40	; 0x28
 8008af0:	bd10      	pop	{r4, pc}
  mibGet.Type = MIB_CHANNELS_DATARATE;
 8008af2:	231f      	movs	r3, #31
 8008af4:	466a      	mov	r2, sp
  if (LoRaMacMibGetRequestConfirm(&mibGet) != LORAMAC_STATUS_OK)
 8008af6:	a801      	add	r0, sp, #4
  mibGet.Type = MIB_CHANNELS_DATARATE;
 8008af8:	7113      	strb	r3, [r2, #4]
  if (LoRaMacMibGetRequestConfirm(&mibGet) != LORAMAC_STATUS_OK)
 8008afa:	f002 f86b 	bl	800abd4 <LoRaMacMibGetRequestConfirm>
 8008afe:	2800      	cmp	r0, #0
 8008b00:	d1f3      	bne.n	8008aea <LmHandlerGetTxDatarate+0xa>
  *txDatarate = mibGet.Param.ChannelsDatarate;
 8008b02:	466b      	mov	r3, sp
 8008b04:	7a1b      	ldrb	r3, [r3, #8]
  LmHandlerParams.TxDatarate = mibGet.Param.ChannelsDatarate;
 8008b06:	4a02      	ldr	r2, [pc, #8]	; (8008b10 <LmHandlerGetTxDatarate+0x30>)
  *txDatarate = mibGet.Param.ChannelsDatarate;
 8008b08:	b25b      	sxtb	r3, r3
 8008b0a:	7023      	strb	r3, [r4, #0]
  LmHandlerParams.TxDatarate = mibGet.Param.ChannelsDatarate;
 8008b0c:	70d3      	strb	r3, [r2, #3]
  return LORAMAC_HANDLER_SUCCESS;
 8008b0e:	e7ee      	b.n	8008aee <LmHandlerGetTxDatarate+0xe>
 8008b10:	200004b0 	.word	0x200004b0

08008b14 <MlmeConfirm>:
  TxParams.IsMcpsConfirm = 0;
 8008b14:	2200      	movs	r2, #0
{
 8008b16:	b570      	push	{r4, r5, r6, lr}
 8008b18:	4d1a      	ldr	r5, [pc, #104]	; (8008b84 <MlmeConfirm+0x70>)
 8008b1a:	0004      	movs	r4, r0
 8008b1c:	002e      	movs	r6, r5
  TxParams.IsMcpsConfirm = 0;
 8008b1e:	4b1a      	ldr	r3, [pc, #104]	; (8008b88 <MlmeConfirm+0x74>)
{
 8008b20:	b08a      	sub	sp, #40	; 0x28
  TxParams.IsMcpsConfirm = 0;
 8008b22:	701a      	strb	r2, [r3, #0]
  TxParams.Status = mlmeConfirm->Status;
 8008b24:	7842      	ldrb	r2, [r0, #1]
 8008b26:	3614      	adds	r6, #20
 8008b28:	705a      	strb	r2, [r3, #1]
    if (LmHandlerPackages[i] != NULL)
 8008b2a:	682b      	ldr	r3, [r5, #0]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d004      	beq.n	8008b3a <MlmeConfirm+0x26>
          }
          break;
        }
        case PACKAGE_MLME_CONFIRM:
        {
          if (LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL)
 8008b30:	69db      	ldr	r3, [r3, #28]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d001      	beq.n	8008b3a <MlmeConfirm+0x26>
          {
            LmHandlerPackages[i]->OnMlmeConfirmProcess(params);
 8008b36:	0020      	movs	r0, r4
 8008b38:	4798      	blx	r3
  for (int8_t i = 0; i < PKG_MAX_NUMBER; i++)
 8008b3a:	3504      	adds	r5, #4
 8008b3c:	42b5      	cmp	r5, r6
 8008b3e:	d1f4      	bne.n	8008b2a <MlmeConfirm+0x16>
  switch (mlmeConfirm->MlmeRequest)
 8008b40:	7823      	ldrb	r3, [r4, #0]
 8008b42:	2b01      	cmp	r3, #1
 8008b44:	d118      	bne.n	8008b78 <MlmeConfirm+0x64>
      mibReq.Type = MIB_DEV_ADDR;
 8008b46:	ad01      	add	r5, sp, #4
 8008b48:	3305      	adds	r3, #5
      LoRaMacMibGetRequestConfirm(&mibReq);
 8008b4a:	0028      	movs	r0, r5
      mibReq.Type = MIB_DEV_ADDR;
 8008b4c:	702b      	strb	r3, [r5, #0]
      LoRaMacMibGetRequestConfirm(&mibReq);
 8008b4e:	f002 f841 	bl	800abd4 <LoRaMacMibGetRequestConfirm>
      CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 8008b52:	686a      	ldr	r2, [r5, #4]
      LmHandlerGetTxDatarate(&JoinParams.Datarate);
 8008b54:	4d0d      	ldr	r5, [pc, #52]	; (8008b8c <MlmeConfirm+0x78>)
      CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 8008b56:	4b0e      	ldr	r3, [pc, #56]	; (8008b90 <MlmeConfirm+0x7c>)
      LmHandlerGetTxDatarate(&JoinParams.Datarate);
 8008b58:	0028      	movs	r0, r5
      CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 8008b5a:	615a      	str	r2, [r3, #20]
      LmHandlerGetTxDatarate(&JoinParams.Datarate);
 8008b5c:	f7ff ffc0 	bl	8008ae0 <LmHandlerGetTxDatarate>
      if (mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK)
 8008b60:	7863      	ldrb	r3, [r4, #1]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d10a      	bne.n	8008b7c <MlmeConfirm+0x68>
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8008b66:	706b      	strb	r3, [r5, #1]
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 8008b68:	4b0a      	ldr	r3, [pc, #40]	; (8008b94 <MlmeConfirm+0x80>)
 8008b6a:	7858      	ldrb	r0, [r3, #1]
 8008b6c:	f7ff fdf2 	bl	8008754 <LmHandlerRequestClass>
      LmHandlerCallbacks.OnJoinRequest(&JoinParams);
 8008b70:	4b09      	ldr	r3, [pc, #36]	; (8008b98 <MlmeConfirm+0x84>)
 8008b72:	0028      	movs	r0, r5
 8008b74:	68db      	ldr	r3, [r3, #12]
 8008b76:	4798      	blx	r3
}
 8008b78:	b00a      	add	sp, #40	; 0x28
 8008b7a:	bd70      	pop	{r4, r5, r6, pc}
        JoinParams.Status = LORAMAC_HANDLER_ERROR;
 8008b7c:	23ff      	movs	r3, #255	; 0xff
 8008b7e:	706b      	strb	r3, [r5, #1]
 8008b80:	e7f6      	b.n	8008b70 <MlmeConfirm+0x5c>
 8008b82:	46c0      	nop			; (mov r8, r8)
 8008b84:	2000049c 	.word	0x2000049c
 8008b88:	200004d8 	.word	0x200004d8
 8008b8c:	2000012c 	.word	0x2000012c
 8008b90:	20000114 	.word	0x20000114
 8008b94:	200004b0 	.word	0x200004b0
 8008b98:	2000047c 	.word	0x2000047c

08008b9c <LmHandlerGetDevEUI>:
{
 8008b9c:	b510      	push	{r4, lr}
  if (devEUI == NULL)
 8008b9e:	2800      	cmp	r0, #0
 8008ba0:	d005      	beq.n	8008bae <LmHandlerGetDevEUI+0x12>
  UTIL_MEM_cpy_8(devEUI, CommissioningParams.DevEui, SE_EUI_SIZE);
 8008ba2:	2208      	movs	r2, #8
 8008ba4:	4903      	ldr	r1, [pc, #12]	; (8008bb4 <LmHandlerGetDevEUI+0x18>)
 8008ba6:	f005 fccd 	bl	800e544 <UTIL_MEM_cpy_8>
  return LORAMAC_HANDLER_SUCCESS;
 8008baa:	2000      	movs	r0, #0
}
 8008bac:	bd10      	pop	{r4, pc}
    return LORAMAC_HANDLER_ERROR;
 8008bae:	2001      	movs	r0, #1
 8008bb0:	4240      	negs	r0, r0
 8008bb2:	e7fb      	b.n	8008bac <LmHandlerGetDevEUI+0x10>
 8008bb4:	20000114 	.word	0x20000114

08008bb8 <NvmCtxMgmtEvent>:
    {
      break;
    }
  }
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 8008bb8:	4770      	bx	lr

08008bba <NvmCtxMgmtStore>:

  return NVMCTXMGMT_STATUS_SUCCESS;
#else /* CONTEXT_MANAGEMENT_ENABLED == 0 */
  return NVMCTXMGMT_STATUS_FAIL;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 8008bba:	2001      	movs	r0, #1
 8008bbc:	4770      	bx	lr

08008bbe <NvmCtxMgmtRestore>:
 8008bbe:	2001      	movs	r0, #1
 8008bc0:	4770      	bx	lr
	...

08008bc4 <LmhpComplianceInit>:
  return &LmhpCompliancePackage;
}

/* Private  functions ---------------------------------------------------------*/
static void LmhpComplianceInit(void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize)
{
 8008bc4:	b510      	push	{r4, lr}
 8008bc6:	4b07      	ldr	r3, [pc, #28]	; (8008be4 <LmhpComplianceInit+0x20>)
 8008bc8:	4c07      	ldr	r4, [pc, #28]	; (8008be8 <LmhpComplianceInit+0x24>)
  if ((params != NULL) && (dataBuffer != NULL))
 8008bca:	2800      	cmp	r0, #0
 8008bcc:	d007      	beq.n	8008bde <LmhpComplianceInit+0x1a>
 8008bce:	2900      	cmp	r1, #0
 8008bd0:	d005      	beq.n	8008bde <LmhpComplianceInit+0x1a>
  {
    LmhpComplianceParams = (LmhpComplianceParams_t *)params;
    ComplianceTestState.DataBuffer = dataBuffer;
    ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 8008bd2:	719a      	strb	r2, [r3, #6]
    ComplianceTestState.Initialized = true;
 8008bd4:	2201      	movs	r2, #1
    LmhpComplianceParams = (LmhpComplianceParams_t *)params;
 8008bd6:	6020      	str	r0, [r4, #0]
    ComplianceTestState.DataBuffer = dataBuffer;
 8008bd8:	6099      	str	r1, [r3, #8]
  }
  else
  {
    LmhpComplianceParams = NULL;
    ComplianceTestState.Initialized = false;
 8008bda:	701a      	strb	r2, [r3, #0]
  }
}
 8008bdc:	bd10      	pop	{r4, pc}
    LmhpComplianceParams = NULL;
 8008bde:	2200      	movs	r2, #0
 8008be0:	6022      	str	r2, [r4, #0]
 8008be2:	e7fa      	b.n	8008bda <LmhpComplianceInit+0x16>
 8008be4:	200004f0 	.word	0x200004f0
 8008be8:	2000051c 	.word	0x2000051c

08008bec <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized(void)
{
  return ComplianceTestState.Initialized;
 8008bec:	4b01      	ldr	r3, [pc, #4]	; (8008bf4 <LmhpComplianceIsInitialized+0x8>)
 8008bee:	7818      	ldrb	r0, [r3, #0]
}
 8008bf0:	4770      	bx	lr
 8008bf2:	46c0      	nop			; (mov r8, r8)
 8008bf4:	200004f0 	.word	0x200004f0

08008bf8 <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning(void)
{
  if (ComplianceTestState.Initialized == false)
 8008bf8:	4b02      	ldr	r3, [pc, #8]	; (8008c04 <LmhpComplianceIsRunning+0xc>)
 8008bfa:	7818      	ldrb	r0, [r3, #0]
 8008bfc:	2800      	cmp	r0, #0
 8008bfe:	d000      	beq.n	8008c02 <LmhpComplianceIsRunning+0xa>
  {
    return false;
  }

  return ComplianceTestState.IsRunning;
 8008c00:	7858      	ldrb	r0, [r3, #1]
}
 8008c02:	4770      	bx	lr
 8008c04:	200004f0 	.word	0x200004f0

08008c08 <LmhpComplianceProcess>:
}

static void LmhpComplianceProcess(void)
{
  /* Nothing to process */
}
 8008c08:	4770      	bx	lr
	...

08008c0c <LmhpComplianceTxProcess>:
{
 8008c0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  if (ComplianceTestState.Initialized == false)
 8008c0e:	4c1c      	ldr	r4, [pc, #112]	; (8008c80 <LmhpComplianceTxProcess+0x74>)
 8008c10:	7823      	ldrb	r3, [r4, #0]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d030      	beq.n	8008c78 <LmhpComplianceTxProcess+0x6c>
  if (ComplianceTestState.LinkCheck == true)
 8008c16:	7ba2      	ldrb	r2, [r4, #14]
 8008c18:	68a3      	ldr	r3, [r4, #8]
 8008c1a:	2a00      	cmp	r2, #0
 8008c1c:	d01f      	beq.n	8008c5e <LmhpComplianceTxProcess+0x52>
    ComplianceTestState.LinkCheck = false;
 8008c1e:	2200      	movs	r2, #0
 8008c20:	73a2      	strb	r2, [r4, #14]
    ComplianceTestState.DataBufferSize = 3;
 8008c22:	3203      	adds	r2, #3
 8008c24:	71e2      	strb	r2, [r4, #7]
    ComplianceTestState.DataBuffer[0] = 5;
 8008c26:	3202      	adds	r2, #2
 8008c28:	701a      	strb	r2, [r3, #0]
    ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 8008c2a:	7be2      	ldrb	r2, [r4, #15]
 8008c2c:	705a      	strb	r2, [r3, #1]
    ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 8008c2e:	7c22      	ldrb	r2, [r4, #16]
 8008c30:	709a      	strb	r2, [r3, #2]
    ComplianceTestState.State = 1;
 8008c32:	2201      	movs	r2, #1
 8008c34:	70a2      	strb	r2, [r4, #2]
  LmHandlerAppData_t appData =
 8008c36:	4669      	mov	r1, sp
 8008c38:	22e0      	movs	r2, #224	; 0xe0
 8008c3a:	720a      	strb	r2, [r1, #8]
 8008c3c:	79e2      	ldrb	r2, [r4, #7]
 8008c3e:	9303      	str	r3, [sp, #12]
  TimerTime_t nextTxIn = 0;
 8008c40:	2300      	movs	r3, #0
  TimerStart(&ComplianceTxNextPacketTimer);
 8008c42:	4810      	ldr	r0, [pc, #64]	; (8008c84 <LmhpComplianceTxProcess+0x78>)
  LmHandlerAppData_t appData =
 8008c44:	724a      	strb	r2, [r1, #9]
  TimerTime_t nextTxIn = 0;
 8008c46:	9301      	str	r3, [sp, #4]
  TimerStart(&ComplianceTxNextPacketTimer);
 8008c48:	f005 ffd4 	bl	800ebf4 <UTIL_TIMER_Start>
  return LmhpCompliancePackage.OnSendRequest(&appData, (LmHandlerMsgTypes_t)ComplianceTestState.IsTxConfirmed, &nextTxIn,
 8008c4c:	4b0e      	ldr	r3, [pc, #56]	; (8008c88 <LmhpComplianceTxProcess+0x7c>)
 8008c4e:	7921      	ldrb	r1, [r4, #4]
 8008c50:	aa01      	add	r2, sp, #4
 8008c52:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8008c54:	a802      	add	r0, sp, #8
 8008c56:	2301      	movs	r3, #1
 8008c58:	47a0      	blx	r4
}
 8008c5a:	b004      	add	sp, #16
 8008c5c:	bd10      	pop	{r4, pc}
    switch (ComplianceTestState.State)
 8008c5e:	78a2      	ldrb	r2, [r4, #2]
 8008c60:	2a01      	cmp	r2, #1
 8008c62:	d002      	beq.n	8008c6a <LmhpComplianceTxProcess+0x5e>
 8008c64:	2a04      	cmp	r2, #4
 8008c66:	d1e6      	bne.n	8008c36 <LmhpComplianceTxProcess+0x2a>
 8008c68:	e7e3      	b.n	8008c32 <LmhpComplianceTxProcess+0x26>
        ComplianceTestState.DataBufferSize = 2;
 8008c6a:	2202      	movs	r2, #2
 8008c6c:	71e2      	strb	r2, [r4, #7]
        ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 8008c6e:	89a2      	ldrh	r2, [r4, #12]
 8008c70:	0a11      	lsrs	r1, r2, #8
 8008c72:	7019      	strb	r1, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 8008c74:	705a      	strb	r2, [r3, #1]
        break;
 8008c76:	e7de      	b.n	8008c36 <LmhpComplianceTxProcess+0x2a>
    return LORAMAC_HANDLER_ERROR;
 8008c78:	2001      	movs	r0, #1
 8008c7a:	4240      	negs	r0, r0
 8008c7c:	e7ed      	b.n	8008c5a <LmhpComplianceTxProcess+0x4e>
 8008c7e:	46c0      	nop			; (mov r8, r8)
 8008c80:	200004f0 	.word	0x200004f0
 8008c84:	20000504 	.word	0x20000504
 8008c88:	2000014c 	.word	0x2000014c

08008c8c <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent(void *context)
{
 8008c8c:	b510      	push	{r4, lr}
  LmhpComplianceTxProcess();
 8008c8e:	f7ff ffbd 	bl	8008c0c <LmhpComplianceTxProcess>
}
 8008c92:	bd10      	pop	{r4, pc}

08008c94 <LmhpComplianceOnMcpsConfirm>:
  if (ComplianceTestState.Initialized == false)
 8008c94:	4b08      	ldr	r3, [pc, #32]	; (8008cb8 <LmhpComplianceOnMcpsConfirm+0x24>)
 8008c96:	781a      	ldrb	r2, [r3, #0]
 8008c98:	2a00      	cmp	r2, #0
 8008c9a:	d00b      	beq.n	8008cb4 <LmhpComplianceOnMcpsConfirm+0x20>
  if ((ComplianceTestState.IsRunning == true) &&
 8008c9c:	785a      	ldrb	r2, [r3, #1]
 8008c9e:	2a00      	cmp	r2, #0
 8008ca0:	d008      	beq.n	8008cb4 <LmhpComplianceOnMcpsConfirm+0x20>
 8008ca2:	7802      	ldrb	r2, [r0, #0]
 8008ca4:	2a01      	cmp	r2, #1
 8008ca6:	d105      	bne.n	8008cb4 <LmhpComplianceOnMcpsConfirm+0x20>
      (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 8008ca8:	7902      	ldrb	r2, [r0, #4]
 8008caa:	2a00      	cmp	r2, #0
 8008cac:	d002      	beq.n	8008cb4 <LmhpComplianceOnMcpsConfirm+0x20>
    ComplianceTestState.DownLinkCounter++;
 8008cae:	899a      	ldrh	r2, [r3, #12]
 8008cb0:	3201      	adds	r2, #1
 8008cb2:	819a      	strh	r2, [r3, #12]
}
 8008cb4:	4770      	bx	lr
 8008cb6:	46c0      	nop			; (mov r8, r8)
 8008cb8:	200004f0 	.word	0x200004f0

08008cbc <LmhpComplianceOnMlmeConfirm>:
  if (ComplianceTestState.Initialized == false)
 8008cbc:	4b06      	ldr	r3, [pc, #24]	; (8008cd8 <LmhpComplianceOnMlmeConfirm+0x1c>)
 8008cbe:	781a      	ldrb	r2, [r3, #0]
 8008cc0:	2a00      	cmp	r2, #0
 8008cc2:	d008      	beq.n	8008cd6 <LmhpComplianceOnMlmeConfirm+0x1a>
  if (mlmeConfirm->MlmeRequest == MLME_LINK_CHECK)
 8008cc4:	7802      	ldrb	r2, [r0, #0]
 8008cc6:	2a04      	cmp	r2, #4
 8008cc8:	d105      	bne.n	8008cd6 <LmhpComplianceOnMlmeConfirm+0x1a>
    ComplianceTestState.LinkCheck = true;
 8008cca:	3a03      	subs	r2, #3
 8008ccc:	739a      	strb	r2, [r3, #14]
    ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 8008cce:	7a02      	ldrb	r2, [r0, #8]
 8008cd0:	73da      	strb	r2, [r3, #15]
    ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 8008cd2:	7a42      	ldrb	r2, [r0, #9]
 8008cd4:	741a      	strb	r2, [r3, #16]
}
 8008cd6:	4770      	bx	lr
 8008cd8:	200004f0 	.word	0x200004f0

08008cdc <LmhpComplianceOnMcpsIndication>:
{
 8008cdc:	b530      	push	{r4, r5, lr}
  if (ComplianceTestState.Initialized == false)
 8008cde:	4c69      	ldr	r4, [pc, #420]	; (8008e84 <LmhpComplianceOnMcpsIndication+0x1a8>)
{
 8008ce0:	0002      	movs	r2, r0
  if (ComplianceTestState.Initialized == false)
 8008ce2:	7823      	ldrb	r3, [r4, #0]
{
 8008ce4:	b08d      	sub	sp, #52	; 0x34
  if (ComplianceTestState.Initialized == false)
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d046      	beq.n	8008d78 <LmhpComplianceOnMcpsIndication+0x9c>
  if (mcpsIndication->RxData == false)
 8008cea:	7b43      	ldrb	r3, [r0, #13]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d043      	beq.n	8008d78 <LmhpComplianceOnMcpsIndication+0x9c>
  if ((ComplianceTestState.IsRunning == true) &&
 8008cf0:	7865      	ldrb	r5, [r4, #1]
 8008cf2:	2d00      	cmp	r5, #0
 8008cf4:	d005      	beq.n	8008d02 <LmhpComplianceOnMcpsIndication+0x26>
 8008cf6:	7c83      	ldrb	r3, [r0, #18]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d102      	bne.n	8008d02 <LmhpComplianceOnMcpsIndication+0x26>
    ComplianceTestState.DownLinkCounter++;
 8008cfc:	89a3      	ldrh	r3, [r4, #12]
 8008cfe:	3301      	adds	r3, #1
 8008d00:	81a3      	strh	r3, [r4, #12]
  if (mcpsIndication->Port != COMPLIANCE_PORT)
 8008d02:	78d3      	ldrb	r3, [r2, #3]
 8008d04:	2be0      	cmp	r3, #224	; 0xe0
 8008d06:	d137      	bne.n	8008d78 <LmhpComplianceOnMcpsIndication+0x9c>
  if (ComplianceTestState.IsRunning == false)
 8008d08:	2d00      	cmp	r5, #0
 8008d0a:	d137      	bne.n	8008d7c <LmhpComplianceOnMcpsIndication+0xa0>
    if ((mcpsIndication->BufferSize == 4) &&
 8008d0c:	7b11      	ldrb	r1, [r2, #12]
 8008d0e:	2904      	cmp	r1, #4
 8008d10:	d132      	bne.n	8008d78 <LmhpComplianceOnMcpsIndication+0x9c>
        (mcpsIndication->Buffer[0] == 0x01) &&
 8008d12:	6893      	ldr	r3, [r2, #8]
    if ((mcpsIndication->BufferSize == 4) &&
 8008d14:	781a      	ldrb	r2, [r3, #0]
 8008d16:	2a01      	cmp	r2, #1
 8008d18:	d12e      	bne.n	8008d78 <LmhpComplianceOnMcpsIndication+0x9c>
        (mcpsIndication->Buffer[0] == 0x01) &&
 8008d1a:	785a      	ldrb	r2, [r3, #1]
 8008d1c:	2a01      	cmp	r2, #1
 8008d1e:	d12b      	bne.n	8008d78 <LmhpComplianceOnMcpsIndication+0x9c>
        (mcpsIndication->Buffer[1] == 0x01) &&
 8008d20:	789a      	ldrb	r2, [r3, #2]
 8008d22:	2a01      	cmp	r2, #1
 8008d24:	d128      	bne.n	8008d78 <LmhpComplianceOnMcpsIndication+0x9c>
        (mcpsIndication->Buffer[2] == 0x01) &&
 8008d26:	78db      	ldrb	r3, [r3, #3]
 8008d28:	2b01      	cmp	r3, #1
 8008d2a:	d125      	bne.n	8008d78 <LmhpComplianceOnMcpsIndication+0x9c>
      ComplianceTestState.IsTxConfirmed = false;
 8008d2c:	4a56      	ldr	r2, [pc, #344]	; (8008e88 <LmhpComplianceOnMcpsIndication+0x1ac>)
      ComplianceTestState.DownLinkCounter = 0;
 8008d2e:	60e5      	str	r5, [r4, #12]
      ComplianceTestState.IsTxConfirmed = false;
 8008d30:	80a2      	strh	r2, [r4, #4]
      ComplianceTestState.DataBufferSize = 2;
 8008d32:	2202      	movs	r2, #2
 8008d34:	71e2      	strb	r2, [r4, #7]
      mibReq.Type = MIB_ADR;
 8008d36:	466a      	mov	r2, sp
      LoRaMacMibSetRequestConfirm(&mibReq);
 8008d38:	a803      	add	r0, sp, #12
      ComplianceTestState.IsRunning = true;
 8008d3a:	7063      	strb	r3, [r4, #1]
      ComplianceTestState.State = 1;
 8008d3c:	70a3      	strb	r3, [r4, #2]
      mibReq.Param.AdrEnable = true;
 8008d3e:	7413      	strb	r3, [r2, #16]
      mibReq.Type = MIB_ADR;
 8008d40:	7311      	strb	r1, [r2, #12]
      ComplianceTestState.NbGateways = 0;
 8008d42:	7425      	strb	r5, [r4, #16]
      LoRaMacMibSetRequestConfirm(&mibReq);
 8008d44:	f002 f844 	bl	800add0 <LoRaMacMibSetRequestConfirm>
      LoRaMacTestSetDutyCycleOn(false);
 8008d48:	0028      	movs	r0, r5
 8008d4a:	f002 fd19 	bl	800b780 <LoRaMacTestSetDutyCycleOn>
      if (LmhpComplianceParams->StopPeripherals != NULL)
 8008d4e:	4b4f      	ldr	r3, [pc, #316]	; (8008e8c <LmhpComplianceOnMcpsIndication+0x1b0>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	685b      	ldr	r3, [r3, #4]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d000      	beq.n	8008d5a <LmhpComplianceOnMcpsIndication+0x7e>
        LmhpComplianceParams->StopPeripherals();
 8008d58:	4798      	blx	r3
      TimerInit(&ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent);
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	2101      	movs	r1, #1
 8008d5e:	4c4c      	ldr	r4, [pc, #304]	; (8008e90 <LmhpComplianceOnMcpsIndication+0x1b4>)
 8008d60:	4b4c      	ldr	r3, [pc, #304]	; (8008e94 <LmhpComplianceOnMcpsIndication+0x1b8>)
 8008d62:	9200      	str	r2, [sp, #0]
 8008d64:	4249      	negs	r1, r1
 8008d66:	0020      	movs	r0, r4
 8008d68:	f005 fe90 	bl	800ea8c <UTIL_TIMER_Create>
      TimerSetValue(&ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE);
 8008d6c:	494a      	ldr	r1, [pc, #296]	; (8008e98 <LmhpComplianceOnMcpsIndication+0x1bc>)
 8008d6e:	0020      	movs	r0, r4
 8008d70:	f005 ff9c 	bl	800ecac <UTIL_TIMER_SetPeriod>
      LmhpComplianceTxProcess();
 8008d74:	f7ff ff4a 	bl	8008c0c <LmhpComplianceTxProcess>
}
 8008d78:	b00d      	add	sp, #52	; 0x34
 8008d7a:	bd30      	pop	{r4, r5, pc}
    ComplianceTestState.State = mcpsIndication->Buffer[0];
 8008d7c:	6893      	ldr	r3, [r2, #8]
 8008d7e:	7818      	ldrb	r0, [r3, #0]
 8008d80:	70a0      	strb	r0, [r4, #2]
    switch (ComplianceTestState.State)
 8008d82:	280a      	cmp	r0, #10
 8008d84:	d8f8      	bhi.n	8008d78 <LmhpComplianceOnMcpsIndication+0x9c>
 8008d86:	f7f7 f9c7 	bl	8000118 <__gnu_thumb1_case_uqi>
 8008d8a:	062c      	.short	0x062c
 8008d8c:	26110d09 	.word	0x26110d09
 8008d90:	6d6a462c 	.word	0x6d6a462c
 8008d94:	76          	.byte	0x76
 8008d95:	00          	.byte	0x00
        ComplianceTestState.DataBufferSize = 2;
 8008d96:	2302      	movs	r3, #2
 8008d98:	71e3      	strb	r3, [r4, #7]
        break;
 8008d9a:	e7ed      	b.n	8008d78 <LmhpComplianceOnMcpsIndication+0x9c>
        ComplianceTestState.IsTxConfirmed = true;
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	7123      	strb	r3, [r4, #4]
        ComplianceTestState.State = 1;
 8008da0:	70a3      	strb	r3, [r4, #2]
      break;
 8008da2:	e7e9      	b.n	8008d78 <LmhpComplianceOnMcpsIndication+0x9c>
        ComplianceTestState.IsTxConfirmed = false;
 8008da4:	2300      	movs	r3, #0
 8008da6:	7123      	strb	r3, [r4, #4]
        ComplianceTestState.State = 1;
 8008da8:	2301      	movs	r3, #1
 8008daa:	e7f9      	b.n	8008da0 <LmhpComplianceOnMcpsIndication+0xc4>
        ComplianceTestState.DataBuffer[0] = 4;
 8008dac:	2304      	movs	r3, #4
 8008dae:	68a5      	ldr	r5, [r4, #8]
        ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 8008db0:	7b11      	ldrb	r1, [r2, #12]
        ComplianceTestState.DataBuffer[0] = 4;
 8008db2:	702b      	strb	r3, [r5, #0]
        for (uint8_t i = 1; i < MIN(ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize); i++)
 8008db4:	79a0      	ldrb	r0, [r4, #6]
        ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 8008db6:	71e1      	strb	r1, [r4, #7]
        for (uint8_t i = 1; i < MIN(ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize); i++)
 8008db8:	1c03      	adds	r3, r0, #0
 8008dba:	4288      	cmp	r0, r1
 8008dbc:	d900      	bls.n	8008dc0 <LmhpComplianceOnMcpsIndication+0xe4>
 8008dbe:	1c0b      	adds	r3, r1, #0
 8008dc0:	b2d9      	uxtb	r1, r3
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	3301      	adds	r3, #1
 8008dc6:	b2d8      	uxtb	r0, r3
 8008dc8:	4281      	cmp	r1, r0
 8008dca:	d9d5      	bls.n	8008d78 <LmhpComplianceOnMcpsIndication+0x9c>
          ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 8008dcc:	6890      	ldr	r0, [r2, #8]
 8008dce:	5cc0      	ldrb	r0, [r0, r3]
 8008dd0:	3001      	adds	r0, #1
 8008dd2:	54e8      	strb	r0, [r5, r3]
        for (uint8_t i = 1; i < MIN(ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize); i++)
 8008dd4:	e7f6      	b.n	8008dc4 <LmhpComplianceOnMcpsIndication+0xe8>
        mlmeReq.Type = MLME_LINK_CHECK;
 8008dd6:	2304      	movs	r3, #4
 8008dd8:	a803      	add	r0, sp, #12
        mlmeReq.Type = MLME_DEVICE_TIME;
 8008dda:	7003      	strb	r3, [r0, #0]
        LoRaMacMlmeRequest(&mlmeReq);
 8008ddc:	f002 fa16 	bl	800b20c <LoRaMacMlmeRequest>
      break;
 8008de0:	e7ca      	b.n	8008d78 <LmhpComplianceOnMcpsIndication+0x9c>
        TimerStop(&ComplianceTxNextPacketTimer);
 8008de2:	482b      	ldr	r0, [pc, #172]	; (8008e90 <LmhpComplianceOnMcpsIndication+0x1b4>)
 8008de4:	f005 feb2 	bl	800eb4c <UTIL_TIMER_Stop>
        ComplianceTestState.DownLinkCounter = 0;
 8008de8:	2300      	movs	r3, #0
        mibReq.Type = MIB_ADR;
 8008dea:	466a      	mov	r2, sp
        ComplianceTestState.IsRunning = false;
 8008dec:	7063      	strb	r3, [r4, #1]
        ComplianceTestState.DownLinkCounter = 0;
 8008dee:	81a3      	strh	r3, [r4, #12]
        mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8008df0:	4c26      	ldr	r4, [pc, #152]	; (8008e8c <LmhpComplianceOnMcpsIndication+0x1b0>)
        mibReq.Type = MIB_ADR;
 8008df2:	3304      	adds	r3, #4
 8008df4:	7313      	strb	r3, [r2, #12]
        mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8008df6:	6823      	ldr	r3, [r4, #0]
        LoRaMacMibSetRequestConfirm(&mibReq);
 8008df8:	a803      	add	r0, sp, #12
        mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 8008dfa:	781b      	ldrb	r3, [r3, #0]
 8008dfc:	7413      	strb	r3, [r2, #16]
        LoRaMacMibSetRequestConfirm(&mibReq);
 8008dfe:	f001 ffe7 	bl	800add0 <LoRaMacMibSetRequestConfirm>
        LoRaMacTestSetDutyCycleOn(LmhpComplianceParams->DutyCycleEnabled);
 8008e02:	6823      	ldr	r3, [r4, #0]
 8008e04:	7858      	ldrb	r0, [r3, #1]
 8008e06:	f002 fcbb 	bl	800b780 <LoRaMacTestSetDutyCycleOn>
        if (LmhpComplianceParams->StartPeripherals != NULL)
 8008e0a:	6823      	ldr	r3, [r4, #0]
 8008e0c:	689b      	ldr	r3, [r3, #8]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d0b2      	beq.n	8008d78 <LmhpComplianceOnMcpsIndication+0x9c>
          LmhpComplianceParams->StartPeripherals();
 8008e12:	4798      	blx	r3
      break;
 8008e14:	e7b0      	b.n	8008d78 <LmhpComplianceOnMcpsIndication+0x9c>
        if (mcpsIndication->BufferSize == 3)
 8008e16:	7b12      	ldrb	r2, [r2, #12]
 8008e18:	a803      	add	r0, sp, #12
 8008e1a:	2a03      	cmp	r2, #3
 8008e1c:	d109      	bne.n	8008e32 <LmhpComplianceOnMcpsIndication+0x156>
          mlmeReq.Type = MLME_TXCW;
 8008e1e:	3202      	adds	r2, #2
 8008e20:	7002      	strb	r2, [r0, #0]
          mlmeReq.Req.TxCw.Timeout = (uint16_t)((mcpsIndication->Buffer[1] << 8) | mcpsIndication->Buffer[2]);
 8008e22:	785a      	ldrb	r2, [r3, #1]
 8008e24:	789b      	ldrb	r3, [r3, #2]
 8008e26:	0212      	lsls	r2, r2, #8
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	8083      	strh	r3, [r0, #4]
        LoRaMacMlmeRequest(&mlmeReq);
 8008e2c:	f002 f9ee 	bl	800b20c <LoRaMacMlmeRequest>
 8008e30:	e7ba      	b.n	8008da8 <LmhpComplianceOnMcpsIndication+0xcc>
        else if (mcpsIndication->BufferSize == 7)
 8008e32:	2a07      	cmp	r2, #7
 8008e34:	d1fa      	bne.n	8008e2c <LmhpComplianceOnMcpsIndication+0x150>
          mlmeReq.Type = MLME_TXCW_1;
 8008e36:	3a01      	subs	r2, #1
 8008e38:	7002      	strb	r2, [r0, #0]
          mlmeReq.Req.TxCw.Timeout = (uint16_t)((mcpsIndication->Buffer[1] << 8) | mcpsIndication->Buffer[2]);
 8008e3a:	7859      	ldrb	r1, [r3, #1]
 8008e3c:	789a      	ldrb	r2, [r3, #2]
 8008e3e:	0209      	lsls	r1, r1, #8
 8008e40:	430a      	orrs	r2, r1
 8008e42:	8082      	strh	r2, [r0, #4]
          mlmeReq.Req.TxCw.Frequency = (uint32_t)((mcpsIndication->Buffer[3] << 16) | (mcpsIndication->Buffer[4] << 8) | mcpsIndication->Buffer[5]) * 100;
 8008e44:	78da      	ldrb	r2, [r3, #3]
 8008e46:	7919      	ldrb	r1, [r3, #4]
 8008e48:	0412      	lsls	r2, r2, #16
 8008e4a:	0209      	lsls	r1, r1, #8
 8008e4c:	430a      	orrs	r2, r1
 8008e4e:	7959      	ldrb	r1, [r3, #5]
 8008e50:	430a      	orrs	r2, r1
 8008e52:	2164      	movs	r1, #100	; 0x64
 8008e54:	434a      	muls	r2, r1
 8008e56:	6082      	str	r2, [r0, #8]
          mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 8008e58:	799b      	ldrb	r3, [r3, #6]
 8008e5a:	7303      	strb	r3, [r0, #12]
 8008e5c:	e7e6      	b.n	8008e2c <LmhpComplianceOnMcpsIndication+0x150>
        mlmeReq.Type = MLME_DEVICE_TIME;
 8008e5e:	230a      	movs	r3, #10
 8008e60:	a803      	add	r0, sp, #12
 8008e62:	e7ba      	b.n	8008dda <LmhpComplianceOnMcpsIndication+0xfe>
        mibReq.Type = MIB_DEVICE_CLASS;
 8008e64:	4669      	mov	r1, sp
 8008e66:	2200      	movs	r2, #0
 8008e68:	730a      	strb	r2, [r1, #12]
        mibReq.Param.Class = (DeviceClass_t)mcpsIndication->Buffer[1];;
 8008e6a:	785b      	ldrb	r3, [r3, #1]
        LoRaMacMibSetRequestConfirm(&mibReq);
 8008e6c:	a803      	add	r0, sp, #12
        mibReq.Param.Class = (DeviceClass_t)mcpsIndication->Buffer[1];;
 8008e6e:	740b      	strb	r3, [r1, #16]
        LoRaMacMibSetRequestConfirm(&mibReq);
 8008e70:	f001 ffae 	bl	800add0 <LoRaMacMibSetRequestConfirm>
      break;
 8008e74:	e780      	b.n	8008d78 <LmhpComplianceOnMcpsIndication+0x9c>
        mlmeReq.Type = MLME_PING_SLOT_INFO;
 8008e76:	4669      	mov	r1, sp
 8008e78:	220d      	movs	r2, #13
 8008e7a:	730a      	strb	r2, [r1, #12]
        mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 8008e7c:	785b      	ldrb	r3, [r3, #1]
        LoRaMacMlmeRequest(&mlmeReq);
 8008e7e:	a803      	add	r0, sp, #12
        mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 8008e80:	740b      	strb	r3, [r1, #16]
        LoRaMacMlmeRequest(&mlmeReq);
 8008e82:	e7ab      	b.n	8008ddc <LmhpComplianceOnMcpsIndication+0x100>
 8008e84:	200004f0 	.word	0x200004f0
 8008e88:	ffffe000 	.word	0xffffe000
 8008e8c:	2000051c 	.word	0x2000051c
 8008e90:	20000504 	.word	0x20000504
 8008e94:	08008c8d 	.word	0x08008c8d
 8008e98:	00001388 	.word	0x00001388

08008e9c <LmphCompliancePackageFactory>:
}
 8008e9c:	4800      	ldr	r0, [pc, #0]	; (8008ea0 <LmphCompliancePackageFactory+0x4>)
 8008e9e:	4770      	bx	lr
 8008ea0:	2000014c 	.word	0x2000014c

08008ea4 <OnRadioRxError>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
}

static void OnRadioRxError( void )
{
    LoRaMacRadioEvents.Events.RxError = 1;
 8008ea4:	2302      	movs	r3, #2
 8008ea6:	4a08      	ldr	r2, [pc, #32]	; (8008ec8 <OnRadioRxError+0x24>)
{
 8008ea8:	b510      	push	{r4, lr}
    LoRaMacRadioEvents.Events.RxError = 1;
 8008eaa:	7811      	ldrb	r1, [r2, #0]
 8008eac:	430b      	orrs	r3, r1
 8008eae:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8008eb0:	23d2      	movs	r3, #210	; 0xd2
 8008eb2:	4a06      	ldr	r2, [pc, #24]	; (8008ecc <OnRadioRxError+0x28>)
 8008eb4:	009b      	lsls	r3, r3, #2
 8008eb6:	58d3      	ldr	r3, [r2, r3]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d003      	beq.n	8008ec4 <OnRadioRxError+0x20>
 8008ebc:	68db      	ldr	r3, [r3, #12]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d000      	beq.n	8008ec4 <OnRadioRxError+0x20>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 8008ec2:	4798      	blx	r3
    }
}
 8008ec4:	bd10      	pop	{r4, pc}
 8008ec6:	46c0      	nop			; (mov r8, r8)
 8008ec8:	20000558 	.word	0x20000558
 8008ecc:	2000055c 	.word	0x2000055c

08008ed0 <UpdateRxSlotIdleState>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}

static void UpdateRxSlotIdleState( void )
{
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8008ed0:	4a05      	ldr	r2, [pc, #20]	; (8008ee8 <UpdateRxSlotIdleState+0x18>)
 8008ed2:	4b06      	ldr	r3, [pc, #24]	; (8008eec <UpdateRxSlotIdleState+0x1c>)
 8008ed4:	58d3      	ldr	r3, [r2, r3]
 8008ed6:	337c      	adds	r3, #124	; 0x7c
 8008ed8:	781b      	ldrb	r3, [r3, #0]
 8008eda:	2b02      	cmp	r3, #2
 8008edc:	d000      	beq.n	8008ee0 <UpdateRxSlotIdleState+0x10>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 8008ede:	2306      	movs	r3, #6
 8008ee0:	2190      	movs	r1, #144	; 0x90
 8008ee2:	00c9      	lsls	r1, r1, #3
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 8008ee4:	5453      	strb	r3, [r2, r1]
 8008ee6:	4770      	bx	lr
 8008ee8:	2000055c 	.word	0x2000055c
 8008eec:	00000484 	.word	0x00000484

08008ef0 <StopRetransmission>:
    return false;
}

static bool StopRetransmission( void )
{
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8008ef0:	4b11      	ldr	r3, [pc, #68]	; (8008f38 <StopRetransmission+0x48>)
 8008ef2:	4a12      	ldr	r2, [pc, #72]	; (8008f3c <StopRetransmission+0x4c>)
 8008ef4:	5c9a      	ldrb	r2, [r3, r2]
 8008ef6:	0792      	lsls	r2, r2, #30
 8008ef8:	d503      	bpl.n	8008f02 <StopRetransmission+0x12>
        ( ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_1 ) &&
 8008efa:	4a11      	ldr	r2, [pc, #68]	; (8008f40 <StopRetransmission+0x50>)
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8008efc:	5c9a      	ldrb	r2, [r3, r2]
 8008efe:	2a01      	cmp	r2, #1
 8008f00:	d90a      	bls.n	8008f18 <StopRetransmission+0x28>
          ( MacCtx.McpsIndication.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( MacCtx.NvmCtx->AdrCtrlOn == true )
 8008f02:	4a10      	ldr	r2, [pc, #64]	; (8008f44 <StopRetransmission+0x54>)
 8008f04:	589a      	ldr	r2, [r3, r2]
 8008f06:	0011      	movs	r1, r2
 8008f08:	317e      	adds	r1, #126	; 0x7e
 8008f0a:	7809      	ldrb	r1, [r1, #0]
 8008f0c:	2900      	cmp	r1, #0
 8008f0e:	d003      	beq.n	8008f18 <StopRetransmission+0x28>
        {
            MacCtx.NvmCtx->AdrAckCounter++;
 8008f10:	3204      	adds	r2, #4
 8008f12:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
 8008f14:	3101      	adds	r1, #1
 8008f16:	67d1      	str	r1, [r2, #124]	; 0x7c
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8008f18:	2182      	movs	r1, #130	; 0x82
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	00c9      	lsls	r1, r1, #3
 8008f1e:	545a      	strb	r2, [r3, r1]
    MacCtx.NodeAckRequested = false;
 8008f20:	4909      	ldr	r1, [pc, #36]	; (8008f48 <StopRetransmission+0x58>)
 8008f22:	545a      	strb	r2, [r3, r1]
    MacCtx.AckTimeoutRetry = false;
 8008f24:	4909      	ldr	r1, [pc, #36]	; (8008f4c <StopRetransmission+0x5c>)
 8008f26:	545a      	strb	r2, [r3, r1]
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8008f28:	39d3      	subs	r1, #211	; 0xd3
 8008f2a:	5858      	ldr	r0, [r3, r1]
 8008f2c:	3202      	adds	r2, #2
 8008f2e:	4390      	bics	r0, r2
 8008f30:	5058      	str	r0, [r3, r1]

    return true;
}
 8008f32:	2001      	movs	r0, #1
 8008f34:	4770      	bx	lr
 8008f36:	46c0      	nop			; (mov r8, r8)
 8008f38:	2000055c 	.word	0x2000055c
 8008f3c:	00000481 	.word	0x00000481
 8008f40:	0000042d 	.word	0x0000042d
 8008f44:	00000484 	.word	0x00000484
 8008f48:	00000414 	.word	0x00000414
 8008f4c:	00000413 	.word	0x00000413

08008f50 <CallNvmCtxCallback>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}

static void CallNvmCtxCallback( LoRaMacNvmCtxModule_t module )
{
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmContextChange != NULL ) )
 8008f50:	23d2      	movs	r3, #210	; 0xd2
 8008f52:	4a05      	ldr	r2, [pc, #20]	; (8008f68 <CallNvmCtxCallback+0x18>)
 8008f54:	009b      	lsls	r3, r3, #2
 8008f56:	58d3      	ldr	r3, [r2, r3]
{
 8008f58:	b510      	push	{r4, lr}
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmContextChange != NULL ) )
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d003      	beq.n	8008f66 <CallNvmCtxCallback+0x16>
 8008f5e:	689b      	ldr	r3, [r3, #8]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d000      	beq.n	8008f66 <CallNvmCtxCallback+0x16>
    {
        MacCtx.MacCallbacks->NvmContextChange( module );
 8008f64:	4798      	blx	r3
    }
}
 8008f66:	bd10      	pop	{r4, pc}
 8008f68:	2000055c 	.word	0x2000055c

08008f6c <EventMacNvmCtxChanged>:

static void EventMacNvmCtxChanged( void )
{
 8008f6c:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_MAC );
 8008f6e:	2000      	movs	r0, #0
 8008f70:	f7ff ffee 	bl	8008f50 <CallNvmCtxCallback>
}
 8008f74:	bd10      	pop	{r4, pc}

08008f76 <EventRegionNvmCtxChanged>:

static void EventRegionNvmCtxChanged( void )
{
 8008f76:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_REGION );
 8008f78:	2001      	movs	r0, #1
 8008f7a:	f7ff ffe9 	bl	8008f50 <CallNvmCtxCallback>
}
 8008f7e:	bd10      	pop	{r4, pc}

08008f80 <EventCryptoNvmCtxChanged>:

static void EventCryptoNvmCtxChanged( void )
{
 8008f80:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CRYPTO );
 8008f82:	2002      	movs	r0, #2
 8008f84:	f7ff ffe4 	bl	8008f50 <CallNvmCtxCallback>
}
 8008f88:	bd10      	pop	{r4, pc}

08008f8a <EventSecureElementNvmCtxChanged>:

static void EventSecureElementNvmCtxChanged( void )
{
 8008f8a:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_SECURE_ELEMENT );
 8008f8c:	2003      	movs	r0, #3
 8008f8e:	f7ff ffdf 	bl	8008f50 <CallNvmCtxCallback>
}
 8008f92:	bd10      	pop	{r4, pc}

08008f94 <EventCommandsNvmCtxChanged>:

static void EventCommandsNvmCtxChanged( void )
{
 8008f94:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_COMMANDS );
 8008f96:	2004      	movs	r0, #4
 8008f98:	f7ff ffda 	bl	8008f50 <CallNvmCtxCallback>
}
 8008f9c:	bd10      	pop	{r4, pc}

08008f9e <EventConfirmQueueNvmCtxChanged>:
{
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CLASS_B );
}
*/
static void EventConfirmQueueNvmCtxChanged( void )
{
 8008f9e:	b510      	push	{r4, lr}
    CallNvmCtxCallback( LORAMAC_NVMCTXMODULE_CONFIRM_QUEUE );
 8008fa0:	2006      	movs	r0, #6
 8008fa2:	f7ff ffd5 	bl	8008f50 <CallNvmCtxCallback>
}
 8008fa6:	bd10      	pop	{r4, pc}

08008fa8 <GetMaxAppPayloadWithoutFOptsLength>:
{
 8008fa8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8008faa:	4a0c      	ldr	r2, [pc, #48]	; (8008fdc <GetMaxAppPayloadWithoutFOptsLength+0x34>)
 8008fac:	4b0c      	ldr	r3, [pc, #48]	; (8008fe0 <GetMaxAppPayloadWithoutFOptsLength+0x38>)
 8008fae:	a902      	add	r1, sp, #8
 8008fb0:	58d3      	ldr	r3, [r2, r3]
 8008fb2:	001a      	movs	r2, r3
 8008fb4:	32b8      	adds	r2, #184	; 0xb8
 8008fb6:	7812      	ldrb	r2, [r2, #0]
    getPhy.Datarate = datarate;
 8008fb8:	7048      	strb	r0, [r1, #1]
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8008fba:	708a      	strb	r2, [r1, #2]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 8008fbc:	220d      	movs	r2, #13
 8008fbe:	700a      	strb	r2, [r1, #0]
    if( MacCtx.NvmCtx->RepeaterSupport == true )
 8008fc0:	001a      	movs	r2, r3
 8008fc2:	32ca      	adds	r2, #202	; 0xca
 8008fc4:	7812      	ldrb	r2, [r2, #0]
 8008fc6:	2a00      	cmp	r2, #0
 8008fc8:	d001      	beq.n	8008fce <GetMaxAppPayloadWithoutFOptsLength+0x26>
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8008fca:	220e      	movs	r2, #14
 8008fcc:	700a      	strb	r2, [r1, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8008fce:	7818      	ldrb	r0, [r3, #0]
 8008fd0:	f003 f9f9 	bl	800c3c6 <RegionGetPhyParam>
    return phyParam.Value;
 8008fd4:	b2c0      	uxtb	r0, r0
}
 8008fd6:	b005      	add	sp, #20
 8008fd8:	bd00      	pop	{pc}
 8008fda:	46c0      	nop			; (mov r8, r8)
 8008fdc:	2000055c 	.word	0x2000055c
 8008fe0:	00000484 	.word	0x00000484

08008fe4 <OnAckTimeoutTimerEvent>:
{
 8008fe4:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.AckTimeoutTimer );
 8008fe6:	4810      	ldr	r0, [pc, #64]	; (8009028 <OnAckTimeoutTimerEvent+0x44>)
 8008fe8:	f005 fdb0 	bl	800eb4c <UTIL_TIMER_Stop>
    if( MacCtx.NodeAckRequested == true )
 8008fec:	4b0f      	ldr	r3, [pc, #60]	; (800902c <OnAckTimeoutTimerEvent+0x48>)
 8008fee:	4a10      	ldr	r2, [pc, #64]	; (8009030 <OnAckTimeoutTimerEvent+0x4c>)
 8008ff0:	5c9a      	ldrb	r2, [r3, r2]
 8008ff2:	2a00      	cmp	r2, #0
 8008ff4:	d002      	beq.n	8008ffc <OnAckTimeoutTimerEvent+0x18>
        MacCtx.AckTimeoutRetry = true;
 8008ff6:	2101      	movs	r1, #1
 8008ff8:	4a0e      	ldr	r2, [pc, #56]	; (8009034 <OnAckTimeoutTimerEvent+0x50>)
 8008ffa:	5499      	strb	r1, [r3, r2]
    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 8008ffc:	4a0e      	ldr	r2, [pc, #56]	; (8009038 <OnAckTimeoutTimerEvent+0x54>)
 8008ffe:	589a      	ldr	r2, [r3, r2]
 8009000:	327c      	adds	r2, #124	; 0x7c
 8009002:	7812      	ldrb	r2, [r2, #0]
 8009004:	2a02      	cmp	r2, #2
 8009006:	d104      	bne.n	8009012 <OnAckTimeoutTimerEvent+0x2e>
        MacCtx.MacFlags.Bits.MacDone = 1;
 8009008:	490c      	ldr	r1, [pc, #48]	; (800903c <OnAckTimeoutTimerEvent+0x58>)
 800900a:	321e      	adds	r2, #30
 800900c:	5c58      	ldrb	r0, [r3, r1]
 800900e:	4302      	orrs	r2, r0
 8009010:	545a      	strb	r2, [r3, r1]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8009012:	22d2      	movs	r2, #210	; 0xd2
 8009014:	0092      	lsls	r2, r2, #2
 8009016:	589b      	ldr	r3, [r3, r2]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d003      	beq.n	8009024 <OnAckTimeoutTimerEvent+0x40>
 800901c:	68db      	ldr	r3, [r3, #12]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d000      	beq.n	8009024 <OnAckTimeoutTimerEvent+0x40>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8009022:	4798      	blx	r3
}
 8009024:	bd10      	pop	{r4, pc}
 8009026:	46c0      	nop			; (mov r8, r8)
 8009028:	20000954 	.word	0x20000954
 800902c:	2000055c 	.word	0x2000055c
 8009030:	00000414 	.word	0x00000414
 8009034:	00000413 	.word	0x00000413
 8009038:	00000484 	.word	0x00000484
 800903c:	00000481 	.word	0x00000481

08009040 <PrepareRxDoneAbort>:
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 8009040:	22d0      	movs	r2, #208	; 0xd0
 8009042:	2380      	movs	r3, #128	; 0x80
{
 8009044:	b510      	push	{r4, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 8009046:	4c0a      	ldr	r4, [pc, #40]	; (8009070 <PrepareRxDoneAbort+0x30>)
 8009048:	0092      	lsls	r2, r2, #2
 800904a:	58a1      	ldr	r1, [r4, r2]
 800904c:	430b      	orrs	r3, r1
 800904e:	50a3      	str	r3, [r4, r2]
    if( MacCtx.NodeAckRequested == true )
 8009050:	4b08      	ldr	r3, [pc, #32]	; (8009074 <PrepareRxDoneAbort+0x34>)
 8009052:	5ce3      	ldrb	r3, [r4, r3]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d002      	beq.n	800905e <PrepareRxDoneAbort+0x1e>
        OnAckTimeoutTimerEvent( NULL );
 8009058:	2000      	movs	r0, #0
 800905a:	f7ff ffc3 	bl	8008fe4 <OnAckTimeoutTimerEvent>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 800905e:	2322      	movs	r3, #34	; 0x22
 8009060:	4905      	ldr	r1, [pc, #20]	; (8009078 <PrepareRxDoneAbort+0x38>)
 8009062:	5c62      	ldrb	r2, [r4, r1]
 8009064:	439a      	bics	r2, r3
 8009066:	4313      	orrs	r3, r2
 8009068:	5463      	strb	r3, [r4, r1]
    UpdateRxSlotIdleState( );
 800906a:	f7ff ff31 	bl	8008ed0 <UpdateRxSlotIdleState>
}
 800906e:	bd10      	pop	{r4, pc}
 8009070:	2000055c 	.word	0x2000055c
 8009074:	00000414 	.word	0x00000414
 8009078:	00000481 	.word	0x00000481

0800907c <OnRadioRxTimeout>:
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800907c:	2301      	movs	r3, #1
 800907e:	4a0b      	ldr	r2, [pc, #44]	; (80090ac <OnRadioRxTimeout+0x30>)
{
 8009080:	b510      	push	{r4, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 8009082:	7811      	ldrb	r1, [r2, #0]
 8009084:	430b      	orrs	r3, r1
 8009086:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8009088:	23d2      	movs	r3, #210	; 0xd2
 800908a:	4a09      	ldr	r2, [pc, #36]	; (80090b0 <OnRadioRxTimeout+0x34>)
 800908c:	009b      	lsls	r3, r3, #2
 800908e:	58d3      	ldr	r3, [r2, r3]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d003      	beq.n	800909c <OnRadioRxTimeout+0x20>
 8009094:	68db      	ldr	r3, [r3, #12]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d000      	beq.n	800909c <OnRadioRxTimeout+0x20>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800909a:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800909c:	2201      	movs	r2, #1
 800909e:	2100      	movs	r1, #0
 80090a0:	2002      	movs	r0, #2
 80090a2:	4b04      	ldr	r3, [pc, #16]	; (80090b4 <OnRadioRxTimeout+0x38>)
 80090a4:	f005 ff20 	bl	800eee8 <UTIL_ADV_TRACE_COND_FSend>
}
 80090a8:	bd10      	pop	{r4, pc}
 80090aa:	46c0      	nop			; (mov r8, r8)
 80090ac:	20000558 	.word	0x20000558
 80090b0:	2000055c 	.word	0x2000055c
 80090b4:	0800fa99 	.word	0x0800fa99

080090b8 <OnRadioTxTimeout>:
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 80090b8:	2304      	movs	r3, #4
 80090ba:	4a0b      	ldr	r2, [pc, #44]	; (80090e8 <OnRadioTxTimeout+0x30>)
{
 80090bc:	b510      	push	{r4, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 80090be:	7811      	ldrb	r1, [r2, #0]
 80090c0:	430b      	orrs	r3, r1
 80090c2:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80090c4:	23d2      	movs	r3, #210	; 0xd2
 80090c6:	4a09      	ldr	r2, [pc, #36]	; (80090ec <OnRadioTxTimeout+0x34>)
 80090c8:	009b      	lsls	r3, r3, #2
 80090ca:	58d3      	ldr	r3, [r2, r3]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d003      	beq.n	80090d8 <OnRadioTxTimeout+0x20>
 80090d0:	68db      	ldr	r3, [r3, #12]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d000      	beq.n	80090d8 <OnRadioTxTimeout+0x20>
        MacCtx.MacCallbacks->MacProcessNotify( );
 80090d6:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 80090d8:	2201      	movs	r2, #1
 80090da:	2100      	movs	r1, #0
 80090dc:	2002      	movs	r0, #2
 80090de:	4b04      	ldr	r3, [pc, #16]	; (80090f0 <OnRadioTxTimeout+0x38>)
 80090e0:	f005 ff02 	bl	800eee8 <UTIL_ADV_TRACE_COND_FSend>
}
 80090e4:	bd10      	pop	{r4, pc}
 80090e6:	46c0      	nop			; (mov r8, r8)
 80090e8:	20000558 	.word	0x20000558
 80090ec:	2000055c 	.word	0x2000055c
 80090f0:	0800faa9 	.word	0x0800faa9

080090f4 <HandleRadioRxErrorTimeout>:
{
 80090f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 80090f6:	4c1e      	ldr	r4, [pc, #120]	; (8009170 <HandleRadioRxErrorTimeout+0x7c>)
 80090f8:	4d1e      	ldr	r5, [pc, #120]	; (8009174 <HandleRadioRxErrorTimeout+0x80>)
{
 80090fa:	0007      	movs	r7, r0
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 80090fc:	5963      	ldr	r3, [r4, r5]
{
 80090fe:	000e      	movs	r6, r1
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8009100:	337c      	adds	r3, #124	; 0x7c
 8009102:	781b      	ldrb	r3, [r3, #0]
 8009104:	2b02      	cmp	r3, #2
 8009106:	d003      	beq.n	8009110 <HandleRadioRxErrorTimeout+0x1c>
        Radio.Sleep( );
 8009108:	4b1b      	ldr	r3, [pc, #108]	; (8009178 <HandleRadioRxErrorTimeout+0x84>)
 800910a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800910c:	9301      	str	r3, [sp, #4]
 800910e:	4798      	blx	r3
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8009110:	2290      	movs	r2, #144	; 0x90
 8009112:	00d2      	lsls	r2, r2, #3
 8009114:	4b19      	ldr	r3, [pc, #100]	; (800917c <HandleRadioRxErrorTimeout+0x88>)
 8009116:	5ca2      	ldrb	r2, [r4, r2]
 8009118:	5ce3      	ldrb	r3, [r4, r3]
 800911a:	2a00      	cmp	r2, #0
 800911c:	d119      	bne.n	8009152 <HandleRadioRxErrorTimeout+0x5e>
            if( MacCtx.NodeAckRequested == true )
 800911e:	2b00      	cmp	r3, #0
 8009120:	d001      	beq.n	8009126 <HandleRadioRxErrorTimeout+0x32>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8009122:	4b17      	ldr	r3, [pc, #92]	; (8009180 <HandleRadioRxErrorTimeout+0x8c>)
 8009124:	54e7      	strb	r7, [r4, r3]
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 8009126:	0038      	movs	r0, r7
 8009128:	f002 fd82 	bl	800bc30 <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( MacCtx.NvmCtx->LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800912c:	5963      	ldr	r3, [r4, r5]
 800912e:	33fc      	adds	r3, #252	; 0xfc
 8009130:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8009132:	f005 fcd1 	bl	800ead8 <UTIL_TIMER_GetElapsedTime>
 8009136:	23ed      	movs	r3, #237	; 0xed
 8009138:	009b      	lsls	r3, r3, #2
 800913a:	58e3      	ldr	r3, [r4, r3]
 800913c:	4298      	cmp	r0, r3
 800913e:	d314      	bcc.n	800916a <HandleRadioRxErrorTimeout+0x76>
                TimerStop( &MacCtx.RxWindowTimer2 );
 8009140:	4810      	ldr	r0, [pc, #64]	; (8009184 <HandleRadioRxErrorTimeout+0x90>)
 8009142:	f005 fd03 	bl	800eb4c <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8009146:	2320      	movs	r3, #32
 8009148:	4a0f      	ldr	r2, [pc, #60]	; (8009188 <HandleRadioRxErrorTimeout+0x94>)
 800914a:	5ca1      	ldrb	r1, [r4, r2]
 800914c:	430b      	orrs	r3, r1
 800914e:	54a3      	strb	r3, [r4, r2]
 8009150:	e00b      	b.n	800916a <HandleRadioRxErrorTimeout+0x76>
            if( MacCtx.NodeAckRequested == true )
 8009152:	2b00      	cmp	r3, #0
 8009154:	d001      	beq.n	800915a <HandleRadioRxErrorTimeout+0x66>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 8009156:	4b0a      	ldr	r3, [pc, #40]	; (8009180 <HandleRadioRxErrorTimeout+0x8c>)
 8009158:	54e6      	strb	r6, [r4, r3]
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800915a:	0030      	movs	r0, r6
 800915c:	f002 fd68 	bl	800bc30 <LoRaMacConfirmQueueSetStatusCmn>
            if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8009160:	5963      	ldr	r3, [r4, r5]
 8009162:	337c      	adds	r3, #124	; 0x7c
 8009164:	781b      	ldrb	r3, [r3, #0]
 8009166:	2b02      	cmp	r3, #2
 8009168:	d1ed      	bne.n	8009146 <HandleRadioRxErrorTimeout+0x52>
    UpdateRxSlotIdleState( );
 800916a:	f7ff feb1 	bl	8008ed0 <UpdateRxSlotIdleState>
}
 800916e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8009170:	2000055c 	.word	0x2000055c
 8009174:	00000484 	.word	0x00000484
 8009178:	0800fd8c 	.word	0x0800fd8c
 800917c:	00000414 	.word	0x00000414
 8009180:	0000043d 	.word	0x0000043d
 8009184:	200008f4 	.word	0x200008f4
 8009188:	00000481 	.word	0x00000481

0800918c <ResetMacParameters>:
{
 800918c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_NONE;
 800918e:	22b2      	movs	r2, #178	; 0xb2
 8009190:	2500      	movs	r5, #0
 8009192:	4c2e      	ldr	r4, [pc, #184]	; (800924c <ResetMacParameters+0xc0>)
 8009194:	4e2e      	ldr	r6, [pc, #184]	; (8009250 <ResetMacParameters+0xc4>)
 8009196:	0052      	lsls	r2, r2, #1
 8009198:	59a3      	ldr	r3, [r4, r6]
    MacCtx.ChannelsNbTransCounter = 0;
 800919a:	492e      	ldr	r1, [pc, #184]	; (8009254 <ResetMacParameters+0xc8>)
    MacCtx.NvmCtx->NetworkActivation = ACTIVATION_TYPE_NONE;
 800919c:	549d      	strb	r5, [r3, r2]
    MacCtx.NvmCtx->AdrAckCounter = 0;
 800919e:	1d1a      	adds	r2, r3, #4
 80091a0:	67d5      	str	r5, [r2, #124]	; 0x7c
    MacCtx.ChannelsNbTransCounter = 0;
 80091a2:	2282      	movs	r2, #130	; 0x82
 80091a4:	00d2      	lsls	r2, r2, #3
 80091a6:	50a1      	str	r1, [r4, r2]
    MacCtx.NvmCtx->MaxDCycle = 0;
 80091a8:	001a      	movs	r2, r3
 80091aa:	32c8      	adds	r2, #200	; 0xc8
 80091ac:	7015      	strb	r5, [r2, #0]
    MacCtx.NvmCtx->AggregatedDCycle = 1;
 80091ae:	2201      	movs	r2, #1
 80091b0:	4694      	mov	ip, r2
 80091b2:	4661      	mov	r1, ip
 80091b4:	324c      	adds	r2, #76	; 0x4c
 80091b6:	32ff      	adds	r2, #255	; 0xff
 80091b8:	5299      	strh	r1, [r3, r2]
    MacCtx.NvmCtx->MacParams.ChannelsTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 80091ba:	001a      	movs	r2, r3
 80091bc:	8899      	ldrh	r1, [r3, #4]
 80091be:	3284      	adds	r2, #132	; 0x84
 80091c0:	8011      	strh	r1, [r2, #0]
    MacCtx.NvmCtx->MacParams.Rx1DrOffset = MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset;
 80091c2:	1d99      	adds	r1, r3, #6
 80091c4:	7fc9      	ldrb	r1, [r1, #31]
 80091c6:	3221      	adds	r2, #33	; 0x21
 80091c8:	7011      	strb	r1, [r2, #0]
    MacCtx.NvmCtx->MacParams.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 80091ca:	0019      	movs	r1, r3
 80091cc:	3a7d      	subs	r2, #125	; 0x7d
 80091ce:	31a8      	adds	r1, #168	; 0xa8
 80091d0:	ca81      	ldmia	r2!, {r0, r7}
 80091d2:	c181      	stmia	r1!, {r0, r7}
    MacCtx.NvmCtx->MacParams.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 80091d4:	ca81      	ldmia	r2!, {r0, r7}
 80091d6:	c181      	stmia	r1!, {r0, r7}
    MacCtx.NvmCtx->MacParams.UplinkDwellTime = MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime;
 80091d8:	8f19      	ldrh	r1, [r3, #56]	; 0x38
 80091da:	3280      	adds	r2, #128	; 0x80
 80091dc:	8011      	strh	r1, [r2, #0]
    MacCtx.NvmCtx->MacParams.MaxEirp = MacCtx.NvmCtx->MacParamsDefaults.MaxEirp;
 80091de:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    params.NvmCtx = NULL;
 80091e0:	9500      	str	r5, [sp, #0]
    MacCtx.NvmCtx->MacParams.MaxEirp = MacCtx.NvmCtx->MacParamsDefaults.MaxEirp;
 80091e2:	6051      	str	r1, [r2, #4]
    MacCtx.NvmCtx->MacParams.AntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 80091e4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80091e6:	6091      	str	r1, [r2, #8]
    MacCtx.NodeAckRequested = false;
 80091e8:	4a1b      	ldr	r2, [pc, #108]	; (8009258 <ResetMacParameters+0xcc>)
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 80091ea:	4661      	mov	r1, ip
    MacCtx.NodeAckRequested = false;
 80091ec:	54a5      	strb	r5, [r4, r2]
    MacCtx.NvmCtx->SrvAckRequested = false;
 80091ee:	224c      	movs	r2, #76	; 0x4c
 80091f0:	32ff      	adds	r2, #255	; 0xff
 80091f2:	549d      	strb	r5, [r3, r2]
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 80091f4:	466a      	mov	r2, sp
 80091f6:	7111      	strb	r1, [r2, #4]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 80091f8:	7818      	ldrb	r0, [r3, #0]
 80091fa:	4669      	mov	r1, sp
 80091fc:	f003 f8f6 	bl	800c3ec <RegionInitDefaults>
    MacCtx.Channel = 0;
 8009200:	4b16      	ldr	r3, [pc, #88]	; (800925c <ResetMacParameters+0xd0>)
 8009202:	54e5      	strb	r5, [r4, r3]
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8009204:	3b49      	subs	r3, #73	; 0x49
 8009206:	54e5      	strb	r5, [r4, r3]
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 8009208:	59a3      	ldr	r3, [r4, r6]
 800920a:	001a      	movs	r2, r3
 800920c:	32a8      	adds	r2, #168	; 0xa8
 800920e:	6811      	ldr	r1, [r2, #0]
 8009210:	22f4      	movs	r2, #244	; 0xf4
 8009212:	0092      	lsls	r2, r2, #2
 8009214:	50a1      	str	r1, [r4, r2]
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8009216:	001a      	movs	r2, r3
 8009218:	32b9      	adds	r2, #185	; 0xb9
 800921a:	7811      	ldrb	r1, [r2, #0]
 800921c:	22f7      	movs	r2, #247	; 0xf7
 800921e:	0092      	lsls	r2, r2, #2
 8009220:	54a1      	strb	r1, [r4, r2]
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8009222:	33ca      	adds	r3, #202	; 0xca
 8009224:	781a      	ldrb	r2, [r3, #0]
 8009226:	4b0e      	ldr	r3, [pc, #56]	; (8009260 <ResetMacParameters+0xd4>)
 8009228:	54e2      	strb	r2, [r4, r3]
    MacCtx.RxWindow2Config.RxContinuous = false;
 800922a:	2280      	movs	r2, #128	; 0x80
 800922c:	4b0d      	ldr	r3, [pc, #52]	; (8009264 <ResetMacParameters+0xd8>)
 800922e:	0052      	lsls	r2, r2, #1
 8009230:	52e2      	strh	r2, [r4, r3]
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8009232:	22f3      	movs	r2, #243	; 0xf3
 8009234:	3302      	adds	r3, #2
 8009236:	0092      	lsls	r2, r2, #2
 8009238:	18e3      	adds	r3, r4, r3
 800923a:	18a2      	adds	r2, r4, r2
 800923c:	ca23      	ldmia	r2!, {r0, r1, r5}
 800923e:	c323      	stmia	r3!, {r0, r1, r5}
 8009240:	ca03      	ldmia	r2!, {r0, r1}
 8009242:	c303      	stmia	r3!, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8009244:	4b08      	ldr	r3, [pc, #32]	; (8009268 <ResetMacParameters+0xdc>)
 8009246:	4a09      	ldr	r2, [pc, #36]	; (800926c <ResetMacParameters+0xe0>)
 8009248:	52e2      	strh	r2, [r4, r3]
}
 800924a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800924c:	2000055c 	.word	0x2000055c
 8009250:	00000484 	.word	0x00000484
 8009254:	00010100 	.word	0x00010100
 8009258:	00000414 	.word	0x00000414
 800925c:	00000415 	.word	0x00000415
 8009260:	000003dd 	.word	0x000003dd
 8009264:	000003de 	.word	0x000003de
 8009268:	000003f2 	.word	0x000003f2
 800926c:	00000201 	.word	0x00000201

08009270 <OnRadioRxDone>:
{
 8009270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009272:	000e      	movs	r6, r1
 8009274:	0015      	movs	r5, r2
 8009276:	001c      	movs	r4, r3
 8009278:	0007      	movs	r7, r0
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800927a:	f005 fc23 	bl	800eac4 <UTIL_TIMER_GetCurrentTime>
 800927e:	4b0e      	ldr	r3, [pc, #56]	; (80092b8 <OnRadioRxDone+0x48>)
    LoRaMacRadioEvents.Events.RxDone = 1;
 8009280:	4a0e      	ldr	r2, [pc, #56]	; (80092bc <OnRadioRxDone+0x4c>)
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 8009282:	6018      	str	r0, [r3, #0]
    RxDoneParams.Payload = payload;
 8009284:	605f      	str	r7, [r3, #4]
    RxDoneParams.Size = size;
 8009286:	811e      	strh	r6, [r3, #8]
    RxDoneParams.Rssi = rssi;
 8009288:	815d      	strh	r5, [r3, #10]
    RxDoneParams.Snr = snr;
 800928a:	731c      	strb	r4, [r3, #12]
    LoRaMacRadioEvents.Events.RxDone = 1;
 800928c:	2308      	movs	r3, #8
 800928e:	7811      	ldrb	r1, [r2, #0]
 8009290:	430b      	orrs	r3, r1
 8009292:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8009294:	23d2      	movs	r3, #210	; 0xd2
 8009296:	4a0a      	ldr	r2, [pc, #40]	; (80092c0 <OnRadioRxDone+0x50>)
 8009298:	009b      	lsls	r3, r3, #2
 800929a:	58d3      	ldr	r3, [r2, r3]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d003      	beq.n	80092a8 <OnRadioRxDone+0x38>
 80092a0:	68db      	ldr	r3, [r3, #12]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d000      	beq.n	80092a8 <OnRadioRxDone+0x38>
        MacCtx.MacCallbacks->MacProcessNotify( );
 80092a6:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 80092a8:	2201      	movs	r2, #1
 80092aa:	2100      	movs	r1, #0
 80092ac:	4b05      	ldr	r3, [pc, #20]	; (80092c4 <OnRadioRxDone+0x54>)
 80092ae:	2002      	movs	r0, #2
 80092b0:	f005 fe1a 	bl	800eee8 <UTIL_ADV_TRACE_COND_FSend>
}
 80092b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092b6:	46c0      	nop			; (mov r8, r8)
 80092b8:	200017b0 	.word	0x200017b0
 80092bc:	20000558 	.word	0x20000558
 80092c0:	2000055c 	.word	0x2000055c
 80092c4:	0800fab9 	.word	0x0800fab9

080092c8 <OnRadioTxDone>:
{
 80092c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 80092ca:	f005 fbfb 	bl	800eac4 <UTIL_TIMER_GetCurrentTime>
    MacCtx.LastTxSysTime = SysTimeGet( );
 80092ce:	466c      	mov	r4, sp
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 80092d0:	4b0f      	ldr	r3, [pc, #60]	; (8009310 <OnRadioTxDone+0x48>)
    MacCtx.LastTxSysTime = SysTimeGet( );
 80092d2:	4d10      	ldr	r5, [pc, #64]	; (8009314 <OnRadioTxDone+0x4c>)
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 80092d4:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 80092d6:	0020      	movs	r0, r4
 80092d8:	f005 f9a2 	bl	800e620 <SysTimeGet>
 80092dc:	23ce      	movs	r3, #206	; 0xce
 80092de:	009b      	lsls	r3, r3, #2
 80092e0:	18eb      	adds	r3, r5, r3
 80092e2:	cc06      	ldmia	r4!, {r1, r2}
 80092e4:	c306      	stmia	r3!, {r1, r2}
    LoRaMacRadioEvents.Events.TxDone = 1;
 80092e6:	2310      	movs	r3, #16
 80092e8:	4a0b      	ldr	r2, [pc, #44]	; (8009318 <OnRadioTxDone+0x50>)
 80092ea:	7811      	ldrb	r1, [r2, #0]
 80092ec:	430b      	orrs	r3, r1
 80092ee:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80092f0:	23d2      	movs	r3, #210	; 0xd2
 80092f2:	009b      	lsls	r3, r3, #2
 80092f4:	58eb      	ldr	r3, [r5, r3]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d003      	beq.n	8009302 <OnRadioTxDone+0x3a>
 80092fa:	68db      	ldr	r3, [r3, #12]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d000      	beq.n	8009302 <OnRadioTxDone+0x3a>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8009300:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 8009302:	2201      	movs	r2, #1
 8009304:	2100      	movs	r1, #0
 8009306:	4b05      	ldr	r3, [pc, #20]	; (800931c <OnRadioTxDone+0x54>)
 8009308:	2002      	movs	r0, #2
 800930a:	f005 fded 	bl	800eee8 <UTIL_ADV_TRACE_COND_FSend>
}
 800930e:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 8009310:	200017ac 	.word	0x200017ac
 8009314:	2000055c 	.word	0x2000055c
 8009318:	20000558 	.word	0x20000558
 800931c:	0800fac6 	.word	0x0800fac6

08009320 <ScheduleTx>:
{
 8009320:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( MacCtx.NvmCtx->AggregatedTimeOff == 0 )
 8009322:	4cb9      	ldr	r4, [pc, #740]	; (8009608 <ScheduleTx+0x2e8>)
 8009324:	4db9      	ldr	r5, [pc, #740]	; (800960c <ScheduleTx+0x2ec>)
{
 8009326:	b095      	sub	sp, #84	; 0x54
    if( MacCtx.NvmCtx->AggregatedTimeOff == 0 )
 8009328:	5963      	ldr	r3, [r4, r5]
{
 800932a:	9003      	str	r0, [sp, #12]
    if( MacCtx.NvmCtx->AggregatedTimeOff == 0 )
 800932c:	0019      	movs	r1, r3
 800932e:	31fc      	adds	r1, #252	; 0xfc
 8009330:	6d8a      	ldr	r2, [r1, #88]	; 0x58
 8009332:	2a00      	cmp	r2, #0
 8009334:	d108      	bne.n	8009348 <ScheduleTx+0x28>
        MacCtx.NvmCtx->AggregatedTimeOff = ( MacCtx.TxTimeOnAir * MacCtx.NvmCtx->AggregatedDCycle - MacCtx.TxTimeOnAir );
 8009336:	324d      	adds	r2, #77	; 0x4d
 8009338:	32ff      	adds	r2, #255	; 0xff
 800933a:	5a9a      	ldrh	r2, [r3, r2]
 800933c:	2383      	movs	r3, #131	; 0x83
 800933e:	00db      	lsls	r3, r3, #3
 8009340:	58e3      	ldr	r3, [r4, r3]
 8009342:	3a01      	subs	r2, #1
 8009344:	4353      	muls	r3, r2
 8009346:	658b      	str	r3, [r1, #88]	; 0x58
    switch( MacCtx.TxMsg.Type )
 8009348:	0026      	movs	r6, r4
 800934a:	36ff      	adds	r6, #255	; 0xff
 800934c:	7973      	ldrb	r3, [r6, #5]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d003      	beq.n	800935a <ScheduleTx+0x3a>
 8009352:	2b04      	cmp	r3, #4
 8009354:	d064      	beq.n	8009420 <ScheduleTx+0x100>
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8009356:	2703      	movs	r7, #3
 8009358:	e05f      	b.n	800941a <ScheduleTx+0xfa>
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800935a:	48ad      	ldr	r0, [pc, #692]	; (8009610 <ScheduleTx+0x2f0>)
 800935c:	f002 ff8a 	bl	800c274 <LoRaMacSerializerJoinRequest>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8009360:	2800      	cmp	r0, #0
 8009362:	d000      	beq.n	8009366 <ScheduleTx+0x46>
 8009364:	e14c      	b.n	8009600 <ScheduleTx+0x2e0>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8009366:	7b73      	ldrb	r3, [r6, #13]
    nextChan.AggrTimeOff = MacCtx.NvmCtx->AggregatedTimeOff;
 8009368:	ae0e      	add	r6, sp, #56	; 0x38
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800936a:	8023      	strh	r3, [r4, #0]
    nextChan.AggrTimeOff = MacCtx.NvmCtx->AggregatedTimeOff;
 800936c:	5963      	ldr	r3, [r4, r5]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), MacCtx.NvmCtx->InitializationTime );
 800936e:	a808      	add	r0, sp, #32
    nextChan.AggrTimeOff = MacCtx.NvmCtx->AggregatedTimeOff;
 8009370:	001a      	movs	r2, r3
 8009372:	32fc      	adds	r2, #252	; 0xfc
 8009374:	6d92      	ldr	r2, [r2, #88]	; 0x58
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), MacCtx.NvmCtx->InitializationTime );
 8009376:	af04      	add	r7, sp, #16
    nextChan.AggrTimeOff = MacCtx.NvmCtx->AggregatedTimeOff;
 8009378:	920e      	str	r2, [sp, #56]	; 0x38
    nextChan.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800937a:	001a      	movs	r2, r3
 800937c:	3285      	adds	r2, #133	; 0x85
 800937e:	7812      	ldrb	r2, [r2, #0]
    nextChan.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 8009380:	33c9      	adds	r3, #201	; 0xc9
    nextChan.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8009382:	7232      	strb	r2, [r6, #8]
    nextChan.DutyCycleEnabled = MacCtx.NvmCtx->DutyCycleOn;
 8009384:	781b      	ldrb	r3, [r3, #0]
 8009386:	72b3      	strb	r3, [r6, #10]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), MacCtx.NvmCtx->InitializationTime );
 8009388:	f005 f976 	bl	800e678 <SysTimeGetMcuTime>
 800938c:	5963      	ldr	r3, [r4, r5]
 800938e:	9908      	ldr	r1, [sp, #32]
 8009390:	001a      	movs	r2, r3
 8009392:	325d      	adds	r2, #93	; 0x5d
 8009394:	32ff      	adds	r2, #255	; 0xff
 8009396:	6812      	ldr	r2, [r2, #0]
 8009398:	0038      	movs	r0, r7
 800939a:	9200      	str	r2, [sp, #0]
 800939c:	22ac      	movs	r2, #172	; 0xac
 800939e:	0052      	lsls	r2, r2, #1
 80093a0:	589b      	ldr	r3, [r3, r2]
 80093a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093a4:	f005 f8fe 	bl	800e5a4 <SysTimeSub>
 80093a8:	ab11      	add	r3, sp, #68	; 0x44
 80093aa:	cf06      	ldmia	r7!, {r1, r2}
 80093ac:	c306      	stmia	r3!, {r1, r2}
    nextChan.LastAggrTx = MacCtx.NvmCtx->LastTxDoneTime;
 80093ae:	5963      	ldr	r3, [r4, r5]
    nextChan.Joined = true;
 80093b0:	2101      	movs	r1, #1
    nextChan.LastAggrTx = MacCtx.NvmCtx->LastTxDoneTime;
 80093b2:	001a      	movs	r2, r3
 80093b4:	32fc      	adds	r2, #252	; 0xfc
 80093b6:	6d52      	ldr	r2, [r2, #84]	; 0x54
    nextChan.Joined = true;
 80093b8:	7271      	strb	r1, [r6, #9]
    nextChan.LastAggrTx = MacCtx.NvmCtx->LastTxDoneTime;
 80093ba:	6072      	str	r2, [r6, #4]
    nextChan.LastTxIsJoinRequest = false;
 80093bc:	2200      	movs	r2, #0
 80093be:	7532      	strb	r2, [r6, #20]
    nextChan.PktLen = MacCtx.PktBufferLen;
 80093c0:	8822      	ldrh	r2, [r4, #0]
 80093c2:	82f2      	strh	r2, [r6, #22]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 80093c4:	22b2      	movs	r2, #178	; 0xb2
 80093c6:	0052      	lsls	r2, r2, #1
 80093c8:	5c9a      	ldrb	r2, [r3, r2]
 80093ca:	2a00      	cmp	r2, #0
 80093cc:	d101      	bne.n	80093d2 <ScheduleTx+0xb2>
        nextChan.LastTxIsJoinRequest = true;
 80093ce:	7531      	strb	r1, [r6, #20]
        nextChan.Joined = false;
 80093d0:	7272      	strb	r2, [r6, #9]
    status = RegionNextChannel( MacCtx.NvmCtx->Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &MacCtx.NvmCtx->AggregatedTimeOff );
 80093d2:	7818      	ldrb	r0, [r3, #0]
 80093d4:	3355      	adds	r3, #85	; 0x55
 80093d6:	33ff      	adds	r3, #255	; 0xff
 80093d8:	9300      	str	r3, [sp, #0]
 80093da:	0031      	movs	r1, r6
 80093dc:	4b8d      	ldr	r3, [pc, #564]	; (8009614 <ScheduleTx+0x2f4>)
 80093de:	4a8e      	ldr	r2, [pc, #568]	; (8009618 <ScheduleTx+0x2f8>)
 80093e0:	f003 f893 	bl	800c50a <RegionNextChannel>
 80093e4:	1e07      	subs	r7, r0, #0
    if( status != LORAMAC_STATUS_OK )
 80093e6:	d01f      	beq.n	8009428 <ScheduleTx+0x108>
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 80093e8:	280b      	cmp	r0, #11
 80093ea:	d116      	bne.n	800941a <ScheduleTx+0xfa>
 80093ec:	9b03      	ldr	r3, [sp, #12]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d013      	beq.n	800941a <ScheduleTx+0xfa>
            if( MacCtx.DutyCycleWaitTime != 0 )
 80093f2:	2291      	movs	r2, #145	; 0x91
            return LORAMAC_STATUS_OK;
 80093f4:	2700      	movs	r7, #0
            if( MacCtx.DutyCycleWaitTime != 0 )
 80093f6:	4b84      	ldr	r3, [pc, #528]	; (8009608 <ScheduleTx+0x2e8>)
 80093f8:	00d2      	lsls	r2, r2, #3
 80093fa:	5899      	ldr	r1, [r3, r2]
 80093fc:	42b9      	cmp	r1, r7
 80093fe:	d00c      	beq.n	800941a <ScheduleTx+0xfa>
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8009400:	20d0      	movs	r0, #208	; 0xd0
 8009402:	2220      	movs	r2, #32
 8009404:	0080      	lsls	r0, r0, #2
 8009406:	581c      	ldr	r4, [r3, r0]
 8009408:	4322      	orrs	r2, r4
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800940a:	4c84      	ldr	r4, [pc, #528]	; (800961c <ScheduleTx+0x2fc>)
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800940c:	501a      	str	r2, [r3, r0]
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800940e:	0020      	movs	r0, r4
 8009410:	f005 fc4c 	bl	800ecac <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 8009414:	0020      	movs	r0, r4
 8009416:	f005 fbed 	bl	800ebf4 <UTIL_TIMER_Start>
}
 800941a:	0038      	movs	r0, r7
 800941c:	b015      	add	sp, #84	; 0x54
 800941e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8009420:	487b      	ldr	r0, [pc, #492]	; (8009610 <ScheduleTx+0x2f0>)
 8009422:	f002 ff5c 	bl	800c2de <LoRaMacSerializerData>
 8009426:	e79b      	b.n	8009360 <ScheduleTx+0x40>
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8009428:	5961      	ldr	r1, [r4, r5]
                                                          MacCtx.NvmCtx->MacParams.Rx1DrOffset ),
 800942a:	000b      	movs	r3, r1
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region,
 800942c:	000a      	movs	r2, r1
                                                          MacCtx.NvmCtx->MacParams.Rx1DrOffset ),
 800942e:	33a5      	adds	r3, #165	; 0xa5
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region,
 8009430:	3285      	adds	r2, #133	; 0x85
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8009432:	780e      	ldrb	r6, [r1, #0]
                                     RegionApplyDrOffset( MacCtx.NvmCtx->Region,
 8009434:	781b      	ldrb	r3, [r3, #0]
 8009436:	7812      	ldrb	r2, [r2, #0]
 8009438:	31b9      	adds	r1, #185	; 0xb9
 800943a:	0030      	movs	r0, r6
 800943c:	7809      	ldrb	r1, [r1, #0]
 800943e:	b25b      	sxtb	r3, r3
 8009440:	b252      	sxtb	r2, r2
 8009442:	f003 f877 	bl	800c534 <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8009446:	2288      	movs	r2, #136	; 0x88
 8009448:	4694      	mov	ip, r2
                                     MacCtx.NvmCtx->MacParams.MinRxSymbols,
 800944a:	5963      	ldr	r3, [r4, r5]
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800944c:	b241      	sxtb	r1, r0
 800944e:	449c      	add	ip, r3
 8009450:	338c      	adds	r3, #140	; 0x8c
 8009452:	781a      	ldrb	r2, [r3, #0]
 8009454:	4b72      	ldr	r3, [pc, #456]	; (8009620 <ScheduleTx+0x300>)
 8009456:	0030      	movs	r0, r6
 8009458:	9300      	str	r3, [sp, #0]
 800945a:	4663      	mov	r3, ip
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f002 ffec 	bl	800c43a <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8009462:	5963      	ldr	r3, [r4, r5]
                                     MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate,
 8009464:	0019      	movs	r1, r3
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 8009466:	001a      	movs	r2, r3
 8009468:	001e      	movs	r6, r3
 800946a:	7818      	ldrb	r0, [r3, #0]
                                     MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate,
 800946c:	31ac      	adds	r1, #172	; 0xac
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 800946e:	4b6d      	ldr	r3, [pc, #436]	; (8009624 <ScheduleTx+0x304>)
 8009470:	7809      	ldrb	r1, [r1, #0]
 8009472:	328c      	adds	r2, #140	; 0x8c
 8009474:	7812      	ldrb	r2, [r2, #0]
 8009476:	3688      	adds	r6, #136	; 0x88
 8009478:	9300      	str	r3, [sp, #0]
 800947a:	6833      	ldr	r3, [r6, #0]
 800947c:	b249      	sxtb	r1, r1
 800947e:	f002 ffdc 	bl	800c43a <RegionComputeRxWindowParameters>
    MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8009482:	22f1      	movs	r2, #241	; 0xf1
 8009484:	0092      	lsls	r2, r2, #2
 8009486:	5963      	ldr	r3, [r4, r5]
 8009488:	58a2      	ldr	r2, [r4, r2]
 800948a:	20ec      	movs	r0, #236	; 0xec
 800948c:	0011      	movs	r1, r2
 800948e:	001a      	movs	r2, r3
 8009490:	3294      	adds	r2, #148	; 0x94
 8009492:	6812      	ldr	r2, [r2, #0]
 8009494:	0080      	lsls	r0, r0, #2
 8009496:	1852      	adds	r2, r2, r1
 8009498:	5022      	str	r2, [r4, r0]
    MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800949a:	22f6      	movs	r2, #246	; 0xf6
 800949c:	0092      	lsls	r2, r2, #2
 800949e:	58a0      	ldr	r0, [r4, r2]
 80094a0:	001a      	movs	r2, r3
 80094a2:	26ed      	movs	r6, #237	; 0xed
 80094a4:	3298      	adds	r2, #152	; 0x98
 80094a6:	6812      	ldr	r2, [r2, #0]
 80094a8:	00b6      	lsls	r6, r6, #2
 80094aa:	1812      	adds	r2, r2, r0
 80094ac:	51a2      	str	r2, [r4, r6]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 80094ae:	22b2      	movs	r2, #178	; 0xb2
 80094b0:	0052      	lsls	r2, r2, #1
 80094b2:	5c9a      	ldrb	r2, [r3, r2]
 80094b4:	4694      	mov	ip, r2
 80094b6:	2a00      	cmp	r2, #0
 80094b8:	d10a      	bne.n	80094d0 <ScheduleTx+0x1b0>
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80094ba:	001a      	movs	r2, r3
 80094bc:	329c      	adds	r2, #156	; 0x9c
 80094be:	6812      	ldr	r2, [r2, #0]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80094c0:	33a0      	adds	r3, #160	; 0xa0
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80094c2:	1852      	adds	r2, r2, r1
 80094c4:	21ec      	movs	r1, #236	; 0xec
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80094c6:	681b      	ldr	r3, [r3, #0]
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80094c8:	0089      	lsls	r1, r1, #2
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80094ca:	1818      	adds	r0, r3, r0
        MacCtx.RxWindow1Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 80094cc:	5062      	str	r2, [r4, r1]
        MacCtx.RxWindow2Delay = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 80094ce:	51a0      	str	r0, [r4, r6]
    size_t macCmdsSize = 0;
 80094d0:	2300      	movs	r3, #0
 80094d2:	930a      	str	r3, [sp, #40]	; 0x28
    if( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE )
 80094d4:	4663      	mov	r3, ip
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d012      	beq.n	8009500 <ScheduleTx+0x1e0>
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80094da:	a80a      	add	r0, sp, #40	; 0x28
 80094dc:	f002 faa6 	bl	800ba2c <LoRaMacCommandsGetSizeSerializedCmds>
 80094e0:	2800      	cmp	r0, #0
 80094e2:	d16f      	bne.n	80095c4 <ScheduleTx+0x2a4>
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80094e4:	2085      	movs	r0, #133	; 0x85
        if( ValidatePayloadLength( MacCtx.AppDataSize, MacCtx.NvmCtx->MacParams.ChannelsDatarate, macCmdsSize ) == false )
 80094e6:	4b48      	ldr	r3, [pc, #288]	; (8009608 <ScheduleTx+0x2e8>)
 80094e8:	4a4f      	ldr	r2, [pc, #316]	; (8009628 <ScheduleTx+0x308>)
 80094ea:	5c9c      	ldrb	r4, [r3, r2]
 80094ec:	595b      	ldr	r3, [r3, r5]
 80094ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80094f0:	5618      	ldrsb	r0, [r3, r0]
        if( ValidatePayloadLength( MacCtx.AppDataSize, MacCtx.NvmCtx->MacParams.ChannelsDatarate, macCmdsSize ) == false )
 80094f2:	b2d6      	uxtb	r6, r2
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80094f4:	f7ff fd58 	bl	8008fa8 <GetMaxAppPayloadWithoutFOptsLength>
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 80094f8:	19a4      	adds	r4, r4, r6
 80094fa:	b280      	uxth	r0, r0
 80094fc:	42a0      	cmp	r0, r4
 80094fe:	d35f      	bcc.n	80095c0 <ScheduleTx+0x2a0>
    return SendFrameOnChannel( MacCtx.Channel );
 8009500:	4c41      	ldr	r4, [pc, #260]	; (8009608 <ScheduleTx+0x2e8>)
 8009502:	4b4a      	ldr	r3, [pc, #296]	; (800962c <ScheduleTx+0x30c>)
    int8_t txPower = 0;
 8009504:	2200      	movs	r2, #0
    return SendFrameOnChannel( MacCtx.Channel );
 8009506:	5ce6      	ldrb	r6, [r4, r3]
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8009508:	5963      	ldr	r3, [r4, r5]
    int8_t txPower = 0;
 800950a:	a902      	add	r1, sp, #8
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800950c:	0018      	movs	r0, r3
    int8_t txPower = 0;
 800950e:	74ca      	strb	r2, [r1, #19]
    txConfig.Channel = channel;
 8009510:	a90a      	add	r1, sp, #40	; 0x28
 8009512:	700e      	strb	r6, [r1, #0]
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8009514:	3085      	adds	r0, #133	; 0x85
 8009516:	7802      	ldrb	r2, [r0, #0]
    txConfig.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8009518:	3801      	subs	r0, #1
    txConfig.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800951a:	704a      	strb	r2, [r1, #1]
    txConfig.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800951c:	7802      	ldrb	r2, [r0, #0]
    txConfig.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 800951e:	3038      	adds	r0, #56	; 0x38
    txConfig.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 8009520:	708a      	strb	r2, [r1, #2]
    txConfig.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 8009522:	6800      	ldr	r0, [r0, #0]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8009524:	8822      	ldrh	r2, [r4, #0]
    txConfig.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 8009526:	6048      	str	r0, [r1, #4]
    txConfig.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 8009528:	0018      	movs	r0, r3
    RegionTxConfig( MacCtx.NvmCtx->Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 800952a:	781b      	ldrb	r3, [r3, #0]
    txConfig.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 800952c:	30c0      	adds	r0, #192	; 0xc0
 800952e:	6800      	ldr	r0, [r0, #0]
    RegionTxConfig( MacCtx.NvmCtx->Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8009530:	469c      	mov	ip, r3
    txConfig.PktLen = MacCtx.PktBufferLen;
 8009532:	818a      	strh	r2, [r1, #12]
    RegionTxConfig( MacCtx.NvmCtx->Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8009534:	2213      	movs	r2, #19
    txConfig.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 8009536:	6088      	str	r0, [r1, #8]
    RegionTxConfig( MacCtx.NvmCtx->Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8009538:	a802      	add	r0, sp, #8
 800953a:	1812      	adds	r2, r2, r0
 800953c:	4b3c      	ldr	r3, [pc, #240]	; (8009630 <ScheduleTx+0x310>)
 800953e:	4660      	mov	r0, ip
 8009540:	f002 ff92 	bl	800c468 <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009544:	2201      	movs	r2, #1
 8009546:	4b3b      	ldr	r3, [pc, #236]	; (8009634 <ScheduleTx+0x314>)
    MacCtx.McpsConfirm.TxPower = txPower;
 8009548:	a902      	add	r1, sp, #8
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800954a:	54e2      	strb	r2, [r4, r3]
    MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800954c:	5963      	ldr	r3, [r4, r5]
    MacCtx.McpsConfirm.TxPower = txPower;
 800954e:	7cca      	ldrb	r2, [r1, #19]
    MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8009550:	3385      	adds	r3, #133	; 0x85
 8009552:	781d      	ldrb	r5, [r3, #0]
 8009554:	4b38      	ldr	r3, [pc, #224]	; (8009638 <ScheduleTx+0x318>)
 8009556:	54e5      	strb	r5, [r4, r3]
    MacCtx.McpsConfirm.TxPower = txPower;
 8009558:	4b38      	ldr	r3, [pc, #224]	; (800963c <ScheduleTx+0x31c>)
 800955a:	54e2      	strb	r2, [r4, r3]
    MacCtx.McpsConfirm.Channel = channel;
 800955c:	4b38      	ldr	r3, [pc, #224]	; (8009640 <ScheduleTx+0x320>)
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800955e:	4a39      	ldr	r2, [pc, #228]	; (8009644 <ScheduleTx+0x324>)
    MacCtx.McpsConfirm.Channel = channel;
 8009560:	50e6      	str	r6, [r4, r3]
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8009562:	3b34      	subs	r3, #52	; 0x34
 8009564:	58e3      	ldr	r3, [r4, r3]
    switch( MacCtx.TxMsg.Type )
 8009566:	0026      	movs	r6, r4
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8009568:	50a3      	str	r3, [r4, r2]
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800956a:	4a37      	ldr	r2, [pc, #220]	; (8009648 <ScheduleTx+0x328>)
    switch( MacCtx.TxMsg.Type )
 800956c:	36ff      	adds	r6, #255	; 0xff
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800956e:	50a3      	str	r3, [r4, r2]
    uint32_t fCntUp = 0;
 8009570:	2200      	movs	r2, #0
    status = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.Channel );
 8009572:	4b2e      	ldr	r3, [pc, #184]	; (800962c <ScheduleTx+0x30c>)
 8009574:	5ce3      	ldrb	r3, [r4, r3]
    uint32_t fCntUp = 0;
 8009576:	9207      	str	r2, [sp, #28]
    status = SecureFrame( MacCtx.NvmCtx->MacParams.ChannelsDatarate, MacCtx.Channel );
 8009578:	9303      	str	r3, [sp, #12]
    switch( MacCtx.TxMsg.Type )
 800957a:	7973      	ldrb	r3, [r6, #5]
 800957c:	4293      	cmp	r3, r2
 800957e:	d023      	beq.n	80095c8 <ScheduleTx+0x2a8>
 8009580:	2b04      	cmp	r3, #4
 8009582:	d000      	beq.n	8009586 <ScheduleTx+0x266>
 8009584:	e6e7      	b.n	8009356 <ScheduleTx+0x36>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8009586:	a807      	add	r0, sp, #28
 8009588:	f002 fcc8 	bl	800bf1c <LoRaMacCryptoGetFCntUp>
 800958c:	2800      	cmp	r0, #0
 800958e:	d139      	bne.n	8009604 <ScheduleTx+0x2e4>
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 8009590:	2382      	movs	r3, #130	; 0x82
 8009592:	00db      	lsls	r3, r3, #3
 8009594:	5ce3      	ldrb	r3, [r4, r3]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d103      	bne.n	80095a2 <ScheduleTx+0x282>
 800959a:	4b2c      	ldr	r3, [pc, #176]	; (800964c <ScheduleTx+0x32c>)
 800959c:	5ce3      	ldrb	r3, [r4, r3]
 800959e:	2b01      	cmp	r3, #1
 80095a0:	d902      	bls.n	80095a8 <ScheduleTx+0x288>
                fCntUp -= 1;
 80095a2:	9b07      	ldr	r3, [sp, #28]
 80095a4:	3b01      	subs	r3, #1
 80095a6:	9307      	str	r3, [sp, #28]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 80095a8:	0029      	movs	r1, r5
 80095aa:	4b19      	ldr	r3, [pc, #100]	; (8009610 <ScheduleTx+0x2f0>)
 80095ac:	9a03      	ldr	r2, [sp, #12]
 80095ae:	9807      	ldr	r0, [sp, #28]
 80095b0:	f002 fd10 	bl	800bfd4 <LoRaMacCryptoSecureMessage>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80095b4:	2800      	cmp	r0, #0
 80095b6:	d123      	bne.n	8009600 <ScheduleTx+0x2e0>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80095b8:	0023      	movs	r3, r4
 80095ba:	33ff      	adds	r3, #255	; 0xff
 80095bc:	7b5b      	ldrb	r3, [r3, #13]
 80095be:	e009      	b.n	80095d4 <ScheduleTx+0x2b4>
            return LORAMAC_STATUS_LENGTH_ERROR;
 80095c0:	2708      	movs	r7, #8
 80095c2:	e72a      	b.n	800941a <ScheduleTx+0xfa>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80095c4:	2713      	movs	r7, #19
 80095c6:	e728      	b.n	800941a <ScheduleTx+0xfa>
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 80095c8:	4811      	ldr	r0, [pc, #68]	; (8009610 <ScheduleTx+0x2f0>)
 80095ca:	f002 fcd3 	bl	800bf74 <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80095ce:	2800      	cmp	r0, #0
 80095d0:	d116      	bne.n	8009600 <ScheduleTx+0x2e0>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 80095d2:	7b73      	ldrb	r3, [r6, #13]
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80095d4:	22d0      	movs	r2, #208	; 0xd0
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80095d6:	8023      	strh	r3, [r4, #0]
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80095d8:	2302      	movs	r3, #2
 80095da:	0092      	lsls	r2, r2, #2
 80095dc:	58a1      	ldr	r1, [r4, r2]
 80095de:	430b      	orrs	r3, r1
 80095e0:	50a3      	str	r3, [r4, r2]
    if( MacCtx.NodeAckRequested == false )
 80095e2:	4b1b      	ldr	r3, [pc, #108]	; (8009650 <ScheduleTx+0x330>)
 80095e4:	5ce3      	ldrb	r3, [r4, r3]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d103      	bne.n	80095f2 <ScheduleTx+0x2d2>
        MacCtx.ChannelsNbTransCounter++;
 80095ea:	32d0      	adds	r2, #208	; 0xd0
 80095ec:	5ca3      	ldrb	r3, [r4, r2]
 80095ee:	3301      	adds	r3, #1
 80095f0:	54a3      	strb	r3, [r4, r2]
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 80095f2:	4b18      	ldr	r3, [pc, #96]	; (8009654 <ScheduleTx+0x334>)
 80095f4:	7821      	ldrb	r1, [r4, #0]
 80095f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095f8:	4817      	ldr	r0, [pc, #92]	; (8009658 <ScheduleTx+0x338>)
 80095fa:	9303      	str	r3, [sp, #12]
 80095fc:	4798      	blx	r3
    return SendFrameOnChannel( MacCtx.Channel );
 80095fe:	e70c      	b.n	800941a <ScheduleTx+0xfa>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8009600:	2711      	movs	r7, #17
 8009602:	e70a      	b.n	800941a <ScheduleTx+0xfa>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8009604:	2712      	movs	r7, #18
 8009606:	e708      	b.n	800941a <ScheduleTx+0xfa>
 8009608:	2000055c 	.word	0x2000055c
 800960c:	00000484 	.word	0x00000484
 8009610:	20000664 	.word	0x20000664
 8009614:	200009e4 	.word	0x200009e4
 8009618:	20000971 	.word	0x20000971
 800961c:	200008c4 	.word	0x200008c4
 8009620:	20000914 	.word	0x20000914
 8009624:	20000928 	.word	0x20000928
 8009628:	00000237 	.word	0x00000237
 800962c:	00000415 	.word	0x00000415
 8009630:	20000974 	.word	0x20000974
 8009634:	0000043d 	.word	0x0000043d
 8009638:	0000043e 	.word	0x0000043e
 800963c:	0000043f 	.word	0x0000043f
 8009640:	0000044c 	.word	0x0000044c
 8009644:	00000444 	.word	0x00000444
 8009648:	00000454 	.word	0x00000454
 800964c:	00000412 	.word	0x00000412
 8009650:	00000414 	.word	0x00000414
 8009654:	0800fd8c 	.word	0x0800fd8c
 8009658:	2000055e 	.word	0x2000055e

0800965c <OnTxDelayedTimerEvent>:
{
 800965c:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 800965e:	4811      	ldr	r0, [pc, #68]	; (80096a4 <OnTxDelayedTimerEvent+0x48>)
 8009660:	f005 fa74 	bl	800eb4c <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8009664:	22d0      	movs	r2, #208	; 0xd0
 8009666:	2320      	movs	r3, #32
 8009668:	4c0f      	ldr	r4, [pc, #60]	; (80096a8 <OnTxDelayedTimerEvent+0x4c>)
 800966a:	0092      	lsls	r2, r2, #2
 800966c:	58a1      	ldr	r1, [r4, r2]
    switch( ScheduleTx( true ) )
 800966e:	2001      	movs	r0, #1
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8009670:	4399      	bics	r1, r3
 8009672:	50a1      	str	r1, [r4, r2]
    switch( ScheduleTx( true ) )
 8009674:	f7ff fe54 	bl	8009320 <ScheduleTx>
 8009678:	2800      	cmp	r0, #0
 800967a:	d012      	beq.n	80096a2 <OnTxDelayedTimerEvent+0x46>
 800967c:	280b      	cmp	r0, #11
 800967e:	d010      	beq.n	80096a2 <OnTxDelayedTimerEvent+0x46>
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8009680:	2009      	movs	r0, #9
            MacCtx.McpsConfirm.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 8009682:	4b0a      	ldr	r3, [pc, #40]	; (80096ac <OnTxDelayedTimerEvent+0x50>)
 8009684:	58e3      	ldr	r3, [r4, r3]
 8009686:	3385      	adds	r3, #133	; 0x85
 8009688:	781a      	ldrb	r2, [r3, #0]
 800968a:	4b09      	ldr	r3, [pc, #36]	; (80096b0 <OnTxDelayedTimerEvent+0x54>)
 800968c:	54e2      	strb	r2, [r4, r3]
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800968e:	4b09      	ldr	r3, [pc, #36]	; (80096b4 <OnTxDelayedTimerEvent+0x58>)
 8009690:	5ce2      	ldrb	r2, [r4, r3]
 8009692:	4b09      	ldr	r3, [pc, #36]	; (80096b8 <OnTxDelayedTimerEvent+0x5c>)
 8009694:	54e2      	strb	r2, [r4, r3]
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8009696:	4b09      	ldr	r3, [pc, #36]	; (80096bc <OnTxDelayedTimerEvent+0x60>)
 8009698:	54e0      	strb	r0, [r4, r3]
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800969a:	f002 fac9 	bl	800bc30 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800969e:	f7ff fc27 	bl	8008ef0 <StopRetransmission>
}
 80096a2:	bd10      	pop	{r4, pc}
 80096a4:	200008c4 	.word	0x200008c4
 80096a8:	2000055c 	.word	0x2000055c
 80096ac:	00000484 	.word	0x00000484
 80096b0:	0000043e 	.word	0x0000043e
 80096b4:	00000412 	.word	0x00000412
 80096b8:	00000441 	.word	0x00000441
 80096bc:	0000043d 	.word	0x0000043d

080096c0 <OpenContinuousRxCWindow>:
{
 80096c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 80096c2:	4c14      	ldr	r4, [pc, #80]	; (8009714 <OpenContinuousRxCWindow+0x54>)
 80096c4:	4e14      	ldr	r6, [pc, #80]	; (8009718 <OpenContinuousRxCWindow+0x58>)
 80096c6:	4d15      	ldr	r5, [pc, #84]	; (800971c <OpenContinuousRxCWindow+0x5c>)
 80096c8:	59a3      	ldr	r3, [r4, r6]
{
 80096ca:	b085      	sub	sp, #20
                                     MacCtx.NvmCtx->MacParams.RxCChannel.Datarate,
 80096cc:	0019      	movs	r1, r3
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 80096ce:	001a      	movs	r2, r3
 80096d0:	001f      	movs	r7, r3
                                     MacCtx.NvmCtx->MacParams.RxCChannel.Datarate,
 80096d2:	31b4      	adds	r1, #180	; 0xb4
    RegionComputeRxWindowParameters( MacCtx.NvmCtx->Region,
 80096d4:	7809      	ldrb	r1, [r1, #0]
 80096d6:	328c      	adds	r2, #140	; 0x8c
 80096d8:	7818      	ldrb	r0, [r3, #0]
 80096da:	7812      	ldrb	r2, [r2, #0]
 80096dc:	3788      	adds	r7, #136	; 0x88
 80096de:	9500      	str	r5, [sp, #0]
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	b249      	sxtb	r1, r1
 80096e4:	f002 fea9 	bl	800c43a <RegionComputeRxWindowParameters>
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80096e8:	4b0d      	ldr	r3, [pc, #52]	; (8009720 <OpenContinuousRxCWindow+0x60>)
 80096ea:	4a0e      	ldr	r2, [pc, #56]	; (8009724 <OpenContinuousRxCWindow+0x64>)
    if( RegionRxConfig( MacCtx.NvmCtx->Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80096ec:	0029      	movs	r1, r5
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80096ee:	52e2      	strh	r2, [r4, r3]
    if( RegionRxConfig( MacCtx.NvmCtx->Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80096f0:	59a3      	ldr	r3, [r4, r6]
 80096f2:	4a0d      	ldr	r2, [pc, #52]	; (8009728 <OpenContinuousRxCWindow+0x68>)
 80096f4:	7818      	ldrb	r0, [r3, #0]
 80096f6:	f002 feab 	bl	800c450 <RegionRxConfig>
 80096fa:	2800      	cmp	r0, #0
 80096fc:	d008      	beq.n	8009710 <OpenContinuousRxCWindow+0x50>
        Radio.Rx( 0 ); // Continuous mode
 80096fe:	4b0b      	ldr	r3, [pc, #44]	; (800972c <OpenContinuousRxCWindow+0x6c>)
 8009700:	2000      	movs	r0, #0
 8009702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009704:	9303      	str	r3, [sp, #12]
 8009706:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8009708:	4b09      	ldr	r3, [pc, #36]	; (8009730 <OpenContinuousRxCWindow+0x70>)
 800970a:	5ce2      	ldrb	r2, [r4, r3]
 800970c:	338d      	adds	r3, #141	; 0x8d
 800970e:	54e2      	strb	r2, [r4, r3]
}
 8009710:	b005      	add	sp, #20
 8009712:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009714:	2000055c 	.word	0x2000055c
 8009718:	00000484 	.word	0x00000484
 800971c:	2000093c 	.word	0x2000093c
 8009720:	000003f2 	.word	0x000003f2
 8009724:	00000201 	.word	0x00000201
 8009728:	2000097c 	.word	0x2000097c
 800972c:	0800fd8c 	.word	0x0800fd8c
 8009730:	000003f3 	.word	0x000003f3

08009734 <SwitchClass>:
{
 8009734:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch( MacCtx.NvmCtx->DeviceClass )
 8009736:	4b2e      	ldr	r3, [pc, #184]	; (80097f0 <SwitchClass+0xbc>)
{
 8009738:	9000      	str	r0, [sp, #0]
    switch( MacCtx.NvmCtx->DeviceClass )
 800973a:	482e      	ldr	r0, [pc, #184]	; (80097f4 <SwitchClass+0xc0>)
 800973c:	58c3      	ldr	r3, [r0, r3]
 800973e:	001a      	movs	r2, r3
 8009740:	327c      	adds	r2, #124	; 0x7c
 8009742:	7815      	ldrb	r5, [r2, #0]
 8009744:	2d00      	cmp	r5, #0
 8009746:	d003      	beq.n	8009750 <SwitchClass+0x1c>
 8009748:	2d02      	cmp	r5, #2
 800974a:	d046      	beq.n	80097da <SwitchClass+0xa6>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800974c:	2503      	movs	r5, #3
 800974e:	e042      	b.n	80097d6 <SwitchClass+0xa2>
            if( deviceClass == CLASS_A )
 8009750:	9900      	ldr	r1, [sp, #0]
 8009752:	2900      	cmp	r1, #0
 8009754:	d105      	bne.n	8009762 <SwitchClass+0x2e>
                MacCtx.NvmCtx->MacParams.RxCChannel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 8009756:	001a      	movs	r2, r3
 8009758:	33a8      	adds	r3, #168	; 0xa8
 800975a:	32b0      	adds	r2, #176	; 0xb0
 800975c:	cb03      	ldmia	r3!, {r0, r1}
 800975e:	c203      	stmia	r2!, {r0, r1}
            if( deviceClass == CLASS_C )
 8009760:	e7f4      	b.n	800974c <SwitchClass+0x18>
 8009762:	9900      	ldr	r1, [sp, #0]
 8009764:	2902      	cmp	r1, #2
 8009766:	d1f1      	bne.n	800974c <SwitchClass+0x18>
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 8009768:	7011      	strb	r1, [r2, #0]
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800976a:	22f8      	movs	r2, #248	; 0xf8
 800976c:	21f3      	movs	r1, #243	; 0xf3
 800976e:	0092      	lsls	r2, r2, #2
 8009770:	0089      	lsls	r1, r1, #2
 8009772:	1882      	adds	r2, r0, r2
 8009774:	1841      	adds	r1, r0, r1
 8009776:	c9d0      	ldmia	r1!, {r4, r6, r7}
 8009778:	c2d0      	stmia	r2!, {r4, r6, r7}
 800977a:	c950      	ldmia	r1!, {r4, r6}
 800977c:	c250      	stmia	r2!, {r4, r6}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800977e:	4a1e      	ldr	r2, [pc, #120]	; (80097f8 <SwitchClass+0xc4>)
 8009780:	9900      	ldr	r1, [sp, #0]
 8009782:	5481      	strb	r1, [r0, r2]
                    if( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.IsEnabled == true )
 8009784:	001a      	movs	r2, r3
 8009786:	3252      	adds	r2, #82	; 0x52
 8009788:	7812      	ldrb	r2, [r2, #0]
 800978a:	2a00      	cmp	r2, #0
 800978c:	d01a      	beq.n	80097c4 <SwitchClass+0x90>
                        MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 800978e:	0019      	movs	r1, r3
                        MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8009790:	001c      	movs	r4, r3
                        MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 8009792:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009794:	31b0      	adds	r1, #176	; 0xb0
 8009796:	600a      	str	r2, [r1, #0]
                        MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8009798:	346c      	adds	r4, #108	; 0x6c
 800979a:	7824      	ldrb	r4, [r4, #0]
 800979c:	710c      	strb	r4, [r1, #4]
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800979e:	4917      	ldr	r1, [pc, #92]	; (80097fc <SwitchClass+0xc8>)
 80097a0:	5c44      	ldrb	r4, [r0, r1]
 80097a2:	3935      	subs	r1, #53	; 0x35
 80097a4:	5444      	strb	r4, [r0, r1]
                        MacCtx.RxWindowCConfig.Frequency = MacCtx.NvmCtx->MacParams.RxCChannel.Frequency;
 80097a6:	3104      	adds	r1, #4
 80097a8:	5042      	str	r2, [r0, r1]
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 80097aa:	001a      	movs	r2, r3
 80097ac:	32b9      	adds	r2, #185	; 0xb9
 80097ae:	7811      	ldrb	r1, [r2, #0]
 80097b0:	22fc      	movs	r2, #252	; 0xfc
 80097b2:	0092      	lsls	r2, r2, #2
                        MacCtx.RxWindowCConfig.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 80097b4:	33ca      	adds	r3, #202	; 0xca
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 80097b6:	5481      	strb	r1, [r0, r2]
                        MacCtx.RxWindowCConfig.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 80097b8:	781a      	ldrb	r2, [r3, #0]
 80097ba:	4b11      	ldr	r3, [pc, #68]	; (8009800 <SwitchClass+0xcc>)
 80097bc:	54c2      	strb	r2, [r0, r3]
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 80097be:	4b11      	ldr	r3, [pc, #68]	; (8009804 <SwitchClass+0xd0>)
 80097c0:	4a11      	ldr	r2, [pc, #68]	; (8009808 <SwitchClass+0xd4>)
 80097c2:	52c2      	strh	r2, [r0, r3]
                MacCtx.NodeAckRequested = false;
 80097c4:	2200      	movs	r2, #0
 80097c6:	4b11      	ldr	r3, [pc, #68]	; (800980c <SwitchClass+0xd8>)
 80097c8:	54c2      	strb	r2, [r0, r3]
                Radio.Sleep( );
 80097ca:	4b11      	ldr	r3, [pc, #68]	; (8009810 <SwitchClass+0xdc>)
 80097cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097ce:	9300      	str	r3, [sp, #0]
 80097d0:	4798      	blx	r3
                OpenContinuousRxCWindow( );
 80097d2:	f7ff ff75 	bl	80096c0 <OpenContinuousRxCWindow>
}
 80097d6:	0028      	movs	r0, r5
 80097d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
            if( deviceClass == CLASS_A )
 80097da:	9b00      	ldr	r3, [sp, #0]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80097dc:	2503      	movs	r5, #3
            if( deviceClass == CLASS_A )
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d1f9      	bne.n	80097d6 <SwitchClass+0xa2>
                MacCtx.NvmCtx->DeviceClass = deviceClass;
 80097e2:	7013      	strb	r3, [r2, #0]
                Radio.Sleep( );
 80097e4:	4b0a      	ldr	r3, [pc, #40]	; (8009810 <SwitchClass+0xdc>)
 80097e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097e8:	9301      	str	r3, [sp, #4]
 80097ea:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 80097ec:	9d00      	ldr	r5, [sp, #0]
 80097ee:	e7f2      	b.n	80097d6 <SwitchClass+0xa2>
 80097f0:	00000484 	.word	0x00000484
 80097f4:	2000055c 	.word	0x2000055c
 80097f8:	000003f3 	.word	0x000003f3
 80097fc:	00000415 	.word	0x00000415
 8009800:	000003f1 	.word	0x000003f1
 8009804:	000003f2 	.word	0x000003f2
 8009808:	00000301 	.word	0x00000301
 800980c:	00000414 	.word	0x00000414
 8009810:	0800fd8c 	.word	0x0800fd8c

08009814 <RxWindowSetup.constprop.0>:
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
 8009814:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009816:	000c      	movs	r4, r1
    TimerStop( rxTimer );
 8009818:	f005 f998 	bl	800eb4c <UTIL_TIMER_Stop>
    Radio.Standby( );
 800981c:	4e0c      	ldr	r6, [pc, #48]	; (8009850 <RxWindowSetup.constprop.0+0x3c>)
    if( RegionRxConfig( MacCtx.NvmCtx->Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800981e:	4f0d      	ldr	r7, [pc, #52]	; (8009854 <RxWindowSetup.constprop.0+0x40>)
    Radio.Standby( );
 8009820:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8009822:	9301      	str	r3, [sp, #4]
 8009824:	4798      	blx	r3
    if( RegionRxConfig( MacCtx.NvmCtx->Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8009826:	4d0c      	ldr	r5, [pc, #48]	; (8009858 <RxWindowSetup.constprop.0+0x44>)
 8009828:	0021      	movs	r1, r4
 800982a:	59eb      	ldr	r3, [r5, r7]
 800982c:	4a0b      	ldr	r2, [pc, #44]	; (800985c <RxWindowSetup.constprop.0+0x48>)
 800982e:	7818      	ldrb	r0, [r3, #0]
 8009830:	f002 fe0e 	bl	800c450 <RegionRxConfig>
 8009834:	2800      	cmp	r0, #0
 8009836:	d009      	beq.n	800984c <RxWindowSetup.constprop.0+0x38>
        Radio.Rx( MacCtx.NvmCtx->MacParams.MaxRxWindow );
 8009838:	59eb      	ldr	r3, [r5, r7]
 800983a:	6b32      	ldr	r2, [r6, #48]	; 0x30
 800983c:	3390      	adds	r3, #144	; 0x90
 800983e:	6818      	ldr	r0, [r3, #0]
 8009840:	9201      	str	r2, [sp, #4]
 8009842:	4790      	blx	r2
        MacCtx.RxSlot = rxConfig->RxSlot;
 8009844:	2390      	movs	r3, #144	; 0x90
 8009846:	7ce2      	ldrb	r2, [r4, #19]
 8009848:	00db      	lsls	r3, r3, #3
 800984a:	54ea      	strb	r2, [r5, r3]
}
 800984c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800984e:	46c0      	nop			; (mov r8, r8)
 8009850:	0800fd8c 	.word	0x0800fd8c
 8009854:	00000484 	.word	0x00000484
 8009858:	2000055c 	.word	0x2000055c
 800985c:	2000097c 	.word	0x2000097c

08009860 <OnRxWindow1TimerEvent>:
{
 8009860:	b510      	push	{r4, lr}
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 8009862:	4b0f      	ldr	r3, [pc, #60]	; (80098a0 <OnRxWindow1TimerEvent+0x40>)
 8009864:	4a0f      	ldr	r2, [pc, #60]	; (80098a4 <OnRxWindow1TimerEvent+0x44>)
 8009866:	5c99      	ldrb	r1, [r3, r2]
 8009868:	3a5d      	subs	r2, #93	; 0x5d
 800986a:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.DrOffset = MacCtx.NvmCtx->MacParams.Rx1DrOffset;
 800986c:	4a0e      	ldr	r2, [pc, #56]	; (80098a8 <OnRxWindow1TimerEvent+0x48>)
 800986e:	589a      	ldr	r2, [r3, r2]
 8009870:	0011      	movs	r1, r2
 8009872:	31a5      	adds	r1, #165	; 0xa5
 8009874:	7808      	ldrb	r0, [r1, #0]
 8009876:	490d      	ldr	r1, [pc, #52]	; (80098ac <OnRxWindow1TimerEvent+0x4c>)
 8009878:	5458      	strb	r0, [r3, r1]
    MacCtx.RxWindow1Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800987a:	0011      	movs	r1, r2
 800987c:	31b9      	adds	r1, #185	; 0xb9
 800987e:	7808      	ldrb	r0, [r1, #0]
 8009880:	21f2      	movs	r1, #242	; 0xf2
 8009882:	0089      	lsls	r1, r1, #2
 8009884:	5458      	strb	r0, [r3, r1]
    MacCtx.RxWindow1Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 8009886:	32ca      	adds	r2, #202	; 0xca
 8009888:	7811      	ldrb	r1, [r2, #0]
 800988a:	4a09      	ldr	r2, [pc, #36]	; (80098b0 <OnRxWindow1TimerEvent+0x50>)
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800988c:	4809      	ldr	r0, [pc, #36]	; (80098b4 <OnRxWindow1TimerEvent+0x54>)
    MacCtx.RxWindow1Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800988e:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.RxContinuous = false;
 8009890:	2100      	movs	r1, #0
 8009892:	4a09      	ldr	r2, [pc, #36]	; (80098b8 <OnRxWindow1TimerEvent+0x58>)
 8009894:	5299      	strh	r1, [r3, r2]
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 8009896:	4909      	ldr	r1, [pc, #36]	; (80098bc <OnRxWindow1TimerEvent+0x5c>)
 8009898:	f7ff ffbc 	bl	8009814 <RxWindowSetup.constprop.0>
}
 800989c:	bd10      	pop	{r4, pc}
 800989e:	46c0      	nop			; (mov r8, r8)
 80098a0:	2000055c 	.word	0x2000055c
 80098a4:	00000415 	.word	0x00000415
 80098a8:	00000484 	.word	0x00000484
 80098ac:	000003bb 	.word	0x000003bb
 80098b0:	000003c9 	.word	0x000003c9
 80098b4:	200008dc 	.word	0x200008dc
 80098b8:	000003ca 	.word	0x000003ca
 80098bc:	20000914 	.word	0x20000914

080098c0 <OnRxWindow2TimerEvent>:
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 80098c0:	2290      	movs	r2, #144	; 0x90
{
 80098c2:	b510      	push	{r4, lr}
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 80098c4:	4b11      	ldr	r3, [pc, #68]	; (800990c <OnRxWindow2TimerEvent+0x4c>)
 80098c6:	00d2      	lsls	r2, r2, #3
 80098c8:	5c9a      	ldrb	r2, [r3, r2]
 80098ca:	2a00      	cmp	r2, #0
 80098cc:	d01d      	beq.n	800990a <OnRxWindow2TimerEvent+0x4a>
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 80098ce:	4a10      	ldr	r2, [pc, #64]	; (8009910 <OnRxWindow2TimerEvent+0x50>)
 80098d0:	5c99      	ldrb	r1, [r3, r2]
 80098d2:	3a49      	subs	r2, #73	; 0x49
 80098d4:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.Frequency = MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency;
 80098d6:	4a0f      	ldr	r2, [pc, #60]	; (8009914 <OnRxWindow2TimerEvent+0x54>)
 80098d8:	589a      	ldr	r2, [r3, r2]
 80098da:	0011      	movs	r1, r2
 80098dc:	31a8      	adds	r1, #168	; 0xa8
 80098de:	6808      	ldr	r0, [r1, #0]
 80098e0:	21f4      	movs	r1, #244	; 0xf4
 80098e2:	0089      	lsls	r1, r1, #2
 80098e4:	5058      	str	r0, [r3, r1]
    MacCtx.RxWindow2Config.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 80098e6:	0011      	movs	r1, r2
 80098e8:	31b9      	adds	r1, #185	; 0xb9
 80098ea:	7808      	ldrb	r0, [r1, #0]
 80098ec:	21f7      	movs	r1, #247	; 0xf7
 80098ee:	0089      	lsls	r1, r1, #2
 80098f0:	5458      	strb	r0, [r3, r1]
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 80098f2:	32ca      	adds	r2, #202	; 0xca
 80098f4:	7811      	ldrb	r1, [r2, #0]
 80098f6:	4a08      	ldr	r2, [pc, #32]	; (8009918 <OnRxWindow2TimerEvent+0x58>)
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 80098f8:	4808      	ldr	r0, [pc, #32]	; (800991c <OnRxWindow2TimerEvent+0x5c>)
    MacCtx.RxWindow2Config.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 80098fa:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxContinuous = false;
 80098fc:	2180      	movs	r1, #128	; 0x80
 80098fe:	4a08      	ldr	r2, [pc, #32]	; (8009920 <OnRxWindow2TimerEvent+0x60>)
 8009900:	0049      	lsls	r1, r1, #1
 8009902:	5299      	strh	r1, [r3, r2]
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 8009904:	4907      	ldr	r1, [pc, #28]	; (8009924 <OnRxWindow2TimerEvent+0x64>)
 8009906:	f7ff ff85 	bl	8009814 <RxWindowSetup.constprop.0>
}
 800990a:	bd10      	pop	{r4, pc}
 800990c:	2000055c 	.word	0x2000055c
 8009910:	00000415 	.word	0x00000415
 8009914:	00000484 	.word	0x00000484
 8009918:	000003dd 	.word	0x000003dd
 800991c:	200008f4 	.word	0x200008f4
 8009920:	000003de 	.word	0x000003de
 8009924:	20000928 	.word	0x20000928

08009928 <ProcessMacCommands.isra.0.constprop.0>:
    uint8_t status = 0;
 8009928:	2300      	movs	r3, #0
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 800992a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800992c:	b097      	sub	sp, #92	; 0x5c
 800992e:	9208      	str	r2, [sp, #32]
    uint8_t status = 0;
 8009930:	220d      	movs	r2, #13
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 8009932:	0007      	movs	r7, r0
    while( macIndex < commandsSize )
 8009934:	001e      	movs	r6, r3
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 8009936:	9105      	str	r1, [sp, #20]
    uint8_t status = 0;
 8009938:	a908      	add	r1, sp, #32
 800993a:	1852      	adds	r2, r2, r1
 800993c:	7013      	strb	r3, [r2, #0]
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800993e:	aa0c      	add	r2, sp, #48	; 0x30
 8009940:	8013      	strh	r3, [r2, #0]
    bool adrBlockFound = false;
 8009942:	9303      	str	r3, [sp, #12]
    while( macIndex < commandsSize )
 8009944:	9b05      	ldr	r3, [sp, #20]
 8009946:	429e      	cmp	r6, r3
 8009948:	d301      	bcc.n	800994e <ProcessMacCommands.isra.0.constprop.0+0x26>
}
 800994a:	b017      	add	sp, #92	; 0x5c
 800994c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800994e:	5db8      	ldrb	r0, [r7, r6]
 8009950:	f002 f8c0 	bl	800bad4 <LoRaMacCommandsGetCmdSize>
 8009954:	9b05      	ldr	r3, [sp, #20]
 8009956:	1980      	adds	r0, r0, r6
 8009958:	19bd      	adds	r5, r7, r6
 800995a:	4298      	cmp	r0, r3
 800995c:	dcf5      	bgt.n	800994a <ProcessMacCommands.isra.0.constprop.0+0x22>
        switch( payload[macIndex++] )
 800995e:	7828      	ldrb	r0, [r5, #0]
 8009960:	1c74      	adds	r4, r6, #1
 8009962:	3802      	subs	r0, #2
 8009964:	b2e4      	uxtb	r4, r4
 8009966:	280b      	cmp	r0, #11
 8009968:	d8ef      	bhi.n	800994a <ProcessMacCommands.isra.0.constprop.0+0x22>
 800996a:	f7f6 fbdf 	bl	800012c <__gnu_thumb1_case_shi>
 800996e:	000c      	.short	0x000c
 8009970:	008a0023 	.word	0x008a0023
 8009974:	00e800a2 	.word	0x00e800a2
 8009978:	012e0100 	.word	0x012e0100
 800997c:	01a40150 	.word	0x01a40150
 8009980:	ffeeffee 	.word	0xffeeffee
 8009984:	01db      	.short	0x01db
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8009986:	2004      	movs	r0, #4
 8009988:	f002 f96e 	bl	800bc68 <LoRaMacConfirmQueueIsCmdActive>
 800998c:	2800      	cmp	r0, #0
 800998e:	d00f      	beq.n	80099b0 <ProcessMacCommands.isra.0.constprop.0+0x88>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8009990:	2104      	movs	r1, #4
 8009992:	2000      	movs	r0, #0
 8009994:	f002 f926 	bl	800bbe4 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8009998:	228b      	movs	r2, #139	; 0x8b
 800999a:	5d39      	ldrb	r1, [r7, r4]
 800999c:	4bdc      	ldr	r3, [pc, #880]	; (8009d10 <ProcessMacCommands.isra.0.constprop.0+0x3e8>)
 800999e:	00d2      	lsls	r2, r2, #3
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 80099a0:	1cf4      	adds	r4, r6, #3
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 80099a2:	3602      	adds	r6, #2
 80099a4:	5499      	strb	r1, [r3, r2]
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 80099a6:	b2f6      	uxtb	r6, r6
 80099a8:	5db9      	ldrb	r1, [r7, r6]
 80099aa:	4ada      	ldr	r2, [pc, #872]	; (8009d14 <ProcessMacCommands.isra.0.constprop.0+0x3ec>)
 80099ac:	b2e4      	uxtb	r4, r4
 80099ae:	5499      	strb	r1, [r3, r2]
                uint8_t eirpDwellTime = payload[macIndex++];
 80099b0:	0026      	movs	r6, r4
 80099b2:	e7c7      	b.n	8009944 <ProcessMacCommands.isra.0.constprop.0+0x1c>
                int8_t linkAdrDatarate = DR_0;
 80099b4:	2300      	movs	r3, #0
 80099b6:	aa08      	add	r2, sp, #32
 80099b8:	7393      	strb	r3, [r2, #14]
                int8_t linkAdrTxPower = TX_POWER_0;
 80099ba:	73d3      	strb	r3, [r2, #15]
                uint8_t linkAdrNbRep = 0;
 80099bc:	7513      	strb	r3, [r2, #20]
                uint8_t linkAdrNbBytesParsed = 0;
 80099be:	aa0e      	add	r2, sp, #56	; 0x38
 80099c0:	7013      	strb	r3, [r2, #0]
                if( adrBlockFound == false )
 80099c2:	9b03      	ldr	r3, [sp, #12]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d14e      	bne.n	8009a66 <ProcessMacCommands.isra.0.constprop.0+0x13e>
                    linkAdrReq.Payload = &payload[macIndex - 1];
 80099c8:	3c01      	subs	r4, #1
 80099ca:	a912      	add	r1, sp, #72	; 0x48
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 80099cc:	9b05      	ldr	r3, [sp, #20]
                    linkAdrReq.Payload = &payload[macIndex - 1];
 80099ce:	193c      	adds	r4, r7, r4
 80099d0:	604c      	str	r4, [r1, #4]
                    linkAdrReq.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 80099d2:	4dcf      	ldr	r5, [pc, #828]	; (8009d10 <ProcessMacCommands.isra.0.constprop.0+0x3e8>)
 80099d4:	4cd0      	ldr	r4, [pc, #832]	; (8009d18 <ProcessMacCommands.isra.0.constprop.0+0x3f0>)
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 80099d6:	1b9b      	subs	r3, r3, r6
 80099d8:	720b      	strb	r3, [r1, #8]
                    linkAdrReq.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 80099da:	592b      	ldr	r3, [r5, r4]
 80099dc:	0018      	movs	r0, r3
 80099de:	307e      	adds	r0, #126	; 0x7e
 80099e0:	7800      	ldrb	r0, [r0, #0]
 80099e2:	7288      	strb	r0, [r1, #10]
                    linkAdrReq.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 80099e4:	0018      	movs	r0, r3
 80099e6:	30b8      	adds	r0, #184	; 0xb8
 80099e8:	7800      	ldrb	r0, [r0, #0]
 80099ea:	7248      	strb	r0, [r1, #9]
                    linkAdrReq.CurrentDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 80099ec:	0018      	movs	r0, r3
 80099ee:	3085      	adds	r0, #133	; 0x85
 80099f0:	7800      	ldrb	r0, [r0, #0]
 80099f2:	72c8      	strb	r0, [r1, #11]
                    linkAdrReq.CurrentTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 80099f4:	0018      	movs	r0, r3
 80099f6:	3084      	adds	r0, #132	; 0x84
 80099f8:	7800      	ldrb	r0, [r0, #0]
 80099fa:	7308      	strb	r0, [r1, #12]
                    linkAdrReq.CurrentNbRep = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 80099fc:	0018      	movs	r0, r3
 80099fe:	30a4      	adds	r0, #164	; 0xa4
 8009a00:	7800      	ldrb	r0, [r0, #0]
 8009a02:	7348      	strb	r0, [r1, #13]
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 8009a04:	0018      	movs	r0, r3
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 8009a06:	781b      	ldrb	r3, [r3, #0]
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 8009a08:	30fc      	adds	r0, #252	; 0xfc
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 8009a0a:	469c      	mov	ip, r3
 8009a0c:	ab0d      	add	r3, sp, #52	; 0x34
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 8009a0e:	6e40      	ldr	r0, [r0, #100]	; 0x64
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 8009a10:	9300      	str	r3, [sp, #0]
 8009a12:	230f      	movs	r3, #15
 8009a14:	9201      	str	r2, [sp, #4]
 8009a16:	aa08      	add	r2, sp, #32
 8009a18:	189b      	adds	r3, r3, r2
 8009a1a:	220e      	movs	r2, #14
                    linkAdrReq.Version = MacCtx.NvmCtx->Version;
 8009a1c:	9012      	str	r0, [sp, #72]	; 0x48
                    status = RegionLinkAdrReq( MacCtx.NvmCtx->Region, &linkAdrReq, &linkAdrDatarate,
 8009a1e:	a808      	add	r0, sp, #32
 8009a20:	1812      	adds	r2, r2, r0
 8009a22:	4660      	mov	r0, ip
 8009a24:	f002 fd2d 	bl	800c482 <RegionLinkAdrReq>
 8009a28:	ab08      	add	r3, sp, #32
 8009a2a:	7358      	strb	r0, [r3, #13]
                    if( ( status & 0x07 ) == 0x07 )
 8009a2c:	43c0      	mvns	r0, r0
 8009a2e:	0743      	lsls	r3, r0, #29
 8009a30:	d10d      	bne.n	8009a4e <ProcessMacCommands.isra.0.constprop.0+0x126>
                        MacCtx.NvmCtx->MacParams.ChannelsDatarate = linkAdrDatarate;
 8009a32:	592b      	ldr	r3, [r5, r4]
 8009a34:	a908      	add	r1, sp, #32
 8009a36:	001a      	movs	r2, r3
 8009a38:	7b89      	ldrb	r1, [r1, #14]
 8009a3a:	3285      	adds	r2, #133	; 0x85
 8009a3c:	7011      	strb	r1, [r2, #0]
                        MacCtx.NvmCtx->MacParams.ChannelsTxPower = linkAdrTxPower;
 8009a3e:	a908      	add	r1, sp, #32
 8009a40:	7bc9      	ldrb	r1, [r1, #15]
 8009a42:	3a01      	subs	r2, #1
 8009a44:	7011      	strb	r1, [r2, #0]
                        MacCtx.NvmCtx->MacParams.ChannelsNbTrans = linkAdrNbRep;
 8009a46:	aa08      	add	r2, sp, #32
 8009a48:	7d12      	ldrb	r2, [r2, #20]
 8009a4a:	33a4      	adds	r3, #164	; 0xa4
 8009a4c:	701a      	strb	r2, [r3, #0]
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 8009a4e:	2500      	movs	r5, #0
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8009a50:	ab0e      	add	r3, sp, #56	; 0x38
 8009a52:	781c      	ldrb	r4, [r3, #0]
 8009a54:	2105      	movs	r1, #5
 8009a56:	0020      	movs	r0, r4
 8009a58:	f7f6 fb7c 	bl	8000154 <__udivsi3>
 8009a5c:	b2c0      	uxtb	r0, r0
 8009a5e:	4285      	cmp	r5, r0
 8009a60:	d304      	bcc.n	8009a6c <ProcessMacCommands.isra.0.constprop.0+0x144>
                    macIndex += linkAdrNbBytesParsed - 1;
 8009a62:	1934      	adds	r4, r6, r4
 8009a64:	b2e4      	uxtb	r4, r4
                break;
 8009a66:	2301      	movs	r3, #1
 8009a68:	9303      	str	r3, [sp, #12]
 8009a6a:	e7a1      	b.n	80099b0 <ProcessMacCommands.isra.0.constprop.0+0x88>
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8009a6c:	230d      	movs	r3, #13
 8009a6e:	a908      	add	r1, sp, #32
 8009a70:	185b      	adds	r3, r3, r1
 8009a72:	2201      	movs	r2, #1
 8009a74:	0019      	movs	r1, r3
 8009a76:	2003      	movs	r0, #3
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8009a78:	3501      	adds	r5, #1
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8009a7a:	f001 ff31 	bl	800b8e0 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8009a7e:	b2ed      	uxtb	r5, r5
 8009a80:	e7e6      	b.n	8009a50 <ProcessMacCommands.isra.0.constprop.0+0x128>
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 8009a82:	4aa3      	ldr	r2, [pc, #652]	; (8009d10 <ProcessMacCommands.isra.0.constprop.0+0x3e8>)
 8009a84:	4ba4      	ldr	r3, [pc, #656]	; (8009d18 <ProcessMacCommands.isra.0.constprop.0+0x3f0>)
 8009a86:	3602      	adds	r6, #2
 8009a88:	58d1      	ldr	r1, [r2, r3]
 8009a8a:	220f      	movs	r2, #15
 8009a8c:	5d3b      	ldrb	r3, [r7, r4]
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8009a8e:	2004      	movs	r0, #4
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 8009a90:	4013      	ands	r3, r2
 8009a92:	000a      	movs	r2, r1
 8009a94:	32c8      	adds	r2, #200	; 0xc8
 8009a96:	7013      	strb	r3, [r2, #0]
                MacCtx.NvmCtx->AggregatedDCycle = 1 << MacCtx.NvmCtx->MaxDCycle;
 8009a98:	2201      	movs	r2, #1
 8009a9a:	409a      	lsls	r2, r3
 8009a9c:	0013      	movs	r3, r2
 8009a9e:	22a6      	movs	r2, #166	; 0xa6
 8009aa0:	0052      	lsls	r2, r2, #1
 8009aa2:	528b      	strh	r3, [r1, r2]
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	a90c      	add	r1, sp, #48	; 0x30
                MacCtx.NvmCtx->MaxDCycle = payload[macIndex++] & 0x0F;
 8009aa8:	b2f6      	uxtb	r6, r6
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8009aaa:	f001 ff19 	bl	800b8e0 <LoRaMacCommandsAddCmd>
                uint8_t delay = payload[macIndex++] & 0x0F;
 8009aae:	0034      	movs	r4, r6
}
 8009ab0:	e77e      	b.n	80099b0 <ProcessMacCommands.isra.0.constprop.0+0x88>
                status = 0x07;
 8009ab2:	2107      	movs	r1, #7
 8009ab4:	ab08      	add	r3, sp, #32
 8009ab6:	7359      	strb	r1, [r3, #13]
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8009ab8:	5d3b      	ldrb	r3, [r7, r4]
 8009aba:	ad12      	add	r5, sp, #72	; 0x48
 8009abc:	091a      	lsrs	r2, r3, #4
 8009abe:	400a      	ands	r2, r1
 8009ac0:	706a      	strb	r2, [r5, #1]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8009ac2:	220f      	movs	r2, #15
 8009ac4:	4013      	ands	r3, r2
 8009ac6:	702b      	strb	r3, [r5, #0]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8009ac8:	1d32      	adds	r2, r6, #4
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8009aca:	1cf3      	adds	r3, r6, #3
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8009acc:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009ace:	b2d2      	uxtb	r2, r2
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8009ad0:	5cfb      	ldrb	r3, [r7, r3]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009ad2:	5cba      	ldrb	r2, [r7, r2]
 8009ad4:	1d74      	adds	r4, r6, #5
                macIndex++;
 8009ad6:	3602      	adds	r6, #2
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009ad8:	0412      	lsls	r2, r2, #16
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8009ada:	b2f6      	uxtb	r6, r6
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8009adc:	021b      	lsls	r3, r3, #8
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009ade:	4313      	orrs	r3, r2
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8009ae0:	5dba      	ldrb	r2, [r7, r6]
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 8009ae2:	4e8d      	ldr	r6, [pc, #564]	; (8009d18 <ProcessMacCommands.isra.0.constprop.0+0x3f0>)
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009ae4:	4313      	orrs	r3, r2
                rxParamSetupReq.Frequency *= 100;
 8009ae6:	2264      	movs	r2, #100	; 0x64
 8009ae8:	4353      	muls	r3, r2
 8009aea:	9313      	str	r3, [sp, #76]	; 0x4c
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 8009aec:	4b88      	ldr	r3, [pc, #544]	; (8009d10 <ProcessMacCommands.isra.0.constprop.0+0x3e8>)
 8009aee:	0029      	movs	r1, r5
 8009af0:	599b      	ldr	r3, [r3, r6]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009af2:	b2e4      	uxtb	r4, r4
                status = RegionRxParamSetupReq( MacCtx.NvmCtx->Region, &rxParamSetupReq );
 8009af4:	7818      	ldrb	r0, [r3, #0]
 8009af6:	9304      	str	r3, [sp, #16]
 8009af8:	f002 fcd3 	bl	800c4a2 <RegionRxParamSetupReq>
 8009afc:	ab08      	add	r3, sp, #32
 8009afe:	7358      	strb	r0, [r3, #13]
                if( ( status & 0x07 ) == 0x07 )
 8009b00:	2307      	movs	r3, #7
 8009b02:	4003      	ands	r3, r0
 8009b04:	2b07      	cmp	r3, #7
 8009b06:	d10d      	bne.n	8009b24 <ProcessMacCommands.isra.0.constprop.0+0x1fc>
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8009b08:	4b81      	ldr	r3, [pc, #516]	; (8009d10 <ProcessMacCommands.isra.0.constprop.0+0x3e8>)
 8009b0a:	782a      	ldrb	r2, [r5, #0]
 8009b0c:	599b      	ldr	r3, [r3, r6]
 8009b0e:	0019      	movs	r1, r3
 8009b10:	31ac      	adds	r1, #172	; 0xac
 8009b12:	700a      	strb	r2, [r1, #0]
                    MacCtx.NvmCtx->MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 8009b14:	720a      	strb	r2, [r1, #8]
                    MacCtx.NvmCtx->MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 8009b16:	686a      	ldr	r2, [r5, #4]
 8009b18:	3904      	subs	r1, #4
 8009b1a:	600a      	str	r2, [r1, #0]
                    MacCtx.NvmCtx->MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 8009b1c:	608a      	str	r2, [r1, #8]
                    MacCtx.NvmCtx->MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 8009b1e:	786a      	ldrb	r2, [r5, #1]
 8009b20:	33a5      	adds	r3, #165	; 0xa5
 8009b22:	701a      	strb	r2, [r3, #0]
                macCmdPayload[0] = status;
 8009b24:	a90c      	add	r1, sp, #48	; 0x30
 8009b26:	7008      	strb	r0, [r1, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 8009b28:	2201      	movs	r2, #1
 8009b2a:	2005      	movs	r0, #5
 8009b2c:	f001 fed8 	bl	800b8e0 <LoRaMacCommandsAddCmd>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8009b30:	2310      	movs	r3, #16
 8009b32:	4977      	ldr	r1, [pc, #476]	; (8009d10 <ProcessMacCommands.isra.0.constprop.0+0x3e8>)
 8009b34:	4a79      	ldr	r2, [pc, #484]	; (8009d1c <ProcessMacCommands.isra.0.constprop.0+0x3f4>)
 8009b36:	5c88      	ldrb	r0, [r1, r2]
 8009b38:	4303      	orrs	r3, r0
 8009b3a:	548b      	strb	r3, [r1, r2]
                break;
 8009b3c:	e738      	b.n	80099b0 <ProcessMacCommands.isra.0.constprop.0+0x88>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8009b3e:	23d2      	movs	r3, #210	; 0xd2
 8009b40:	4a73      	ldr	r2, [pc, #460]	; (8009d10 <ProcessMacCommands.isra.0.constprop.0+0x3e8>)
 8009b42:	009b      	lsls	r3, r3, #2
 8009b44:	58d3      	ldr	r3, [r2, r3]
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8009b46:	20ff      	movs	r0, #255	; 0xff
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d003      	beq.n	8009b54 <ProcessMacCommands.isra.0.constprop.0+0x22c>
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d000      	beq.n	8009b54 <ProcessMacCommands.isra.0.constprop.0+0x22c>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 8009b52:	4798      	blx	r3
                macCmdPayload[0] = batteryLevel;
 8009b54:	ab08      	add	r3, sp, #32
 8009b56:	7418      	strb	r0, [r3, #16]
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8009b58:	233f      	movs	r3, #63	; 0x3f
 8009b5a:	9a08      	ldr	r2, [sp, #32]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8009b5c:	2006      	movs	r0, #6
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 8009b5e:	4013      	ands	r3, r2
 8009b60:	aa08      	add	r2, sp, #32
 8009b62:	7453      	strb	r3, [r2, #17]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8009b64:	2202      	movs	r2, #2
 8009b66:	a90c      	add	r1, sp, #48	; 0x30
                LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8009b68:	f001 feba 	bl	800b8e0 <LoRaMacCommandsAddCmd>
                break;
 8009b6c:	e720      	b.n	80099b0 <ProcessMacCommands.isra.0.constprop.0+0x88>
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8009b6e:	1cf2      	adds	r2, r6, #3
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8009b70:	b2d2      	uxtb	r2, r2
 8009b72:	5cb8      	ldrb	r0, [r7, r2]
 8009b74:	1d32      	adds	r2, r6, #4
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009b76:	b2d2      	uxtb	r2, r2
 8009b78:	5cba      	ldrb	r2, [r7, r2]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8009b7a:	0200      	lsls	r0, r0, #8
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009b7c:	0412      	lsls	r2, r2, #16
 8009b7e:	4302      	orrs	r2, r0
                newChannelReq.ChannelId = payload[macIndex++];
 8009b80:	1cb0      	adds	r0, r6, #2
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8009b82:	b2c0      	uxtb	r0, r0
 8009b84:	5c38      	ldrb	r0, [r7, r0]
                status = 0x03;
 8009b86:	250d      	movs	r5, #13
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009b88:	4310      	orrs	r0, r2
                chParam.Frequency *= 100;
 8009b8a:	2264      	movs	r2, #100	; 0x64
 8009b8c:	4342      	muls	r2, r0
                status = 0x03;
 8009b8e:	ab08      	add	r3, sp, #32
 8009b90:	18ed      	adds	r5, r5, r3
 8009b92:	2303      	movs	r3, #3
                chParam.Frequency *= 100;
 8009b94:	9212      	str	r2, [sp, #72]	; 0x48
                chParam.Rx1Frequency = 0;
 8009b96:	2200      	movs	r2, #0
                status = 0x03;
 8009b98:	702b      	strb	r3, [r5, #0]
                newChannelReq.ChannelId = payload[macIndex++];
 8009b9a:	5d3b      	ldrb	r3, [r7, r4]
                chParam.DrRange.Value = payload[macIndex++];
 8009b9c:	1db4      	adds	r4, r6, #6
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009b9e:	3605      	adds	r6, #5
                chParam.DrRange.Value = payload[macIndex++];
 8009ba0:	b2f6      	uxtb	r6, r6
                newChannelReq.ChannelId = payload[macIndex++];
 8009ba2:	a90e      	add	r1, sp, #56	; 0x38
                chParam.Rx1Frequency = 0;
 8009ba4:	9213      	str	r2, [sp, #76]	; 0x4c
                chParam.DrRange.Value = payload[macIndex++];
 8009ba6:	5dba      	ldrb	r2, [r7, r6]
                newChannelReq.ChannelId = payload[macIndex++];
 8009ba8:	710b      	strb	r3, [r1, #4]
                newChannelReq.NewChannel = &chParam;
 8009baa:	ab12      	add	r3, sp, #72	; 0x48
                chParam.DrRange.Value = payload[macIndex++];
 8009bac:	721a      	strb	r2, [r3, #8]
                newChannelReq.NewChannel = &chParam;
 8009bae:	930e      	str	r3, [sp, #56]	; 0x38
                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 8009bb0:	4a57      	ldr	r2, [pc, #348]	; (8009d10 <ProcessMacCommands.isra.0.constprop.0+0x3e8>)
 8009bb2:	4b59      	ldr	r3, [pc, #356]	; (8009d18 <ProcessMacCommands.isra.0.constprop.0+0x3f0>)
                chParam.DrRange.Value = payload[macIndex++];
 8009bb4:	b2e4      	uxtb	r4, r4
                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 8009bb6:	58d3      	ldr	r3, [r2, r3]
 8009bb8:	7818      	ldrb	r0, [r3, #0]
 8009bba:	f002 fc7c 	bl	800c4b6 <RegionNewChannelReq>
                macCmdPayload[0] = status;
 8009bbe:	a90c      	add	r1, sp, #48	; 0x30
                status = RegionNewChannelReq( MacCtx.NvmCtx->Region, &newChannelReq );
 8009bc0:	7028      	strb	r0, [r5, #0]
                macCmdPayload[0] = status;
 8009bc2:	7008      	strb	r0, [r1, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8009bc4:	2201      	movs	r2, #1
 8009bc6:	2007      	movs	r0, #7
 8009bc8:	e7ce      	b.n	8009b68 <ProcessMacCommands.isra.0.constprop.0+0x240>
                uint8_t delay = payload[macIndex++] & 0x0F;
 8009bca:	230f      	movs	r3, #15
 8009bcc:	5d39      	ldrb	r1, [r7, r4]
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 8009bce:	4a50      	ldr	r2, [pc, #320]	; (8009d10 <ProcessMacCommands.isra.0.constprop.0+0x3e8>)
                uint8_t delay = payload[macIndex++] & 0x0F;
 8009bd0:	4019      	ands	r1, r3
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 8009bd2:	4b51      	ldr	r3, [pc, #324]	; (8009d18 <ProcessMacCommands.isra.0.constprop.0+0x3f0>)
                uint8_t delay = payload[macIndex++] & 0x0F;
 8009bd4:	3602      	adds	r6, #2
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 8009bd6:	58d2      	ldr	r2, [r2, r3]
                uint8_t delay = payload[macIndex++] & 0x0F;
 8009bd8:	b2f6      	uxtb	r6, r6
                MacCtx.NvmCtx->MacParams.ReceiveDelay1 = delay * 1000;
 8009bda:	1c0b      	adds	r3, r1, #0
 8009bdc:	2900      	cmp	r1, #0
 8009bde:	d100      	bne.n	8009be2 <ProcessMacCommands.isra.0.constprop.0+0x2ba>
 8009be0:	2301      	movs	r3, #1
 8009be2:	20fa      	movs	r0, #250	; 0xfa
 8009be4:	0011      	movs	r1, r2
 8009be6:	0080      	lsls	r0, r0, #2
 8009be8:	b2db      	uxtb	r3, r3
 8009bea:	4343      	muls	r3, r0
 8009bec:	3194      	adds	r1, #148	; 0x94
 8009bee:	600b      	str	r3, [r1, #0]
                MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay1 + 1000;
 8009bf0:	3298      	adds	r2, #152	; 0x98
 8009bf2:	181b      	adds	r3, r3, r0
 8009bf4:	6013      	str	r3, [r2, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 8009bf6:	a90c      	add	r1, sp, #48	; 0x30
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	2008      	movs	r0, #8
 8009bfc:	f001 fe70 	bl	800b8e0 <LoRaMacCommandsAddCmd>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8009c00:	2310      	movs	r3, #16
 8009c02:	4943      	ldr	r1, [pc, #268]	; (8009d10 <ProcessMacCommands.isra.0.constprop.0+0x3e8>)
 8009c04:	4a45      	ldr	r2, [pc, #276]	; (8009d1c <ProcessMacCommands.isra.0.constprop.0+0x3f4>)
 8009c06:	5c88      	ldrb	r0, [r1, r2]
 8009c08:	4303      	orrs	r3, r0
 8009c0a:	548b      	strb	r3, [r1, r2]
 8009c0c:	e74f      	b.n	8009aae <ProcessMacCommands.isra.0.constprop.0+0x186>
                uint8_t eirpDwellTime = payload[macIndex++];
 8009c0e:	3602      	adds	r6, #2
 8009c10:	b2f3      	uxtb	r3, r6
 8009c12:	9306      	str	r3, [sp, #24]
 8009c14:	5d3b      	ldrb	r3, [r7, r4]
                txParamSetupReq.UplinkDwellTime = 0;
 8009c16:	2200      	movs	r2, #0
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8009c18:	0019      	movs	r1, r3
                txParamSetupReq.UplinkDwellTime = 0;
 8009c1a:	ac0d      	add	r4, sp, #52	; 0x34
 8009c1c:	7022      	strb	r2, [r4, #0]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8009c1e:	3220      	adds	r2, #32
 8009c20:	4011      	ands	r1, r2
 8009c22:	4213      	tst	r3, r2
 8009c24:	d144      	bne.n	8009cb0 <ProcessMacCommands.isra.0.constprop.0+0x388>
                txParamSetupReq.DownlinkDwellTime = 0;
 8009c26:	7061      	strb	r1, [r4, #1]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 8009c28:	06da      	lsls	r2, r3, #27
 8009c2a:	d501      	bpl.n	8009c30 <ProcessMacCommands.isra.0.constprop.0+0x308>
                    txParamSetupReq.UplinkDwellTime = 1;
 8009c2c:	2201      	movs	r2, #1
 8009c2e:	7022      	strb	r2, [r4, #0]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8009c30:	220f      	movs	r2, #15
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
 8009c32:	4d37      	ldr	r5, [pc, #220]	; (8009d10 <ProcessMacCommands.isra.0.constprop.0+0x3e8>)
 8009c34:	4e38      	ldr	r6, [pc, #224]	; (8009d18 <ProcessMacCommands.isra.0.constprop.0+0x3f0>)
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 8009c36:	4013      	ands	r3, r2
 8009c38:	70a3      	strb	r3, [r4, #2]
                if( RegionTxParamSetupReq( MacCtx.NvmCtx->Region, &txParamSetupReq ) != -1 )
 8009c3a:	59ab      	ldr	r3, [r5, r6]
 8009c3c:	0021      	movs	r1, r4
 8009c3e:	7818      	ldrb	r0, [r3, #0]
 8009c40:	f002 fc43 	bl	800c4ca <RegionTxParamSetupReq>
 8009c44:	1c43      	adds	r3, r0, #1
 8009c46:	d031      	beq.n	8009cac <ProcessMacCommands.isra.0.constprop.0+0x384>
                    MacCtx.NvmCtx->MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 8009c48:	59ab      	ldr	r3, [r5, r6]
 8009c4a:	8822      	ldrh	r2, [r4, #0]
 8009c4c:	9304      	str	r3, [sp, #16]
 8009c4e:	7823      	ldrb	r3, [r4, #0]
 8009c50:	9307      	str	r3, [sp, #28]
 8009c52:	9b04      	ldr	r3, [sp, #16]
 8009c54:	33b8      	adds	r3, #184	; 0xb8
 8009c56:	801a      	strh	r2, [r3, #0]
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8009c58:	9b04      	ldr	r3, [sp, #16]
 8009c5a:	4a31      	ldr	r2, [pc, #196]	; (8009d20 <ProcessMacCommands.isra.0.constprop.0+0x3f8>)
 8009c5c:	33bc      	adds	r3, #188	; 0xbc
 8009c5e:	9309      	str	r3, [sp, #36]	; 0x24
 8009c60:	78a3      	ldrb	r3, [r4, #2]
                    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MAX( MacCtx.NvmCtx->MacParams.ChannelsDatarate, ( int8_t )phyParam.Value );
 8009c62:	2400      	movs	r4, #0
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8009c64:	5cd0      	ldrb	r0, [r2, r3]
 8009c66:	f7f6 ff23 	bl	8000ab0 <__aeabi_ui2f>
 8009c6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8009c6c:	2128      	movs	r1, #40	; 0x28
                    MacCtx.NvmCtx->MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 8009c6e:	6018      	str	r0, [r3, #0]
                    getPhy.Attribute = PHY_MIN_TX_DR;
 8009c70:	2302      	movs	r3, #2
 8009c72:	aa08      	add	r2, sp, #32
 8009c74:	1852      	adds	r2, r2, r1
 8009c76:	7013      	strb	r3, [r2, #0]
                    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8009c78:	222a      	movs	r2, #42	; 0x2a
 8009c7a:	ab08      	add	r3, sp, #32
 8009c7c:	189b      	adds	r3, r3, r2
 8009c7e:	9a07      	ldr	r2, [sp, #28]
                    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009c80:	a912      	add	r1, sp, #72	; 0x48
                    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 8009c82:	701a      	strb	r2, [r3, #0]
                    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009c84:	9b04      	ldr	r3, [sp, #16]
 8009c86:	7818      	ldrb	r0, [r3, #0]
 8009c88:	f002 fb9d 	bl	800c3c6 <RegionGetPhyParam>
                    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MAX( MacCtx.NvmCtx->MacParams.ChannelsDatarate, ( int8_t )phyParam.Value );
 8009c8c:	59ab      	ldr	r3, [r5, r6]
                    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009c8e:	900e      	str	r0, [sp, #56]	; 0x38
                    MacCtx.NvmCtx->MacParams.ChannelsDatarate = MAX( MacCtx.NvmCtx->MacParams.ChannelsDatarate, ( int8_t )phyParam.Value );
 8009c90:	3385      	adds	r3, #133	; 0x85
 8009c92:	571c      	ldrsb	r4, [r3, r4]
 8009c94:	1c02      	adds	r2, r0, #0
 8009c96:	b240      	sxtb	r0, r0
 8009c98:	7819      	ldrb	r1, [r3, #0]
 8009c9a:	42a0      	cmp	r0, r4
 8009c9c:	da00      	bge.n	8009ca0 <ProcessMacCommands.isra.0.constprop.0+0x378>
 8009c9e:	1c0a      	adds	r2, r1, #0
 8009ca0:	701a      	strb	r2, [r3, #0]
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8009ca2:	2009      	movs	r0, #9
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	a90c      	add	r1, sp, #48	; 0x30
 8009ca8:	f001 fe1a 	bl	800b8e0 <LoRaMacCommandsAddCmd>
                uint8_t eirpDwellTime = payload[macIndex++];
 8009cac:	9c06      	ldr	r4, [sp, #24]
 8009cae:	e67f      	b.n	80099b0 <ProcessMacCommands.isra.0.constprop.0+0x88>
                    txParamSetupReq.DownlinkDwellTime = 1;
 8009cb0:	2201      	movs	r2, #1
 8009cb2:	7062      	strb	r2, [r4, #1]
 8009cb4:	e7b8      	b.n	8009c28 <ProcessMacCommands.isra.0.constprop.0+0x300>
                status = 0x03;
 8009cb6:	250d      	movs	r5, #13
 8009cb8:	ab08      	add	r3, sp, #32
 8009cba:	18ed      	adds	r5, r5, r3
 8009cbc:	2303      	movs	r3, #3
 8009cbe:	702b      	strb	r3, [r5, #0]
                dlChannelReq.ChannelId = payload[macIndex++];
 8009cc0:	5d3b      	ldrb	r3, [r7, r4]
 8009cc2:	a912      	add	r1, sp, #72	; 0x48
 8009cc4:	700b      	strb	r3, [r1, #0]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8009cc6:	1d32      	adds	r2, r6, #4
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8009cc8:	1cf3      	adds	r3, r6, #3
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8009cca:	b2db      	uxtb	r3, r3
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009ccc:	b2d2      	uxtb	r2, r2
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8009cce:	5cfb      	ldrb	r3, [r7, r3]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009cd0:	5cba      	ldrb	r2, [r7, r2]
 8009cd2:	1d74      	adds	r4, r6, #5
                dlChannelReq.ChannelId = payload[macIndex++];
 8009cd4:	3602      	adds	r6, #2
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009cd6:	0412      	lsls	r2, r2, #16
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8009cd8:	b2f6      	uxtb	r6, r6
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8009cda:	021b      	lsls	r3, r3, #8
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009cdc:	4313      	orrs	r3, r2
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8009cde:	5dba      	ldrb	r2, [r7, r6]
                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 8009ce0:	4e0b      	ldr	r6, [pc, #44]	; (8009d10 <ProcessMacCommands.isra.0.constprop.0+0x3e8>)
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009ce2:	4313      	orrs	r3, r2
                dlChannelReq.Rx1Frequency *= 100;
 8009ce4:	2264      	movs	r2, #100	; 0x64
 8009ce6:	4353      	muls	r3, r2
 8009ce8:	604b      	str	r3, [r1, #4]
                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 8009cea:	4b0b      	ldr	r3, [pc, #44]	; (8009d18 <ProcessMacCommands.isra.0.constprop.0+0x3f0>)
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009cec:	b2e4      	uxtb	r4, r4
                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 8009cee:	58f3      	ldr	r3, [r6, r3]
 8009cf0:	7818      	ldrb	r0, [r3, #0]
 8009cf2:	f002 fbf4 	bl	800c4de <RegionDlChannelReq>
                macCmdPayload[0] = status;
 8009cf6:	a90c      	add	r1, sp, #48	; 0x30
 8009cf8:	7008      	strb	r0, [r1, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8009cfa:	2201      	movs	r2, #1
                status = RegionDlChannelReq( MacCtx.NvmCtx->Region, &dlChannelReq );
 8009cfc:	7028      	strb	r0, [r5, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8009cfe:	200a      	movs	r0, #10
 8009d00:	f001 fdee 	bl	800b8e0 <LoRaMacCommandsAddCmd>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8009d04:	2310      	movs	r3, #16
 8009d06:	4a05      	ldr	r2, [pc, #20]	; (8009d1c <ProcessMacCommands.isra.0.constprop.0+0x3f4>)
 8009d08:	5cb1      	ldrb	r1, [r6, r2]
 8009d0a:	430b      	orrs	r3, r1
 8009d0c:	54b3      	strb	r3, [r6, r2]
                break;
 8009d0e:	e64f      	b.n	80099b0 <ProcessMacCommands.isra.0.constprop.0+0x88>
 8009d10:	2000055c 	.word	0x2000055c
 8009d14:	00000459 	.word	0x00000459
 8009d18:	00000484 	.word	0x00000484
 8009d1c:	00000481 	.word	0x00000481
 8009d20:	0800fbdf 	.word	0x0800fbdf
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8009d24:	200a      	movs	r0, #10
 8009d26:	f001 ff9f 	bl	800bc68 <LoRaMacConfirmQueueIsCmdActive>
 8009d2a:	2800      	cmp	r0, #0
 8009d2c:	d100      	bne.n	8009d30 <ProcessMacCommands.isra.0.constprop.0+0x408>
 8009d2e:	e63f      	b.n	80099b0 <ProcessMacCommands.isra.0.constprop.0+0x88>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 8009d30:	210a      	movs	r1, #10
 8009d32:	2000      	movs	r0, #0
 8009d34:	f001 ff56 	bl	800bbe4 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t sysTime = { 0 };
 8009d38:	231e      	movs	r3, #30
 8009d3a:	aa08      	add	r2, sp, #32
 8009d3c:	189b      	adds	r3, r3, r2
 8009d3e:	2200      	movs	r2, #0
 8009d40:	801a      	strh	r2, [r3, #0]
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8009d42:	22fa      	movs	r2, #250	; 0xfa
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8009d44:	1cb3      	adds	r3, r6, #2
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8009d46:	b2db      	uxtb	r3, r3
 8009d48:	5cfd      	ldrb	r5, [r7, r3]
 8009d4a:	1cf3      	adds	r3, r6, #3
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8009d4c:	b2db      	uxtb	r3, r3
 8009d4e:	5cf9      	ldrb	r1, [r7, r3]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 8009d50:	022d      	lsls	r5, r5, #8
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8009d52:	0409      	lsls	r1, r1, #16
 8009d54:	430d      	orrs	r5, r1
 8009d56:	1d33      	adds	r3, r6, #4
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 8009d58:	5d39      	ldrb	r1, [r7, r4]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8009d5a:	1db4      	adds	r4, r6, #6
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8009d5c:	3605      	adds	r6, #5
 8009d5e:	b2db      	uxtb	r3, r3
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8009d60:	b2f6      	uxtb	r6, r6
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8009d62:	430d      	orrs	r5, r1
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8009d64:	5cf9      	ldrb	r1, [r7, r3]
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8009d66:	5dbb      	ldrb	r3, [r7, r6]
 8009d68:	0092      	lsls	r2, r2, #2
 8009d6a:	4353      	muls	r3, r2
 8009d6c:	aa08      	add	r2, sp, #32
 8009d6e:	121b      	asrs	r3, r3, #8
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8009d70:	0609      	lsls	r1, r1, #24
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8009d72:	8393      	strh	r3, [r2, #28]
                    sysTimeCurrent = SysTimeGet( );
 8009d74:	a812      	add	r0, sp, #72	; 0x48
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8009d76:	430d      	orrs	r5, r1
                    sysTimeCurrent = SysTimeGet( );
 8009d78:	f004 fc52 	bl	800e620 <SysTimeGet>
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8009d7c:	4b10      	ldr	r3, [pc, #64]	; (8009dc0 <ProcessMacCommands.isra.0.constprop.0+0x498>)
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8009d7e:	4e11      	ldr	r6, [pc, #68]	; (8009dc4 <ProcessMacCommands.isra.0.constprop.0+0x49c>)
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8009d80:	18e9      	adds	r1, r5, r3
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8009d82:	23cf      	movs	r3, #207	; 0xcf
 8009d84:	009b      	lsls	r3, r3, #2
 8009d86:	18f3      	adds	r3, r6, r3
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009d8c:	9300      	str	r3, [sp, #0]
 8009d8e:	23ce      	movs	r3, #206	; 0xce
 8009d90:	009b      	lsls	r3, r3, #2
 8009d92:	58f3      	ldr	r3, [r6, r3]
 8009d94:	a810      	add	r0, sp, #64	; 0x40
 8009d96:	910e      	str	r1, [sp, #56]	; 0x38
 8009d98:	f004 fc04 	bl	800e5a4 <SysTimeSub>
 8009d9c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009d9e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009da0:	9912      	ldr	r1, [sp, #72]	; 0x48
 8009da2:	9300      	str	r3, [sp, #0]
 8009da4:	a80e      	add	r0, sp, #56	; 0x38
 8009da6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009da8:	f004 fbe2 	bl	800e570 <SysTimeAdd>
                    SysTimeSet( sysTime );
 8009dac:	980e      	ldr	r0, [sp, #56]	; 0x38
 8009dae:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009db0:	f004 fc0e 	bl	800e5d0 <SysTimeSet>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8009db4:	2387      	movs	r3, #135	; 0x87
 8009db6:	2201      	movs	r2, #1
 8009db8:	00db      	lsls	r3, r3, #3
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8009dba:	b2e4      	uxtb	r4, r4
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8009dbc:	54f2      	strb	r2, [r6, r3]
 8009dbe:	e5f7      	b.n	80099b0 <ProcessMacCommands.isra.0.constprop.0+0x88>
 8009dc0:	12d53d80 	.word	0x12d53d80
 8009dc4:	2000055c 	.word	0x2000055c

08009dc8 <LoRaMacIsBusy>:
}

/* Exported functions ---------------------------------------------------------*/
bool LoRaMacIsBusy( void )
{
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8009dc8:	22d0      	movs	r2, #208	; 0xd0
 8009dca:	4b06      	ldr	r3, [pc, #24]	; (8009de4 <LoRaMacIsBusy+0x1c>)
 8009dcc:	0092      	lsls	r2, r2, #2
 8009dce:	589a      	ldr	r2, [r3, r2]
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
    {
        return false;
    }
    return true;
 8009dd0:	2001      	movs	r0, #1
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8009dd2:	2a00      	cmp	r2, #0
 8009dd4:	d105      	bne.n	8009de2 <LoRaMacIsBusy+0x1a>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 8009dd6:	4a04      	ldr	r2, [pc, #16]	; (8009de8 <LoRaMacIsBusy+0x20>)
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 8009dd8:	5c98      	ldrb	r0, [r3, r2]
 8009dda:	3801      	subs	r0, #1
 8009ddc:	1e43      	subs	r3, r0, #1
 8009dde:	4198      	sbcs	r0, r3
 8009de0:	b2c0      	uxtb	r0, r0
}
 8009de2:	4770      	bx	lr
 8009de4:	2000055c 	.word	0x2000055c
 8009de8:	00000482 	.word	0x00000482

08009dec <LoRaMacProcess>:

void LoRaMacProcess( void )
{
 8009dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009dee:	b09f      	sub	sp, #124	; 0x7c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009df0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8009df4:	b672      	cpsid	i
    LoRaMacRadioEvents.Value = 0;
 8009df6:	2000      	movs	r0, #0
    events = LoRaMacRadioEvents;
 8009df8:	4ada      	ldr	r2, [pc, #872]	; (800a164 <LoRaMacProcess+0x378>)
 8009dfa:	6813      	ldr	r3, [r2, #0]
    LoRaMacRadioEvents.Value = 0;
 8009dfc:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009dfe:	f381 8810 	msr	PRIMASK, r1
    if( events.Value != 0 )
 8009e02:	4fd9      	ldr	r7, [pc, #868]	; (800a168 <LoRaMacProcess+0x37c>)
 8009e04:	4283      	cmp	r3, r0
 8009e06:	d100      	bne.n	8009e0a <LoRaMacProcess+0x1e>
 8009e08:	e120      	b.n	800a04c <LoRaMacProcess+0x260>
        if( events.Events.TxDone == 1 )
 8009e0a:	b2da      	uxtb	r2, r3
 8009e0c:	9206      	str	r2, [sp, #24]
 8009e0e:	06db      	lsls	r3, r3, #27
 8009e10:	d571      	bpl.n	8009ef6 <LoRaMacProcess+0x10a>
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8009e12:	4cd6      	ldr	r4, [pc, #856]	; (800a16c <LoRaMacProcess+0x380>)
 8009e14:	4dd6      	ldr	r5, [pc, #856]	; (800a170 <LoRaMacProcess+0x384>)
 8009e16:	5963      	ldr	r3, [r4, r5]
 8009e18:	337c      	adds	r3, #124	; 0x7c
 8009e1a:	781b      	ldrb	r3, [r3, #0]
 8009e1c:	2b02      	cmp	r3, #2
 8009e1e:	d003      	beq.n	8009e28 <LoRaMacProcess+0x3c>
        Radio.Sleep( );
 8009e20:	4bd4      	ldr	r3, [pc, #848]	; (800a174 <LoRaMacProcess+0x388>)
 8009e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e24:	9302      	str	r3, [sp, #8]
 8009e26:	4798      	blx	r3
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 8009e28:	23ec      	movs	r3, #236	; 0xec
 8009e2a:	4ed3      	ldr	r6, [pc, #844]	; (800a178 <LoRaMacProcess+0x38c>)
 8009e2c:	009b      	lsls	r3, r3, #2
 8009e2e:	58e1      	ldr	r1, [r4, r3]
 8009e30:	0030      	movs	r0, r6
 8009e32:	f004 ff3b 	bl	800ecac <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 8009e36:	0030      	movs	r0, r6
 8009e38:	f004 fedc 	bl	800ebf4 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 8009e3c:	23ed      	movs	r3, #237	; 0xed
 8009e3e:	4ecf      	ldr	r6, [pc, #828]	; (800a17c <LoRaMacProcess+0x390>)
 8009e40:	009b      	lsls	r3, r3, #2
 8009e42:	58e1      	ldr	r1, [r4, r3]
 8009e44:	0030      	movs	r0, r6
 8009e46:	f004 ff31 	bl	800ecac <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 8009e4a:	0030      	movs	r0, r6
 8009e4c:	f004 fed2 	bl	800ebf4 <UTIL_TIMER_Start>
    if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 8009e50:	5963      	ldr	r3, [r4, r5]
 8009e52:	001a      	movs	r2, r3
 8009e54:	327c      	adds	r2, #124	; 0x7c
 8009e56:	7812      	ldrb	r2, [r2, #0]
 8009e58:	2a02      	cmp	r2, #2
 8009e5a:	d003      	beq.n	8009e64 <LoRaMacProcess+0x78>
 8009e5c:	4ac8      	ldr	r2, [pc, #800]	; (800a180 <LoRaMacProcess+0x394>)
 8009e5e:	5ca2      	ldrb	r2, [r4, r2]
 8009e60:	2a00      	cmp	r2, #0
 8009e62:	d011      	beq.n	8009e88 <LoRaMacProcess+0x9c>
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 8009e64:	2216      	movs	r2, #22
 8009e66:	a90e      	add	r1, sp, #56	; 0x38
 8009e68:	700a      	strb	r2, [r1, #0]
        phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009e6a:	7818      	ldrb	r0, [r3, #0]
 8009e6c:	f002 faab 	bl	800c3c6 <RegionGetPhyParam>
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8009e70:	23ed      	movs	r3, #237	; 0xed
 8009e72:	009b      	lsls	r3, r3, #2
 8009e74:	4ec3      	ldr	r6, [pc, #780]	; (800a184 <LoRaMacProcess+0x398>)
 8009e76:	58e1      	ldr	r1, [r4, r3]
        phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009e78:	900d      	str	r0, [sp, #52]	; 0x34
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8009e7a:	1809      	adds	r1, r1, r0
 8009e7c:	0030      	movs	r0, r6
 8009e7e:	f004 ff15 	bl	800ecac <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 8009e82:	0030      	movs	r0, r6
 8009e84:	f004 feb6 	bl	800ebf4 <UTIL_TIMER_Start>
    MacCtx.NvmCtx->LastTxDoneTime = TxDoneParams.CurTime;
 8009e88:	4bbf      	ldr	r3, [pc, #764]	; (800a188 <LoRaMacProcess+0x39c>)
    txDone.Channel = MacCtx.Channel;
 8009e8a:	ae12      	add	r6, sp, #72	; 0x48
    MacCtx.NvmCtx->LastTxDoneTime = TxDoneParams.CurTime;
 8009e8c:	681a      	ldr	r2, [r3, #0]
 8009e8e:	5963      	ldr	r3, [r4, r5]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), MacCtx.NvmCtx->InitializationTime );
 8009e90:	a810      	add	r0, sp, #64	; 0x40
    MacCtx.NvmCtx->LastTxDoneTime = TxDoneParams.CurTime;
 8009e92:	33fc      	adds	r3, #252	; 0xfc
 8009e94:	655a      	str	r2, [r3, #84]	; 0x54
    txDone.Channel = MacCtx.Channel;
 8009e96:	4bbd      	ldr	r3, [pc, #756]	; (800a18c <LoRaMacProcess+0x3a0>)
 8009e98:	5ce3      	ldrb	r3, [r4, r3]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 8009e9a:	6072      	str	r2, [r6, #4]
    txDone.Channel = MacCtx.Channel;
 8009e9c:	7033      	strb	r3, [r6, #0]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), MacCtx.NvmCtx->InitializationTime );
 8009e9e:	f004 fbeb 	bl	800e678 <SysTimeGetMcuTime>
 8009ea2:	5963      	ldr	r3, [r4, r5]
 8009ea4:	9910      	ldr	r1, [sp, #64]	; 0x40
 8009ea6:	001a      	movs	r2, r3
 8009ea8:	325d      	adds	r2, #93	; 0x5d
 8009eaa:	32ff      	adds	r2, #255	; 0xff
 8009eac:	6812      	ldr	r2, [r2, #0]
 8009eae:	a80a      	add	r0, sp, #40	; 0x28
 8009eb0:	9200      	str	r2, [sp, #0]
 8009eb2:	22ac      	movs	r2, #172	; 0xac
 8009eb4:	0052      	lsls	r2, r2, #1
 8009eb6:	589b      	ldr	r3, [r3, r2]
 8009eb8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009eba:	f004 fb73 	bl	800e5a4 <SysTimeSub>
 8009ebe:	ab15      	add	r3, sp, #84	; 0x54
 8009ec0:	aa0a      	add	r2, sp, #40	; 0x28
 8009ec2:	ca03      	ldmia	r2!, {r0, r1}
 8009ec4:	c303      	stmia	r3!, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 8009ec6:	2383      	movs	r3, #131	; 0x83
 8009ec8:	00db      	lsls	r3, r3, #3
 8009eca:	58e3      	ldr	r3, [r4, r3]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8009ecc:	22b2      	movs	r2, #178	; 0xb2
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 8009ece:	60b3      	str	r3, [r6, #8]
    txDone.Joined  = true;
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	7073      	strb	r3, [r6, #1]
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 8009ed4:	5963      	ldr	r3, [r4, r5]
 8009ed6:	0052      	lsls	r2, r2, #1
 8009ed8:	5c9a      	ldrb	r2, [r3, r2]
 8009eda:	2a00      	cmp	r2, #0
 8009edc:	d100      	bne.n	8009ee0 <LoRaMacProcess+0xf4>
        txDone.Joined  = false;
 8009ede:	7072      	strb	r2, [r6, #1]
    RegionSetBandTxDone( MacCtx.NvmCtx->Region, &txDone );
 8009ee0:	7818      	ldrb	r0, [r3, #0]
 8009ee2:	0031      	movs	r1, r6
 8009ee4:	f002 fa7b 	bl	800c3de <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
 8009ee8:	4ba0      	ldr	r3, [pc, #640]	; (800a16c <LoRaMacProcess+0x380>)
 8009eea:	4aa5      	ldr	r2, [pc, #660]	; (800a180 <LoRaMacProcess+0x394>)
 8009eec:	5c9a      	ldrb	r2, [r3, r2]
 8009eee:	2a00      	cmp	r2, #0
 8009ef0:	d101      	bne.n	8009ef6 <LoRaMacProcess+0x10a>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8009ef2:	49a7      	ldr	r1, [pc, #668]	; (800a190 <LoRaMacProcess+0x3a4>)
 8009ef4:	545a      	strb	r2, [r3, r1]
        if( events.Events.RxDone == 1 )
 8009ef6:	9b06      	ldr	r3, [sp, #24]
 8009ef8:	071b      	lsls	r3, r3, #28
 8009efa:	d579      	bpl.n	8009ff0 <LoRaMacProcess+0x204>
    uint32_t downLinkCounter = 0;
 8009efc:	2500      	movs	r5, #0
    uint8_t *payload = RxDoneParams.Payload;
 8009efe:	4ba5      	ldr	r3, [pc, #660]	; (800a194 <LoRaMacProcess+0x3a8>)
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 8009f00:	4c9a      	ldr	r4, [pc, #616]	; (800a16c <LoRaMacProcess+0x380>)
    uint8_t *payload = RxDoneParams.Payload;
 8009f02:	685a      	ldr	r2, [r3, #4]
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 8009f04:	4e9a      	ldr	r6, [pc, #616]	; (800a170 <LoRaMacProcess+0x384>)
    uint8_t *payload = RxDoneParams.Payload;
 8009f06:	9204      	str	r2, [sp, #16]
    uint16_t size = RxDoneParams.Size;
 8009f08:	891a      	ldrh	r2, [r3, #8]
 8009f0a:	9202      	str	r2, [sp, #8]
    int16_t rssi = RxDoneParams.Rssi;
 8009f0c:	210a      	movs	r1, #10
 8009f0e:	5e5a      	ldrsh	r2, [r3, r1]
    int8_t snr = RxDoneParams.Snr;
 8009f10:	7b1b      	ldrb	r3, [r3, #12]
    uint32_t downLinkCounter = 0;
 8009f12:	950d      	str	r5, [sp, #52]	; 0x34
    int8_t snr = RxDoneParams.Snr;
 8009f14:	b25b      	sxtb	r3, r3
 8009f16:	9307      	str	r3, [sp, #28]
    uint32_t address = MacCtx.NvmCtx->DevAddr;
 8009f18:	59a3      	ldr	r3, [r4, r6]
 8009f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f1c:	9308      	str	r3, [sp, #32]
    MacCtx.McpsConfirm.AckReceived = false;
 8009f1e:	2388      	movs	r3, #136	; 0x88
 8009f20:	00db      	lsls	r3, r3, #3
 8009f22:	54e5      	strb	r5, [r4, r3]
    MacCtx.McpsIndication.Rssi = rssi;
 8009f24:	4b9c      	ldr	r3, [pc, #624]	; (800a198 <LoRaMacProcess+0x3ac>)
 8009f26:	52e2      	strh	r2, [r4, r3]
    MacCtx.McpsIndication.Snr = snr;
 8009f28:	9a07      	ldr	r2, [sp, #28]
 8009f2a:	4b9c      	ldr	r3, [pc, #624]	; (800a19c <LoRaMacProcess+0x3b0>)
 8009f2c:	54e2      	strb	r2, [r4, r3]
    MacCtx.McpsIndication.RxSlot = MacCtx.RxSlot;
 8009f2e:	3354      	adds	r3, #84	; 0x54
 8009f30:	5ce3      	ldrb	r3, [r4, r3]
 8009f32:	4a9b      	ldr	r2, [pc, #620]	; (800a1a0 <LoRaMacProcess+0x3b4>)
 8009f34:	54a3      	strb	r3, [r4, r2]
    MacCtx.McpsIndication.Multicast = 0;
 8009f36:	4b9b      	ldr	r3, [pc, #620]	; (800a1a4 <LoRaMacProcess+0x3b8>)
 8009f38:	52e5      	strh	r5, [r4, r3]
    MacCtx.McpsIndication.FramePending = 0;
 8009f3a:	4b9b      	ldr	r3, [pc, #620]	; (800a1a8 <LoRaMacProcess+0x3bc>)
 8009f3c:	54e5      	strb	r5, [r4, r3]
    MacCtx.McpsIndication.Buffer = NULL;
 8009f3e:	4b9b      	ldr	r3, [pc, #620]	; (800a1ac <LoRaMacProcess+0x3c0>)
 8009f40:	50e5      	str	r5, [r4, r3]
    MacCtx.McpsIndication.BufferSize = 0;
 8009f42:	3304      	adds	r3, #4
 8009f44:	52e5      	strh	r5, [r4, r3]
    MacCtx.McpsIndication.AckReceived = false;
 8009f46:	4b9a      	ldr	r3, [pc, #616]	; (800a1b0 <LoRaMacProcess+0x3c4>)
 8009f48:	54e5      	strb	r5, [r4, r3]
    MacCtx.McpsIndication.DownLinkCounter = 0;
 8009f4a:	3302      	adds	r3, #2
 8009f4c:	50e5      	str	r5, [r4, r3]
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8009f4e:	4b99      	ldr	r3, [pc, #612]	; (800a1b4 <LoRaMacProcess+0x3c8>)
 8009f50:	54e5      	strb	r5, [r4, r3]
    MacCtx.McpsIndication.DevAddress = 0;
 8009f52:	4b99      	ldr	r3, [pc, #612]	; (800a1b8 <LoRaMacProcess+0x3cc>)
 8009f54:	50e5      	str	r5, [r4, r3]
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8009f56:	3304      	adds	r3, #4
 8009f58:	54e5      	strb	r5, [r4, r3]
    Radio.Sleep( );
 8009f5a:	4b86      	ldr	r3, [pc, #536]	; (800a174 <LoRaMacProcess+0x388>)
 8009f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f5e:	9303      	str	r3, [sp, #12]
 8009f60:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 8009f62:	4886      	ldr	r0, [pc, #536]	; (800a17c <LoRaMacProcess+0x390>)
 8009f64:	f004 fdf2 	bl	800eb4c <UTIL_TIMER_Stop>
    macHdr.Value = payload[pktHeaderLen++];
 8009f68:	9b04      	ldr	r3, [sp, #16]
 8009f6a:	4993      	ldr	r1, [pc, #588]	; (800a1b8 <LoRaMacProcess+0x3cc>)
 8009f6c:	781b      	ldrb	r3, [r3, #0]
 8009f6e:	2201      	movs	r2, #1
 8009f70:	9309      	str	r3, [sp, #36]	; 0x24
    switch( macHdr.Bits.MType )
 8009f72:	9603      	str	r6, [sp, #12]
 8009f74:	095b      	lsrs	r3, r3, #5
 8009f76:	9105      	str	r1, [sp, #20]
 8009f78:	2b05      	cmp	r3, #5
 8009f7a:	d100      	bne.n	8009f7e <LoRaMacProcess+0x192>
 8009f7c:	e141      	b.n	800a202 <LoRaMacProcess+0x416>
 8009f7e:	2b07      	cmp	r3, #7
 8009f80:	d100      	bne.n	8009f84 <LoRaMacProcess+0x198>
 8009f82:	e2fb      	b.n	800a57c <LoRaMacProcess+0x790>
 8009f84:	2b03      	cmp	r3, #3
 8009f86:	d000      	beq.n	8009f8a <LoRaMacProcess+0x19e>
 8009f88:	e313      	b.n	800a5b2 <LoRaMacProcess+0x7c6>
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 8009f8a:	9b03      	ldr	r3, [sp, #12]
 8009f8c:	a90e      	add	r1, sp, #56	; 0x38
 8009f8e:	58e3      	ldr	r3, [r4, r3]
 8009f90:	001a      	movs	r2, r3
 8009f92:	32b9      	adds	r2, #185	; 0xb9
 8009f94:	7812      	ldrb	r2, [r2, #0]
 8009f96:	708a      	strb	r2, [r1, #2]
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 8009f98:	2284      	movs	r2, #132	; 0x84
 8009f9a:	00d2      	lsls	r2, r2, #3
 8009f9c:	5ca2      	ldrb	r2, [r4, r2]
 8009f9e:	704a      	strb	r2, [r1, #1]
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 8009fa0:	220d      	movs	r2, #13
 8009fa2:	700a      	strb	r2, [r1, #0]
            if( MacCtx.NvmCtx->RepeaterSupport == true )
 8009fa4:	001a      	movs	r2, r3
 8009fa6:	32ca      	adds	r2, #202	; 0xca
 8009fa8:	7812      	ldrb	r2, [r2, #0]
 8009faa:	2a00      	cmp	r2, #0
 8009fac:	d001      	beq.n	8009fb2 <LoRaMacProcess+0x1c6>
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8009fae:	220e      	movs	r2, #14
 8009fb0:	700a      	strb	r2, [r1, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009fb2:	7818      	ldrb	r0, [r3, #0]
 8009fb4:	f002 fa07 	bl	800c3c6 <RegionGetPhyParam>
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 8009fb8:	9a02      	ldr	r2, [sp, #8]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 8009fba:	900c      	str	r0, [sp, #48]	; 0x30
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 8009fbc:	3a0d      	subs	r2, #13
 8009fbe:	1c13      	adds	r3, r2, #0
 8009fc0:	0412      	lsls	r2, r2, #16
 8009fc2:	d500      	bpl.n	8009fc6 <LoRaMacProcess+0x1da>
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009fc8:	b21b      	sxth	r3, r3
 8009fca:	b212      	sxth	r2, r2
 8009fcc:	4c67      	ldr	r4, [pc, #412]	; (800a16c <LoRaMacProcess+0x380>)
 8009fce:	4e7b      	ldr	r6, [pc, #492]	; (800a1bc <LoRaMacProcess+0x3d0>)
 8009fd0:	4293      	cmp	r3, r2
 8009fd2:	dc03      	bgt.n	8009fdc <LoRaMacProcess+0x1f0>
 8009fd4:	9b02      	ldr	r3, [sp, #8]
 8009fd6:	2b0b      	cmp	r3, #11
 8009fd8:	d900      	bls.n	8009fdc <LoRaMacProcess+0x1f0>
 8009fda:	e115      	b.n	800a208 <LoRaMacProcess+0x41c>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009fdc:	2301      	movs	r3, #1
 8009fde:	55a3      	strb	r3, [r4, r6]
                PrepareRxDoneAbort( );
 8009fe0:	f7ff f82e 	bl	8009040 <PrepareRxDoneAbort>
                APP_LOG(TS_OFF, VLEVEL_M, "Region size payload error\r\n");
 8009fe4:	4b76      	ldr	r3, [pc, #472]	; (800a1c0 <LoRaMacProcess+0x3d4>)
                APP_LOG(TS_OFF, VLEVEL_M, "Multicast error\r\n");
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	2002      	movs	r0, #2
 8009fea:	0011      	movs	r1, r2
 8009fec:	f004 ff7c 	bl	800eee8 <UTIL_ADV_TRACE_COND_FSend>
        if( events.Events.TxTimeout == 1 )
 8009ff0:	9b06      	ldr	r3, [sp, #24]
 8009ff2:	075b      	lsls	r3, r3, #29
 8009ff4:	d51c      	bpl.n	800a030 <LoRaMacProcess+0x244>
    if( MacCtx.NvmCtx->DeviceClass != CLASS_C )
 8009ff6:	4c5d      	ldr	r4, [pc, #372]	; (800a16c <LoRaMacProcess+0x380>)
 8009ff8:	4b5d      	ldr	r3, [pc, #372]	; (800a170 <LoRaMacProcess+0x384>)
 8009ffa:	58e3      	ldr	r3, [r4, r3]
 8009ffc:	337c      	adds	r3, #124	; 0x7c
 8009ffe:	781b      	ldrb	r3, [r3, #0]
 800a000:	2b02      	cmp	r3, #2
 800a002:	d003      	beq.n	800a00c <LoRaMacProcess+0x220>
        Radio.Sleep( );
 800a004:	4b5b      	ldr	r3, [pc, #364]	; (800a174 <LoRaMacProcess+0x388>)
 800a006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a008:	9302      	str	r3, [sp, #8]
 800a00a:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 800a00c:	f7fe ff60 	bl	8008ed0 <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800a010:	2002      	movs	r0, #2
 800a012:	4b5f      	ldr	r3, [pc, #380]	; (800a190 <LoRaMacProcess+0x3a4>)
 800a014:	54e0      	strb	r0, [r4, r3]
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800a016:	f001 fe0b 	bl	800bc30 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800a01a:	4b59      	ldr	r3, [pc, #356]	; (800a180 <LoRaMacProcess+0x394>)
 800a01c:	5ce3      	ldrb	r3, [r4, r3]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d002      	beq.n	800a028 <LoRaMacProcess+0x23c>
        MacCtx.AckTimeoutRetry = true;
 800a022:	2201      	movs	r2, #1
 800a024:	4b67      	ldr	r3, [pc, #412]	; (800a1c4 <LoRaMacProcess+0x3d8>)
 800a026:	54e2      	strb	r2, [r4, r3]
    MacCtx.MacFlags.Bits.MacDone = 1;
 800a028:	2320      	movs	r3, #32
 800a02a:	5de2      	ldrb	r2, [r4, r7]
 800a02c:	4313      	orrs	r3, r2
 800a02e:	55e3      	strb	r3, [r4, r7]
        if( events.Events.RxError == 1 )
 800a030:	9b06      	ldr	r3, [sp, #24]
 800a032:	079b      	lsls	r3, r3, #30
 800a034:	d503      	bpl.n	800a03e <LoRaMacProcess+0x252>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800a036:	2106      	movs	r1, #6
 800a038:	2005      	movs	r0, #5
 800a03a:	f7ff f85b 	bl	80090f4 <HandleRadioRxErrorTimeout>
        if( events.Events.RxTimeout == 1 )
 800a03e:	9b06      	ldr	r3, [sp, #24]
 800a040:	07db      	lsls	r3, r3, #31
 800a042:	d503      	bpl.n	800a04c <LoRaMacProcess+0x260>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800a044:	2104      	movs	r1, #4
 800a046:	2003      	movs	r0, #3
 800a048:	f7ff f854 	bl	80090f4 <HandleRadioRxErrorTimeout>

    LoRaMacHandleIrqEvents( );
//    LoRaMacClassBProcess( );

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800a04c:	4c47      	ldr	r4, [pc, #284]	; (800a16c <LoRaMacProcess+0x380>)
 800a04e:	5de2      	ldrb	r2, [r4, r7]
 800a050:	0693      	lsls	r3, r2, #26
 800a052:	d56a      	bpl.n	800a12a <LoRaMacProcess+0x33e>
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800a054:	21d0      	movs	r1, #208	; 0xd0
    MacCtx.AllowRequests = requestState;
 800a056:	2300      	movs	r3, #0
 800a058:	485b      	ldr	r0, [pc, #364]	; (800a1c8 <LoRaMacProcess+0x3dc>)
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800a05a:	0089      	lsls	r1, r1, #2
    MacCtx.AllowRequests = requestState;
 800a05c:	5423      	strb	r3, [r4, r0]
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800a05e:	5863      	ldr	r3, [r4, r1]
 800a060:	9002      	str	r0, [sp, #8]
 800a062:	0618      	lsls	r0, r3, #24
 800a064:	d502      	bpl.n	800a06c <LoRaMacProcess+0x280>
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800a066:	2082      	movs	r0, #130	; 0x82
 800a068:	4383      	bics	r3, r0
 800a06a:	5063      	str	r3, [r4, r1]
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 800a06c:	2305      	movs	r3, #5
 800a06e:	421a      	tst	r2, r3
 800a070:	d100      	bne.n	800a074 <LoRaMacProcess+0x288>
 800a072:	e2ab      	b.n	800a5cc <LoRaMacProcess+0x7e0>
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800a074:	200c      	movs	r0, #12
 800a076:	f001 fdf7 	bl	800bc68 <LoRaMacConfirmQueueIsCmdActive>
 800a07a:	2800      	cmp	r0, #0
 800a07c:	d100      	bne.n	800a080 <LoRaMacProcess+0x294>
 800a07e:	e2a5      	b.n	800a5cc <LoRaMacProcess+0x7e0>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800a080:	5de3      	ldrb	r3, [r4, r7]
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800a082:	07da      	lsls	r2, r3, #31
 800a084:	d500      	bpl.n	800a088 <LoRaMacProcess+0x29c>
 800a086:	e2a1      	b.n	800a5cc <LoRaMacProcess+0x7e0>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800a088:	075b      	lsls	r3, r3, #29
 800a08a:	d400      	bmi.n	800a08e <LoRaMacProcess+0x2a2>
 800a08c:	e2b4      	b.n	800a5f8 <LoRaMacProcess+0x80c>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800a08e:	22d0      	movs	r2, #208	; 0xd0
 800a090:	2302      	movs	r3, #2
 800a092:	0092      	lsls	r2, r2, #2
 800a094:	58a1      	ldr	r1, [r4, r2]
 800a096:	4399      	bics	r1, r3
 800a098:	50a1      	str	r1, [r4, r2]
    if( MacCtx.MacState == LORAMAC_IDLE )
 800a09a:	23d0      	movs	r3, #208	; 0xd0
 800a09c:	009b      	lsls	r3, r3, #2
 800a09e:	58e3      	ldr	r3, [r4, r3]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d13f      	bne.n	800a124 <LoRaMacProcess+0x338>
 800a0a4:	5de6      	ldrb	r6, [r4, r7]
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800a0a6:	3301      	adds	r3, #1
 800a0a8:	0031      	movs	r1, r6
 800a0aa:	4019      	ands	r1, r3
 800a0ac:	421e      	tst	r6, r3
 800a0ae:	d002      	beq.n	800a0b6 <LoRaMacProcess+0x2ca>
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800a0b0:	0032      	movs	r2, r6
 800a0b2:	439a      	bics	r2, r3
 800a0b4:	55e2      	strb	r2, [r4, r7]
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800a0b6:	2204      	movs	r2, #4
 800a0b8:	5de3      	ldrb	r3, [r4, r7]
 800a0ba:	4213      	tst	r3, r2
 800a0bc:	d001      	beq.n	800a0c2 <LoRaMacProcess+0x2d6>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800a0be:	4393      	bics	r3, r2
 800a0c0:	55e3      	strb	r3, [r4, r7]
    MacCtx.AllowRequests = requestState;
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	9a02      	ldr	r2, [sp, #8]
 800a0c6:	54a3      	strb	r3, [r4, r2]
        if( reqEvents.Bits.McpsReq == 1 )
 800a0c8:	2900      	cmp	r1, #0
 800a0ca:	d005      	beq.n	800a0d8 <LoRaMacProcess+0x2ec>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800a0cc:	23d1      	movs	r3, #209	; 0xd1
 800a0ce:	009b      	lsls	r3, r3, #2
 800a0d0:	58e3      	ldr	r3, [r4, r3]
 800a0d2:	483e      	ldr	r0, [pc, #248]	; (800a1cc <LoRaMacProcess+0x3e0>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 800a0d8:	2504      	movs	r5, #4
 800a0da:	422e      	tst	r6, r5
 800a0dc:	d009      	beq.n	800a0f2 <LoRaMacProcess+0x306>
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800a0de:	483c      	ldr	r0, [pc, #240]	; (800a1d0 <LoRaMacProcess+0x3e4>)
 800a0e0:	f001 fdce 	bl	800bc80 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800a0e4:	f001 fdf8 	bl	800bcd8 <LoRaMacConfirmQueueGetCnt>
 800a0e8:	2800      	cmp	r0, #0
 800a0ea:	d002      	beq.n	800a0f2 <LoRaMacProcess+0x306>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800a0ec:	5de3      	ldrb	r3, [r4, r7]
 800a0ee:	431d      	orrs	r5, r3
 800a0f0:	55e5      	strb	r5, [r4, r7]
        MacCtx.MacFlags.Bits.MacDone = 0;
 800a0f2:	2220      	movs	r2, #32
 800a0f4:	5de3      	ldrb	r3, [r4, r7]
 800a0f6:	4393      	bics	r3, r2
 800a0f8:	55e3      	strb	r3, [r4, r7]
    if( MacCtx.MacState == LORAMAC_IDLE )
 800a0fa:	23d0      	movs	r3, #208	; 0xd0
 800a0fc:	009b      	lsls	r3, r3, #2
 800a0fe:	58e3      	ldr	r3, [r4, r3]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d10f      	bne.n	800a124 <LoRaMacProcess+0x338>
        bool isStickyMacCommandPending = false;
 800a104:	2528      	movs	r5, #40	; 0x28
 800a106:	aa08      	add	r2, sp, #32
 800a108:	1952      	adds	r2, r2, r5
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800a10a:	a812      	add	r0, sp, #72	; 0x48
        bool isStickyMacCommandPending = false;
 800a10c:	7013      	strb	r3, [r2, #0]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800a10e:	f001 fccb 	bl	800baa8 <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 800a112:	ab08      	add	r3, sp, #32
 800a114:	195b      	adds	r3, r3, r5
 800a116:	781b      	ldrb	r3, [r3, #0]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d003      	beq.n	800a124 <LoRaMacProcess+0x338>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 800a11c:	2310      	movs	r3, #16
 800a11e:	5de2      	ldrb	r2, [r4, r7]
 800a120:	4313      	orrs	r3, r2
 800a122:	55e3      	strb	r3, [r4, r7]
    MacCtx.AllowRequests = requestState;
 800a124:	2301      	movs	r3, #1
 800a126:	9a02      	ldr	r2, [sp, #8]
 800a128:	54a3      	strb	r3, [r4, r2]
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800a12a:	2208      	movs	r2, #8
 800a12c:	5de3      	ldrb	r3, [r4, r7]
 800a12e:	4213      	tst	r3, r2
 800a130:	d007      	beq.n	800a142 <LoRaMacProcess+0x356>
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800a132:	4393      	bics	r3, r2
 800a134:	55e3      	strb	r3, [r4, r7]
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication );
 800a136:	23d1      	movs	r3, #209	; 0xd1
 800a138:	009b      	lsls	r3, r3, #2
 800a13a:	58e3      	ldr	r3, [r4, r3]
 800a13c:	4825      	ldr	r0, [pc, #148]	; (800a1d4 <LoRaMacProcess+0x3e8>)
 800a13e:	68db      	ldr	r3, [r3, #12]
 800a140:	4798      	blx	r3
    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 800a142:	2510      	movs	r5, #16
 800a144:	5de3      	ldrb	r3, [r4, r7]
 800a146:	422b      	tst	r3, r5
 800a148:	d046      	beq.n	800a1d8 <LoRaMacProcess+0x3ec>
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 800a14a:	2307      	movs	r3, #7
 800a14c:	a812      	add	r0, sp, #72	; 0x48
 800a14e:	8003      	strh	r3, [r0, #0]
        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication );
 800a150:	23d1      	movs	r3, #209	; 0xd1
 800a152:	009b      	lsls	r3, r3, #2
 800a154:	58e3      	ldr	r3, [r4, r3]
 800a156:	68db      	ldr	r3, [r3, #12]
 800a158:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 800a15a:	5de3      	ldrb	r3, [r4, r7]
 800a15c:	43ab      	bics	r3, r5
 800a15e:	55e3      	strb	r3, [r4, r7]
 800a160:	e03a      	b.n	800a1d8 <LoRaMacProcess+0x3ec>
 800a162:	46c0      	nop			; (mov r8, r8)
 800a164:	20000558 	.word	0x20000558
 800a168:	00000481 	.word	0x00000481
 800a16c:	2000055c 	.word	0x2000055c
 800a170:	00000484 	.word	0x00000484
 800a174:	0800fd8c 	.word	0x0800fd8c
 800a178:	200008dc 	.word	0x200008dc
 800a17c:	200008f4 	.word	0x200008f4
 800a180:	00000414 	.word	0x00000414
 800a184:	20000954 	.word	0x20000954
 800a188:	200017ac 	.word	0x200017ac
 800a18c:	00000415 	.word	0x00000415
 800a190:	0000043d 	.word	0x0000043d
 800a194:	200017b0 	.word	0x200017b0
 800a198:	0000042a 	.word	0x0000042a
 800a19c:	0000042c 	.word	0x0000042c
 800a1a0:	0000042d 	.word	0x0000042d
 800a1a4:	0000041e 	.word	0x0000041e
 800a1a8:	00000421 	.word	0x00000421
 800a1ac:	00000424 	.word	0x00000424
 800a1b0:	0000042e 	.word	0x0000042e
 800a1b4:	0000041c 	.word	0x0000041c
 800a1b8:	00000434 	.word	0x00000434
 800a1bc:	0000041d 	.word	0x0000041d
 800a1c0:	0800fad3 	.word	0x0800fad3
 800a1c4:	00000413 	.word	0x00000413
 800a1c8:	00000482 	.word	0x00000482
 800a1cc:	20000998 	.word	0x20000998
 800a1d0:	200009ac 	.word	0x200009ac
 800a1d4:	200009c0 	.word	0x200009c0
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800a1d8:	2202      	movs	r2, #2
 800a1da:	5de3      	ldrb	r3, [r4, r7]
 800a1dc:	4213      	tst	r3, r2
 800a1de:	d007      	beq.n	800a1f0 <LoRaMacProcess+0x404>
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800a1e0:	4393      	bics	r3, r2
 800a1e2:	55e3      	strb	r3, [r4, r7]
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication );
 800a1e4:	23d1      	movs	r3, #209	; 0xd1
 800a1e6:	009b      	lsls	r3, r3, #2
 800a1e8:	58e3      	ldr	r3, [r4, r3]
 800a1ea:	48c2      	ldr	r0, [pc, #776]	; (800a4f4 <LoRaMacProcess+0x708>)
 800a1ec:	685b      	ldr	r3, [r3, #4]
 800a1ee:	4798      	blx	r3
        LoRaMacHandleRequestEvents( );
        LoRaMacHandleScheduleUplinkEvent( );
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
    }
    LoRaMacHandleIndicationEvents( );
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800a1f0:	2390      	movs	r3, #144	; 0x90
 800a1f2:	00db      	lsls	r3, r3, #3
 800a1f4:	5ce3      	ldrb	r3, [r4, r3]
 800a1f6:	2b02      	cmp	r3, #2
 800a1f8:	d101      	bne.n	800a1fe <LoRaMacProcess+0x412>
    {
        OpenContinuousRxCWindow( );
 800a1fa:	f7ff fa61 	bl	80096c0 <OpenContinuousRxCWindow>
    }
}
 800a1fe:	b01f      	add	sp, #124	; 0x7c
 800a200:	bdf0      	pop	{r4, r5, r6, r7, pc}
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800a202:	4bbd      	ldr	r3, [pc, #756]	; (800a4f8 <LoRaMacProcess+0x70c>)
 800a204:	54e2      	strb	r2, [r4, r3]
 800a206:	e6c0      	b.n	8009f8a <LoRaMacProcess+0x19e>
            macMsgData.BufSize = size;
 800a208:	222c      	movs	r2, #44	; 0x2c
            macMsgData.Buffer = payload;
 800a20a:	9b04      	ldr	r3, [sp, #16]
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800a20c:	a812      	add	r0, sp, #72	; 0x48
            macMsgData.Buffer = payload;
 800a20e:	9312      	str	r3, [sp, #72]	; 0x48
            macMsgData.BufSize = size;
 800a210:	ab08      	add	r3, sp, #32
 800a212:	189b      	adds	r3, r3, r2
 800a214:	9a02      	ldr	r2, [sp, #8]
 800a216:	701a      	strb	r2, [r3, #0]
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800a218:	22ff      	movs	r2, #255	; 0xff
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800a21a:	4bb8      	ldr	r3, [pc, #736]	; (800a4fc <LoRaMacProcess+0x710>)
 800a21c:	931b      	str	r3, [sp, #108]	; 0x6c
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800a21e:	ab1c      	add	r3, sp, #112	; 0x70
 800a220:	701a      	strb	r2, [r3, #0]
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800a222:	f001 ffcc 	bl	800c1be <LoRaMacParserData>
 800a226:	9004      	str	r0, [sp, #16]
 800a228:	2800      	cmp	r0, #0
 800a22a:	d005      	beq.n	800a238 <LoRaMacProcess+0x44c>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a22c:	2301      	movs	r3, #1
 800a22e:	55a3      	strb	r3, [r4, r6]
                PrepareRxDoneAbort( );
 800a230:	f7fe ff06 	bl	8009040 <PrepareRxDoneAbort>
                APP_LOG(TS_OFF, VLEVEL_M, "LoRaMAC Parser error\r\n");
 800a234:	4bb2      	ldr	r3, [pc, #712]	; (800a500 <LoRaMacProcess+0x714>)
 800a236:	e6d6      	b.n	8009fe6 <LoRaMacProcess+0x1fa>
    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 800a238:	2234      	movs	r2, #52	; 0x34
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800a23a:	4bb2      	ldr	r3, [pc, #712]	; (800a504 <LoRaMacProcess+0x718>)
 800a23c:	9914      	ldr	r1, [sp, #80]	; 0x50
 800a23e:	50e1      	str	r1, [r4, r3]
    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 800a240:	ab08      	add	r3, sp, #32
 800a242:	189b      	adds	r3, r3, r2
 800a244:	781a      	ldrb	r2, [r3, #0]
 800a246:	230f      	movs	r3, #15
 800a248:	0010      	movs	r0, r2
 800a24a:	4018      	ands	r0, r3
 800a24c:	421a      	tst	r2, r3
 800a24e:	d005      	beq.n	800a25c <LoRaMacProcess+0x470>
 800a250:	331a      	adds	r3, #26
 800a252:	ad08      	add	r5, sp, #32
 800a254:	195b      	adds	r3, r3, r5
 800a256:	7fdb      	ldrb	r3, [r3, #31]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d13d      	bne.n	800a2d8 <LoRaMacProcess+0x4ec>
    else if( macMsg->FRMPayloadSize == 0 )
 800a25c:	ab1c      	add	r3, sp, #112	; 0x70
 800a25e:	781d      	ldrb	r5, [r3, #0]
 800a260:	2301      	movs	r3, #1
 800a262:	2d00      	cmp	r5, #0
 800a264:	d008      	beq.n	800a278 <LoRaMacProcess+0x48c>
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 800a266:	2800      	cmp	r0, #0
 800a268:	d131      	bne.n	800a2ce <LoRaMacProcess+0x4e2>
 800a26a:	a808      	add	r0, sp, #32
 800a26c:	3328      	adds	r3, #40	; 0x28
 800a26e:	181b      	adds	r3, r3, r0
 800a270:	7fdb      	ldrb	r3, [r3, #31]
        *fType = FRAME_TYPE_D;
 800a272:	1e58      	subs	r0, r3, #1
 800a274:	4183      	sbcs	r3, r0
 800a276:	3302      	adds	r3, #2
        *fType = FRAME_TYPE_B;
 800a278:	9302      	str	r3, [sp, #8]
            downLinkCounter = 0;
 800a27a:	2300      	movs	r3, #0
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800a27c:	4ca2      	ldr	r4, [pc, #648]	; (800a508 <LoRaMacProcess+0x71c>)
            downLinkCounter = 0;
 800a27e:	930d      	str	r3, [sp, #52]	; 0x34
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800a280:	9b03      	ldr	r3, [sp, #12]
 800a282:	58e3      	ldr	r3, [r4, r3]
 800a284:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800a286:	4684      	mov	ip, r0
 800a288:	4281      	cmp	r1, r0
 800a28a:	d127      	bne.n	800a2dc <LoRaMacProcess+0x4f0>
                    ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800a28c:	0019      	movs	r1, r3
 800a28e:	3152      	adds	r1, #82	; 0x52
                if( ( MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800a290:	7809      	ldrb	r1, [r1, #0]
 800a292:	2501      	movs	r5, #1
 800a294:	2900      	cmp	r1, #0
 800a296:	d022      	beq.n	800a2de <LoRaMacProcess+0x4f2>
                    addrID = MacCtx.NvmCtx->MulticastChannelList[i].ChannelParams.GroupID;
 800a298:	0019      	movs	r1, r3
 800a29a:	3153      	adds	r1, #83	; 0x53
 800a29c:	780d      	ldrb	r5, [r1, #0]
                    downLinkCounter = *( MacCtx.NvmCtx->MulticastChannelList[i].DownLinkCounter );
 800a29e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a2a0:	6809      	ldr	r1, [r1, #0]
 800a2a2:	910d      	str	r1, [sp, #52]	; 0x34
                    if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800a2a4:	0019      	movs	r1, r3
 800a2a6:	317c      	adds	r1, #124	; 0x7c
 800a2a8:	7809      	ldrb	r1, [r1, #0]
 800a2aa:	2902      	cmp	r1, #2
 800a2ac:	d102      	bne.n	800a2b4 <LoRaMacProcess+0x4c8>
                        MacCtx.McpsIndication.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800a2ae:	4897      	ldr	r0, [pc, #604]	; (800a50c <LoRaMacProcess+0x720>)
 800a2b0:	3101      	adds	r1, #1
 800a2b2:	5421      	strb	r1, [r4, r0]
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800a2b4:	9902      	ldr	r1, [sp, #8]
 800a2b6:	2903      	cmp	r1, #3
 800a2b8:	d102      	bne.n	800a2c0 <LoRaMacProcess+0x4d4>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800a2ba:	2160      	movs	r1, #96	; 0x60
 800a2bc:	420a      	tst	r2, r1
 800a2be:	d02a      	beq.n	800a316 <LoRaMacProcess+0x52a>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a2c0:	2201      	movs	r2, #1
 800a2c2:	4b91      	ldr	r3, [pc, #580]	; (800a508 <LoRaMacProcess+0x71c>)
 800a2c4:	559a      	strb	r2, [r3, r6]
                PrepareRxDoneAbort( );
 800a2c6:	f7fe febb 	bl	8009040 <PrepareRxDoneAbort>
                APP_LOG(TS_OFF, VLEVEL_M, "Multicast error\r\n");
 800a2ca:	4b91      	ldr	r3, [pc, #580]	; (800a510 <LoRaMacProcess+0x724>)
 800a2cc:	e68b      	b.n	8009fe6 <LoRaMacProcess+0x1fa>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a2ce:	55a3      	strb	r3, [r4, r6]
                PrepareRxDoneAbort( );
 800a2d0:	f7fe feb6 	bl	8009040 <PrepareRxDoneAbort>
                APP_LOG(TS_OFF, VLEVEL_M, "Determine Frame type error\r\n");
 800a2d4:	4b8f      	ldr	r3, [pc, #572]	; (800a514 <LoRaMacProcess+0x728>)
 800a2d6:	e686      	b.n	8009fe6 <LoRaMacProcess+0x1fa>
        *fType = FRAME_TYPE_A;
 800a2d8:	9b04      	ldr	r3, [sp, #16]
 800a2da:	e7cd      	b.n	800a278 <LoRaMacProcess+0x48c>
 800a2dc:	2501      	movs	r5, #1
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800a2de:	2215      	movs	r2, #21
 800a2e0:	a90e      	add	r1, sp, #56	; 0x38
 800a2e2:	700a      	strb	r2, [r1, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a2e4:	7818      	ldrb	r0, [r3, #0]
 800a2e6:	f002 f86e 	bl	800c3c6 <RegionGetPhyParam>
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, MacCtx.NvmCtx->Version, phyParam.Value, &fCntID, &downLinkCounter );
 800a2ea:	9a03      	ldr	r2, [sp, #12]
 800a2ec:	4b86      	ldr	r3, [pc, #536]	; (800a508 <LoRaMacProcess+0x71c>)
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a2ee:	900c      	str	r0, [sp, #48]	; 0x30
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, MacCtx.NvmCtx->Version, phyParam.Value, &fCntID, &downLinkCounter );
 800a2f0:	589b      	ldr	r3, [r3, r2]
 800a2f2:	9305      	str	r3, [sp, #20]
 800a2f4:	23b1      	movs	r3, #177	; 0xb1
 800a2f6:	9a05      	ldr	r2, [sp, #20]
 800a2f8:	005b      	lsls	r3, r3, #1
 800a2fa:	5cd4      	ldrb	r4, [r2, r3]
    switch( addrID )
 800a2fc:	2d00      	cmp	r5, #0
 800a2fe:	d00f      	beq.n	800a320 <LoRaMacProcess+0x534>
 800a300:	2d01      	cmp	r5, #1
 800a302:	d132      	bne.n	800a36a <LoRaMacProcess+0x57e>
            if( lrWanVersion.Fields.Minor == 1 )
 800a304:	2c01      	cmp	r4, #1
 800a306:	d12e      	bne.n	800a366 <LoRaMacProcess+0x57a>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800a308:	9b02      	ldr	r3, [sp, #8]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d001      	beq.n	800a312 <LoRaMacProcess+0x526>
 800a30e:	2b03      	cmp	r3, #3
 800a310:	d107      	bne.n	800a322 <LoRaMacProcess+0x536>
                    *fCntID = A_FCNT_DOWN;
 800a312:	2402      	movs	r4, #2
 800a314:	e005      	b.n	800a322 <LoRaMacProcess+0x536>
 800a316:	4662      	mov	r2, ip
 800a318:	9208      	str	r2, [sp, #32]
 800a31a:	2201      	movs	r2, #1
 800a31c:	9204      	str	r2, [sp, #16]
 800a31e:	e7de      	b.n	800a2de <LoRaMacProcess+0x4f2>
    switch( addrID )
 800a320:	2404      	movs	r4, #4
    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 800a322:	ab08      	add	r3, sp, #32
 800a324:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 800a326:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a328:	0020      	movs	r0, r4
 800a32a:	b299      	uxth	r1, r3
 800a32c:	ab0d      	add	r3, sp, #52	; 0x34
 800a32e:	f001 fe03 	bl	800bf38 <LoRaMacCryptoGetFCntDown>
 800a332:	9005      	str	r0, [sp, #20]
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS && macCryptoStatus != LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED)
 800a334:	2800      	cmp	r0, #0
 800a336:	d01b      	beq.n	800a370 <LoRaMacProcess+0x584>
 800a338:	2807      	cmp	r0, #7
 800a33a:	d019      	beq.n	800a370 <LoRaMacProcess+0x584>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 800a33c:	230a      	movs	r3, #10
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 800a33e:	2808      	cmp	r0, #8
 800a340:	d000      	beq.n	800a344 <LoRaMacProcess+0x558>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a342:	2301      	movs	r3, #1
 800a344:	4a70      	ldr	r2, [pc, #448]	; (800a508 <LoRaMacProcess+0x71c>)
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800a346:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a348:	5593      	strb	r3, [r2, r6]
 800a34a:	2386      	movs	r3, #134	; 0x86
 800a34c:	00db      	lsls	r3, r3, #3
 800a34e:	50d1      	str	r1, [r2, r3]
                PrepareRxDoneAbort( );
 800a350:	f7fe fe76 	bl	8009040 <PrepareRxDoneAbort>
                APP_LOG(TS_OFF, VLEVEL_M, "Down counter error %d\r\n", macCryptoStatus);
 800a354:	9b05      	ldr	r3, [sp, #20]
 800a356:	9300      	str	r3, [sp, #0]
 800a358:	4b6f      	ldr	r3, [pc, #444]	; (800a518 <LoRaMacProcess+0x72c>)
                APP_LOG(TS_OFF, VLEVEL_M, "LoRaMAC crypto error %d\r\n", macCryptoStatus);
 800a35a:	2200      	movs	r2, #0
 800a35c:	2002      	movs	r0, #2
 800a35e:	0011      	movs	r1, r2
 800a360:	f004 fdc2 	bl	800eee8 <UTIL_ADV_TRACE_COND_FSend>
                return;
 800a364:	e644      	b.n	8009ff0 <LoRaMacProcess+0x204>
                *fCntID = FCNT_DOWN;
 800a366:	2403      	movs	r4, #3
 800a368:	e7db      	b.n	800a322 <LoRaMacProcess+0x536>
    switch( addrID )
 800a36a:	2305      	movs	r3, #5
 800a36c:	9305      	str	r3, [sp, #20]
 800a36e:	e7e8      	b.n	800a342 <LoRaMacProcess+0x556>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800a370:	ab12      	add	r3, sp, #72	; 0x48
 800a372:	0022      	movs	r2, r4
 800a374:	9300      	str	r3, [sp, #0]
 800a376:	0028      	movs	r0, r5
 800a378:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a37a:	9908      	ldr	r1, [sp, #32]
 800a37c:	f001 fe8a 	bl	800c094 <LoRaMacCryptoUnsecureMessage>
 800a380:	4b61      	ldr	r3, [pc, #388]	; (800a508 <LoRaMacProcess+0x71c>)
 800a382:	1e04      	subs	r4, r0, #0
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800a384:	d009      	beq.n	800a39a <LoRaMacProcess+0x5ae>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800a386:	1e82      	subs	r2, r0, #2
 800a388:	1e51      	subs	r1, r2, #1
 800a38a:	418a      	sbcs	r2, r1
 800a38c:	320b      	adds	r2, #11
 800a38e:	559a      	strb	r2, [r3, r6]
                PrepareRxDoneAbort( );
 800a390:	f7fe fe56 	bl	8009040 <PrepareRxDoneAbort>
                APP_LOG(TS_OFF, VLEVEL_M, "LoRaMAC crypto error %d\r\n", macCryptoStatus);
 800a394:	4b61      	ldr	r3, [pc, #388]	; (800a51c <LoRaMacProcess+0x730>)
 800a396:	9400      	str	r4, [sp, #0]
 800a398:	e7df      	b.n	800a35a <LoRaMacProcess+0x56e>
            MacCtx.McpsIndication.Multicast = multicast;
 800a39a:	4a61      	ldr	r2, [pc, #388]	; (800a520 <LoRaMacProcess+0x734>)
 800a39c:	9904      	ldr	r1, [sp, #16]
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800a39e:	5598      	strb	r0, [r3, r6]
            MacCtx.McpsIndication.Multicast = multicast;
 800a3a0:	5499      	strb	r1, [r3, r2]
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800a3a2:	2134      	movs	r1, #52	; 0x34
 800a3a4:	aa08      	add	r2, sp, #32
 800a3a6:	1852      	adds	r2, r2, r1
 800a3a8:	7812      	ldrb	r2, [r2, #0]
 800a3aa:	485e      	ldr	r0, [pc, #376]	; (800a524 <LoRaMacProcess+0x738>)
 800a3ac:	06d1      	lsls	r1, r2, #27
 800a3ae:	0fc9      	lsrs	r1, r1, #31
 800a3b0:	5419      	strb	r1, [r3, r0]
            MacCtx.McpsIndication.Buffer = NULL;
 800a3b2:	495d      	ldr	r1, [pc, #372]	; (800a528 <LoRaMacProcess+0x73c>)
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800a3b4:	980d      	ldr	r0, [sp, #52]	; 0x34
            MacCtx.McpsIndication.Buffer = NULL;
 800a3b6:	505c      	str	r4, [r3, r1]
            MacCtx.McpsIndication.BufferSize = 0;
 800a3b8:	3104      	adds	r1, #4
 800a3ba:	545c      	strb	r4, [r3, r1]
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800a3bc:	3108      	adds	r1, #8
 800a3be:	5058      	str	r0, [r3, r1]
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800a3c0:	0692      	lsls	r2, r2, #26
 800a3c2:	495a      	ldr	r1, [pc, #360]	; (800a52c <LoRaMacProcess+0x740>)
 800a3c4:	0fd2      	lsrs	r2, r2, #31
 800a3c6:	545a      	strb	r2, [r3, r1]
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800a3c8:	4959      	ldr	r1, [pc, #356]	; (800a530 <LoRaMacProcess+0x744>)
 800a3ca:	545c      	strb	r4, [r3, r1]
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800a3cc:	3103      	adds	r1, #3
 800a3ce:	545a      	strb	r2, [r3, r1]
            if( ( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 ) ||
 800a3d0:	4a4e      	ldr	r2, [pc, #312]	; (800a50c <LoRaMacProcess+0x720>)
 800a3d2:	5c9a      	ldrb	r2, [r3, r2]
 800a3d4:	2a01      	cmp	r2, #1
 800a3d6:	d803      	bhi.n	800a3e0 <LoRaMacProcess+0x5f4>
                MacCtx.NvmCtx->AdrAckCounter = 0;
 800a3d8:	9903      	ldr	r1, [sp, #12]
 800a3da:	585b      	ldr	r3, [r3, r1]
 800a3dc:	3304      	adds	r3, #4
 800a3de:	67dc      	str	r4, [r3, #124]	; 0x7c
            if( multicast == 1 )
 800a3e0:	9b04      	ldr	r3, [sp, #16]
 800a3e2:	4c49      	ldr	r4, [pc, #292]	; (800a508 <LoRaMacProcess+0x71c>)
 800a3e4:	2b01      	cmp	r3, #1
 800a3e6:	d154      	bne.n	800a492 <LoRaMacProcess+0x6a6>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800a3e8:	3301      	adds	r3, #1
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800a3ea:	4943      	ldr	r1, [pc, #268]	; (800a4f8 <LoRaMacProcess+0x70c>)
 800a3ec:	5463      	strb	r3, [r4, r1]
            RemoveMacCommands( MacCtx.McpsIndication.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800a3ee:	4b51      	ldr	r3, [pc, #324]	; (800a534 <LoRaMacProcess+0x748>)
 800a3f0:	ad12      	add	r5, sp, #72	; 0x48
 800a3f2:	5ce1      	ldrb	r1, [r4, r3]
 800a3f4:	7b2b      	ldrb	r3, [r5, #12]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 800a3f6:	2a01      	cmp	r2, #1
 800a3f8:	d805      	bhi.n	800a406 <LoRaMacProcess+0x61a>
        if( request == MCPS_CONFIRMED )
 800a3fa:	2901      	cmp	r1, #1
 800a3fc:	d101      	bne.n	800a402 <LoRaMacProcess+0x616>
            if( fCtrl.Bits.Ack == 1 )
 800a3fe:	069b      	lsls	r3, r3, #26
 800a400:	d501      	bpl.n	800a406 <LoRaMacProcess+0x61a>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 800a402:	f001 fafb 	bl	800b9fc <LoRaMacCommandsRemoveStickyAnsCmds>
            switch( fType )
 800a406:	9b02      	ldr	r3, [sp, #8]
 800a408:	4e4b      	ldr	r6, [pc, #300]	; (800a538 <LoRaMacProcess+0x74c>)
 800a40a:	2b02      	cmp	r3, #2
 800a40c:	d065      	beq.n	800a4da <LoRaMacProcess+0x6ee>
 800a40e:	2b03      	cmp	r3, #3
 800a410:	d100      	bne.n	800a414 <LoRaMacProcess+0x628>
 800a412:	e09f      	b.n	800a554 <LoRaMacProcess+0x768>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 800a414:	7b29      	ldrb	r1, [r5, #12]
 800a416:	9a07      	ldr	r2, [sp, #28]
 800a418:	0709      	lsls	r1, r1, #28
 800a41a:	0f09      	lsrs	r1, r1, #28
 800a41c:	a816      	add	r0, sp, #88	; 0x58
 800a41e:	2b01      	cmp	r3, #1
 800a420:	d052      	beq.n	800a4c8 <LoRaMacProcess+0x6dc>
 800a422:	f7ff fa81 	bl	8009928 <ProcessMacCommands.isra.0.constprop.0>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800a426:	2248      	movs	r2, #72	; 0x48
 800a428:	ab08      	add	r3, sp, #32
 800a42a:	189b      	adds	r3, r3, r2
 800a42c:	781b      	ldrb	r3, [r3, #0]
 800a42e:	55a3      	strb	r3, [r4, r6]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800a430:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a432:	9302      	str	r3, [sp, #8]
 800a434:	9a02      	ldr	r2, [sp, #8]
 800a436:	4b3c      	ldr	r3, [pc, #240]	; (800a528 <LoRaMacProcess+0x73c>)
 800a438:	50e2      	str	r2, [r4, r3]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800a43a:	ab1c      	add	r3, sp, #112	; 0x70
 800a43c:	781a      	ldrb	r2, [r3, #0]
 800a43e:	2385      	movs	r3, #133	; 0x85
 800a440:	00db      	lsls	r3, r3, #3
 800a442:	54e2      	strb	r2, [r4, r3]
                    MacCtx.McpsIndication.RxData = true;
 800a444:	2201      	movs	r2, #1
 800a446:	4b3d      	ldr	r3, [pc, #244]	; (800a53c <LoRaMacProcess+0x750>)
 800a448:	54e2      	strb	r2, [r4, r3]
                    APP_LOG(TS_OFF, VLEVEL_M, "Frame type A\r\n");
 800a44a:	4b3d      	ldr	r3, [pc, #244]	; (800a540 <LoRaMacProcess+0x754>)
                    APP_LOG(TS_OFF, VLEVEL_M, "Frame type D\r\n");
 800a44c:	2200      	movs	r2, #0
 800a44e:	2002      	movs	r0, #2
 800a450:	0011      	movs	r1, r2
 800a452:	f004 fd49 	bl	800eee8 <UTIL_ADV_TRACE_COND_FSend>
            APP_LOG(TS_OFF, VLEVEL_M, "Frame type data unconfirmed down\r\n");
 800a456:	2200      	movs	r2, #0
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800a458:	2002      	movs	r0, #2
            APP_LOG(TS_OFF, VLEVEL_M, "Frame type data unconfirmed down\r\n");
 800a45a:	0011      	movs	r1, r2
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800a45c:	5de3      	ldrb	r3, [r4, r7]
 800a45e:	4303      	orrs	r3, r0
 800a460:	55e3      	strb	r3, [r4, r7]
            APP_LOG(TS_OFF, VLEVEL_M, "Frame type data unconfirmed down\r\n");
 800a462:	4b38      	ldr	r3, [pc, #224]	; (800a544 <LoRaMacProcess+0x758>)
            APP_LOG(TS_OFF, VLEVEL_M, "Frame type proprietary\r\n");
 800a464:	f004 fd40 	bl	800eee8 <UTIL_ADV_TRACE_COND_FSend>
    if( MacCtx.NodeAckRequested == true )
 800a468:	4c27      	ldr	r4, [pc, #156]	; (800a508 <LoRaMacProcess+0x71c>)
 800a46a:	4b37      	ldr	r3, [pc, #220]	; (800a548 <LoRaMacProcess+0x75c>)
 800a46c:	5ce3      	ldrb	r3, [r4, r3]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d100      	bne.n	800a474 <LoRaMacProcess+0x688>
 800a472:	e0a3      	b.n	800a5bc <LoRaMacProcess+0x7d0>
        if( MacCtx.McpsConfirm.AckReceived == true )
 800a474:	2388      	movs	r3, #136	; 0x88
 800a476:	00db      	lsls	r3, r3, #3
 800a478:	5ce3      	ldrb	r3, [r4, r3]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d002      	beq.n	800a484 <LoRaMacProcess+0x698>
            OnAckTimeoutTimerEvent( NULL );
 800a47e:	2000      	movs	r0, #0
 800a480:	f7fe fdb0 	bl	8008fe4 <OnAckTimeoutTimerEvent>
    MacCtx.MacFlags.Bits.MacDone = 1;
 800a484:	2320      	movs	r3, #32
 800a486:	5de2      	ldrb	r2, [r4, r7]
 800a488:	4313      	orrs	r3, r2
 800a48a:	55e3      	strb	r3, [r4, r7]
    UpdateRxSlotIdleState( );
 800a48c:	f7fe fd20 	bl	8008ed0 <UpdateRxSlotIdleState>
 800a490:	e5ae      	b.n	8009ff0 <LoRaMacProcess+0x204>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800a492:	211f      	movs	r1, #31
 800a494:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a496:	9b03      	ldr	r3, [sp, #12]
 800a498:	4388      	bics	r0, r1
 800a49a:	0001      	movs	r1, r0
 800a49c:	204c      	movs	r0, #76	; 0x4c
 800a49e:	58e3      	ldr	r3, [r4, r3]
 800a4a0:	30ff      	adds	r0, #255	; 0xff
 800a4a2:	29a0      	cmp	r1, #160	; 0xa0
 800a4a4:	d10b      	bne.n	800a4be <LoRaMacProcess+0x6d2>
                    MacCtx.NvmCtx->SrvAckRequested = true;
 800a4a6:	399f      	subs	r1, #159	; 0x9f
 800a4a8:	5419      	strb	r1, [r3, r0]
                    if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 800a4aa:	3162      	adds	r1, #98	; 0x62
 800a4ac:	31ff      	adds	r1, #255	; 0xff
 800a4ae:	5c59      	ldrb	r1, [r3, r1]
 800a4b0:	2900      	cmp	r1, #0
 800a4b2:	d102      	bne.n	800a4ba <LoRaMacProcess+0x6ce>
                        MacCtx.NvmCtx->LastRxMic = macMsgData.MIC;
 800a4b4:	991d      	ldr	r1, [sp, #116]	; 0x74
 800a4b6:	33fc      	adds	r3, #252	; 0xfc
 800a4b8:	66d9      	str	r1, [r3, #108]	; 0x6c
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	e795      	b.n	800a3ea <LoRaMacProcess+0x5fe>
                    MacCtx.NvmCtx->SrvAckRequested = false;
 800a4be:	2100      	movs	r1, #0
 800a4c0:	5419      	strb	r1, [r3, r0]
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800a4c2:	4b0d      	ldr	r3, [pc, #52]	; (800a4f8 <LoRaMacProcess+0x70c>)
 800a4c4:	54e1      	strb	r1, [r4, r3]
 800a4c6:	e792      	b.n	800a3ee <LoRaMacProcess+0x602>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.McpsIndication.RxSlot );
 800a4c8:	f7ff fa2e 	bl	8009928 <ProcessMacCommands.isra.0.constprop.0>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800a4cc:	2248      	movs	r2, #72	; 0x48
 800a4ce:	ab08      	add	r3, sp, #32
 800a4d0:	189b      	adds	r3, r3, r2
 800a4d2:	781b      	ldrb	r3, [r3, #0]
 800a4d4:	55a3      	strb	r3, [r4, r6]
                    APP_LOG(TS_OFF, VLEVEL_M, "Frame type B\r\n");
 800a4d6:	4b1d      	ldr	r3, [pc, #116]	; (800a54c <LoRaMacProcess+0x760>)
 800a4d8:	e7b8      	b.n	800a44c <LoRaMacProcess+0x660>
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.McpsIndication.RxSlot );
 800a4da:	ab1c      	add	r3, sp, #112	; 0x70
 800a4dc:	7819      	ldrb	r1, [r3, #0]
 800a4de:	9a07      	ldr	r2, [sp, #28]
 800a4e0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800a4e2:	f7ff fa21 	bl	8009928 <ProcessMacCommands.isra.0.constprop.0>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800a4e6:	2248      	movs	r2, #72	; 0x48
 800a4e8:	ab08      	add	r3, sp, #32
 800a4ea:	189b      	adds	r3, r3, r2
 800a4ec:	781b      	ldrb	r3, [r3, #0]
 800a4ee:	55a3      	strb	r3, [r4, r6]
                    APP_LOG(TS_OFF, VLEVEL_M, "Frame type C\r\n");
 800a4f0:	4b17      	ldr	r3, [pc, #92]	; (800a550 <LoRaMacProcess+0x764>)
 800a4f2:	e7ab      	b.n	800a44c <LoRaMacProcess+0x660>
 800a4f4:	20000978 	.word	0x20000978
 800a4f8:	0000041c 	.word	0x0000041c
 800a4fc:	20000794 	.word	0x20000794
 800a500:	0800faef 	.word	0x0800faef
 800a504:	00000434 	.word	0x00000434
 800a508:	2000055c 	.word	0x2000055c
 800a50c:	0000042d 	.word	0x0000042d
 800a510:	0800fb23 	.word	0x0800fb23
 800a514:	0800fb06 	.word	0x0800fb06
 800a518:	0800fb35 	.word	0x0800fb35
 800a51c:	0800fb4d 	.word	0x0800fb4d
 800a520:	0000041e 	.word	0x0000041e
 800a524:	00000421 	.word	0x00000421
 800a528:	00000424 	.word	0x00000424
 800a52c:	0000042e 	.word	0x0000042e
 800a530:	0000043d 	.word	0x0000043d
 800a534:	0000043c 	.word	0x0000043c
 800a538:	0000041f 	.word	0x0000041f
 800a53c:	00000429 	.word	0x00000429
 800a540:	0800fb67 	.word	0x0800fb67
 800a544:	0800fba3 	.word	0x0800fba3
 800a548:	00000414 	.word	0x00000414
 800a54c:	0800fb76 	.word	0x0800fb76
 800a550:	0800fb85 	.word	0x0800fb85
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800a554:	2248      	movs	r2, #72	; 0x48
 800a556:	ab08      	add	r3, sp, #32
 800a558:	189b      	adds	r3, r3, r2
 800a55a:	781b      	ldrb	r3, [r3, #0]
 800a55c:	55a3      	strb	r3, [r4, r6]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800a55e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a560:	9302      	str	r3, [sp, #8]
 800a562:	9a02      	ldr	r2, [sp, #8]
 800a564:	4b6b      	ldr	r3, [pc, #428]	; (800a714 <LoRaMacProcess+0x928>)
 800a566:	50e2      	str	r2, [r4, r3]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800a568:	ab1c      	add	r3, sp, #112	; 0x70
 800a56a:	781a      	ldrb	r2, [r3, #0]
 800a56c:	2385      	movs	r3, #133	; 0x85
 800a56e:	00db      	lsls	r3, r3, #3
 800a570:	54e2      	strb	r2, [r4, r3]
                    MacCtx.McpsIndication.RxData = true;
 800a572:	2201      	movs	r2, #1
 800a574:	4b68      	ldr	r3, [pc, #416]	; (800a718 <LoRaMacProcess+0x92c>)
 800a576:	54e2      	strb	r2, [r4, r3]
                    APP_LOG(TS_OFF, VLEVEL_M, "Frame type D\r\n");
 800a578:	4b68      	ldr	r3, [pc, #416]	; (800a71c <LoRaMacProcess+0x930>)
 800a57a:	e767      	b.n	800a44c <LoRaMacProcess+0x660>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800a57c:	9b02      	ldr	r3, [sp, #8]
 800a57e:	4e68      	ldr	r6, [pc, #416]	; (800a720 <LoRaMacProcess+0x934>)
 800a580:	3b01      	subs	r3, #1
 800a582:	9302      	str	r3, [sp, #8]
 800a584:	466b      	mov	r3, sp
 800a586:	9904      	ldr	r1, [sp, #16]
 800a588:	891a      	ldrh	r2, [r3, #8]
 800a58a:	0030      	movs	r0, r6
 800a58c:	3101      	adds	r1, #1
 800a58e:	f002 ff73 	bl	800d478 <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800a592:	2303      	movs	r3, #3
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800a594:	2002      	movs	r0, #2
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800a596:	4a63      	ldr	r2, [pc, #396]	; (800a724 <LoRaMacProcess+0x938>)
            APP_LOG(TS_OFF, VLEVEL_M, "Frame type proprietary\r\n");
 800a598:	0029      	movs	r1, r5
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800a59a:	52a3      	strh	r3, [r4, r2]
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800a59c:	4b5d      	ldr	r3, [pc, #372]	; (800a714 <LoRaMacProcess+0x928>)
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800a59e:	9a02      	ldr	r2, [sp, #8]
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800a5a0:	50e6      	str	r6, [r4, r3]
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800a5a2:	3304      	adds	r3, #4
 800a5a4:	54e2      	strb	r2, [r4, r3]
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800a5a6:	5de3      	ldrb	r3, [r4, r7]
            APP_LOG(TS_OFF, VLEVEL_M, "Frame type proprietary\r\n");
 800a5a8:	002a      	movs	r2, r5
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800a5aa:	4303      	orrs	r3, r0
 800a5ac:	55e3      	strb	r3, [r4, r7]
            APP_LOG(TS_OFF, VLEVEL_M, "Frame type proprietary\r\n");
 800a5ae:	4b5e      	ldr	r3, [pc, #376]	; (800a728 <LoRaMacProcess+0x93c>)
 800a5b0:	e758      	b.n	800a464 <LoRaMacProcess+0x678>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a5b2:	4b5e      	ldr	r3, [pc, #376]	; (800a72c <LoRaMacProcess+0x940>)
 800a5b4:	54e2      	strb	r2, [r4, r3]
            PrepareRxDoneAbort( );
 800a5b6:	f7fe fd43 	bl	8009040 <PrepareRxDoneAbort>
            break;
 800a5ba:	e755      	b.n	800a468 <LoRaMacProcess+0x67c>
        if( MacCtx.NvmCtx->DeviceClass == CLASS_C )
 800a5bc:	9b03      	ldr	r3, [sp, #12]
 800a5be:	58e3      	ldr	r3, [r4, r3]
 800a5c0:	337c      	adds	r3, #124	; 0x7c
 800a5c2:	781b      	ldrb	r3, [r3, #0]
 800a5c4:	2b02      	cmp	r3, #2
 800a5c6:	d000      	beq.n	800a5ca <LoRaMacProcess+0x7de>
 800a5c8:	e75c      	b.n	800a484 <LoRaMacProcess+0x698>
 800a5ca:	e758      	b.n	800a47e <LoRaMacProcess+0x692>
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800a5cc:	5de3      	ldrb	r3, [r4, r7]
 800a5ce:	075b      	lsls	r3, r3, #29
 800a5d0:	d512      	bpl.n	800a5f8 <LoRaMacProcess+0x80c>
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800a5d2:	2001      	movs	r0, #1
 800a5d4:	25d0      	movs	r5, #208	; 0xd0
 800a5d6:	f001 fb47 	bl	800bc68 <LoRaMacConfirmQueueIsCmdActive>
 800a5da:	00ad      	lsls	r5, r5, #2
 800a5dc:	2800      	cmp	r0, #0
 800a5de:	d035      	beq.n	800a64c <LoRaMacProcess+0x860>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800a5e0:	2001      	movs	r0, #1
 800a5e2:	f001 fb13 	bl	800bc0c <LoRaMacConfirmQueueGetStatus>
 800a5e6:	2800      	cmp	r0, #0
 800a5e8:	d102      	bne.n	800a5f0 <LoRaMacProcess+0x804>
                MacCtx.ChannelsNbTransCounter = 0;
 800a5ea:	2382      	movs	r3, #130	; 0x82
 800a5ec:	00db      	lsls	r3, r3, #3
 800a5ee:	54e0      	strb	r0, [r4, r3]
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800a5f0:	2302      	movs	r3, #2
 800a5f2:	5962      	ldr	r2, [r4, r5]
 800a5f4:	439a      	bics	r2, r3
 800a5f6:	5162      	str	r2, [r4, r5]
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800a5f8:	5de1      	ldrb	r1, [r4, r7]
 800a5fa:	07cb      	lsls	r3, r1, #31
 800a5fc:	d400      	bmi.n	800a600 <LoRaMacProcess+0x814>
 800a5fe:	e54c      	b.n	800a09a <LoRaMacProcess+0x2ae>
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800a600:	4b4b      	ldr	r3, [pc, #300]	; (800a730 <LoRaMacProcess+0x944>)
 800a602:	5ce3      	ldrb	r3, [r4, r3]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d001      	beq.n	800a60c <LoRaMacProcess+0x820>
 800a608:	2b03      	cmp	r3, #3
 800a60a:	d12a      	bne.n	800a662 <LoRaMacProcess+0x876>
        MacCtx.NvmCtx->MacParams.ChannelsNbTrans )
 800a60c:	4b49      	ldr	r3, [pc, #292]	; (800a734 <LoRaMacProcess+0x948>)
    if( MacCtx.ChannelsNbTransCounter >=
 800a60e:	2082      	movs	r0, #130	; 0x82
        MacCtx.NvmCtx->MacParams.ChannelsNbTrans )
 800a610:	58e3      	ldr	r3, [r4, r3]
    if( MacCtx.ChannelsNbTransCounter >=
 800a612:	00c0      	lsls	r0, r0, #3
        MacCtx.NvmCtx->MacParams.ChannelsNbTrans )
 800a614:	001a      	movs	r2, r3
 800a616:	32a4      	adds	r2, #164	; 0xa4
    if( MacCtx.ChannelsNbTransCounter >=
 800a618:	5c20      	ldrb	r0, [r4, r0]
 800a61a:	7812      	ldrb	r2, [r2, #0]
 800a61c:	4290      	cmp	r0, r2
 800a61e:	d209      	bcs.n	800a634 <LoRaMacProcess+0x848>
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800a620:	078a      	lsls	r2, r1, #30
 800a622:	d554      	bpl.n	800a6ce <LoRaMacProcess+0x8e2>
        if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 800a624:	337c      	adds	r3, #124	; 0x7c
 800a626:	781b      	ldrb	r3, [r3, #0]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d003      	beq.n	800a634 <LoRaMacProcess+0x848>
            if( MacCtx.McpsIndication.RxSlot == RX_SLOT_WIN_1 )
 800a62c:	4b42      	ldr	r3, [pc, #264]	; (800a738 <LoRaMacProcess+0x94c>)
 800a62e:	5ce3      	ldrb	r3, [r4, r3]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d14c      	bne.n	800a6ce <LoRaMacProcess+0x8e2>
            TimerStop( &MacCtx.TxDelayedTimer );
 800a634:	4841      	ldr	r0, [pc, #260]	; (800a73c <LoRaMacProcess+0x950>)
 800a636:	f004 fa89 	bl	800eb4c <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800a63a:	22d0      	movs	r2, #208	; 0xd0
 800a63c:	2320      	movs	r3, #32
 800a63e:	0092      	lsls	r2, r2, #2
 800a640:	58a1      	ldr	r1, [r4, r2]
 800a642:	4399      	bics	r1, r3
 800a644:	50a1      	str	r1, [r4, r2]
            StopRetransmission( );
 800a646:	f7fe fc53 	bl	8008ef0 <StopRetransmission>
 800a64a:	e526      	b.n	800a09a <LoRaMacProcess+0x2ae>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800a64c:	2005      	movs	r0, #5
 800a64e:	f001 fb0b 	bl	800bc68 <LoRaMacConfirmQueueIsCmdActive>
 800a652:	2800      	cmp	r0, #0
 800a654:	d1cc      	bne.n	800a5f0 <LoRaMacProcess+0x804>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 800a656:	2006      	movs	r0, #6
 800a658:	f001 fb06 	bl	800bc68 <LoRaMacConfirmQueueIsCmdActive>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800a65c:	2800      	cmp	r0, #0
 800a65e:	d1c7      	bne.n	800a5f0 <LoRaMacProcess+0x804>
 800a660:	e7ca      	b.n	800a5f8 <LoRaMacProcess+0x80c>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800a662:	2b01      	cmp	r3, #1
 800a664:	d133      	bne.n	800a6ce <LoRaMacProcess+0x8e2>
            if( MacCtx.AckTimeoutRetry == true )
 800a666:	4b36      	ldr	r3, [pc, #216]	; (800a740 <LoRaMacProcess+0x954>)
 800a668:	5ce2      	ldrb	r2, [r4, r3]
 800a66a:	2a00      	cmp	r2, #0
 800a66c:	d100      	bne.n	800a670 <LoRaMacProcess+0x884>
 800a66e:	e514      	b.n	800a09a <LoRaMacProcess+0x2ae>
    if( MacCtx.AckTimeoutRetriesCounter >=
 800a670:	4d34      	ldr	r5, [pc, #208]	; (800a744 <LoRaMacProcess+0x958>)
        MacCtx.AckTimeoutRetries )
 800a672:	4835      	ldr	r0, [pc, #212]	; (800a748 <LoRaMacProcess+0x95c>)
    if( MacCtx.AckTimeoutRetriesCounter >=
 800a674:	5d63      	ldrb	r3, [r4, r5]
        MacCtx.AckTimeoutRetries )
 800a676:	5c20      	ldrb	r0, [r4, r0]
 800a678:	4684      	mov	ip, r0
    if( MacCtx.AckTimeoutRetriesCounter >=
 800a67a:	4283      	cmp	r3, r0
 800a67c:	d205      	bcs.n	800a68a <LoRaMacProcess+0x89e>
    return false;
 800a67e:	2200      	movs	r2, #0
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800a680:	0789      	lsls	r1, r1, #30
 800a682:	d502      	bpl.n	800a68a <LoRaMacProcess+0x89e>
        if( MacCtx.McpsConfirm.AckReceived == true )
 800a684:	2288      	movs	r2, #136	; 0x88
 800a686:	00d2      	lsls	r2, r2, #3
 800a688:	5ca2      	ldrb	r2, [r4, r2]
                if( MacCtx.NvmCtx->Version.Fields.Minor == 0 )
 800a68a:	21b1      	movs	r1, #177	; 0xb1
 800a68c:	4e29      	ldr	r6, [pc, #164]	; (800a734 <LoRaMacProcess+0x948>)
 800a68e:	0049      	lsls	r1, r1, #1
 800a690:	59a0      	ldr	r0, [r4, r6]
 800a692:	5c41      	ldrb	r1, [r0, r1]
 800a694:	2900      	cmp	r1, #0
 800a696:	d13a      	bne.n	800a70e <LoRaMacProcess+0x922>
                    if( stopRetransmission == false )
 800a698:	2a00      	cmp	r2, #0
 800a69a:	d122      	bne.n	800a6e2 <LoRaMacProcess+0x8f6>
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 800a69c:	4563      	cmp	r3, ip
 800a69e:	d216      	bcs.n	800a6ce <LoRaMacProcess+0x8e2>
        MacCtx.AckTimeoutRetriesCounter++;
 800a6a0:	3301      	adds	r3, #1
 800a6a2:	b2db      	uxtb	r3, r3
 800a6a4:	5563      	strb	r3, [r4, r5]
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 800a6a6:	07db      	lsls	r3, r3, #31
 800a6a8:	d511      	bpl.n	800a6ce <LoRaMacProcess+0x8e2>
            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800a6aa:	2322      	movs	r3, #34	; 0x22
 800a6ac:	a912      	add	r1, sp, #72	; 0x48
 800a6ae:	700b      	strb	r3, [r1, #0]
            getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800a6b0:	0003      	movs	r3, r0
 800a6b2:	33b8      	adds	r3, #184	; 0xb8
 800a6b4:	781b      	ldrb	r3, [r3, #0]
 800a6b6:	708b      	strb	r3, [r1, #2]
            getPhy.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800a6b8:	0003      	movs	r3, r0
 800a6ba:	3385      	adds	r3, #133	; 0x85
 800a6bc:	781b      	ldrb	r3, [r3, #0]
 800a6be:	704b      	strb	r3, [r1, #1]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a6c0:	7800      	ldrb	r0, [r0, #0]
 800a6c2:	f001 fe80 	bl	800c3c6 <RegionGetPhyParam>
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = phyParam.Value;
 800a6c6:	59a3      	ldr	r3, [r4, r6]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a6c8:	900e      	str	r0, [sp, #56]	; 0x38
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = phyParam.Value;
 800a6ca:	3385      	adds	r3, #133	; 0x85
 800a6cc:	7018      	strb	r0, [r3, #0]
            MacCtx.MacFlags.Bits.MacDone = 0;
 800a6ce:	2220      	movs	r2, #32
            MacCtx.AckTimeoutRetry = false;
 800a6d0:	2000      	movs	r0, #0
            MacCtx.MacFlags.Bits.MacDone = 0;
 800a6d2:	5de3      	ldrb	r3, [r4, r7]
 800a6d4:	4393      	bics	r3, r2
 800a6d6:	55e3      	strb	r3, [r4, r7]
            MacCtx.AckTimeoutRetry = false;
 800a6d8:	4b19      	ldr	r3, [pc, #100]	; (800a740 <LoRaMacProcess+0x954>)
 800a6da:	54e0      	strb	r0, [r4, r3]
            OnTxDelayedTimerEvent( NULL );
 800a6dc:	f7fe ffbe 	bl	800965c <OnTxDelayedTimerEvent>
 800a6e0:	e4db      	b.n	800a09a <LoRaMacProcess+0x2ae>
    if( MacCtx.McpsConfirm.AckReceived == false )
 800a6e2:	2388      	movs	r3, #136	; 0x88
 800a6e4:	00db      	lsls	r3, r3, #3
 800a6e6:	5ce6      	ldrb	r6, [r4, r3]
 800a6e8:	2e00      	cmp	r6, #0
 800a6ea:	d10c      	bne.n	800a706 <LoRaMacProcess+0x91a>
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800a6ec:	2302      	movs	r3, #2
 800a6ee:	a912      	add	r1, sp, #72	; 0x48
 800a6f0:	710b      	strb	r3, [r1, #4]
        params.NvmCtx = Contexts.RegionNvmCtx;
 800a6f2:	4b16      	ldr	r3, [pc, #88]	; (800a74c <LoRaMacProcess+0x960>)
        RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 800a6f4:	7800      	ldrb	r0, [r0, #0]
        params.NvmCtx = Contexts.RegionNvmCtx;
 800a6f6:	689b      	ldr	r3, [r3, #8]
 800a6f8:	9312      	str	r3, [sp, #72]	; 0x48
        RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 800a6fa:	f001 fe77 	bl	800c3ec <RegionInitDefaults>
        MacCtx.NodeAckRequested = false;
 800a6fe:	4b14      	ldr	r3, [pc, #80]	; (800a750 <LoRaMacProcess+0x964>)
 800a700:	54e6      	strb	r6, [r4, r3]
        MacCtx.McpsConfirm.AckReceived = false;
 800a702:	332c      	adds	r3, #44	; 0x2c
 800a704:	54e6      	strb	r6, [r4, r3]
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 800a706:	5d62      	ldrb	r2, [r4, r5]
 800a708:	4b12      	ldr	r3, [pc, #72]	; (800a754 <LoRaMacProcess+0x968>)
 800a70a:	54e2      	strb	r2, [r4, r3]
        if( stopRetransmission == true )
 800a70c:	e792      	b.n	800a634 <LoRaMacProcess+0x848>
 800a70e:	2a00      	cmp	r2, #0
 800a710:	d0dd      	beq.n	800a6ce <LoRaMacProcess+0x8e2>
 800a712:	e78f      	b.n	800a634 <LoRaMacProcess+0x848>
 800a714:	00000424 	.word	0x00000424
 800a718:	00000429 	.word	0x00000429
 800a71c:	0800fb94 	.word	0x0800fb94
 800a720:	20000794 	.word	0x20000794
 800a724:	0000041c 	.word	0x0000041c
 800a728:	0800fbc6 	.word	0x0800fbc6
 800a72c:	0000041d 	.word	0x0000041d
 800a730:	0000043c 	.word	0x0000043c
 800a734:	00000484 	.word	0x00000484
 800a738:	0000042d 	.word	0x0000042d
 800a73c:	200008c4 	.word	0x200008c4
 800a740:	00000413 	.word	0x00000413
 800a744:	00000412 	.word	0x00000412
 800a748:	00000411 	.word	0x00000411
 800a74c:	20000520 	.word	0x20000520
 800a750:	00000414 	.word	0x00000414
 800a754:	00000441 	.word	0x00000441

0800a758 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 800a758:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a75a:	b08d      	sub	sp, #52	; 0x34
 800a75c:	0007      	movs	r7, r0
 //   LoRaMacClassBParams_t classBParams;

    if( ( primitives == NULL ) ||
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800a75e:	2503      	movs	r5, #3
{
 800a760:	9103      	str	r1, [sp, #12]
 800a762:	9202      	str	r2, [sp, #8]
    if( ( primitives == NULL ) ||
 800a764:	2800      	cmp	r0, #0
 800a766:	d100      	bne.n	800a76a <LoRaMacInitialization+0x12>
 800a768:	e170      	b.n	800aa4c <LoRaMacInitialization+0x2f4>
 800a76a:	2900      	cmp	r1, #0
 800a76c:	d100      	bne.n	800a770 <LoRaMacInitialization+0x18>
 800a76e:	e16d      	b.n	800aa4c <LoRaMacInitialization+0x2f4>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800a770:	6803      	ldr	r3, [r0, #0]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d100      	bne.n	800a778 <LoRaMacInitialization+0x20>
 800a776:	e169      	b.n	800aa4c <LoRaMacInitialization+0x2f4>
 800a778:	6843      	ldr	r3, [r0, #4]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d100      	bne.n	800a780 <LoRaMacInitialization+0x28>
 800a77e:	e165      	b.n	800aa4c <LoRaMacInitialization+0x2f4>
        ( primitives->MacMcpsIndication == NULL ) ||
 800a780:	6883      	ldr	r3, [r0, #8]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d100      	bne.n	800a788 <LoRaMacInitialization+0x30>
 800a786:	e161      	b.n	800aa4c <LoRaMacInitialization+0x2f4>
        ( primitives->MacMlmeConfirm == NULL ) ||
 800a788:	68c3      	ldr	r3, [r0, #12]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d100      	bne.n	800a790 <LoRaMacInitialization+0x38>
 800a78e:	e15d      	b.n	800aa4c <LoRaMacInitialization+0x2f4>
        ( primitives->MacMlmeIndication == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 800a790:	0010      	movs	r0, r2
 800a792:	f001 fe13 	bl	800c3bc <RegionIsActive>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800a796:	3506      	adds	r5, #6
    if( RegionIsActive( region ) == false )
 800a798:	2800      	cmp	r0, #0
 800a79a:	d100      	bne.n	800a79e <LoRaMacInitialization+0x46>
 800a79c:	e156      	b.n	800aa4c <LoRaMacInitialization+0x2f4>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives, EventConfirmQueueNvmCtxChanged );
 800a79e:	0038      	movs	r0, r7
 800a7a0:	49bd      	ldr	r1, [pc, #756]	; (800aa98 <LoRaMacInitialization+0x340>)
 800a7a2:	f001 f9bf 	bl	800bb24 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &NvmMacCtx, 0x00, sizeof( LoRaMacNvmCtx_t ) );
 800a7a6:	22b6      	movs	r2, #182	; 0xb6
 800a7a8:	4dbc      	ldr	r5, [pc, #752]	; (800aa9c <LoRaMacInitialization+0x344>)
 800a7aa:	2100      	movs	r1, #0
 800a7ac:	0028      	movs	r0, r5
 800a7ae:	0052      	lsls	r2, r2, #1
 800a7b0:	f002 fe78 	bl	800d4a4 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 800a7b4:	4cba      	ldr	r4, [pc, #744]	; (800aaa0 <LoRaMacInitialization+0x348>)
 800a7b6:	2100      	movs	r1, #0
 800a7b8:	0020      	movs	r0, r4
 800a7ba:	4aba      	ldr	r2, [pc, #744]	; (800aaa4 <LoRaMacInitialization+0x34c>)
 800a7bc:	f002 fe72 	bl	800d4a4 <memset1>
    MacCtx.NvmCtx = &NvmMacCtx;

    // Set non zero variables to its default value
    MacCtx.AckTimeoutRetriesCounter = 1;
 800a7c0:	2101      	movs	r1, #1
 800a7c2:	4bb9      	ldr	r3, [pc, #740]	; (800aaa8 <LoRaMacInitialization+0x350>)
    MacCtx.AckTimeoutRetries = 1;
    MacCtx.NvmCtx->Region = region;
    MacCtx.NvmCtx->DeviceClass = CLASS_A;
 800a7c4:	2200      	movs	r2, #0
    MacCtx.AckTimeoutRetriesCounter = 1;
 800a7c6:	54e1      	strb	r1, [r4, r3]
    MacCtx.AckTimeoutRetries = 1;
 800a7c8:	4bb8      	ldr	r3, [pc, #736]	; (800aaac <LoRaMacInitialization+0x354>)
    MacCtx.NvmCtx = &NvmMacCtx;
 800a7ca:	4eb9      	ldr	r6, [pc, #740]	; (800aab0 <LoRaMacInitialization+0x358>)
    MacCtx.AckTimeoutRetries = 1;
 800a7cc:	54e1      	strb	r1, [r4, r3]
    MacCtx.NvmCtx->Region = region;
 800a7ce:	9b02      	ldr	r3, [sp, #8]
    MacCtx.NvmCtx = &NvmMacCtx;
 800a7d0:	51a5      	str	r5, [r4, r6]
    MacCtx.NvmCtx->Region = region;
 800a7d2:	702b      	strb	r3, [r5, #0]
    MacCtx.NvmCtx->DeviceClass = CLASS_A;
 800a7d4:	002b      	movs	r3, r5
 800a7d6:	337c      	adds	r3, #124	; 0x7c
 800a7d8:	701a      	strb	r2, [r3, #0]
    MacCtx.NvmCtx->RepeaterSupport = false;
 800a7da:	002b      	movs	r3, r5
 800a7dc:	33ca      	adds	r3, #202	; 0xca
 800a7de:	701a      	strb	r2, [r3, #0]

    // Setup version
    MacCtx.NvmCtx->Version.Value = LORAMAC_VERSION;
 800a7e0:	4bb4      	ldr	r3, [pc, #720]	; (800aab4 <LoRaMacInitialization+0x35c>)
 800a7e2:	35fc      	adds	r5, #252	; 0xfc
 800a7e4:	666b      	str	r3, [r5, #100]	; 0x64

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800a7e6:	230f      	movs	r3, #15
 800a7e8:	ad08      	add	r5, sp, #32
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a7ea:	0029      	movs	r1, r5
 800a7ec:	9802      	ldr	r0, [sp, #8]
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800a7ee:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a7f0:	f001 fde9 	bl	800c3c6 <RegionGetPhyParam>
    MacCtx.NvmCtx->DutyCycleOn = ( bool ) phyParam.Value;
 800a7f4:	59a3      	ldr	r3, [r4, r6]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a7f6:	9007      	str	r0, [sp, #28]
    MacCtx.NvmCtx->DutyCycleOn = ( bool ) phyParam.Value;
 800a7f8:	1e42      	subs	r2, r0, #1
 800a7fa:	4190      	sbcs	r0, r2
 800a7fc:	001a      	movs	r2, r3
 800a7fe:	32c9      	adds	r2, #201	; 0xc9
 800a800:	7010      	strb	r0, [r2, #0]

    getPhy.Attribute = PHY_DEF_TX_POWER;
 800a802:	200a      	movs	r0, #10
 800a804:	7028      	strb	r0, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a806:	0029      	movs	r1, r5
 800a808:	7818      	ldrb	r0, [r3, #0]
 800a80a:	f001 fddc 	bl	800c3c6 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = phyParam.Value;

    getPhy.Attribute = PHY_DEF_TX_DR;
 800a80e:	2206      	movs	r2, #6
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = phyParam.Value;
 800a810:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_DEF_TX_DR;
 800a812:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a814:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = phyParam.Value;
 800a816:	7118      	strb	r0, [r3, #4]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a818:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a81a:	7818      	ldrb	r0, [r3, #0]
 800a81c:	f001 fdd3 	bl	800c3c6 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = phyParam.Value;

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800a820:	2210      	movs	r2, #16
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = phyParam.Value;
 800a822:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800a824:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a826:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = phyParam.Value;
 800a828:	7158      	strb	r0, [r3, #5]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a82a:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a82c:	7818      	ldrb	r0, [r3, #0]
 800a82e:	f001 fdca 	bl	800c3c6 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow = phyParam.Value;

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800a832:	2211      	movs	r2, #17
    MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800a834:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800a836:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a838:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800a83a:	6118      	str	r0, [r3, #16]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a83c:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a83e:	7818      	ldrb	r0, [r3, #0]
 800a840:	f001 fdc1 	bl	800c3c6 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1 = phyParam.Value;

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800a844:	2212      	movs	r2, #18
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800a846:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800a848:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a84a:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800a84c:	6158      	str	r0, [r3, #20]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a84e:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a850:	7818      	ldrb	r0, [r3, #0]
 800a852:	f001 fdb8 	bl	800c3c6 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2 = phyParam.Value;

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800a856:	2213      	movs	r2, #19
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800a858:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800a85a:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a85c:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800a85e:	6198      	str	r0, [r3, #24]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a860:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a862:	7818      	ldrb	r0, [r3, #0]
 800a864:	f001 fdaf 	bl	800c3c6 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800a868:	2214      	movs	r2, #20
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800a86a:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800a86c:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a86e:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800a870:	61d8      	str	r0, [r3, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a872:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a874:	7818      	ldrb	r0, [r3, #0]
 800a876:	f001 fda6 	bl	800c3c6 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800a87a:	2217      	movs	r2, #23
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 800a87c:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800a87e:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a880:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 800a882:	6218      	str	r0, [r3, #32]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a884:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a886:	7818      	ldrb	r0, [r3, #0]
 800a888:	f001 fd9d 	bl	800c3c6 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800a88c:	59a3      	ldr	r3, [r4, r6]

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a88e:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800a890:	1d9a      	adds	r2, r3, #6
 800a892:	77d0      	strb	r0, [r2, #31]
    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 800a894:	2218      	movs	r2, #24
 800a896:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a898:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a89a:	7818      	ldrb	r0, [r3, #0]
 800a89c:	f001 fd93 	bl	800c3c6 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;

    getPhy.Attribute = PHY_DEF_RX2_DR;
 800a8a0:	2219      	movs	r2, #25
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800a8a2:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_DEF_RX2_DR;
 800a8a4:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a8a6:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800a8a8:	6298      	str	r0, [r3, #40]	; 0x28
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 800a8aa:	6318      	str	r0, [r3, #48]	; 0x30
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a8ac:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a8ae:	7818      	ldrb	r0, [r3, #0]
 800a8b0:	f001 fd89 	bl	800c3c6 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800a8b4:	59a3      	ldr	r3, [r4, r6]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a8b6:	9007      	str	r0, [sp, #28]
    MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800a8b8:	001a      	movs	r2, r3
 800a8ba:	b2c0      	uxtb	r0, r0
 800a8bc:	322c      	adds	r2, #44	; 0x2c
 800a8be:	7010      	strb	r0, [r2, #0]
    MacCtx.NvmCtx->MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 800a8c0:	7210      	strb	r0, [r2, #8]

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 800a8c2:	221e      	movs	r2, #30
 800a8c4:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a8c6:	0029      	movs	r1, r5
 800a8c8:	7818      	ldrb	r0, [r3, #0]
 800a8ca:	f001 fd7c 	bl	800c3c6 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800a8ce:	59a3      	ldr	r3, [r4, r6]

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a8d0:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800a8d2:	001a      	movs	r2, r3
 800a8d4:	3238      	adds	r2, #56	; 0x38
 800a8d6:	7010      	strb	r0, [r2, #0]
    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 800a8d8:	221f      	movs	r2, #31
 800a8da:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a8dc:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a8de:	7818      	ldrb	r0, [r3, #0]
 800a8e0:	f001 fd71 	bl	800c3c6 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800a8e4:	59a3      	ldr	r3, [r4, r6]

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a8e6:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800a8e8:	001a      	movs	r2, r3
 800a8ea:	3239      	adds	r2, #57	; 0x39
 800a8ec:	7010      	strb	r0, [r2, #0]
    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 800a8ee:	2220      	movs	r2, #32
 800a8f0:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a8f2:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a8f4:	7818      	ldrb	r0, [r3, #0]
 800a8f6:	f001 fd66 	bl	800c3c6 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.MaxEirp = phyParam.fValue;

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800a8fa:	2221      	movs	r2, #33	; 0x21
    MacCtx.NvmCtx->MacParamsDefaults.MaxEirp = phyParam.fValue;
 800a8fc:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800a8fe:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a900:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.MaxEirp = phyParam.fValue;
 800a902:	63d8      	str	r0, [r3, #60]	; 0x3c
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a904:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a906:	7818      	ldrb	r0, [r3, #0]
 800a908:	f001 fd5d 	bl	800c3c6 <RegionGetPhyParam>
    MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = phyParam.fValue;

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800a90c:	220b      	movs	r2, #11
    MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = phyParam.fValue;
 800a90e:	59a3      	ldr	r3, [r4, r6]
    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800a910:	702a      	strb	r2, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a912:	0029      	movs	r1, r5
    MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = phyParam.fValue;
 800a914:	6418      	str	r0, [r3, #64]	; 0x40
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a916:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a918:	7818      	ldrb	r0, [r3, #0]
 800a91a:	f001 fd54 	bl	800c3c6 <RegionGetPhyParam>
    MacCtx.AdrAckLimit = phyParam.Value;
 800a91e:	23fd      	movs	r3, #253	; 0xfd
 800a920:	009b      	lsls	r3, r3, #2
 800a922:	52e0      	strh	r0, [r4, r3]

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 800a924:	230c      	movs	r3, #12
 800a926:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a928:	59a3      	ldr	r3, [r4, r6]
 800a92a:	0029      	movs	r1, r5
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a92c:	9007      	str	r0, [sp, #28]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a92e:	7818      	ldrb	r0, [r3, #0]
 800a930:	f001 fd49 	bl	800c3c6 <RegionGetPhyParam>
    MacCtx.AdrAckDelay = phyParam.Value;

    // Init parameters which are not set in function ResetMacParameters
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans = 1;
 800a934:	2101      	movs	r1, #1
    MacCtx.AdrAckDelay = phyParam.Value;
 800a936:	4b60      	ldr	r3, [pc, #384]	; (800aab8 <LoRaMacInitialization+0x360>)
    MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = 10;
    MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = 6;
 800a938:	2506      	movs	r5, #6
    MacCtx.AdrAckDelay = phyParam.Value;
 800a93a:	52e0      	strh	r0, [r4, r3]
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans = 1;
 800a93c:	59a3      	ldr	r3, [r4, r6]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800a93e:	9007      	str	r0, [sp, #28]
    MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans = 1;
 800a940:	1d5a      	adds	r2, r3, #5
 800a942:	77d1      	strb	r1, [r2, #31]

    MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError;
 800a944:	001a      	movs	r2, r3
    MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = 10;
 800a946:	200a      	movs	r0, #10
    MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError;
 800a948:	3288      	adds	r2, #136	; 0x88
    MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = 10;
 800a94a:	6098      	str	r0, [r3, #8]
    MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = 6;
 800a94c:	731d      	strb	r5, [r3, #12]
    MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError;
 800a94e:	6010      	str	r0, [r2, #0]
    MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols;
 800a950:	0018      	movs	r0, r3
 800a952:	308c      	adds	r0, #140	; 0x8c
 800a954:	7005      	strb	r5, [r0, #0]
    MacCtx.NvmCtx->MacParams.MaxRxWindow = MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow;
 800a956:	0018      	movs	r0, r3
 800a958:	3090      	adds	r0, #144	; 0x90
 800a95a:	0002      	movs	r2, r0
 800a95c:	6918      	ldr	r0, [r3, #16]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1;
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2;
    MacCtx.NvmCtx->MacParams.ChannelsNbTrans = MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans;

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 800a95e:	2500      	movs	r5, #0
    MacCtx.NvmCtx->MacParams.MaxRxWindow = MacCtx.NvmCtx->MacParamsDefaults.MaxRxWindow;
 800a960:	6010      	str	r0, [r2, #0]
    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1;
 800a962:	0018      	movs	r0, r3
 800a964:	3094      	adds	r0, #148	; 0x94
 800a966:	0002      	movs	r2, r0
 800a968:	6958      	ldr	r0, [r3, #20]
    params.NvmCtx = NULL;
 800a96a:	950a      	str	r5, [sp, #40]	; 0x28
    MacCtx.NvmCtx->MacParams.ReceiveDelay1 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay1;
 800a96c:	6010      	str	r0, [r2, #0]
    MacCtx.NvmCtx->MacParams.ReceiveDelay2 = MacCtx.NvmCtx->MacParamsDefaults.ReceiveDelay2;
 800a96e:	0018      	movs	r0, r3
 800a970:	3098      	adds	r0, #152	; 0x98
 800a972:	0002      	movs	r2, r0
 800a974:	6998      	ldr	r0, [r3, #24]
 800a976:	6010      	str	r0, [r2, #0]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay1;
 800a978:	0018      	movs	r0, r3
 800a97a:	309c      	adds	r0, #156	; 0x9c
 800a97c:	0002      	movs	r2, r0
 800a97e:	69d8      	ldr	r0, [r3, #28]
 800a980:	6010      	str	r0, [r2, #0]
    MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParamsDefaults.JoinAcceptDelay2;
 800a982:	0018      	movs	r0, r3
 800a984:	30a0      	adds	r0, #160	; 0xa0
 800a986:	0002      	movs	r2, r0
 800a988:	6a18      	ldr	r0, [r3, #32]
 800a98a:	6010      	str	r0, [r2, #0]
    MacCtx.NvmCtx->MacParams.ChannelsNbTrans = MacCtx.NvmCtx->MacParamsDefaults.ChannelsNbTrans;
 800a98c:	0018      	movs	r0, r3
 800a98e:	30a4      	adds	r0, #164	; 0xa4
 800a990:	7001      	strb	r1, [r0, #0]
    params.Type = INIT_TYPE_DEFAULTS;
 800a992:	a90a      	add	r1, sp, #40	; 0x28
 800a994:	710d      	strb	r5, [r1, #4]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 800a996:	7818      	ldrb	r0, [r3, #0]
 800a998:	f001 fd28 	bl	800c3ec <RegionInitDefaults>

    ResetMacParameters( );
 800a99c:	f7fe fbf6 	bl	800918c <ResetMacParameters>

    MacCtx.NvmCtx->PublicNetwork = true;
 800a9a0:	59a3      	ldr	r3, [r4, r6]
 800a9a2:	2101      	movs	r1, #1
 800a9a4:	001a      	movs	r2, r3
 800a9a6:	327d      	adds	r2, #125	; 0x7d
 800a9a8:	7011      	strb	r1, [r2, #0]

    MacCtx.MacPrimitives = primitives;
 800a9aa:	22d1      	movs	r2, #209	; 0xd1
    MacCtx.MacCallbacks = callbacks;
 800a9ac:	9803      	ldr	r0, [sp, #12]
    MacCtx.MacPrimitives = primitives;
 800a9ae:	0092      	lsls	r2, r2, #2
 800a9b0:	50a7      	str	r7, [r4, r2]
    MacCtx.MacCallbacks = callbacks;
 800a9b2:	3204      	adds	r2, #4
 800a9b4:	50a0      	str	r0, [r4, r2]
    MacCtx.MacFlags.Value = 0;
 800a9b6:	4a41      	ldr	r2, [pc, #260]	; (800aabc <LoRaMacInitialization+0x364>)
    MacCtx.MacState = LORAMAC_STOPPED;

    // Reset duty cycle times
    MacCtx.NvmCtx->LastTxDoneTime = 0;
 800a9b8:	33fc      	adds	r3, #252	; 0xfc
    MacCtx.MacFlags.Value = 0;
 800a9ba:	54a5      	strb	r5, [r4, r2]
    MacCtx.MacState = LORAMAC_STOPPED;
 800a9bc:	3a42      	subs	r2, #66	; 0x42
 800a9be:	3aff      	subs	r2, #255	; 0xff
 800a9c0:	50a1      	str	r1, [r4, r2]
    MacCtx.NvmCtx->AggregatedTimeOff = 0;

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800a9c2:	483f      	ldr	r0, [pc, #252]	; (800aac0 <LoRaMacInitialization+0x368>)
    MacCtx.NvmCtx->LastTxDoneTime = 0;
 800a9c4:	655d      	str	r5, [r3, #84]	; 0x54
    MacCtx.NvmCtx->AggregatedTimeOff = 0;
 800a9c6:	659d      	str	r5, [r3, #88]	; 0x58
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800a9c8:	002a      	movs	r2, r5
 800a9ca:	4b3e      	ldr	r3, [pc, #248]	; (800aac4 <LoRaMacInitialization+0x36c>)
 800a9cc:	9500      	str	r5, [sp, #0]
 800a9ce:	3902      	subs	r1, #2
 800a9d0:	f004 f85c 	bl	800ea8c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 800a9d4:	2101      	movs	r1, #1
 800a9d6:	002a      	movs	r2, r5
 800a9d8:	4b3b      	ldr	r3, [pc, #236]	; (800aac8 <LoRaMacInitialization+0x370>)
 800a9da:	9500      	str	r5, [sp, #0]
 800a9dc:	4249      	negs	r1, r1
 800a9de:	483b      	ldr	r0, [pc, #236]	; (800aacc <LoRaMacInitialization+0x374>)
 800a9e0:	f004 f854 	bl	800ea8c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 800a9e4:	2101      	movs	r1, #1
 800a9e6:	002a      	movs	r2, r5
 800a9e8:	4b39      	ldr	r3, [pc, #228]	; (800aad0 <LoRaMacInitialization+0x378>)
 800a9ea:	9500      	str	r5, [sp, #0]
 800a9ec:	4249      	negs	r1, r1
 800a9ee:	4839      	ldr	r0, [pc, #228]	; (800aad4 <LoRaMacInitialization+0x37c>)
 800a9f0:	f004 f84c 	bl	800ea8c <UTIL_TIMER_Create>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 800a9f4:	2101      	movs	r1, #1
 800a9f6:	002a      	movs	r2, r5
 800a9f8:	4b37      	ldr	r3, [pc, #220]	; (800aad8 <LoRaMacInitialization+0x380>)
 800a9fa:	4249      	negs	r1, r1
 800a9fc:	9500      	str	r5, [sp, #0]
 800a9fe:	4837      	ldr	r0, [pc, #220]	; (800aadc <LoRaMacInitialization+0x384>)
 800aa00:	f004 f844 	bl	800ea8c <UTIL_TIMER_Create>

    // Store the current initialization time
    MacCtx.NvmCtx->InitializationTime = SysTimeGetMcuTime( );
 800aa04:	59a7      	ldr	r7, [r4, r6]
 800aa06:	ad04      	add	r5, sp, #16
 800aa08:	3759      	adds	r7, #89	; 0x59
 800aa0a:	0028      	movs	r0, r5
 800aa0c:	37ff      	adds	r7, #255	; 0xff
 800aa0e:	f003 fe33 	bl	800e678 <SysTimeGetMcuTime>
 800aa12:	cd0c      	ldmia	r5!, {r2, r3}
 800aa14:	c70c      	stmia	r7!, {r2, r3}

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 800aa16:	23d3      	movs	r3, #211	; 0xd3
 800aa18:	4a31      	ldr	r2, [pc, #196]	; (800aae0 <LoRaMacInitialization+0x388>)
 800aa1a:	009b      	lsls	r3, r3, #2
 800aa1c:	50e2      	str	r2, [r4, r3]
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 800aa1e:	4a31      	ldr	r2, [pc, #196]	; (800aae4 <LoRaMacInitialization+0x38c>)
 800aa20:	3308      	adds	r3, #8
 800aa22:	50e2      	str	r2, [r4, r3]
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 800aa24:	4a30      	ldr	r2, [pc, #192]	; (800aae8 <LoRaMacInitialization+0x390>)
 800aa26:	3308      	adds	r3, #8
 800aa28:	50e2      	str	r2, [r4, r3]
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 800aa2a:	4a30      	ldr	r2, [pc, #192]	; (800aaec <LoRaMacInitialization+0x394>)
 800aa2c:	3b0c      	subs	r3, #12
 800aa2e:	50e2      	str	r2, [r4, r3]
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
    Radio.Init( &MacCtx.RadioEvents );
 800aa30:	4f2f      	ldr	r7, [pc, #188]	; (800aaf0 <LoRaMacInitialization+0x398>)
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 800aa32:	4a30      	ldr	r2, [pc, #192]	; (800aaf4 <LoRaMacInitialization+0x39c>)
 800aa34:	3308      	adds	r3, #8
 800aa36:	50e2      	str	r2, [r4, r3]
    Radio.Init( &MacCtx.RadioEvents );
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	482f      	ldr	r0, [pc, #188]	; (800aaf8 <LoRaMacInitialization+0x3a0>)
 800aa3c:	9302      	str	r3, [sp, #8]
 800aa3e:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( EventSecureElementNvmCtxChanged ) != SECURE_ELEMENT_SUCCESS )
 800aa40:	482e      	ldr	r0, [pc, #184]	; (800aafc <LoRaMacInitialization+0x3a4>)
 800aa42:	f7fd fb7f 	bl	8008144 <SecureElementInit>
 800aa46:	2800      	cmp	r0, #0
 800aa48:	d003      	beq.n	800aa52 <LoRaMacInitialization+0x2fa>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800aa4a:	2511      	movs	r5, #17
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &EventClassBNvmCtxChanged );
*/
    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );

    return LORAMAC_STATUS_OK;
}
 800aa4c:	0028      	movs	r0, r5
 800aa4e:	b00d      	add	sp, #52	; 0x34
 800aa50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( LoRaMacCryptoInit( EventCryptoNvmCtxChanged ) != LORAMAC_CRYPTO_SUCCESS )
 800aa52:	482b      	ldr	r0, [pc, #172]	; (800ab00 <LoRaMacInitialization+0x3a8>)
 800aa54:	f001 fa20 	bl	800be98 <LoRaMacCryptoInit>
 800aa58:	2800      	cmp	r0, #0
 800aa5a:	d1f6      	bne.n	800aa4a <LoRaMacInitialization+0x2f2>
    if( LoRaMacCommandsInit( EventCommandsNvmCtxChanged ) != LORAMAC_COMMANDS_SUCCESS )
 800aa5c:	4829      	ldr	r0, [pc, #164]	; (800ab04 <LoRaMacInitialization+0x3ac>)
 800aa5e:	f000 ff19 	bl	800b894 <LoRaMacCommandsInit>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800aa62:	2513      	movs	r5, #19
    if( LoRaMacCommandsInit( EventCommandsNvmCtxChanged ) != LORAMAC_COMMANDS_SUCCESS )
 800aa64:	2800      	cmp	r0, #0
 800aa66:	d1f1      	bne.n	800aa4c <LoRaMacInitialization+0x2f4>
    if( LoRaMacCryptoSetMulticastReference( MacCtx.NvmCtx->MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 800aa68:	59a0      	ldr	r0, [r4, r6]
 800aa6a:	3050      	adds	r0, #80	; 0x50
 800aa6c:	f001 fa76 	bl	800bf5c <LoRaMacCryptoSetMulticastReference>
 800aa70:	1e05      	subs	r5, r0, #0
 800aa72:	d1ea      	bne.n	800aa4a <LoRaMacInitialization+0x2f2>
    srand1( Radio.Random( ) );
 800aa74:	693b      	ldr	r3, [r7, #16]
 800aa76:	9302      	str	r3, [sp, #8]
 800aa78:	4798      	blx	r3
 800aa7a:	f002 fcdb 	bl	800d434 <srand1>
    Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 800aa7e:	59a3      	ldr	r3, [r4, r6]
 800aa80:	337d      	adds	r3, #125	; 0x7d
 800aa82:	7818      	ldrb	r0, [r3, #0]
 800aa84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa86:	9302      	str	r3, [sp, #8]
 800aa88:	4798      	blx	r3
    Radio.Sleep( );
 800aa8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa8c:	9302      	str	r3, [sp, #8]
 800aa8e:	4798      	blx	r3
    MacCtx.AllowRequests = requestState;
 800aa90:	2201      	movs	r2, #1
 800aa92:	4b1d      	ldr	r3, [pc, #116]	; (800ab08 <LoRaMacInitialization+0x3b0>)
 800aa94:	54e2      	strb	r2, [r4, r3]
    return LORAMAC_STATUS_OK;
 800aa96:	e7d9      	b.n	800aa4c <LoRaMacInitialization+0x2f4>
 800aa98:	08008f9f 	.word	0x08008f9f
 800aa9c:	200009e8 	.word	0x200009e8
 800aaa0:	2000055c 	.word	0x2000055c
 800aaa4:	0000048c 	.word	0x0000048c
 800aaa8:	00000412 	.word	0x00000412
 800aaac:	00000411 	.word	0x00000411
 800aab0:	00000484 	.word	0x00000484
 800aab4:	01000300 	.word	0x01000300
 800aab8:	000003f6 	.word	0x000003f6
 800aabc:	00000481 	.word	0x00000481
 800aac0:	200008c4 	.word	0x200008c4
 800aac4:	0800965d 	.word	0x0800965d
 800aac8:	08009861 	.word	0x08009861
 800aacc:	200008dc 	.word	0x200008dc
 800aad0:	080098c1 	.word	0x080098c1
 800aad4:	200008f4 	.word	0x200008f4
 800aad8:	08008fe5 	.word	0x08008fe5
 800aadc:	20000954 	.word	0x20000954
 800aae0:	080092c9 	.word	0x080092c9
 800aae4:	08009271 	.word	0x08009271
 800aae8:	08008ea5 	.word	0x08008ea5
 800aaec:	080090b9 	.word	0x080090b9
 800aaf0:	0800fd8c 	.word	0x0800fd8c
 800aaf4:	0800907d 	.word	0x0800907d
 800aaf8:	200008a8 	.word	0x200008a8
 800aafc:	08008f8b 	.word	0x08008f8b
 800ab00:	08008f81 	.word	0x08008f81
 800ab04:	08008f95 	.word	0x08008f95
 800ab08:	00000482 	.word	0x00000482

0800ab0c <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
    MacCtx.MacState = LORAMAC_IDLE;
 800ab0c:	23d0      	movs	r3, #208	; 0xd0
 800ab0e:	2000      	movs	r0, #0
 800ab10:	4a01      	ldr	r2, [pc, #4]	; (800ab18 <LoRaMacStart+0xc>)
 800ab12:	009b      	lsls	r3, r3, #2
 800ab14:	50d0      	str	r0, [r2, r3]
    return LORAMAC_STATUS_OK;
}
 800ab16:	4770      	bx	lr
 800ab18:	2000055c 	.word	0x2000055c

0800ab1c <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 800ab1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab1e:	b089      	sub	sp, #36	; 0x24
 800ab20:	0005      	movs	r5, r0
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
    int8_t datarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 800ab22:	4668      	mov	r0, sp
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800ab24:	4a29      	ldr	r2, [pc, #164]	; (800abcc <LoRaMacQueryTxPossible+0xb0>)
 800ab26:	4b2a      	ldr	r3, [pc, #168]	; (800abd0 <LoRaMacQueryTxPossible+0xb4>)
    int8_t txPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
    size_t macCmdsSize = 0;
 800ab28:	2700      	movs	r7, #0
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800ab2a:	58d3      	ldr	r3, [r2, r3]
{
 800ab2c:	000c      	movs	r4, r1
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800ab2e:	1d1a      	adds	r2, r3, #4
 800ab30:	6fd6      	ldr	r6, [r2, #124]	; 0x7c
 800ab32:	9601      	str	r6, [sp, #4]
    int8_t datarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 800ab34:	795a      	ldrb	r2, [r3, #5]
 800ab36:	7082      	strb	r2, [r0, #2]
    int8_t txPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 800ab38:	466a      	mov	r2, sp
 800ab3a:	7918      	ldrb	r0, [r3, #4]
 800ab3c:	3203      	adds	r2, #3
 800ab3e:	7010      	strb	r0, [r2, #0]
    size_t macCmdsSize = 0;
 800ab40:	9702      	str	r7, [sp, #8]

    if( txInfo == NULL )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800ab42:	2003      	movs	r0, #3
    if( txInfo == NULL )
 800ab44:	42b9      	cmp	r1, r7
 800ab46:	d038      	beq.n	800abba <LoRaMacQueryTxPossible+0x9e>
    }

    // Setup ADR request
    adrNext.Version = MacCtx.NvmCtx->Version;
 800ab48:	21fc      	movs	r1, #252	; 0xfc
 800ab4a:	468c      	mov	ip, r1
 800ab4c:	449c      	add	ip, r3
 800ab4e:	4661      	mov	r1, ip
 800ab50:	a803      	add	r0, sp, #12
    adrNext.UpdateChanMask = false;
 800ab52:	7107      	strb	r7, [r0, #4]
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 800ab54:	001f      	movs	r7, r3
    adrNext.Version = MacCtx.NvmCtx->Version;
 800ab56:	6e49      	ldr	r1, [r1, #100]	; 0x64
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 800ab58:	377e      	adds	r7, #126	; 0x7e
    adrNext.Version = MacCtx.NvmCtx->Version;
 800ab5a:	9103      	str	r1, [sp, #12]
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 800ab5c:	783f      	ldrb	r7, [r7, #0]
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800ab5e:	6086      	str	r6, [r0, #8]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800ab60:	26fd      	movs	r6, #253	; 0xfd
 800ab62:	491a      	ldr	r1, [pc, #104]	; (800abcc <LoRaMacQueryTxPossible+0xb0>)
 800ab64:	00b6      	lsls	r6, r6, #2
 800ab66:	5989      	ldr	r1, [r1, r6]
    adrNext.AdrEnabled = MacCtx.NvmCtx->AdrCtrlOn;
 800ab68:	7147      	strb	r7, [r0, #5]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800ab6a:	9106      	str	r1, [sp, #24]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800ab6c:	0019      	movs	r1, r3
 800ab6e:	3184      	adds	r1, #132	; 0x84
 800ab70:	8809      	ldrh	r1, [r1, #0]
 800ab72:	ba49      	rev16	r1, r1
 800ab74:	8201      	strh	r1, [r0, #16]
    adrNext.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800ab76:	0019      	movs	r1, r3
 800ab78:	31b8      	adds	r1, #184	; 0xb8
 800ab7a:	7809      	ldrb	r1, [r1, #0]
 800ab7c:	7481      	strb	r1, [r0, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 800ab7e:	4669      	mov	r1, sp
    adrNext.Region = MacCtx.NvmCtx->Region;
 800ab80:	781b      	ldrb	r3, [r3, #0]
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 800ab82:	3102      	adds	r1, #2
    adrNext.Region = MacCtx.NvmCtx->Region;
 800ab84:	74c3      	strb	r3, [r0, #19]
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 800ab86:	ab01      	add	r3, sp, #4
 800ab88:	f000 fe10 	bl	800b7ac <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800ab8c:	466b      	mov	r3, sp
 800ab8e:	2002      	movs	r0, #2
 800ab90:	5618      	ldrsb	r0, [r3, r0]
 800ab92:	f7fe fa09 	bl	8008fa8 <GetMaxAppPayloadWithoutFOptsLength>
 800ab96:	7060      	strb	r0, [r4, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800ab98:	a802      	add	r0, sp, #8
 800ab9a:	f000 ff47 	bl	800ba2c <LoRaMacCommandsGetSizeSerializedCmds>
 800ab9e:	2800      	cmp	r0, #0
 800aba0:	d111      	bne.n	800abc6 <LoRaMacQueryTxPossible+0xaa>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 800aba2:	9b02      	ldr	r3, [sp, #8]
 800aba4:	2b0f      	cmp	r3, #15
 800aba6:	d80a      	bhi.n	800abbe <LoRaMacQueryTxPossible+0xa2>
 800aba8:	7862      	ldrb	r2, [r4, #1]
 800abaa:	4293      	cmp	r3, r2
 800abac:	d807      	bhi.n	800abbe <LoRaMacQueryTxPossible+0xa2>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800abae:	1ad1      	subs	r1, r2, r3

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800abb0:	18ed      	adds	r5, r5, r3
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800abb2:	7021      	strb	r1, [r4, #0]
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800abb4:	42aa      	cmp	r2, r5
 800abb6:	d200      	bcs.n	800abba <LoRaMacQueryTxPossible+0x9e>
        {
            return LORAMAC_STATUS_OK;
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 800abb8:	3008      	adds	r0, #8
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 800abba:	b009      	add	sp, #36	; 0x24
 800abbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 800abbe:	2300      	movs	r3, #0
        return LORAMAC_STATUS_LENGTH_ERROR;
 800abc0:	2008      	movs	r0, #8
        txInfo->MaxPossibleApplicationDataSize = 0;
 800abc2:	7023      	strb	r3, [r4, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 800abc4:	e7f9      	b.n	800abba <LoRaMacQueryTxPossible+0x9e>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800abc6:	2013      	movs	r0, #19
 800abc8:	e7f7      	b.n	800abba <LoRaMacQueryTxPossible+0x9e>
 800abca:	46c0      	nop			; (mov r8, r8)
 800abcc:	2000055c 	.word	0x2000055c
 800abd0:	00000484 	.word	0x00000484

0800abd4 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 800abd4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800abd6:	0004      	movs	r4, r0
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800abd8:	2003      	movs	r0, #3
    if( mibGet == NULL )
 800abda:	2c00      	cmp	r4, #0
 800abdc:	d01f      	beq.n	800ac1e <LoRaMacMibGetRequestConfirm+0x4a>
    }

    switch( mibGet->Type )
 800abde:	7820      	ldrb	r0, [r4, #0]
 800abe0:	2828      	cmp	r0, #40	; 0x28
 800abe2:	d829      	bhi.n	800ac38 <LoRaMacMibGetRequestConfirm+0x64>
 800abe4:	f7f5 fa98 	bl	8000118 <__gnu_thumb1_case_uqi>
 800abe8:	2a251d15 	.word	0x2a251d15
 800abec:	2839332d 	.word	0x2839332d
 800abf0:	28282828 	.word	0x28282828
 800abf4:	3e282828 	.word	0x3e282828
 800abf8:	58524843 	.word	0x58524843
 800abfc:	6b6e6560 	.word	0x6b6e6560
 800ac00:	817c7671 	.word	0x817c7671
 800ac04:	95908b86 	.word	0x95908b86
 800ac08:	a9a49a9f 	.word	0xa9a49a9f
 800ac0c:	28b5ddae 	.word	0x28b5ddae
 800ac10:	e2          	.byte	0xe2
 800ac11:	00          	.byte	0x00
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = MacCtx.NvmCtx->DeviceClass;
 800ac12:	4a6b      	ldr	r2, [pc, #428]	; (800adc0 <LoRaMacMibGetRequestConfirm+0x1ec>)
 800ac14:	4b6b      	ldr	r3, [pc, #428]	; (800adc4 <LoRaMacMibGetRequestConfirm+0x1f0>)
 800ac16:	58d3      	ldr	r3, [r2, r3]
 800ac18:	337c      	adds	r3, #124	; 0x7c
 800ac1a:	781b      	ldrb	r3, [r3, #0]
 800ac1c:	7123      	strb	r3, [r4, #4]
//            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
            break;
        }
    }
    return status;
}
 800ac1e:	b004      	add	sp, #16
 800ac20:	bd70      	pop	{r4, r5, r6, pc}
            mibGet->Param.NetworkActivation = MacCtx.NvmCtx->NetworkActivation;
 800ac22:	4b68      	ldr	r3, [pc, #416]	; (800adc4 <LoRaMacMibGetRequestConfirm+0x1f0>)
 800ac24:	4a66      	ldr	r2, [pc, #408]	; (800adc0 <LoRaMacMibGetRequestConfirm+0x1ec>)
 800ac26:	58d2      	ldr	r2, [r2, r3]
 800ac28:	23b2      	movs	r3, #178	; 0xb2
 800ac2a:	005b      	lsls	r3, r3, #1
 800ac2c:	5cd3      	ldrb	r3, [r2, r3]
            mibGet->Param.AdrEnable = MacCtx.NvmCtx->AdrCtrlOn;
 800ac2e:	7123      	strb	r3, [r4, #4]
            break;
 800ac30:	e002      	b.n	800ac38 <LoRaMacMibGetRequestConfirm+0x64>
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 800ac32:	f7fd fc5b 	bl	80084ec <SecureElementGetDevEui>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 800ac36:	6060      	str	r0, [r4, #4]
    switch( mibGet->Type )
 800ac38:	2000      	movs	r0, #0
 800ac3a:	e7f0      	b.n	800ac1e <LoRaMacMibGetRequestConfirm+0x4a>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 800ac3c:	f7fd fc6c 	bl	8008518 <SecureElementGetJoinEui>
 800ac40:	e7f9      	b.n	800ac36 <LoRaMacMibGetRequestConfirm+0x62>
            mibGet->Param.AdrEnable = MacCtx.NvmCtx->AdrCtrlOn;
 800ac42:	4a5f      	ldr	r2, [pc, #380]	; (800adc0 <LoRaMacMibGetRequestConfirm+0x1ec>)
 800ac44:	4b5f      	ldr	r3, [pc, #380]	; (800adc4 <LoRaMacMibGetRequestConfirm+0x1f0>)
 800ac46:	58d3      	ldr	r3, [r2, r3]
 800ac48:	337e      	adds	r3, #126	; 0x7e
 800ac4a:	781b      	ldrb	r3, [r3, #0]
 800ac4c:	e7ef      	b.n	800ac2e <LoRaMacMibGetRequestConfirm+0x5a>
            mibGet->Param.NetID = MacCtx.NvmCtx->NetID;
 800ac4e:	4a5c      	ldr	r2, [pc, #368]	; (800adc0 <LoRaMacMibGetRequestConfirm+0x1ec>)
 800ac50:	4b5c      	ldr	r3, [pc, #368]	; (800adc4 <LoRaMacMibGetRequestConfirm+0x1f0>)
 800ac52:	58d3      	ldr	r3, [r2, r3]
 800ac54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
            mibGet->Param.DevAddr = MacCtx.NvmCtx->DevAddr;
 800ac56:	6063      	str	r3, [r4, #4]
 800ac58:	e7ee      	b.n	800ac38 <LoRaMacMibGetRequestConfirm+0x64>
 800ac5a:	4a59      	ldr	r2, [pc, #356]	; (800adc0 <LoRaMacMibGetRequestConfirm+0x1ec>)
 800ac5c:	4b59      	ldr	r3, [pc, #356]	; (800adc4 <LoRaMacMibGetRequestConfirm+0x1f0>)
 800ac5e:	58d3      	ldr	r3, [r2, r3]
 800ac60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac62:	e7f8      	b.n	800ac56 <LoRaMacMibGetRequestConfirm+0x82>
            mibGet->Param.EnablePublicNetwork = MacCtx.NvmCtx->PublicNetwork;
 800ac64:	4a56      	ldr	r2, [pc, #344]	; (800adc0 <LoRaMacMibGetRequestConfirm+0x1ec>)
 800ac66:	4b57      	ldr	r3, [pc, #348]	; (800adc4 <LoRaMacMibGetRequestConfirm+0x1f0>)
 800ac68:	58d3      	ldr	r3, [r2, r3]
 800ac6a:	337d      	adds	r3, #125	; 0x7d
 800ac6c:	e7ed      	b.n	800ac4a <LoRaMacMibGetRequestConfirm+0x76>
            mibGet->Param.EnableRepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800ac6e:	4a54      	ldr	r2, [pc, #336]	; (800adc0 <LoRaMacMibGetRequestConfirm+0x1ec>)
 800ac70:	4b54      	ldr	r3, [pc, #336]	; (800adc4 <LoRaMacMibGetRequestConfirm+0x1f0>)
 800ac72:	58d3      	ldr	r3, [r2, r3]
 800ac74:	33ca      	adds	r3, #202	; 0xca
 800ac76:	e7e8      	b.n	800ac4a <LoRaMacMibGetRequestConfirm+0x76>
            getPhy.Attribute = PHY_CHANNELS;
 800ac78:	231d      	movs	r3, #29
 800ac7a:	a902      	add	r1, sp, #8
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800ac7c:	700b      	strb	r3, [r1, #0]
            phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800ac7e:	4a50      	ldr	r2, [pc, #320]	; (800adc0 <LoRaMacMibGetRequestConfirm+0x1ec>)
 800ac80:	4b50      	ldr	r3, [pc, #320]	; (800adc4 <LoRaMacMibGetRequestConfirm+0x1f0>)
 800ac82:	58d3      	ldr	r3, [r2, r3]
 800ac84:	7818      	ldrb	r0, [r3, #0]
 800ac86:	f001 fb9e 	bl	800c3c6 <RegionGetPhyParam>
 800ac8a:	e7d4      	b.n	800ac36 <LoRaMacMibGetRequestConfirm+0x62>
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParams.Rx2Channel;
 800ac8c:	4a4c      	ldr	r2, [pc, #304]	; (800adc0 <LoRaMacMibGetRequestConfirm+0x1ec>)
 800ac8e:	4b4d      	ldr	r3, [pc, #308]	; (800adc4 <LoRaMacMibGetRequestConfirm+0x1f0>)
 800ac90:	58d3      	ldr	r3, [r2, r3]
 800ac92:	33a8      	adds	r3, #168	; 0xa8
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParams.RxCChannel;
 800ac94:	3404      	adds	r4, #4
 800ac96:	e004      	b.n	800aca2 <LoRaMacMibGetRequestConfirm+0xce>
            mibGet->Param.Rx2Channel = MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel;
 800ac98:	4a49      	ldr	r2, [pc, #292]	; (800adc0 <LoRaMacMibGetRequestConfirm+0x1ec>)
 800ac9a:	4b4a      	ldr	r3, [pc, #296]	; (800adc4 <LoRaMacMibGetRequestConfirm+0x1f0>)
 800ac9c:	3404      	adds	r4, #4
 800ac9e:	58d3      	ldr	r3, [r2, r3]
 800aca0:	3328      	adds	r3, #40	; 0x28
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 800aca2:	cb06      	ldmia	r3!, {r1, r2}
 800aca4:	c406      	stmia	r4!, {r1, r2}
            break;
 800aca6:	e7c7      	b.n	800ac38 <LoRaMacMibGetRequestConfirm+0x64>
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParams.RxCChannel;
 800aca8:	4a45      	ldr	r2, [pc, #276]	; (800adc0 <LoRaMacMibGetRequestConfirm+0x1ec>)
 800acaa:	4b46      	ldr	r3, [pc, #280]	; (800adc4 <LoRaMacMibGetRequestConfirm+0x1f0>)
 800acac:	58d3      	ldr	r3, [r2, r3]
 800acae:	33b0      	adds	r3, #176	; 0xb0
 800acb0:	e7f0      	b.n	800ac94 <LoRaMacMibGetRequestConfirm+0xc0>
            mibGet->Param.RxCChannel = MacCtx.NvmCtx->MacParamsDefaults.RxCChannel;
 800acb2:	4a43      	ldr	r2, [pc, #268]	; (800adc0 <LoRaMacMibGetRequestConfirm+0x1ec>)
 800acb4:	4b43      	ldr	r3, [pc, #268]	; (800adc4 <LoRaMacMibGetRequestConfirm+0x1f0>)
 800acb6:	3404      	adds	r4, #4
 800acb8:	58d3      	ldr	r3, [r2, r3]
 800acba:	3330      	adds	r3, #48	; 0x30
 800acbc:	e7f1      	b.n	800aca2 <LoRaMacMibGetRequestConfirm+0xce>
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800acbe:	231b      	movs	r3, #27
 800acc0:	a902      	add	r1, sp, #8
 800acc2:	e7db      	b.n	800ac7c <LoRaMacMibGetRequestConfirm+0xa8>
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800acc4:	231a      	movs	r3, #26
 800acc6:	a902      	add	r1, sp, #8
 800acc8:	e7d8      	b.n	800ac7c <LoRaMacMibGetRequestConfirm+0xa8>
            mibGet->Param.ChannelsNbTrans = MacCtx.NvmCtx->MacParams.ChannelsNbTrans;
 800acca:	4a3d      	ldr	r2, [pc, #244]	; (800adc0 <LoRaMacMibGetRequestConfirm+0x1ec>)
 800accc:	4b3d      	ldr	r3, [pc, #244]	; (800adc4 <LoRaMacMibGetRequestConfirm+0x1f0>)
 800acce:	58d3      	ldr	r3, [r2, r3]
 800acd0:	33a4      	adds	r3, #164	; 0xa4
 800acd2:	e7ba      	b.n	800ac4a <LoRaMacMibGetRequestConfirm+0x76>
            mibGet->Param.MaxRxWindow = MacCtx.NvmCtx->MacParams.MaxRxWindow;
 800acd4:	4a3a      	ldr	r2, [pc, #232]	; (800adc0 <LoRaMacMibGetRequestConfirm+0x1ec>)
 800acd6:	4b3b      	ldr	r3, [pc, #236]	; (800adc4 <LoRaMacMibGetRequestConfirm+0x1f0>)
 800acd8:	58d3      	ldr	r3, [r2, r3]
 800acda:	3390      	adds	r3, #144	; 0x90
            mibGet->Param.SystemMaxRxError = MacCtx.NvmCtx->MacParams.SystemMaxRxError;
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	e7ba      	b.n	800ac56 <LoRaMacMibGetRequestConfirm+0x82>
            mibGet->Param.ReceiveDelay1 = MacCtx.NvmCtx->MacParams.ReceiveDelay1;
 800ace0:	4a37      	ldr	r2, [pc, #220]	; (800adc0 <LoRaMacMibGetRequestConfirm+0x1ec>)
 800ace2:	4b38      	ldr	r3, [pc, #224]	; (800adc4 <LoRaMacMibGetRequestConfirm+0x1f0>)
 800ace4:	58d3      	ldr	r3, [r2, r3]
 800ace6:	3394      	adds	r3, #148	; 0x94
 800ace8:	e7f8      	b.n	800acdc <LoRaMacMibGetRequestConfirm+0x108>
            mibGet->Param.ReceiveDelay2 = MacCtx.NvmCtx->MacParams.ReceiveDelay2;
 800acea:	4a35      	ldr	r2, [pc, #212]	; (800adc0 <LoRaMacMibGetRequestConfirm+0x1ec>)
 800acec:	4b35      	ldr	r3, [pc, #212]	; (800adc4 <LoRaMacMibGetRequestConfirm+0x1f0>)
 800acee:	58d3      	ldr	r3, [r2, r3]
 800acf0:	3398      	adds	r3, #152	; 0x98
 800acf2:	e7f3      	b.n	800acdc <LoRaMacMibGetRequestConfirm+0x108>
            mibGet->Param.JoinAcceptDelay1 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay1;
 800acf4:	4a32      	ldr	r2, [pc, #200]	; (800adc0 <LoRaMacMibGetRequestConfirm+0x1ec>)
 800acf6:	4b33      	ldr	r3, [pc, #204]	; (800adc4 <LoRaMacMibGetRequestConfirm+0x1f0>)
 800acf8:	58d3      	ldr	r3, [r2, r3]
 800acfa:	339c      	adds	r3, #156	; 0x9c
 800acfc:	e7ee      	b.n	800acdc <LoRaMacMibGetRequestConfirm+0x108>
            mibGet->Param.JoinAcceptDelay2 = MacCtx.NvmCtx->MacParams.JoinAcceptDelay2;
 800acfe:	4a30      	ldr	r2, [pc, #192]	; (800adc0 <LoRaMacMibGetRequestConfirm+0x1ec>)
 800ad00:	4b30      	ldr	r3, [pc, #192]	; (800adc4 <LoRaMacMibGetRequestConfirm+0x1f0>)
 800ad02:	58d3      	ldr	r3, [r2, r3]
 800ad04:	33a0      	adds	r3, #160	; 0xa0
 800ad06:	e7e9      	b.n	800acdc <LoRaMacMibGetRequestConfirm+0x108>
            mibGet->Param.ChannelsDefaultDatarate = MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate;
 800ad08:	4a2d      	ldr	r2, [pc, #180]	; (800adc0 <LoRaMacMibGetRequestConfirm+0x1ec>)
 800ad0a:	4b2e      	ldr	r3, [pc, #184]	; (800adc4 <LoRaMacMibGetRequestConfirm+0x1f0>)
 800ad0c:	58d3      	ldr	r3, [r2, r3]
 800ad0e:	795b      	ldrb	r3, [r3, #5]
 800ad10:	e78d      	b.n	800ac2e <LoRaMacMibGetRequestConfirm+0x5a>
            mibGet->Param.ChannelsDatarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800ad12:	4a2b      	ldr	r2, [pc, #172]	; (800adc0 <LoRaMacMibGetRequestConfirm+0x1ec>)
 800ad14:	4b2b      	ldr	r3, [pc, #172]	; (800adc4 <LoRaMacMibGetRequestConfirm+0x1f0>)
 800ad16:	58d3      	ldr	r3, [r2, r3]
 800ad18:	3385      	adds	r3, #133	; 0x85
 800ad1a:	e796      	b.n	800ac4a <LoRaMacMibGetRequestConfirm+0x76>
            mibGet->Param.ChannelsDefaultTxPower = MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower;
 800ad1c:	4a28      	ldr	r2, [pc, #160]	; (800adc0 <LoRaMacMibGetRequestConfirm+0x1ec>)
 800ad1e:	4b29      	ldr	r3, [pc, #164]	; (800adc4 <LoRaMacMibGetRequestConfirm+0x1f0>)
 800ad20:	58d3      	ldr	r3, [r2, r3]
 800ad22:	791b      	ldrb	r3, [r3, #4]
 800ad24:	e783      	b.n	800ac2e <LoRaMacMibGetRequestConfirm+0x5a>
            mibGet->Param.ChannelsTxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800ad26:	4a26      	ldr	r2, [pc, #152]	; (800adc0 <LoRaMacMibGetRequestConfirm+0x1ec>)
 800ad28:	4b26      	ldr	r3, [pc, #152]	; (800adc4 <LoRaMacMibGetRequestConfirm+0x1f0>)
 800ad2a:	58d3      	ldr	r3, [r2, r3]
 800ad2c:	3384      	adds	r3, #132	; 0x84
 800ad2e:	e78c      	b.n	800ac4a <LoRaMacMibGetRequestConfirm+0x76>
            mibGet->Param.SystemMaxRxError = MacCtx.NvmCtx->MacParams.SystemMaxRxError;
 800ad30:	4a23      	ldr	r2, [pc, #140]	; (800adc0 <LoRaMacMibGetRequestConfirm+0x1ec>)
 800ad32:	4b24      	ldr	r3, [pc, #144]	; (800adc4 <LoRaMacMibGetRequestConfirm+0x1f0>)
 800ad34:	58d3      	ldr	r3, [r2, r3]
 800ad36:	3388      	adds	r3, #136	; 0x88
 800ad38:	e7d0      	b.n	800acdc <LoRaMacMibGetRequestConfirm+0x108>
            mibGet->Param.MinRxSymbols = MacCtx.NvmCtx->MacParams.MinRxSymbols;
 800ad3a:	4a21      	ldr	r2, [pc, #132]	; (800adc0 <LoRaMacMibGetRequestConfirm+0x1ec>)
 800ad3c:	4b21      	ldr	r3, [pc, #132]	; (800adc4 <LoRaMacMibGetRequestConfirm+0x1f0>)
 800ad3e:	58d3      	ldr	r3, [r2, r3]
 800ad40:	338c      	adds	r3, #140	; 0x8c
 800ad42:	e782      	b.n	800ac4a <LoRaMacMibGetRequestConfirm+0x76>
            mibGet->Param.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 800ad44:	4a1e      	ldr	r2, [pc, #120]	; (800adc0 <LoRaMacMibGetRequestConfirm+0x1ec>)
 800ad46:	4b1f      	ldr	r3, [pc, #124]	; (800adc4 <LoRaMacMibGetRequestConfirm+0x1f0>)
 800ad48:	58d3      	ldr	r3, [r2, r3]
 800ad4a:	33c0      	adds	r3, #192	; 0xc0
 800ad4c:	681b      	ldr	r3, [r3, #0]
            mibGet->Param.DefaultAntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 800ad4e:	6063      	str	r3, [r4, #4]
 800ad50:	e772      	b.n	800ac38 <LoRaMacMibGetRequestConfirm+0x64>
    Contexts.MacNvmCtx = &NvmMacCtx;
 800ad52:	4e1d      	ldr	r6, [pc, #116]	; (800adc8 <LoRaMacMibGetRequestConfirm+0x1f4>)
 800ad54:	4b1d      	ldr	r3, [pc, #116]	; (800adcc <LoRaMacMibGetRequestConfirm+0x1f8>)
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 800ad56:	0030      	movs	r0, r6
    Contexts.MacNvmCtx = &NvmMacCtx;
 800ad58:	6033      	str	r3, [r6, #0]
    Contexts.MacNvmCtxSize = sizeof( NvmMacCtx );
 800ad5a:	23b6      	movs	r3, #182	; 0xb6
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 800ad5c:	3014      	adds	r0, #20
    Contexts.MacNvmCtxSize = sizeof( NvmMacCtx );
 800ad5e:	005b      	lsls	r3, r3, #1
 800ad60:	6073      	str	r3, [r6, #4]
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 800ad62:	f001 f8d5 	bl	800bf10 <LoRaMacCryptoGetNvmCtx>
    GetNvmCtxParams_t params ={ 0 };
 800ad66:	2500      	movs	r5, #0
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 800ad68:	4a15      	ldr	r2, [pc, #84]	; (800adc0 <LoRaMacMibGetRequestConfirm+0x1ec>)
 800ad6a:	4b16      	ldr	r3, [pc, #88]	; (800adc4 <LoRaMacMibGetRequestConfirm+0x1f0>)
 800ad6c:	a902      	add	r1, sp, #8
 800ad6e:	58d3      	ldr	r3, [r2, r3]
    Contexts.CryptoNvmCtx = LoRaMacCryptoGetNvmCtx( &Contexts.CryptoNvmCtxSize );
 800ad70:	6130      	str	r0, [r6, #16]
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 800ad72:	7818      	ldrb	r0, [r3, #0]
    GetNvmCtxParams_t params ={ 0 };
 800ad74:	9502      	str	r5, [sp, #8]
    Contexts.RegionNvmCtx = RegionGetNvmCtx( MacCtx.NvmCtx->Region, &params );
 800ad76:	f001 fb40 	bl	800c3fa <RegionGetNvmCtx>
 800ad7a:	60b0      	str	r0, [r6, #8]
    Contexts.SecureElementNvmCtx = SecureElementGetNvmCtx( &Contexts.SecureElementNvmCtxSize );
 800ad7c:	0030      	movs	r0, r6
    Contexts.RegionNvmCtxSize = params.nvmCtxSize;
 800ad7e:	9b02      	ldr	r3, [sp, #8]
    Contexts.SecureElementNvmCtx = SecureElementGetNvmCtx( &Contexts.SecureElementNvmCtxSize );
 800ad80:	301c      	adds	r0, #28
    Contexts.RegionNvmCtxSize = params.nvmCtxSize;
 800ad82:	60f3      	str	r3, [r6, #12]
    Contexts.SecureElementNvmCtx = SecureElementGetNvmCtx( &Contexts.SecureElementNvmCtxSize );
 800ad84:	f7fd fad6 	bl	8008334 <SecureElementGetNvmCtx>
 800ad88:	61b0      	str	r0, [r6, #24]
    Contexts.CommandsNvmCtx = LoRaMacCommandsGetNvmCtx( &Contexts.CommandsNvmCtxSize );
 800ad8a:	0030      	movs	r0, r6
 800ad8c:	3024      	adds	r0, #36	; 0x24
 800ad8e:	f000 fda1 	bl	800b8d4 <LoRaMacCommandsGetNvmCtx>
 800ad92:	6230      	str	r0, [r6, #32]
    Contexts.ConfirmQueueNvmCtx = LoRaMacConfirmQueueGetNvmCtx( &Contexts.ConfirmQueueNvmCtxSize );
 800ad94:	0030      	movs	r0, r6
 800ad96:	3034      	adds	r0, #52	; 0x34
 800ad98:	f000 feea 	bl	800bb70 <LoRaMacConfirmQueueGetNvmCtx>
 800ad9c:	6330      	str	r0, [r6, #48]	; 0x30
            mibGet->Param.Contexts = GetCtxs( );
 800ad9e:	6066      	str	r6, [r4, #4]
            break;
 800ada0:	e74a      	b.n	800ac38 <LoRaMacMibGetRequestConfirm+0x64>
            mibGet->Param.DefaultAntennaGain = MacCtx.NvmCtx->MacParamsDefaults.AntennaGain;
 800ada2:	4a07      	ldr	r2, [pc, #28]	; (800adc0 <LoRaMacMibGetRequestConfirm+0x1ec>)
 800ada4:	4b07      	ldr	r3, [pc, #28]	; (800adc4 <LoRaMacMibGetRequestConfirm+0x1f0>)
 800ada6:	58d3      	ldr	r3, [r2, r3]
 800ada8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adaa:	e7d0      	b.n	800ad4e <LoRaMacMibGetRequestConfirm+0x17a>
            mibGet->Param.LrWanVersion.LoRaWan = MacCtx.NvmCtx->Version;
 800adac:	4a04      	ldr	r2, [pc, #16]	; (800adc0 <LoRaMacMibGetRequestConfirm+0x1ec>)
 800adae:	4b05      	ldr	r3, [pc, #20]	; (800adc4 <LoRaMacMibGetRequestConfirm+0x1f0>)
 800adb0:	58d3      	ldr	r3, [r2, r3]
 800adb2:	33fc      	adds	r3, #252	; 0xfc
 800adb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800adb6:	6063      	str	r3, [r4, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 800adb8:	f001 fbca 	bl	800c550 <RegionGetVersion>
 800adbc:	60a0      	str	r0, [r4, #8]
            break;
 800adbe:	e73b      	b.n	800ac38 <LoRaMacMibGetRequestConfirm+0x64>
 800adc0:	2000055c 	.word	0x2000055c
 800adc4:	00000484 	.word	0x00000484
 800adc8:	20000520 	.word	0x20000520
 800adcc:	200009e8 	.word	0x200009e8

0800add0 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 800add0:	b570      	push	{r4, r5, r6, lr}
 800add2:	0004      	movs	r4, r0
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800add4:	2603      	movs	r6, #3
{
 800add6:	b086      	sub	sp, #24
    if( mibSet == NULL )
 800add8:	2800      	cmp	r0, #0
 800adda:	d068      	beq.n	800aeae <LoRaMacMibSetRequestConfirm+0xde>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800addc:	23d0      	movs	r3, #208	; 0xd0
 800adde:	4db7      	ldr	r5, [pc, #732]	; (800b0bc <LoRaMacMibSetRequestConfirm+0x2ec>)
 800ade0:	009b      	lsls	r3, r3, #2
 800ade2:	58eb      	ldr	r3, [r5, r3]
    {
        return LORAMAC_STATUS_BUSY;
 800ade4:	3e02      	subs	r6, #2
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800ade6:	079a      	lsls	r2, r3, #30
 800ade8:	d461      	bmi.n	800aeae <LoRaMacMibSetRequestConfirm+0xde>
    }

    switch( mibSet->Type )
 800adea:	7800      	ldrb	r0, [r0, #0]
 800adec:	2827      	cmp	r0, #39	; 0x27
 800adee:	d838      	bhi.n	800ae62 <LoRaMacMibSetRequestConfirm+0x92>
 800adf0:	f7f5 f9a6 	bl	8000140 <__gnu_thumb1_case_uhi>
 800adf4:	00310028 	.word	0x00310028
 800adf8:	00400039 	.word	0x00400039
 800adfc:	004a0044 	.word	0x004a0044
 800ae00:	0054004f 	.word	0x0054004f
 800ae04:	00650060 	.word	0x00650060
 800ae08:	006f006a 	.word	0x006f006a
 800ae0c:	00790074 	.word	0x00790074
 800ae10:	0083007e 	.word	0x0083007e
 800ae14:	00370090 	.word	0x00370090
 800ae18:	00b60094 	.word	0x00b60094
 800ae1c:	00f500cb 	.word	0x00f500cb
 800ae20:	010a0118 	.word	0x010a0118
 800ae24:	0126011d 	.word	0x0126011d
 800ae28:	0130012c 	.word	0x0130012c
 800ae2c:	01380134 	.word	0x01380134
 800ae30:	014e013c 	.word	0x014e013c
 800ae34:	016a017c 	.word	0x016a017c
 800ae38:	0194018e 	.word	0x0194018e
 800ae3c:	01a0019a 	.word	0x01a0019a
 800ae40:	01f201a5 	.word	0x01f201a5
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 800ae44:	7920      	ldrb	r0, [r4, #4]
 800ae46:	f7fe fc75 	bl	8009734 <SwitchClass>
 800ae4a:	0006      	movs	r6, r0
        {
//            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
            break;
        }
    }
    EventRegionNvmCtxChanged( );
 800ae4c:	f7fe f893 	bl	8008f76 <EventRegionNvmCtxChanged>
    EventMacNvmCtxChanged( );
 800ae50:	f7fe f88c 	bl	8008f6c <EventMacNvmCtxChanged>
    return status;
 800ae54:	e02b      	b.n	800aeae <LoRaMacMibSetRequestConfirm+0xde>
                MacCtx.NvmCtx->NetworkActivation = mibSet->Param.NetworkActivation;
 800ae56:	4b9a      	ldr	r3, [pc, #616]	; (800b0c0 <LoRaMacMibSetRequestConfirm+0x2f0>)
 800ae58:	7921      	ldrb	r1, [r4, #4]
 800ae5a:	58ea      	ldr	r2, [r5, r3]
 800ae5c:	23b2      	movs	r3, #178	; 0xb2
 800ae5e:	005b      	lsls	r3, r3, #1
 800ae60:	54d1      	strb	r1, [r2, r3]
    switch( mibSet->Type )
 800ae62:	2600      	movs	r6, #0
 800ae64:	e7f2      	b.n	800ae4c <LoRaMacMibSetRequestConfirm+0x7c>
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 800ae66:	6860      	ldr	r0, [r4, #4]
 800ae68:	f7fd fb2e 	bl	80084c8 <SecureElementSetDevEui>
 800ae6c:	2800      	cmp	r0, #0
 800ae6e:	d0f8      	beq.n	800ae62 <LoRaMacMibSetRequestConfirm+0x92>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800ae70:	2603      	movs	r6, #3
 800ae72:	e7eb      	b.n	800ae4c <LoRaMacMibSetRequestConfirm+0x7c>
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 800ae74:	6860      	ldr	r0, [r4, #4]
 800ae76:	f7fd fb3d 	bl	80084f4 <SecureElementSetJoinEui>
 800ae7a:	e7f7      	b.n	800ae6c <LoRaMacMibSetRequestConfirm+0x9c>
            MacCtx.NvmCtx->AdrCtrlOn = mibSet->Param.AdrEnable;
 800ae7c:	4b90      	ldr	r3, [pc, #576]	; (800b0c0 <LoRaMacMibSetRequestConfirm+0x2f0>)
 800ae7e:	58eb      	ldr	r3, [r5, r3]
 800ae80:	337e      	adds	r3, #126	; 0x7e
            MacCtx.NvmCtx->RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800ae82:	7922      	ldrb	r2, [r4, #4]
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 800ae84:	701a      	strb	r2, [r3, #0]
 800ae86:	e7ec      	b.n	800ae62 <LoRaMacMibSetRequestConfirm+0x92>
            MacCtx.NvmCtx->NetID = mibSet->Param.NetID;
 800ae88:	4b8d      	ldr	r3, [pc, #564]	; (800b0c0 <LoRaMacMibSetRequestConfirm+0x2f0>)
 800ae8a:	6862      	ldr	r2, [r4, #4]
 800ae8c:	58eb      	ldr	r3, [r5, r3]
 800ae8e:	649a      	str	r2, [r3, #72]	; 0x48
 800ae90:	e7e7      	b.n	800ae62 <LoRaMacMibSetRequestConfirm+0x92>
            MacCtx.NvmCtx->DevAddr = mibSet->Param.DevAddr;
 800ae92:	4b8b      	ldr	r3, [pc, #556]	; (800b0c0 <LoRaMacMibSetRequestConfirm+0x2f0>)
 800ae94:	6862      	ldr	r2, [r4, #4]
 800ae96:	58eb      	ldr	r3, [r5, r3]
 800ae98:	64da      	str	r2, [r3, #76]	; 0x4c
 800ae9a:	e7e2      	b.n	800ae62 <LoRaMacMibSetRequestConfirm+0x92>
            if( mibSet->Param.AppKey != NULL )
 800ae9c:	6861      	ldr	r1, [r4, #4]
 800ae9e:	2900      	cmp	r1, #0
 800aea0:	d0e6      	beq.n	800ae70 <LoRaMacMibSetRequestConfirm+0xa0>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 800aea2:	2000      	movs	r0, #0
 800aea4:	f001 f978 	bl	800c198 <LoRaMacCryptoSetKey>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800aea8:	2611      	movs	r6, #17
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 800aeaa:	2800      	cmp	r0, #0
 800aeac:	d0d9      	beq.n	800ae62 <LoRaMacMibSetRequestConfirm+0x92>
}
 800aeae:	0030      	movs	r0, r6
 800aeb0:	b006      	add	sp, #24
 800aeb2:	bd70      	pop	{r4, r5, r6, pc}
            if( mibSet->Param.NwkKey != NULL )
 800aeb4:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 800aeb6:	2001      	movs	r0, #1
            if( mibSet->Param.NwkKey != NULL )
 800aeb8:	2900      	cmp	r1, #0
 800aeba:	d1f3      	bne.n	800aea4 <LoRaMacMibSetRequestConfirm+0xd4>
 800aebc:	e7d8      	b.n	800ae70 <LoRaMacMibSetRequestConfirm+0xa0>
            if( mibSet->Param.NwkSKey != NULL )
 800aebe:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 800aec0:	2002      	movs	r0, #2
            if( mibSet->Param.NwkSKey != NULL )
 800aec2:	2900      	cmp	r1, #0
 800aec4:	d1ee      	bne.n	800aea4 <LoRaMacMibSetRequestConfirm+0xd4>
 800aec6:	e7d3      	b.n	800ae70 <LoRaMacMibSetRequestConfirm+0xa0>
            if( mibSet->Param.AppSKey != NULL )
 800aec8:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 800aeca:	2003      	movs	r0, #3
            if( mibSet->Param.AppSKey != NULL )
 800aecc:	2900      	cmp	r1, #0
 800aece:	d1e9      	bne.n	800aea4 <LoRaMacMibSetRequestConfirm+0xd4>
 800aed0:	e7ce      	b.n	800ae70 <LoRaMacMibSetRequestConfirm+0xa0>
            if( mibSet->Param.McKEKey != NULL )
 800aed2:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 800aed4:	207f      	movs	r0, #127	; 0x7f
            if( mibSet->Param.McKEKey != NULL )
 800aed6:	2900      	cmp	r1, #0
 800aed8:	d1e4      	bne.n	800aea4 <LoRaMacMibSetRequestConfirm+0xd4>
 800aeda:	e7c9      	b.n	800ae70 <LoRaMacMibSetRequestConfirm+0xa0>
            if( mibSet->Param.McKey0 != NULL )
 800aedc:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 800aede:	2080      	movs	r0, #128	; 0x80
            if( mibSet->Param.McKey0 != NULL )
 800aee0:	2900      	cmp	r1, #0
 800aee2:	d1df      	bne.n	800aea4 <LoRaMacMibSetRequestConfirm+0xd4>
 800aee4:	e7c4      	b.n	800ae70 <LoRaMacMibSetRequestConfirm+0xa0>
            if( mibSet->Param.McAppSKey0 != NULL )
 800aee6:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 800aee8:	2081      	movs	r0, #129	; 0x81
            if( mibSet->Param.McAppSKey0 != NULL )
 800aeea:	2900      	cmp	r1, #0
 800aeec:	d1da      	bne.n	800aea4 <LoRaMacMibSetRequestConfirm+0xd4>
 800aeee:	e7bf      	b.n	800ae70 <LoRaMacMibSetRequestConfirm+0xa0>
            if( mibSet->Param.McNwkSKey0 != NULL )
 800aef0:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 800aef2:	2082      	movs	r0, #130	; 0x82
            if( mibSet->Param.McNwkSKey0 != NULL )
 800aef4:	2900      	cmp	r1, #0
 800aef6:	d1d5      	bne.n	800aea4 <LoRaMacMibSetRequestConfirm+0xd4>
 800aef8:	e7ba      	b.n	800ae70 <LoRaMacMibSetRequestConfirm+0xa0>
            MacCtx.NvmCtx->PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800aefa:	4b71      	ldr	r3, [pc, #452]	; (800b0c0 <LoRaMacMibSetRequestConfirm+0x2f0>)
 800aefc:	7920      	ldrb	r0, [r4, #4]
 800aefe:	58eb      	ldr	r3, [r5, r3]
            Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 800af00:	4c70      	ldr	r4, [pc, #448]	; (800b0c4 <LoRaMacMibSetRequestConfirm+0x2f4>)
            MacCtx.NvmCtx->PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800af02:	337d      	adds	r3, #125	; 0x7d
 800af04:	7018      	strb	r0, [r3, #0]
            Radio.SetPublicNetwork( MacCtx.NvmCtx->PublicNetwork );
 800af06:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800af08:	9301      	str	r3, [sp, #4]
 800af0a:	4798      	blx	r3
            Radio.Sleep( );
 800af0c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800af0e:	9301      	str	r3, [sp, #4]
 800af10:	4798      	blx	r3
            break;
 800af12:	e7a6      	b.n	800ae62 <LoRaMacMibSetRequestConfirm+0x92>
            MacCtx.NvmCtx->RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800af14:	4b6a      	ldr	r3, [pc, #424]	; (800b0c0 <LoRaMacMibSetRequestConfirm+0x2f0>)
 800af16:	58eb      	ldr	r3, [r5, r3]
 800af18:	33ca      	adds	r3, #202	; 0xca
 800af1a:	e7b2      	b.n	800ae82 <LoRaMacMibSetRequestConfirm+0xb2>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800af1c:	7a23      	ldrb	r3, [r4, #8]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800af1e:	4e68      	ldr	r6, [pc, #416]	; (800b0c0 <LoRaMacMibSetRequestConfirm+0x2f0>)
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800af20:	aa02      	add	r2, sp, #8
 800af22:	7113      	strb	r3, [r2, #4]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800af24:	59ab      	ldr	r3, [r5, r6]
 800af26:	a902      	add	r1, sp, #8
 800af28:	001a      	movs	r2, r3
 800af2a:	32b9      	adds	r2, #185	; 0xb9
 800af2c:	7812      	ldrb	r2, [r2, #0]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) != true )
 800af2e:	7818      	ldrb	r0, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800af30:	714a      	strb	r2, [r1, #5]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) != true )
 800af32:	2207      	movs	r2, #7
 800af34:	a903      	add	r1, sp, #12
 800af36:	f001 fa6a 	bl	800c40e <RegionVerify>
 800af3a:	2800      	cmp	r0, #0
 800af3c:	d098      	beq.n	800ae70 <LoRaMacMibSetRequestConfirm+0xa0>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 800af3e:	6863      	ldr	r3, [r4, #4]
                if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_FREQUENCY ) != true )
 800af40:	2200      	movs	r2, #0
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 800af42:	9303      	str	r3, [sp, #12]
                if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_FREQUENCY ) != true )
 800af44:	59ab      	ldr	r3, [r5, r6]
 800af46:	a903      	add	r1, sp, #12
 800af48:	7818      	ldrb	r0, [r3, #0]
 800af4a:	f001 fa60 	bl	800c40e <RegionVerify>
 800af4e:	2800      	cmp	r0, #0
 800af50:	d100      	bne.n	800af54 <LoRaMacMibSetRequestConfirm+0x184>
 800af52:	e78d      	b.n	800ae70 <LoRaMacMibSetRequestConfirm+0xa0>
                    MacCtx.NvmCtx->MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800af54:	59ab      	ldr	r3, [r5, r6]
 800af56:	33a8      	adds	r3, #168	; 0xa8
                MacCtx.NvmCtx->MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 800af58:	3404      	adds	r4, #4
 800af5a:	cc06      	ldmia	r4!, {r1, r2}
 800af5c:	c306      	stmia	r3!, {r1, r2}
 800af5e:	e780      	b.n	800ae62 <LoRaMacMibSetRequestConfirm+0x92>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800af60:	7a23      	ldrb	r3, [r4, #8]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800af62:	4e57      	ldr	r6, [pc, #348]	; (800b0c0 <LoRaMacMibSetRequestConfirm+0x2f0>)
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800af64:	aa02      	add	r2, sp, #8
 800af66:	7113      	strb	r3, [r2, #4]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800af68:	59ab      	ldr	r3, [r5, r6]
 800af6a:	a902      	add	r1, sp, #8
 800af6c:	001a      	movs	r2, r3
 800af6e:	32b9      	adds	r2, #185	; 0xb9
 800af70:	7812      	ldrb	r2, [r2, #0]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 800af72:	7818      	ldrb	r0, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800af74:	714a      	strb	r2, [r1, #5]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 800af76:	2207      	movs	r2, #7
 800af78:	a903      	add	r1, sp, #12
 800af7a:	f001 fa48 	bl	800c40e <RegionVerify>
 800af7e:	2800      	cmp	r0, #0
 800af80:	d100      	bne.n	800af84 <LoRaMacMibSetRequestConfirm+0x1b4>
 800af82:	e775      	b.n	800ae70 <LoRaMacMibSetRequestConfirm+0xa0>
                MacCtx.NvmCtx->MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 800af84:	59ab      	ldr	r3, [r5, r6]
 800af86:	3328      	adds	r3, #40	; 0x28
 800af88:	e7e6      	b.n	800af58 <LoRaMacMibSetRequestConfirm+0x188>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800af8a:	7a23      	ldrb	r3, [r4, #8]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800af8c:	4e4c      	ldr	r6, [pc, #304]	; (800b0c0 <LoRaMacMibSetRequestConfirm+0x2f0>)
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800af8e:	aa02      	add	r2, sp, #8
 800af90:	7113      	strb	r3, [r2, #4]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800af92:	59ab      	ldr	r3, [r5, r6]
 800af94:	a902      	add	r1, sp, #8
 800af96:	001a      	movs	r2, r3
 800af98:	32b9      	adds	r2, #185	; 0xb9
 800af9a:	7812      	ldrb	r2, [r2, #0]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 800af9c:	7818      	ldrb	r0, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800af9e:	714a      	strb	r2, [r1, #5]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 800afa0:	2207      	movs	r2, #7
 800afa2:	a903      	add	r1, sp, #12
 800afa4:	f001 fa33 	bl	800c40e <RegionVerify>
 800afa8:	2800      	cmp	r0, #0
 800afaa:	d100      	bne.n	800afae <LoRaMacMibSetRequestConfirm+0x1de>
 800afac:	e760      	b.n	800ae70 <LoRaMacMibSetRequestConfirm+0xa0>
                MacCtx.NvmCtx->MacParams.RxCChannel = mibSet->Param.RxCChannel;
 800afae:	59ab      	ldr	r3, [r5, r6]
 800afb0:	3404      	adds	r4, #4
 800afb2:	001a      	movs	r2, r3
 800afb4:	32b0      	adds	r2, #176	; 0xb0
 800afb6:	cc03      	ldmia	r4!, {r0, r1}
 800afb8:	c203      	stmia	r2!, {r0, r1}
                if( ( MacCtx.NvmCtx->DeviceClass == CLASS_C ) && ( MacCtx.NvmCtx->NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800afba:	3a3c      	subs	r2, #60	; 0x3c
 800afbc:	7812      	ldrb	r2, [r2, #0]
 800afbe:	2a02      	cmp	r2, #2
 800afc0:	d000      	beq.n	800afc4 <LoRaMacMibSetRequestConfirm+0x1f4>
 800afc2:	e74e      	b.n	800ae62 <LoRaMacMibSetRequestConfirm+0x92>
 800afc4:	3263      	adds	r2, #99	; 0x63
 800afc6:	32ff      	adds	r2, #255	; 0xff
 800afc8:	5c9b      	ldrb	r3, [r3, r2]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d100      	bne.n	800afd0 <LoRaMacMibSetRequestConfirm+0x200>
 800afce:	e748      	b.n	800ae62 <LoRaMacMibSetRequestConfirm+0x92>
                    Radio.Sleep( );
 800afd0:	4b3c      	ldr	r3, [pc, #240]	; (800b0c4 <LoRaMacMibSetRequestConfirm+0x2f4>)
 800afd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afd4:	9301      	str	r3, [sp, #4]
 800afd6:	4798      	blx	r3
                    OpenContinuousRxCWindow( );
 800afd8:	f7fe fb72 	bl	80096c0 <OpenContinuousRxCWindow>
 800afdc:	e741      	b.n	800ae62 <LoRaMacMibSetRequestConfirm+0x92>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800afde:	7a23      	ldrb	r3, [r4, #8]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800afe0:	4e37      	ldr	r6, [pc, #220]	; (800b0c0 <LoRaMacMibSetRequestConfirm+0x2f0>)
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800afe2:	aa02      	add	r2, sp, #8
 800afe4:	7113      	strb	r3, [r2, #4]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800afe6:	59ab      	ldr	r3, [r5, r6]
 800afe8:	a902      	add	r1, sp, #8
 800afea:	001a      	movs	r2, r3
 800afec:	32b9      	adds	r2, #185	; 0xb9
 800afee:	7812      	ldrb	r2, [r2, #0]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 800aff0:	7818      	ldrb	r0, [r3, #0]
            verify.DatarateParams.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800aff2:	714a      	strb	r2, [r1, #5]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_RX_DR ) == true )
 800aff4:	2207      	movs	r2, #7
 800aff6:	a903      	add	r1, sp, #12
 800aff8:	f001 fa09 	bl	800c40e <RegionVerify>
 800affc:	2800      	cmp	r0, #0
 800affe:	d100      	bne.n	800b002 <LoRaMacMibSetRequestConfirm+0x232>
 800b000:	e736      	b.n	800ae70 <LoRaMacMibSetRequestConfirm+0xa0>
                MacCtx.NvmCtx->MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 800b002:	59ab      	ldr	r3, [r5, r6]
 800b004:	3330      	adds	r3, #48	; 0x30
 800b006:	e7a7      	b.n	800af58 <LoRaMacMibSetRequestConfirm+0x188>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 800b008:	6863      	ldr	r3, [r4, #4]
 800b00a:	a904      	add	r1, sp, #16
 800b00c:	9304      	str	r3, [sp, #16]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 800b00e:	2301      	movs	r3, #1
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800b010:	710b      	strb	r3, [r1, #4]
            if( RegionChanMaskSet( MacCtx.NvmCtx->Region, &chanMaskSet ) == false )
 800b012:	4b2b      	ldr	r3, [pc, #172]	; (800b0c0 <LoRaMacMibSetRequestConfirm+0x2f0>)
 800b014:	58eb      	ldr	r3, [r5, r3]
 800b016:	7818      	ldrb	r0, [r3, #0]
 800b018:	f001 fa05 	bl	800c426 <RegionChanMaskSet>
 800b01c:	2800      	cmp	r0, #0
 800b01e:	d000      	beq.n	800b022 <LoRaMacMibSetRequestConfirm+0x252>
 800b020:	e71f      	b.n	800ae62 <LoRaMacMibSetRequestConfirm+0x92>
 800b022:	e725      	b.n	800ae70 <LoRaMacMibSetRequestConfirm+0xa0>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800b024:	6863      	ldr	r3, [r4, #4]
 800b026:	a904      	add	r1, sp, #16
 800b028:	9304      	str	r3, [sp, #16]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800b02a:	2300      	movs	r3, #0
 800b02c:	e7f0      	b.n	800b010 <LoRaMacMibSetRequestConfirm+0x240>
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800b02e:	7922      	ldrb	r2, [r4, #4]
 800b030:	1e53      	subs	r3, r2, #1
 800b032:	2b0e      	cmp	r3, #14
 800b034:	d900      	bls.n	800b038 <LoRaMacMibSetRequestConfirm+0x268>
 800b036:	e71b      	b.n	800ae70 <LoRaMacMibSetRequestConfirm+0xa0>
                MacCtx.NvmCtx->MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 800b038:	4b21      	ldr	r3, [pc, #132]	; (800b0c0 <LoRaMacMibSetRequestConfirm+0x2f0>)
 800b03a:	58eb      	ldr	r3, [r5, r3]
 800b03c:	33a4      	adds	r3, #164	; 0xa4
 800b03e:	e721      	b.n	800ae84 <LoRaMacMibSetRequestConfirm+0xb4>
            MacCtx.NvmCtx->MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800b040:	4b1f      	ldr	r3, [pc, #124]	; (800b0c0 <LoRaMacMibSetRequestConfirm+0x2f0>)
 800b042:	58eb      	ldr	r3, [r5, r3]
 800b044:	3390      	adds	r3, #144	; 0x90
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800b046:	6862      	ldr	r2, [r4, #4]
            MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800b048:	601a      	str	r2, [r3, #0]
            break;
 800b04a:	e70a      	b.n	800ae62 <LoRaMacMibSetRequestConfirm+0x92>
            MacCtx.NvmCtx->MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 800b04c:	4b1c      	ldr	r3, [pc, #112]	; (800b0c0 <LoRaMacMibSetRequestConfirm+0x2f0>)
 800b04e:	58eb      	ldr	r3, [r5, r3]
 800b050:	3394      	adds	r3, #148	; 0x94
 800b052:	e7f8      	b.n	800b046 <LoRaMacMibSetRequestConfirm+0x276>
            MacCtx.NvmCtx->MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 800b054:	4b1a      	ldr	r3, [pc, #104]	; (800b0c0 <LoRaMacMibSetRequestConfirm+0x2f0>)
 800b056:	58eb      	ldr	r3, [r5, r3]
 800b058:	3398      	adds	r3, #152	; 0x98
 800b05a:	e7f4      	b.n	800b046 <LoRaMacMibSetRequestConfirm+0x276>
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800b05c:	4b18      	ldr	r3, [pc, #96]	; (800b0c0 <LoRaMacMibSetRequestConfirm+0x2f0>)
 800b05e:	58eb      	ldr	r3, [r5, r3]
 800b060:	339c      	adds	r3, #156	; 0x9c
 800b062:	e7f0      	b.n	800b046 <LoRaMacMibSetRequestConfirm+0x276>
            MacCtx.NvmCtx->MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800b064:	4b16      	ldr	r3, [pc, #88]	; (800b0c0 <LoRaMacMibSetRequestConfirm+0x2f0>)
 800b066:	58eb      	ldr	r3, [r5, r3]
 800b068:	33a0      	adds	r3, #160	; 0xa0
 800b06a:	e7ec      	b.n	800b046 <LoRaMacMibSetRequestConfirm+0x276>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800b06c:	7923      	ldrb	r3, [r4, #4]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_DR ) == true )
 800b06e:	4c14      	ldr	r4, [pc, #80]	; (800b0c0 <LoRaMacMibSetRequestConfirm+0x2f0>)
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800b070:	aa02      	add	r2, sp, #8
 800b072:	7113      	strb	r3, [r2, #4]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_DR ) == true )
 800b074:	592b      	ldr	r3, [r5, r4]
 800b076:	2206      	movs	r2, #6
 800b078:	7818      	ldrb	r0, [r3, #0]
 800b07a:	a903      	add	r1, sp, #12
 800b07c:	f001 f9c7 	bl	800c40e <RegionVerify>
 800b080:	2800      	cmp	r0, #0
 800b082:	d100      	bne.n	800b086 <LoRaMacMibSetRequestConfirm+0x2b6>
 800b084:	e6f4      	b.n	800ae70 <LoRaMacMibSetRequestConfirm+0xa0>
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsDatarate = verify.DatarateParams.Datarate;
 800b086:	aa02      	add	r2, sp, #8
 800b088:	592b      	ldr	r3, [r5, r4]
 800b08a:	7912      	ldrb	r2, [r2, #4]
 800b08c:	715a      	strb	r2, [r3, #5]
 800b08e:	e6e8      	b.n	800ae62 <LoRaMacMibSetRequestConfirm+0x92>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800b090:	7923      	ldrb	r3, [r4, #4]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800b092:	4c0b      	ldr	r4, [pc, #44]	; (800b0c0 <LoRaMacMibSetRequestConfirm+0x2f0>)
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800b094:	ae03      	add	r6, sp, #12
 800b096:	7033      	strb	r3, [r6, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800b098:	592b      	ldr	r3, [r5, r4]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 800b09a:	0031      	movs	r1, r6
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800b09c:	001a      	movs	r2, r3
 800b09e:	32b8      	adds	r2, #184	; 0xb8
 800b0a0:	7812      	ldrb	r2, [r2, #0]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 800b0a2:	7818      	ldrb	r0, [r3, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800b0a4:	70b2      	strb	r2, [r6, #2]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 800b0a6:	2205      	movs	r2, #5
 800b0a8:	f001 f9b1 	bl	800c40e <RegionVerify>
 800b0ac:	2800      	cmp	r0, #0
 800b0ae:	d100      	bne.n	800b0b2 <LoRaMacMibSetRequestConfirm+0x2e2>
 800b0b0:	e6de      	b.n	800ae70 <LoRaMacMibSetRequestConfirm+0xa0>
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 800b0b2:	592b      	ldr	r3, [r5, r4]
 800b0b4:	7832      	ldrb	r2, [r6, #0]
 800b0b6:	3385      	adds	r3, #133	; 0x85
 800b0b8:	e6e4      	b.n	800ae84 <LoRaMacMibSetRequestConfirm+0xb4>
 800b0ba:	46c0      	nop			; (mov r8, r8)
 800b0bc:	2000055c 	.word	0x2000055c
 800b0c0:	00000484 	.word	0x00000484
 800b0c4:	0800fd8c 	.word	0x0800fd8c
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800b0c8:	7923      	ldrb	r3, [r4, #4]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_POWER ) == true )
 800b0ca:	4c4a      	ldr	r4, [pc, #296]	; (800b1f4 <LoRaMacMibSetRequestConfirm+0x424>)
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800b0cc:	aa02      	add	r2, sp, #8
 800b0ce:	7113      	strb	r3, [r2, #4]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DEF_TX_POWER ) == true )
 800b0d0:	592b      	ldr	r3, [r5, r4]
 800b0d2:	220a      	movs	r2, #10
 800b0d4:	7818      	ldrb	r0, [r3, #0]
 800b0d6:	a903      	add	r1, sp, #12
 800b0d8:	f001 f999 	bl	800c40e <RegionVerify>
 800b0dc:	2800      	cmp	r0, #0
 800b0de:	d100      	bne.n	800b0e2 <LoRaMacMibSetRequestConfirm+0x312>
 800b0e0:	e6c6      	b.n	800ae70 <LoRaMacMibSetRequestConfirm+0xa0>
                MacCtx.NvmCtx->MacParamsDefaults.ChannelsTxPower = verify.TxPower;
 800b0e2:	aa02      	add	r2, sp, #8
 800b0e4:	592b      	ldr	r3, [r5, r4]
 800b0e6:	7912      	ldrb	r2, [r2, #4]
 800b0e8:	711a      	strb	r2, [r3, #4]
 800b0ea:	e6ba      	b.n	800ae62 <LoRaMacMibSetRequestConfirm+0x92>
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800b0ec:	7923      	ldrb	r3, [r4, #4]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_POWER ) == true )
 800b0ee:	4c41      	ldr	r4, [pc, #260]	; (800b1f4 <LoRaMacMibSetRequestConfirm+0x424>)
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800b0f0:	aa02      	add	r2, sp, #8
 800b0f2:	7113      	strb	r3, [r2, #4]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_POWER ) == true )
 800b0f4:	592b      	ldr	r3, [r5, r4]
 800b0f6:	2209      	movs	r2, #9
 800b0f8:	7818      	ldrb	r0, [r3, #0]
 800b0fa:	a903      	add	r1, sp, #12
 800b0fc:	f001 f987 	bl	800c40e <RegionVerify>
 800b100:	2800      	cmp	r0, #0
 800b102:	d100      	bne.n	800b106 <LoRaMacMibSetRequestConfirm+0x336>
 800b104:	e6b4      	b.n	800ae70 <LoRaMacMibSetRequestConfirm+0xa0>
                MacCtx.NvmCtx->MacParams.ChannelsTxPower = verify.TxPower;
 800b106:	592b      	ldr	r3, [r5, r4]
 800b108:	aa02      	add	r2, sp, #8
 800b10a:	7912      	ldrb	r2, [r2, #4]
 800b10c:	3384      	adds	r3, #132	; 0x84
 800b10e:	e6b9      	b.n	800ae84 <LoRaMacMibSetRequestConfirm+0xb4>
            MacCtx.NvmCtx->MacParams.SystemMaxRxError = MacCtx.NvmCtx->MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800b110:	4b38      	ldr	r3, [pc, #224]	; (800b1f4 <LoRaMacMibSetRequestConfirm+0x424>)
 800b112:	6862      	ldr	r2, [r4, #4]
 800b114:	58eb      	ldr	r3, [r5, r3]
 800b116:	609a      	str	r2, [r3, #8]
 800b118:	3388      	adds	r3, #136	; 0x88
 800b11a:	e795      	b.n	800b048 <LoRaMacMibSetRequestConfirm+0x278>
            MacCtx.NvmCtx->MacParams.MinRxSymbols = MacCtx.NvmCtx->MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 800b11c:	4b35      	ldr	r3, [pc, #212]	; (800b1f4 <LoRaMacMibSetRequestConfirm+0x424>)
 800b11e:	7922      	ldrb	r2, [r4, #4]
 800b120:	58eb      	ldr	r3, [r5, r3]
 800b122:	731a      	strb	r2, [r3, #12]
 800b124:	338c      	adds	r3, #140	; 0x8c
 800b126:	e6ad      	b.n	800ae84 <LoRaMacMibSetRequestConfirm+0xb4>
            MacCtx.NvmCtx->MacParams.AntennaGain = mibSet->Param.AntennaGain;
 800b128:	4b32      	ldr	r3, [pc, #200]	; (800b1f4 <LoRaMacMibSetRequestConfirm+0x424>)
 800b12a:	6862      	ldr	r2, [r4, #4]
 800b12c:	58eb      	ldr	r3, [r5, r3]
 800b12e:	33c0      	adds	r3, #192	; 0xc0
 800b130:	601a      	str	r2, [r3, #0]
 800b132:	e696      	b.n	800ae62 <LoRaMacMibSetRequestConfirm+0x92>
            MacCtx.NvmCtx->MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 800b134:	4b2f      	ldr	r3, [pc, #188]	; (800b1f4 <LoRaMacMibSetRequestConfirm+0x424>)
 800b136:	6862      	ldr	r2, [r4, #4]
 800b138:	58eb      	ldr	r3, [r5, r3]
 800b13a:	641a      	str	r2, [r3, #64]	; 0x40
 800b13c:	e691      	b.n	800ae62 <LoRaMacMibSetRequestConfirm+0x92>
            if( mibSet->Param.Contexts != 0 )
 800b13e:	6864      	ldr	r4, [r4, #4]
 800b140:	2c00      	cmp	r4, #0
 800b142:	d100      	bne.n	800b146 <LoRaMacMibSetRequestConfirm+0x376>
 800b144:	e694      	b.n	800ae70 <LoRaMacMibSetRequestConfirm+0xa0>
        return LORAMAC_STATUS_BUSY;
 800b146:	2601      	movs	r6, #1
    if( MacCtx.MacState != LORAMAC_STOPPED )
 800b148:	42b3      	cmp	r3, r6
 800b14a:	d000      	beq.n	800b14e <LoRaMacMibSetRequestConfirm+0x37e>
 800b14c:	e67e      	b.n	800ae4c <LoRaMacMibSetRequestConfirm+0x7c>
    if( contexts->MacNvmCtx != NULL )
 800b14e:	6821      	ldr	r1, [r4, #0]
 800b150:	2900      	cmp	r1, #0
 800b152:	d004      	beq.n	800b15e <LoRaMacMibSetRequestConfirm+0x38e>
        memcpy1( ( uint8_t* ) &NvmMacCtx, ( uint8_t* ) contexts->MacNvmCtx, contexts->MacNvmCtxSize );
 800b154:	6863      	ldr	r3, [r4, #4]
 800b156:	4828      	ldr	r0, [pc, #160]	; (800b1f8 <LoRaMacMibSetRequestConfirm+0x428>)
 800b158:	b29a      	uxth	r2, r3
 800b15a:	f002 f98d 	bl	800d478 <memcpy1>
    params.Type = INIT_TYPE_RESTORE_CTX;
 800b15e:	2303      	movs	r3, #3
 800b160:	a904      	add	r1, sp, #16
 800b162:	710b      	strb	r3, [r1, #4]
    params.NvmCtx = contexts->RegionNvmCtx;
 800b164:	68a3      	ldr	r3, [r4, #8]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 800b166:	4e23      	ldr	r6, [pc, #140]	; (800b1f4 <LoRaMacMibSetRequestConfirm+0x424>)
    params.NvmCtx = contexts->RegionNvmCtx;
 800b168:	9304      	str	r3, [sp, #16]
    RegionInitDefaults( MacCtx.NvmCtx->Region, &params );
 800b16a:	59ab      	ldr	r3, [r5, r6]
 800b16c:	7818      	ldrb	r0, [r3, #0]
 800b16e:	f001 f93d 	bl	800c3ec <RegionInitDefaults>
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800b172:	4b22      	ldr	r3, [pc, #136]	; (800b1fc <LoRaMacMibSetRequestConfirm+0x42c>)
 800b174:	5cea      	ldrb	r2, [r5, r3]
 800b176:	3b35      	subs	r3, #53	; 0x35
 800b178:	54ea      	strb	r2, [r5, r3]
    MacCtx.RxWindowCConfig.Frequency = MacCtx.NvmCtx->MacParams.RxCChannel.Frequency;
 800b17a:	59ab      	ldr	r3, [r5, r6]
 800b17c:	001a      	movs	r2, r3
 800b17e:	32b0      	adds	r2, #176	; 0xb0
 800b180:	6811      	ldr	r1, [r2, #0]
 800b182:	22f9      	movs	r2, #249	; 0xf9
 800b184:	0092      	lsls	r2, r2, #2
 800b186:	50a9      	str	r1, [r5, r2]
    MacCtx.RxWindowCConfig.DownlinkDwellTime = MacCtx.NvmCtx->MacParams.DownlinkDwellTime;
 800b188:	001a      	movs	r2, r3
 800b18a:	32b9      	adds	r2, #185	; 0xb9
 800b18c:	7811      	ldrb	r1, [r2, #0]
 800b18e:	22fc      	movs	r2, #252	; 0xfc
 800b190:	0092      	lsls	r2, r2, #2
 800b192:	54a9      	strb	r1, [r5, r2]
    MacCtx.RxWindowCConfig.RepeaterSupport = MacCtx.NvmCtx->RepeaterSupport;
 800b194:	33ca      	adds	r3, #202	; 0xca
 800b196:	781a      	ldrb	r2, [r3, #0]
 800b198:	4b19      	ldr	r3, [pc, #100]	; (800b200 <LoRaMacMibSetRequestConfirm+0x430>)
 800b19a:	54ea      	strb	r2, [r5, r3]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800b19c:	4b19      	ldr	r3, [pc, #100]	; (800b204 <LoRaMacMibSetRequestConfirm+0x434>)
 800b19e:	4a1a      	ldr	r2, [pc, #104]	; (800b208 <LoRaMacMibSetRequestConfirm+0x438>)
 800b1a0:	52ea      	strh	r2, [r5, r3]
    if( SecureElementRestoreNvmCtx( contexts->SecureElementNvmCtx ) != SECURE_ELEMENT_SUCCESS )
 800b1a2:	69a0      	ldr	r0, [r4, #24]
 800b1a4:	f7fd f8b8 	bl	8008318 <SecureElementRestoreNvmCtx>
 800b1a8:	2800      	cmp	r0, #0
 800b1aa:	d001      	beq.n	800b1b0 <LoRaMacMibSetRequestConfirm+0x3e0>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800b1ac:	2611      	movs	r6, #17
 800b1ae:	e64d      	b.n	800ae4c <LoRaMacMibSetRequestConfirm+0x7c>
    if( LoRaMacCryptoRestoreNvmCtx( contexts->CryptoNvmCtx ) != LORAMAC_CRYPTO_SUCCESS )
 800b1b0:	6920      	ldr	r0, [r4, #16]
 800b1b2:	f000 fe9f 	bl	800bef4 <LoRaMacCryptoRestoreNvmCtx>
 800b1b6:	2800      	cmp	r0, #0
 800b1b8:	d1f8      	bne.n	800b1ac <LoRaMacMibSetRequestConfirm+0x3dc>
    if( LoRaMacCommandsRestoreNvmCtx( contexts->CommandsNvmCtx ) != LORAMAC_COMMANDS_SUCCESS )
 800b1ba:	6a20      	ldr	r0, [r4, #32]
 800b1bc:	f000 fb7c 	bl	800b8b8 <LoRaMacCommandsRestoreNvmCtx>
 800b1c0:	1e06      	subs	r6, r0, #0
 800b1c2:	d107      	bne.n	800b1d4 <LoRaMacMibSetRequestConfirm+0x404>
    if( LoRaMacConfirmQueueRestoreNvmCtx( contexts->ConfirmQueueNvmCtx ) != true )
 800b1c4:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800b1c6:	f000 fcc5 	bl	800bb54 <LoRaMacConfirmQueueRestoreNvmCtx>
 800b1ca:	2800      	cmp	r0, #0
 800b1cc:	d000      	beq.n	800b1d0 <LoRaMacMibSetRequestConfirm+0x400>
 800b1ce:	e63d      	b.n	800ae4c <LoRaMacMibSetRequestConfirm+0x7c>
        return LORAMAC_STATUS_CONFIRM_QUEUE_ERROR;
 800b1d0:	3615      	adds	r6, #21
 800b1d2:	e63b      	b.n	800ae4c <LoRaMacMibSetRequestConfirm+0x7c>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b1d4:	2613      	movs	r6, #19
 800b1d6:	e639      	b.n	800ae4c <LoRaMacMibSetRequestConfirm+0x7c>
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 800b1d8:	79a3      	ldrb	r3, [r4, #6]
 800b1da:	2b01      	cmp	r3, #1
 800b1dc:	d900      	bls.n	800b1e0 <LoRaMacMibSetRequestConfirm+0x410>
 800b1de:	e647      	b.n	800ae70 <LoRaMacMibSetRequestConfirm+0xa0>
                MacCtx.NvmCtx->Version = mibSet->Param.AbpLrWanVersion;
 800b1e0:	4b04      	ldr	r3, [pc, #16]	; (800b1f4 <LoRaMacMibSetRequestConfirm+0x424>)
 800b1e2:	6862      	ldr	r2, [r4, #4]
 800b1e4:	58eb      	ldr	r3, [r5, r3]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800b1e6:	6860      	ldr	r0, [r4, #4]
                MacCtx.NvmCtx->Version = mibSet->Param.AbpLrWanVersion;
 800b1e8:	33fc      	adds	r3, #252	; 0xfc
 800b1ea:	665a      	str	r2, [r3, #100]	; 0x64
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800b1ec:	f000 fe7a 	bl	800bee4 <LoRaMacCryptoSetLrWanVersion>
 800b1f0:	e65a      	b.n	800aea8 <LoRaMacMibSetRequestConfirm+0xd8>
 800b1f2:	46c0      	nop			; (mov r8, r8)
 800b1f4:	00000484 	.word	0x00000484
 800b1f8:	200009e8 	.word	0x200009e8
 800b1fc:	00000415 	.word	0x00000415
 800b200:	000003f1 	.word	0x000003f1
 800b204:	000003f2 	.word	0x000003f2
 800b208:	00000201 	.word	0x00000201

0800b20c <LoRaMacMlmeRequest>:

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800b20c:	2300      	movs	r3, #0
{
 800b20e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b210:	b089      	sub	sp, #36	; 0x24
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800b212:	aa02      	add	r2, sp, #8
{
 800b214:	0005      	movs	r5, r0

    if( mlmeRequest == NULL )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b216:	2603      	movs	r6, #3
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800b218:	8013      	strh	r3, [r2, #0]
    if( mlmeRequest == NULL )
 800b21a:	4298      	cmp	r0, r3
 800b21c:	d004      	beq.n	800b228 <LoRaMacMlmeRequest+0x1c>
    }
    if( LoRaMacIsBusy( ) == true )
 800b21e:	f7fe fdd3 	bl	8009dc8 <LoRaMacIsBusy>
 800b222:	2800      	cmp	r0, #0
 800b224:	d003      	beq.n	800b22e <LoRaMacMlmeRequest+0x22>
    {
        return LORAMAC_STATUS_BUSY;
 800b226:	2601      	movs	r6, #1
    {
        LoRaMacConfirmQueueAdd( &queueElement );
        EventMacNvmCtxChanged( );
    }
    return status;
}
 800b228:	0030      	movs	r0, r6
 800b22a:	b009      	add	sp, #36	; 0x24
 800b22c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 800b22e:	f000 fd59 	bl	800bce4 <LoRaMacConfirmQueueIsFull>
 800b232:	2800      	cmp	r0, #0
 800b234:	d1f7      	bne.n	800b226 <LoRaMacMlmeRequest+0x1a>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800b236:	f000 fd4f 	bl	800bcd8 <LoRaMacConfirmQueueGetCnt>
 800b23a:	1e01      	subs	r1, r0, #0
 800b23c:	d103      	bne.n	800b246 <LoRaMacMlmeRequest+0x3a>
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 800b23e:	2214      	movs	r2, #20
 800b240:	4863      	ldr	r0, [pc, #396]	; (800b3d0 <LoRaMacMlmeRequest+0x1c4>)
 800b242:	f002 f92f 	bl	800d4a4 <memset1>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b246:	2101      	movs	r1, #1
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800b248:	2204      	movs	r2, #4
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b24a:	4c62      	ldr	r4, [pc, #392]	; (800b3d4 <LoRaMacMlmeRequest+0x1c8>)
 800b24c:	4b62      	ldr	r3, [pc, #392]	; (800b3d8 <LoRaMacMlmeRequest+0x1cc>)
 800b24e:	54e1      	strb	r1, [r4, r3]
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800b250:	4b62      	ldr	r3, [pc, #392]	; (800b3dc <LoRaMacMlmeRequest+0x1d0>)
 800b252:	5ce0      	ldrb	r0, [r4, r3]
 800b254:	9300      	str	r3, [sp, #0]
 800b256:	4302      	orrs	r2, r0
 800b258:	54e2      	strb	r2, [r4, r3]
    queueElement.Request = mlmeRequest->Type;
 800b25a:	aa03      	add	r2, sp, #12
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b25c:	7051      	strb	r1, [r2, #1]
    queueElement.RestrictCommonReadyToHandle = false;
 800b25e:	2100      	movs	r1, #0
    queueElement.Request = mlmeRequest->Type;
 800b260:	7828      	ldrb	r0, [r5, #0]
    queueElement.RestrictCommonReadyToHandle = false;
 800b262:	70d1      	strb	r1, [r2, #3]
    queueElement.Request = mlmeRequest->Type;
 800b264:	7010      	strb	r0, [r2, #0]
    switch( mlmeRequest->Type )
 800b266:	3801      	subs	r0, #1
 800b268:	280d      	cmp	r0, #13
 800b26a:	d900      	bls.n	800b26e <LoRaMacMlmeRequest+0x62>
 800b26c:	e0a8      	b.n	800b3c0 <LoRaMacMlmeRequest+0x1b4>
 800b26e:	f7f4 ff53 	bl	8000118 <__gnu_thumb1_case_uqi>
 800b272:	a707      	.short	0xa707
 800b274:	88665ca7 	.word	0x88665ca7
 800b278:	91a7a7a7 	.word	0x91a7a7a7
 800b27c:	a395a7a7 	.word	0xa395a7a7
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 800b280:	23d0      	movs	r3, #208	; 0xd0
 800b282:	009b      	lsls	r3, r3, #2
 800b284:	58e2      	ldr	r2, [r4, r3]
 800b286:	2320      	movs	r3, #32
 800b288:	0016      	movs	r6, r2
 800b28a:	401e      	ands	r6, r3
 800b28c:	421a      	tst	r2, r3
 800b28e:	d1ca      	bne.n	800b226 <LoRaMacMlmeRequest+0x1a>
            ResetMacParameters( );
 800b290:	f7fd ff7c 	bl	800918c <ResetMacParameters>
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800b294:	2104      	movs	r1, #4
 800b296:	4b52      	ldr	r3, [pc, #328]	; (800b3e0 <LoRaMacMlmeRequest+0x1d4>)
 800b298:	0032      	movs	r2, r6
 800b29a:	58e7      	ldr	r7, [r4, r3]
 800b29c:	5669      	ldrsb	r1, [r5, r1]
 800b29e:	7838      	ldrb	r0, [r7, #0]
 800b2a0:	f001 f927 	bl	800c4f2 <RegionAlternateDr>
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800b2a4:	2207      	movs	r2, #7
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800b2a6:	3785      	adds	r7, #133	; 0x85
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800b2a8:	ab03      	add	r3, sp, #12
            MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800b2aa:	7038      	strb	r0, [r7, #0]
            SwitchClass( CLASS_A );
 800b2ac:	0030      	movs	r0, r6
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800b2ae:	705a      	strb	r2, [r3, #1]
            SwitchClass( CLASS_A );
 800b2b0:	f7fe fa40 	bl	8009734 <SwitchClass>
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800b2b4:	0022      	movs	r2, r4
 800b2b6:	494b      	ldr	r1, [pc, #300]	; (800b3e4 <LoRaMacMlmeRequest+0x1d8>)
 800b2b8:	32fc      	adds	r2, #252	; 0xfc
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800b2ba:	0023      	movs	r3, r4
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800b2bc:	60d1      	str	r1, [r2, #12]
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800b2be:	22ff      	movs	r2, #255	; 0xff
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800b2c0:	33ff      	adds	r3, #255	; 0xff
 800b2c2:	715e      	strb	r6, [r3, #5]
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800b2c4:	735a      	strb	r2, [r3, #13]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800b2c6:	739e      	strb	r6, [r3, #14]
            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 800b2c8:	f7fd f926 	bl	8008518 <SecureElementGetJoinEui>
 800b2cc:	2208      	movs	r2, #8
 800b2ce:	0001      	movs	r1, r0
 800b2d0:	4845      	ldr	r0, [pc, #276]	; (800b3e8 <LoRaMacMlmeRequest+0x1dc>)
 800b2d2:	f002 f8d1 	bl	800d478 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 800b2d6:	f7fd f909 	bl	80084ec <SecureElementGetDevEui>
 800b2da:	2208      	movs	r2, #8
 800b2dc:	0001      	movs	r1, r0
 800b2de:	4843      	ldr	r0, [pc, #268]	; (800b3ec <LoRaMacMlmeRequest+0x1e0>)
 800b2e0:	f002 f8ca 	bl	800d478 <memcpy1>
    status = ScheduleTx( allowDelayedTx );
 800b2e4:	0030      	movs	r0, r6
 800b2e6:	f7fe f81b 	bl	8009320 <ScheduleTx>
 800b2ea:	1e06      	subs	r6, r0, #0
            if( status != LORAMAC_STATUS_OK )
 800b2ec:	d009      	beq.n	800b302 <LoRaMacMlmeRequest+0xf6>
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = RegionAlternateDr( MacCtx.NvmCtx->Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 800b2ee:	2104      	movs	r1, #4
 800b2f0:	4b3b      	ldr	r3, [pc, #236]	; (800b3e0 <LoRaMacMlmeRequest+0x1d4>)
 800b2f2:	2201      	movs	r2, #1
 800b2f4:	58e7      	ldr	r7, [r4, r3]
 800b2f6:	5669      	ldrsb	r1, [r5, r1]
 800b2f8:	7838      	ldrb	r0, [r7, #0]
 800b2fa:	f001 f8fa 	bl	800c4f2 <RegionAlternateDr>
 800b2fe:	3785      	adds	r7, #133	; 0x85
 800b300:	7038      	strb	r0, [r7, #0]
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800b302:	2391      	movs	r3, #145	; 0x91
 800b304:	00db      	lsls	r3, r3, #3
 800b306:	58e3      	ldr	r3, [r4, r3]
 800b308:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
 800b30a:	2e00      	cmp	r6, #0
 800b30c:	d05a      	beq.n	800b3c4 <LoRaMacMlmeRequest+0x1b8>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800b30e:	f000 fce3 	bl	800bcd8 <LoRaMacConfirmQueueGetCnt>
 800b312:	2800      	cmp	r0, #0
 800b314:	d000      	beq.n	800b318 <LoRaMacMlmeRequest+0x10c>
 800b316:	e787      	b.n	800b228 <LoRaMacMlmeRequest+0x1c>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800b318:	2204      	movs	r2, #4
            MacCtx.NodeAckRequested = false;
 800b31a:	4b35      	ldr	r3, [pc, #212]	; (800b3f0 <LoRaMacMlmeRequest+0x1e4>)
 800b31c:	54e0      	strb	r0, [r4, r3]
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800b31e:	9b00      	ldr	r3, [sp, #0]
 800b320:	5ce3      	ldrb	r3, [r4, r3]
 800b322:	4393      	bics	r3, r2
 800b324:	9a00      	ldr	r2, [sp, #0]
 800b326:	54a3      	strb	r3, [r4, r2]
 800b328:	e77e      	b.n	800b228 <LoRaMacMlmeRequest+0x1c>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800b32a:	2200      	movs	r2, #0
 800b32c:	2002      	movs	r0, #2
 800b32e:	a902      	add	r1, sp, #8
 800b330:	f000 fad6 	bl	800b8e0 <LoRaMacCommandsAddCmd>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b334:	2613      	movs	r6, #19
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800b336:	2800      	cmp	r0, #0
 800b338:	d1e3      	bne.n	800b302 <LoRaMacMlmeRequest+0xf6>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 800b33a:	2600      	movs	r6, #0
            break;
 800b33c:	e7e1      	b.n	800b302 <LoRaMacMlmeRequest+0xf6>
    continuousWave.Channel = MacCtx.Channel;
 800b33e:	4b2d      	ldr	r3, [pc, #180]	; (800b3f4 <LoRaMacMlmeRequest+0x1e8>)
 800b340:	a904      	add	r1, sp, #16
 800b342:	5ce3      	ldrb	r3, [r4, r3]
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 800b344:	88aa      	ldrh	r2, [r5, #4]
    continuousWave.Channel = MacCtx.Channel;
 800b346:	700b      	strb	r3, [r1, #0]
    continuousWave.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800b348:	4b25      	ldr	r3, [pc, #148]	; (800b3e0 <LoRaMacMlmeRequest+0x1d4>)
 800b34a:	58e3      	ldr	r3, [r4, r3]
 800b34c:	0018      	movs	r0, r3
 800b34e:	3085      	adds	r0, #133	; 0x85
 800b350:	7800      	ldrb	r0, [r0, #0]
 800b352:	7048      	strb	r0, [r1, #1]
    continuousWave.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800b354:	0018      	movs	r0, r3
 800b356:	3084      	adds	r0, #132	; 0x84
 800b358:	7800      	ldrb	r0, [r0, #0]
    continuousWave.Timeout = timeout;
 800b35a:	818a      	strh	r2, [r1, #12]
    continuousWave.TxPower = MacCtx.NvmCtx->MacParams.ChannelsTxPower;
 800b35c:	7088      	strb	r0, [r1, #2]
    continuousWave.MaxEirp = MacCtx.NvmCtx->MacParams.MaxEirp;
 800b35e:	0018      	movs	r0, r3
 800b360:	30bc      	adds	r0, #188	; 0xbc
 800b362:	6800      	ldr	r0, [r0, #0]
 800b364:	6048      	str	r0, [r1, #4]
    continuousWave.AntennaGain = MacCtx.NvmCtx->MacParams.AntennaGain;
 800b366:	0018      	movs	r0, r3
 800b368:	30c0      	adds	r0, #192	; 0xc0
 800b36a:	6800      	ldr	r0, [r0, #0]
 800b36c:	6088      	str	r0, [r1, #8]
    RegionSetContinuousWave( MacCtx.NvmCtx->Region, &continuousWave );
 800b36e:	7818      	ldrb	r0, [r3, #0]
 800b370:	f001 f8d9 	bl	800c526 <RegionSetContinuousWave>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800b374:	22d0      	movs	r2, #208	; 0xd0
 800b376:	2302      	movs	r3, #2
 800b378:	0092      	lsls	r2, r2, #2
 800b37a:	58a1      	ldr	r1, [r4, r2]
 800b37c:	430b      	orrs	r3, r1
 800b37e:	50a3      	str	r3, [r4, r2]
 800b380:	e7db      	b.n	800b33a <LoRaMacMlmeRequest+0x12e>
    Radio.SetTxContinuousWave( frequency, power, timeout );
 800b382:	210c      	movs	r1, #12
 800b384:	4b1c      	ldr	r3, [pc, #112]	; (800b3f8 <LoRaMacMlmeRequest+0x1ec>)
 800b386:	88aa      	ldrh	r2, [r5, #4]
 800b388:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b38a:	5669      	ldrsb	r1, [r5, r1]
 800b38c:	68a8      	ldr	r0, [r5, #8]
 800b38e:	9301      	str	r3, [sp, #4]
 800b390:	4798      	blx	r3
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800b392:	e7ef      	b.n	800b374 <LoRaMacMlmeRequest+0x168>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800b394:	2200      	movs	r2, #0
 800b396:	200d      	movs	r0, #13
 800b398:	a902      	add	r1, sp, #8
 800b39a:	e7c9      	b.n	800b330 <LoRaMacMlmeRequest+0x124>
            if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 800b39c:	4b10      	ldr	r3, [pc, #64]	; (800b3e0 <LoRaMacMlmeRequest+0x1d4>)
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800b39e:	2602      	movs	r6, #2
            if( MacCtx.NvmCtx->DeviceClass == CLASS_A )
 800b3a0:	58e3      	ldr	r3, [r4, r3]
 800b3a2:	337c      	adds	r3, #124	; 0x7c
 800b3a4:	781b      	ldrb	r3, [r3, #0]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d1ab      	bne.n	800b302 <LoRaMacMlmeRequest+0xf6>
                macCmdPayload[0] = value;
 800b3aa:	792b      	ldrb	r3, [r5, #4]
 800b3ac:	aa02      	add	r2, sp, #8
 800b3ae:	7013      	strb	r3, [r2, #0]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800b3b0:	2010      	movs	r0, #16
 800b3b2:	2201      	movs	r2, #1
 800b3b4:	a902      	add	r1, sp, #8
 800b3b6:	e7bb      	b.n	800b330 <LoRaMacMlmeRequest+0x124>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	2012      	movs	r0, #18
 800b3bc:	a902      	add	r1, sp, #8
 800b3be:	e7b7      	b.n	800b330 <LoRaMacMlmeRequest+0x124>
    queueElement.RestrictCommonReadyToHandle = false;
 800b3c0:	2602      	movs	r6, #2
 800b3c2:	e79e      	b.n	800b302 <LoRaMacMlmeRequest+0xf6>
        LoRaMacConfirmQueueAdd( &queueElement );
 800b3c4:	a803      	add	r0, sp, #12
 800b3c6:	f000 fbd9 	bl	800bb7c <LoRaMacConfirmQueueAdd>
        EventMacNvmCtxChanged( );
 800b3ca:	f7fd fdcf 	bl	8008f6c <EventMacNvmCtxChanged>
 800b3ce:	e72b      	b.n	800b228 <LoRaMacMlmeRequest+0x1c>
 800b3d0:	200009ac 	.word	0x200009ac
 800b3d4:	2000055c 	.word	0x2000055c
 800b3d8:	00000451 	.word	0x00000451
 800b3dc:	00000481 	.word	0x00000481
 800b3e0:	00000484 	.word	0x00000484
 800b3e4:	2000055e 	.word	0x2000055e
 800b3e8:	2000066a 	.word	0x2000066a
 800b3ec:	20000672 	.word	0x20000672
 800b3f0:	00000414 	.word	0x00000414
 800b3f4:	00000415 	.word	0x00000415
 800b3f8:	0800fd8c 	.word	0x0800fd8c

0800b3fc <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b400:	b097      	sub	sp, #92	; 0x5c
 800b402:	9000      	str	r0, [sp, #0]
 800b404:	9108      	str	r1, [sp, #32]
 800b406:	9302      	str	r3, [sp, #8]
    void* fBuffer;
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 800b408:	2800      	cmp	r0, #0
 800b40a:	d103      	bne.n	800b414 <LoRaMacMcpsRequest+0x18>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b40c:	2703      	movs	r7, #3

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;

    return status;
}
 800b40e:	0038      	movs	r0, r7
 800b410:	b017      	add	sp, #92	; 0x5c
 800b412:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( LoRaMacIsBusy( ) == true )
 800b414:	f7fe fcd8 	bl	8009dc8 <LoRaMacIsBusy>
        return LORAMAC_STATUS_BUSY;
 800b418:	2701      	movs	r7, #1
    if( LoRaMacIsBusy( ) == true )
 800b41a:	1e04      	subs	r4, r0, #0
 800b41c:	d1f7      	bne.n	800b40e <LoRaMacMcpsRequest+0x12>
    macHdr.Value = 0;
 800b41e:	466b      	mov	r3, sp
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800b420:	0001      	movs	r1, r0
    macHdr.Value = 0;
 800b422:	7418      	strb	r0, [r3, #16]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800b424:	2214      	movs	r2, #20
 800b426:	48c8      	ldr	r0, [pc, #800]	; (800b748 <LoRaMacMcpsRequest+0x34c>)
 800b428:	f002 f83c 	bl	800d4a4 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800b42c:	4dc7      	ldr	r5, [pc, #796]	; (800b74c <LoRaMacMcpsRequest+0x350>)
 800b42e:	4bc8      	ldr	r3, [pc, #800]	; (800b750 <LoRaMacMcpsRequest+0x354>)
 800b430:	54ef      	strb	r7, [r5, r3]
    MacCtx.AckTimeoutRetriesCounter = 1;
 800b432:	4bc8      	ldr	r3, [pc, #800]	; (800b754 <LoRaMacMcpsRequest+0x358>)
 800b434:	54ef      	strb	r7, [r5, r3]
    switch( mcpsRequest->Type )
 800b436:	9b00      	ldr	r3, [sp, #0]
 800b438:	781b      	ldrb	r3, [r3, #0]
 800b43a:	42bb      	cmp	r3, r7
 800b43c:	d100      	bne.n	800b440 <LoRaMacMcpsRequest+0x44>
 800b43e:	e10e      	b.n	800b65e <LoRaMacMcpsRequest+0x262>
 800b440:	2b03      	cmp	r3, #3
 800b442:	d100      	bne.n	800b446 <LoRaMacMcpsRequest+0x4a>
 800b444:	e115      	b.n	800b672 <LoRaMacMcpsRequest+0x276>
 800b446:	2b00      	cmp	r3, #0
 800b448:	d000      	beq.n	800b44c <LoRaMacMcpsRequest+0x50>
 800b44a:	e124      	b.n	800b696 <LoRaMacMcpsRequest+0x29a>
            MacCtx.AckTimeoutRetries = 1;
 800b44c:	4bc2      	ldr	r3, [pc, #776]	; (800b758 <LoRaMacMcpsRequest+0x35c>)
 800b44e:	54ef      	strb	r7, [r5, r3]
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800b450:	2340      	movs	r3, #64	; 0x40
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800b452:	466a      	mov	r2, sp
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 800b454:	260e      	movs	r6, #14
            readyToSend = true;
 800b456:	2401      	movs	r4, #1
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800b458:	7413      	strb	r3, [r2, #16]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 800b45a:	9b00      	ldr	r3, [sp, #0]
 800b45c:	791b      	ldrb	r3, [r3, #4]
 800b45e:	9305      	str	r3, [sp, #20]
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 800b460:	9b00      	ldr	r3, [sp, #0]
 800b462:	689b      	ldr	r3, [r3, #8]
 800b464:	9303      	str	r3, [sp, #12]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 800b466:	9b00      	ldr	r3, [sp, #0]
 800b468:	899b      	ldrh	r3, [r3, #12]
 800b46a:	9302      	str	r3, [sp, #8]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 800b46c:	9b00      	ldr	r3, [sp, #0]
 800b46e:	579e      	ldrsb	r6, [r3, r6]
    getPhy.Attribute = PHY_MIN_TX_DR;
 800b470:	2202      	movs	r2, #2
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800b472:	4fba      	ldr	r7, [pc, #744]	; (800b75c <LoRaMacMcpsRequest+0x360>)
    getPhy.Attribute = PHY_MIN_TX_DR;
 800b474:	ab0a      	add	r3, sp, #40	; 0x28
 800b476:	751a      	strb	r2, [r3, #20]
    getPhy.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800b478:	59eb      	ldr	r3, [r5, r7]
 800b47a:	a90a      	add	r1, sp, #40	; 0x28
 800b47c:	001a      	movs	r2, r3
 800b47e:	32b8      	adds	r2, #184	; 0xb8
 800b480:	7812      	ldrb	r2, [r2, #0]
 800b482:	758a      	strb	r2, [r1, #22]
    phyParam = RegionGetPhyParam( MacCtx.NvmCtx->Region, &getPhy );
 800b484:	7818      	ldrb	r0, [r3, #0]
 800b486:	a90f      	add	r1, sp, #60	; 0x3c
 800b488:	f000 ff9d 	bl	800c3c6 <RegionGetPhyParam>
 800b48c:	9701      	str	r7, [sp, #4]
 800b48e:	900a      	str	r0, [sp, #40]	; 0x28
    if( readyToSend == true )
 800b490:	2c00      	cmp	r4, #0
 800b492:	d100      	bne.n	800b496 <LoRaMacMcpsRequest+0x9a>
 800b494:	e149      	b.n	800b72a <LoRaMacMcpsRequest+0x32e>
        if( MacCtx.NvmCtx->AdrCtrlOn == false )
 800b496:	59eb      	ldr	r3, [r5, r7]
 800b498:	001a      	movs	r2, r3
 800b49a:	327e      	adds	r2, #126	; 0x7e
 800b49c:	7812      	ldrb	r2, [r2, #0]
 800b49e:	2a00      	cmp	r2, #0
 800b4a0:	d117      	bne.n	800b4d2 <LoRaMacMcpsRequest+0xd6>
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800b4a2:	1c02      	adds	r2, r0, #0
 800b4a4:	b240      	sxtb	r0, r0
            verify.DatarateParams.Datarate = datarate;
 800b4a6:	ac0b      	add	r4, sp, #44	; 0x2c
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800b4a8:	42b0      	cmp	r0, r6
 800b4aa:	da00      	bge.n	800b4ae <LoRaMacMcpsRequest+0xb2>
 800b4ac:	1c32      	adds	r2, r6, #0
            verify.DatarateParams.Datarate = datarate;
 800b4ae:	7022      	strb	r2, [r4, #0]
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800b4b0:	001a      	movs	r2, r3
 800b4b2:	32b8      	adds	r2, #184	; 0xb8
 800b4b4:	7812      	ldrb	r2, [r2, #0]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 800b4b6:	0021      	movs	r1, r4
            verify.DatarateParams.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800b4b8:	70a2      	strb	r2, [r4, #2]
            if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_TX_DR ) == true )
 800b4ba:	7818      	ldrb	r0, [r3, #0]
 800b4bc:	2205      	movs	r2, #5
 800b4be:	f000 ffa6 	bl	800c40e <RegionVerify>
 800b4c2:	2800      	cmp	r0, #0
 800b4c4:	d0a2      	beq.n	800b40c <LoRaMacMcpsRequest+0x10>
                MacCtx.NvmCtx->MacParams.ChannelsDatarate = verify.DatarateParams.Datarate;
 800b4c6:	9a01      	ldr	r2, [sp, #4]
 800b4c8:	4ba0      	ldr	r3, [pc, #640]	; (800b74c <LoRaMacMcpsRequest+0x350>)
 800b4ca:	589b      	ldr	r3, [r3, r2]
 800b4cc:	7822      	ldrb	r2, [r4, #0]
 800b4ce:	3385      	adds	r3, #133	; 0x85
 800b4d0:	701a      	strb	r2, [r3, #0]
    int8_t datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800b4d2:	4b9e      	ldr	r3, [pc, #632]	; (800b74c <LoRaMacMcpsRequest+0x350>)
 800b4d4:	9a01      	ldr	r2, [sp, #4]
 800b4d6:	5899      	ldr	r1, [r3, r2]
 800b4d8:	000a      	movs	r2, r1
 800b4da:	3284      	adds	r2, #132	; 0x84
 800b4dc:	8812      	ldrh	r2, [r2, #0]
 800b4de:	1d0b      	adds	r3, r1, #4
 800b4e0:	9206      	str	r2, [sp, #24]
 800b4e2:	ba57      	rev16	r7, r2
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800b4e4:	22b2      	movs	r2, #178	; 0xb2
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800b4e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800b4e8:	0052      	lsls	r2, r2, #1
    uint32_t adrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800b4ea:	930c      	str	r3, [sp, #48]	; 0x30
    if( MacCtx.NvmCtx->NetworkActivation == ACTIVATION_TYPE_NONE )
 800b4ec:	5c8a      	ldrb	r2, [r1, r2]
 800b4ee:	2a00      	cmp	r2, #0
 800b4f0:	d100      	bne.n	800b4f4 <LoRaMacMcpsRequest+0xf8>
 800b4f2:	e118      	b.n	800b726 <LoRaMacMcpsRequest+0x32a>
    if( MacCtx.NvmCtx->MaxDCycle == 0 )
 800b4f4:	000a      	movs	r2, r1
 800b4f6:	32c8      	adds	r2, #200	; 0xc8
 800b4f8:	7812      	ldrb	r2, [r2, #0]
 800b4fa:	2a00      	cmp	r2, #0
 800b4fc:	d102      	bne.n	800b504 <LoRaMacMcpsRequest+0x108>
        MacCtx.NvmCtx->AggregatedTimeOff = 0;
 800b4fe:	0008      	movs	r0, r1
 800b500:	30fc      	adds	r0, #252	; 0xfc
 800b502:	6582      	str	r2, [r0, #88]	; 0x58
    fCtrl.Bits.Adr           = MacCtx.NvmCtx->AdrCtrlOn;
 800b504:	000a      	movs	r2, r1
    if( MacCtx.NvmCtx->SrvAckRequested == true )
 800b506:	204c      	movs	r0, #76	; 0x4c
    fCtrl.Bits.Adr           = MacCtx.NvmCtx->AdrCtrlOn;
 800b508:	327e      	adds	r2, #126	; 0x7e
 800b50a:	7812      	ldrb	r2, [r2, #0]
    if( MacCtx.NvmCtx->SrvAckRequested == true )
 800b50c:	30ff      	adds	r0, #255	; 0xff
 800b50e:	5c0e      	ldrb	r6, [r1, r0]
        fCtrl.Bits.FPending      = 0;
 800b510:	01d4      	lsls	r4, r2, #7
 800b512:	1c25      	adds	r5, r4, #0
    if( MacCtx.NvmCtx->SrvAckRequested == true )
 800b514:	9009      	str	r0, [sp, #36]	; 0x24
 800b516:	2e00      	cmp	r6, #0
 800b518:	d001      	beq.n	800b51e <LoRaMacMcpsRequest+0x122>
        fCtrl.Bits.Ack = 1;
 800b51a:	2520      	movs	r5, #32
 800b51c:	4325      	orrs	r5, r4
    adrNext.Version = MacCtx.NvmCtx->Version;
 800b51e:	000c      	movs	r4, r1
    adrNext.AdrAckCounter = MacCtx.NvmCtx->AdrAckCounter;
 800b520:	9313      	str	r3, [sp, #76]	; 0x4c
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800b522:	23fd      	movs	r3, #253	; 0xfd
    adrNext.Version = MacCtx.NvmCtx->Version;
 800b524:	34fc      	adds	r4, #252	; 0xfc
 800b526:	6e64      	ldr	r4, [r4, #100]	; 0x64
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800b528:	009b      	lsls	r3, r3, #2
    adrNext.Version = MacCtx.NvmCtx->Version;
 800b52a:	9411      	str	r4, [sp, #68]	; 0x44
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800b52c:	4c87      	ldr	r4, [pc, #540]	; (800b74c <LoRaMacMcpsRequest+0x350>)
    adrNext.UpdateChanMask = true;
 800b52e:	2601      	movs	r6, #1
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800b530:	58e3      	ldr	r3, [r4, r3]
    adrNext.Version = MacCtx.NvmCtx->Version;
 800b532:	a811      	add	r0, sp, #68	; 0x44
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800b534:	9314      	str	r3, [sp, #80]	; 0x50
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800b536:	000b      	movs	r3, r1
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800b538:	7142      	strb	r2, [r0, #5]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 800b53a:	000a      	movs	r2, r1
    adrNext.Datarate = MacCtx.NvmCtx->MacParams.ChannelsDatarate;
 800b53c:	8207      	strh	r7, [r0, #16]
    adrNext.UpdateChanMask = true;
 800b53e:	7106      	strb	r6, [r0, #4]
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800b540:	33b8      	adds	r3, #184	; 0xb8
 800b542:	781b      	ldrb	r3, [r3, #0]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 800b544:	3284      	adds	r2, #132	; 0x84
    adrNext.UplinkDwellTime = MacCtx.NvmCtx->MacParams.UplinkDwellTime;
 800b546:	7483      	strb	r3, [r0, #18]
    adrNext.Region = MacCtx.NvmCtx->Region;
 800b548:	780b      	ldrb	r3, [r1, #0]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 800b54a:	3185      	adds	r1, #133	; 0x85
    adrNext.Region = MacCtx.NvmCtx->Region;
 800b54c:	74c3      	strb	r3, [r0, #19]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 800b54e:	ab0c      	add	r3, sp, #48	; 0x30
 800b550:	f000 f92c 	bl	800b7ac <LoRaMacAdrCalcNext>
    MacCtx.PktBufferLen = 0;
 800b554:	2300      	movs	r3, #0
    MacCtx.NodeAckRequested = false;
 800b556:	4a82      	ldr	r2, [pc, #520]	; (800b760 <LoRaMacMcpsRequest+0x364>)
    MacCtx.PktBufferLen = 0;
 800b558:	8023      	strh	r3, [r4, #0]
    MacCtx.NodeAckRequested = false;
 800b55a:	54a3      	strb	r3, [r4, r2]
    uint32_t fCntUp = 0;
 800b55c:	930d      	str	r3, [sp, #52]	; 0x34
    size_t macCmdsSize = 0;
 800b55e:	930e      	str	r3, [sp, #56]	; 0x38
        fBufferSize = 0;
 800b560:	9b03      	ldr	r3, [sp, #12]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 800b562:	4030      	ands	r0, r6
        fBufferSize = 0;
 800b564:	1e5a      	subs	r2, r3, #1
 800b566:	4193      	sbcs	r3, r2
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 800b568:	0180      	lsls	r0, r0, #6
        fBufferSize = 0;
 800b56a:	9a02      	ldr	r2, [sp, #8]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 800b56c:	4328      	orrs	r0, r5
        fBufferSize = 0;
 800b56e:	425b      	negs	r3, r3
 800b570:	401a      	ands	r2, r3
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800b572:	9903      	ldr	r1, [sp, #12]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &MacCtx.NvmCtx->MacParams.ChannelsDatarate,
 800b574:	9007      	str	r0, [sp, #28]
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800b576:	487b      	ldr	r0, [pc, #492]	; (800b764 <LoRaMacMcpsRequest+0x368>)
        fBufferSize = 0;
 800b578:	9202      	str	r2, [sp, #8]
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800b57a:	f001 ff7d 	bl	800d478 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 800b57e:	466b      	mov	r3, sp
    MacCtx.PktBuffer[0] = macHdr->Value;
 800b580:	7c19      	ldrb	r1, [r3, #16]
    MacCtx.AppDataSize = fBufferSize;
 800b582:	7a1a      	ldrb	r2, [r3, #8]
 800b584:	4d78      	ldr	r5, [pc, #480]	; (800b768 <LoRaMacMcpsRequest+0x36c>)
    switch( macHdr->Bits.MType )
 800b586:	060b      	lsls	r3, r1, #24
    MacCtx.AppDataSize = fBufferSize;
 800b588:	5562      	strb	r2, [r4, r5]
    MacCtx.PktBuffer[0] = macHdr->Value;
 800b58a:	70a1      	strb	r1, [r4, #2]
    switch( macHdr->Bits.MType )
 800b58c:	0f5b      	lsrs	r3, r3, #29
 800b58e:	2b04      	cmp	r3, #4
 800b590:	d100      	bne.n	800b594 <LoRaMacMcpsRequest+0x198>
 800b592:	e083      	b.n	800b69c <LoRaMacMcpsRequest+0x2a0>
 800b594:	2b07      	cmp	r3, #7
 800b596:	d100      	bne.n	800b59a <LoRaMacMcpsRequest+0x19e>
 800b598:	e0b4      	b.n	800b704 <LoRaMacMcpsRequest+0x308>
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800b59a:	2702      	movs	r7, #2
    switch( macHdr->Bits.MType )
 800b59c:	2b02      	cmp	r3, #2
 800b59e:	d000      	beq.n	800b5a2 <LoRaMacMcpsRequest+0x1a6>
 800b5a0:	e088      	b.n	800b6b4 <LoRaMacMcpsRequest+0x2b8>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800b5a2:	0025      	movs	r5, r4
 800b5a4:	2304      	movs	r3, #4
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800b5a6:	0026      	movs	r6, r4
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800b5a8:	35ff      	adds	r5, #255	; 0xff
 800b5aa:	716b      	strb	r3, [r5, #5]
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800b5ac:	4b6f      	ldr	r3, [pc, #444]	; (800b76c <LoRaMacMcpsRequest+0x370>)
 800b5ae:	36fc      	adds	r6, #252	; 0xfc
 800b5b0:	60f3      	str	r3, [r6, #12]
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800b5b2:	23ff      	movs	r3, #255	; 0xff
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800b5b4:	2798      	movs	r7, #152	; 0x98
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800b5b6:	73a9      	strb	r1, [r5, #14]
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800b5b8:	9905      	ldr	r1, [sp, #20]
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800b5ba:	736b      	strb	r3, [r5, #13]
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800b5bc:	3329      	adds	r3, #41	; 0x29
 800b5be:	54e1      	strb	r1, [r4, r3]
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
 800b5c0:	9b01      	ldr	r3, [sp, #4]
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800b5c2:	007f      	lsls	r7, r7, #1
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
 800b5c4:	58e3      	ldr	r3, [r4, r3]
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800b5c6:	a80d      	add	r0, sp, #52	; 0x34
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
 800b5c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800b5ca:	55e2      	strb	r2, [r4, r7]
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = MacCtx.NvmCtx->DevAddr;
 800b5cc:	6173      	str	r3, [r6, #20]
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800b5ce:	9b07      	ldr	r3, [sp, #28]
 800b5d0:	756b      	strb	r3, [r5, #21]
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800b5d2:	4b64      	ldr	r3, [pc, #400]	; (800b764 <LoRaMacMcpsRequest+0x368>)
 800b5d4:	6333      	str	r3, [r6, #48]	; 0x30
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800b5d6:	f000 fca1 	bl	800bf1c <LoRaMacCryptoGetFCntUp>
 800b5da:	2800      	cmp	r0, #0
 800b5dc:	d000      	beq.n	800b5e0 <LoRaMacMcpsRequest+0x1e4>
 800b5de:	e0a0      	b.n	800b722 <LoRaMacMcpsRequest+0x326>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 800b5e0:	0022      	movs	r2, r4
 800b5e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b5e4:	32fe      	adds	r2, #254	; 0xfe
 800b5e6:	8313      	strh	r3, [r2, #24]
            MacCtx.McpsConfirm.AckReceived = false;
 800b5e8:	2288      	movs	r2, #136	; 0x88
 800b5ea:	00d2      	lsls	r2, r2, #3
 800b5ec:	52a0      	strh	r0, [r4, r2]
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800b5ee:	3208      	adds	r2, #8
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800b5f0:	a80e      	add	r0, sp, #56	; 0x38
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800b5f2:	50a3      	str	r3, [r4, r2]
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800b5f4:	f000 fa1a 	bl	800ba2c <LoRaMacCommandsGetSizeSerializedCmds>
 800b5f8:	2800      	cmp	r0, #0
 800b5fa:	d15a      	bne.n	800b6b2 <LoRaMacMcpsRequest+0x2b6>
            if( macCmdsSize > 0 )
 800b5fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d01a      	beq.n	800b638 <LoRaMacMcpsRequest+0x23c>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( MacCtx.NvmCtx->MacParams.ChannelsDatarate );
 800b602:	2085      	movs	r0, #133	; 0x85
 800b604:	9b01      	ldr	r3, [sp, #4]
 800b606:	58e3      	ldr	r3, [r4, r3]
 800b608:	9302      	str	r3, [sp, #8]
 800b60a:	5618      	ldrsb	r0, [r3, r0]
 800b60c:	f7fd fccc 	bl	8008fa8 <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800b610:	4b55      	ldr	r3, [pc, #340]	; (800b768 <LoRaMacMcpsRequest+0x36c>)
 800b612:	5ce3      	ldrb	r3, [r4, r3]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d060      	beq.n	800b6da <LoRaMacMcpsRequest+0x2de>
 800b618:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b61a:	2b0f      	cmp	r3, #15
 800b61c:	d841      	bhi.n	800b6a2 <LoRaMacMcpsRequest+0x2a6>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 800b61e:	200f      	movs	r0, #15
 800b620:	4a53      	ldr	r2, [pc, #332]	; (800b770 <LoRaMacMcpsRequest+0x374>)
 800b622:	a90e      	add	r1, sp, #56	; 0x38
 800b624:	f000 fa0e 	bl	800ba44 <LoRaMacCommandsSerializeCmds>
 800b628:	2800      	cmp	r0, #0
 800b62a:	d142      	bne.n	800b6b2 <LoRaMacMcpsRequest+0x2b6>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 800b62c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b62e:	300f      	adds	r0, #15
 800b630:	4018      	ands	r0, r3
 800b632:	9b07      	ldr	r3, [sp, #28]
 800b634:	4303      	orrs	r3, r0
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800b636:	756b      	strb	r3, [r5, #21]
        status = ScheduleTx( allowDelayedTx );
 800b638:	9808      	ldr	r0, [sp, #32]
 800b63a:	f7fd fe71 	bl	8009320 <ScheduleTx>
 800b63e:	1e07      	subs	r7, r0, #0
    if( status != LORAMAC_STATUS_OK )
 800b640:	d138      	bne.n	800b6b4 <LoRaMacMcpsRequest+0x2b8>
        MacCtx.NvmCtx->SrvAckRequested = false;
 800b642:	4c42      	ldr	r4, [pc, #264]	; (800b74c <LoRaMacMcpsRequest+0x350>)
 800b644:	9b01      	ldr	r3, [sp, #4]
 800b646:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b648:	58e3      	ldr	r3, [r4, r3]
 800b64a:	5498      	strb	r0, [r3, r2]
        MacCtx.NvmCtx->AdrAckCounter = adrAckCounter;
 800b64c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b64e:	3304      	adds	r3, #4
 800b650:	67da      	str	r2, [r3, #124]	; 0x7c
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800b652:	f000 f9bf 	bl	800b9d4 <LoRaMacCommandsRemoveNoneStickyCmds>
 800b656:	1e07      	subs	r7, r0, #0
 800b658:	d069      	beq.n	800b72e <LoRaMacMcpsRequest+0x332>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b65a:	2713      	movs	r7, #19
 800b65c:	e030      	b.n	800b6c0 <LoRaMacMcpsRequest+0x2c4>
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 800b65e:	9b00      	ldr	r3, [sp, #0]
 800b660:	7bda      	ldrb	r2, [r3, #15]
 800b662:	1c13      	adds	r3, r2, #0
 800b664:	2a08      	cmp	r2, #8
 800b666:	d900      	bls.n	800b66a <LoRaMacMcpsRequest+0x26e>
 800b668:	2308      	movs	r3, #8
 800b66a:	4a3b      	ldr	r2, [pc, #236]	; (800b758 <LoRaMacMcpsRequest+0x35c>)
 800b66c:	54ab      	strb	r3, [r5, r2]
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800b66e:	2380      	movs	r3, #128	; 0x80
 800b670:	e6ef      	b.n	800b452 <LoRaMacMcpsRequest+0x56>
            MacCtx.AckTimeoutRetries = 1;
 800b672:	4b39      	ldr	r3, [pc, #228]	; (800b758 <LoRaMacMcpsRequest+0x35c>)
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800b674:	466a      	mov	r2, sp
            MacCtx.AckTimeoutRetries = 1;
 800b676:	54ef      	strb	r7, [r5, r3]
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800b678:	23e0      	movs	r3, #224	; 0xe0
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 800b67a:	260a      	movs	r6, #10
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800b67c:	7413      	strb	r3, [r2, #16]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 800b67e:	9b00      	ldr	r3, [sp, #0]
            readyToSend = true;
 800b680:	003c      	movs	r4, r7
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 800b682:	685b      	ldr	r3, [r3, #4]
 800b684:	9303      	str	r3, [sp, #12]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 800b686:	9b00      	ldr	r3, [sp, #0]
 800b688:	891b      	ldrh	r3, [r3, #8]
 800b68a:	9302      	str	r3, [sp, #8]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 800b68c:	9b00      	ldr	r3, [sp, #0]
 800b68e:	579e      	ldrsb	r6, [r3, r6]
    uint8_t fPort = 0;
 800b690:	2300      	movs	r3, #0
 800b692:	9305      	str	r3, [sp, #20]
            break;
 800b694:	e6ec      	b.n	800b470 <LoRaMacMcpsRequest+0x74>
    switch( mcpsRequest->Type )
 800b696:	0026      	movs	r6, r4
 800b698:	9405      	str	r4, [sp, #20]
 800b69a:	e6e9      	b.n	800b470 <LoRaMacMcpsRequest+0x74>
            MacCtx.NodeAckRequested = true;
 800b69c:	4b30      	ldr	r3, [pc, #192]	; (800b760 <LoRaMacMcpsRequest+0x364>)
 800b69e:	54e6      	strb	r6, [r4, r3]
 800b6a0:	e77f      	b.n	800b5a2 <LoRaMacMcpsRequest+0x1a6>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800b6a2:	9b01      	ldr	r3, [sp, #4]
 800b6a4:	a90e      	add	r1, sp, #56	; 0x38
 800b6a6:	58e2      	ldr	r2, [r4, r3]
 800b6a8:	32cb      	adds	r2, #203	; 0xcb
 800b6aa:	f000 f9cb 	bl	800ba44 <LoRaMacCommandsSerializeCmds>
 800b6ae:	2800      	cmp	r0, #0
 800b6b0:	d0c2      	beq.n	800b638 <LoRaMacMcpsRequest+0x23c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b6b2:	2713      	movs	r7, #19
        MacCtx.NvmCtx->MacParams.ChannelsDatarate = datarate;
 800b6b4:	9a01      	ldr	r2, [sp, #4]
 800b6b6:	4b25      	ldr	r3, [pc, #148]	; (800b74c <LoRaMacMcpsRequest+0x350>)
 800b6b8:	589b      	ldr	r3, [r3, r2]
        MacCtx.NvmCtx->MacParams.ChannelsTxPower = txPower;
 800b6ba:	9a06      	ldr	r2, [sp, #24]
 800b6bc:	3384      	adds	r3, #132	; 0x84
 800b6be:	801a      	strh	r2, [r3, #0]
            MacCtx.NodeAckRequested = false;
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	4b22      	ldr	r3, [pc, #136]	; (800b74c <LoRaMacMcpsRequest+0x350>)
 800b6c4:	4926      	ldr	r1, [pc, #152]	; (800b760 <LoRaMacMcpsRequest+0x364>)
 800b6c6:	545a      	strb	r2, [r3, r1]
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800b6c8:	2391      	movs	r3, #145	; 0x91
 800b6ca:	4a20      	ldr	r2, [pc, #128]	; (800b74c <LoRaMacMcpsRequest+0x350>)
 800b6cc:	00db      	lsls	r3, r3, #3
 800b6ce:	58d3      	ldr	r3, [r2, r3]
 800b6d0:	9301      	str	r3, [sp, #4]
 800b6d2:	9a01      	ldr	r2, [sp, #4]
 800b6d4:	9b00      	ldr	r3, [sp, #0]
 800b6d6:	611a      	str	r2, [r3, #16]
    return status;
 800b6d8:	e699      	b.n	800b40e <LoRaMacMcpsRequest+0x12>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.NvmCtx->MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800b6da:	9b01      	ldr	r3, [sp, #4]
 800b6dc:	a90e      	add	r1, sp, #56	; 0x38
 800b6de:	58e3      	ldr	r3, [r4, r3]
 800b6e0:	001a      	movs	r2, r3
 800b6e2:	32cb      	adds	r2, #203	; 0xcb
 800b6e4:	9302      	str	r3, [sp, #8]
 800b6e6:	f000 f9ad 	bl	800ba44 <LoRaMacCommandsSerializeCmds>
 800b6ea:	2800      	cmp	r0, #0
 800b6ec:	d1e1      	bne.n	800b6b2 <LoRaMacMcpsRequest+0x2b6>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800b6ee:	2394      	movs	r3, #148	; 0x94
 800b6f0:	005b      	lsls	r3, r3, #1
 800b6f2:	54e0      	strb	r0, [r4, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.NvmCtx->MacCommandsBuffer;
 800b6f4:	9b01      	ldr	r3, [sp, #4]
 800b6f6:	58e3      	ldr	r3, [r4, r3]
 800b6f8:	9302      	str	r3, [sp, #8]
 800b6fa:	33cb      	adds	r3, #203	; 0xcb
 800b6fc:	6333      	str	r3, [r6, #48]	; 0x30
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800b6fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b700:	55e3      	strb	r3, [r4, r7]
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800b702:	e799      	b.n	800b638 <LoRaMacMcpsRequest+0x23c>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800b704:	9b03      	ldr	r3, [sp, #12]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d096      	beq.n	800b638 <LoRaMacMcpsRequest+0x23c>
 800b70a:	2a00      	cmp	r2, #0
 800b70c:	d094      	beq.n	800b638 <LoRaMacMcpsRequest+0x23c>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 800b70e:	466b      	mov	r3, sp
 800b710:	9903      	ldr	r1, [sp, #12]
 800b712:	7a1a      	ldrb	r2, [r3, #8]
 800b714:	4817      	ldr	r0, [pc, #92]	; (800b774 <LoRaMacMcpsRequest+0x378>)
 800b716:	f001 feaf 	bl	800d478 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800b71a:	5d63      	ldrb	r3, [r4, r5]
 800b71c:	3301      	adds	r3, #1
 800b71e:	8023      	strh	r3, [r4, #0]
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800b720:	e78a      	b.n	800b638 <LoRaMacMcpsRequest+0x23c>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800b722:	2712      	movs	r7, #18
 800b724:	e7c6      	b.n	800b6b4 <LoRaMacMcpsRequest+0x2b8>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800b726:	2707      	movs	r7, #7
 800b728:	e7ca      	b.n	800b6c0 <LoRaMacMcpsRequest+0x2c4>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800b72a:	2702      	movs	r7, #2
 800b72c:	e7cc      	b.n	800b6c8 <LoRaMacMcpsRequest+0x2cc>
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 800b72e:	9b00      	ldr	r3, [sp, #0]
 800b730:	781a      	ldrb	r2, [r3, #0]
 800b732:	4b11      	ldr	r3, [pc, #68]	; (800b778 <LoRaMacMcpsRequest+0x37c>)
 800b734:	54e2      	strb	r2, [r4, r3]
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800b736:	2301      	movs	r3, #1
 800b738:	4a10      	ldr	r2, [pc, #64]	; (800b77c <LoRaMacMcpsRequest+0x380>)
 800b73a:	5ca1      	ldrb	r1, [r4, r2]
 800b73c:	430b      	orrs	r3, r1
 800b73e:	54a3      	strb	r3, [r4, r2]
            EventMacNvmCtxChanged( );
 800b740:	f7fd fc14 	bl	8008f6c <EventMacNvmCtxChanged>
 800b744:	e7c0      	b.n	800b6c8 <LoRaMacMcpsRequest+0x2cc>
 800b746:	46c0      	nop			; (mov r8, r8)
 800b748:	20000998 	.word	0x20000998
 800b74c:	2000055c 	.word	0x2000055c
 800b750:	0000043d 	.word	0x0000043d
 800b754:	00000412 	.word	0x00000412
 800b758:	00000411 	.word	0x00000411
 800b75c:	00000484 	.word	0x00000484
 800b760:	00000414 	.word	0x00000414
 800b764:	20000694 	.word	0x20000694
 800b768:	00000237 	.word	0x00000237
 800b76c:	2000055e 	.word	0x2000055e
 800b770:	20000674 	.word	0x20000674
 800b774:	2000055f 	.word	0x2000055f
 800b778:	0000043c 	.word	0x0000043c
 800b77c:	00000481 	.word	0x00000481

0800b780 <LoRaMacTestSetDutyCycleOn>:

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 800b780:	b573      	push	{r0, r1, r4, r5, r6, lr}
    VerifyParams_t verify;

    verify.DutyCycle = enable;

    if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DUTY_CYCLE ) == true )
 800b782:	4e08      	ldr	r6, [pc, #32]	; (800b7a4 <LoRaMacTestSetDutyCycleOn+0x24>)
 800b784:	4d08      	ldr	r5, [pc, #32]	; (800b7a8 <LoRaMacTestSetDutyCycleOn+0x28>)
    verify.DutyCycle = enable;
 800b786:	a901      	add	r1, sp, #4
    if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DUTY_CYCLE ) == true )
 800b788:	5973      	ldr	r3, [r6, r5]
{
 800b78a:	0004      	movs	r4, r0
    verify.DutyCycle = enable;
 800b78c:	7008      	strb	r0, [r1, #0]
    if( RegionVerify( MacCtx.NvmCtx->Region, &verify, PHY_DUTY_CYCLE ) == true )
 800b78e:	220f      	movs	r2, #15
 800b790:	7818      	ldrb	r0, [r3, #0]
 800b792:	f000 fe3c 	bl	800c40e <RegionVerify>
 800b796:	2800      	cmp	r0, #0
 800b798:	d002      	beq.n	800b7a0 <LoRaMacTestSetDutyCycleOn+0x20>
    {
        MacCtx.NvmCtx->DutyCycleOn = enable;
 800b79a:	5973      	ldr	r3, [r6, r5]
 800b79c:	33c9      	adds	r3, #201	; 0xc9
 800b79e:	701c      	strb	r4, [r3, #0]
    }
}
 800b7a0:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 800b7a2:	46c0      	nop			; (mov r8, r8)
 800b7a4:	2000055c 	.word	0x2000055c
 800b7a8:	00000484 	.word	0x00000484

0800b7ac <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 800b7ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( adrNext->Version.Fields.Minor == 0 )
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
    }
    return false;
 800b7ae:	2500      	movs	r5, #0
{
 800b7b0:	b08d      	sub	sp, #52	; 0x34
 800b7b2:	9104      	str	r1, [sp, #16]
 800b7b4:	9205      	str	r2, [sp, #20]
 800b7b6:	001e      	movs	r6, r3
    if( adrNext->Version.Fields.Minor == 0 )
 800b7b8:	7883      	ldrb	r3, [r0, #2]
{
 800b7ba:	0004      	movs	r4, r0
    if( adrNext->Version.Fields.Minor == 0 )
 800b7bc:	42ab      	cmp	r3, r5
 800b7be:	d12b      	bne.n	800b818 <LoRaMacAdrCalcNext+0x6c>
    int8_t datarate = adrNext->Datarate;
 800b7c0:	2310      	movs	r3, #16
 800b7c2:	56c3      	ldrsb	r3, [r0, r3]
 800b7c4:	9301      	str	r3, [sp, #4]
    int8_t txPower = adrNext->TxPower;
 800b7c6:	2311      	movs	r3, #17
 800b7c8:	56c3      	ldrsb	r3, [r0, r3]
    int8_t datarate = adrNext->Datarate;
 800b7ca:	9f01      	ldr	r7, [sp, #4]
    int8_t txPower = adrNext->TxPower;
 800b7cc:	9303      	str	r3, [sp, #12]
    *adrAckCounter = adrNext->AdrAckCounter;
 800b7ce:	6883      	ldr	r3, [r0, #8]
 800b7d0:	6033      	str	r3, [r6, #0]
    if( adrNext->AdrEnabled == true )
 800b7d2:	7945      	ldrb	r5, [r0, #5]
 800b7d4:	2d00      	cmp	r5, #0
 800b7d6:	d01a      	beq.n	800b80e <LoRaMacAdrCalcNext+0x62>
        getPhy.Attribute = PHY_MIN_TX_DR;
 800b7d8:	2302      	movs	r3, #2
 800b7da:	aa06      	add	r2, sp, #24
 800b7dc:	7213      	strb	r3, [r2, #8]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800b7de:	7c83      	ldrb	r3, [r0, #18]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800b7e0:	a908      	add	r1, sp, #32
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800b7e2:	7293      	strb	r3, [r2, #10]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800b7e4:	7cc0      	ldrb	r0, [r0, #19]
 800b7e6:	f000 fdee 	bl	800c3c6 <RegionGetPhyParam>
        minTxDatarate = phyParam.Value;
 800b7ea:	b243      	sxtb	r3, r0
 800b7ec:	9302      	str	r3, [sp, #8]
        datarate = MAX( datarate, minTxDatarate );
 800b7ee:	466b      	mov	r3, sp
 800b7f0:	9a02      	ldr	r2, [sp, #8]
 800b7f2:	791f      	ldrb	r7, [r3, #4]
 800b7f4:	9b01      	ldr	r3, [sp, #4]
 800b7f6:	4293      	cmp	r3, r2
 800b7f8:	da01      	bge.n	800b7fe <LoRaMacAdrCalcNext+0x52>
 800b7fa:	466b      	mov	r3, sp
 800b7fc:	7a1f      	ldrb	r7, [r3, #8]
        if( datarate == minTxDatarate )
 800b7fe:	9b01      	ldr	r3, [sp, #4]
 800b800:	9a02      	ldr	r2, [sp, #8]
        datarate = MAX( datarate, minTxDatarate );
 800b802:	b27f      	sxtb	r7, r7
        if( datarate == minTxDatarate )
 800b804:	4293      	cmp	r3, r2
 800b806:	dc0a      	bgt.n	800b81e <LoRaMacAdrCalcNext+0x72>
            *adrAckCounter = 0;
 800b808:	2300      	movs	r3, #0
 800b80a:	6033      	str	r3, [r6, #0]
                        adrAckReq = false;
 800b80c:	2500      	movs	r5, #0
    *drOut = datarate;
 800b80e:	9b04      	ldr	r3, [sp, #16]
    *txPowOut = txPower;
 800b810:	9a03      	ldr	r2, [sp, #12]
    *drOut = datarate;
 800b812:	701f      	strb	r7, [r3, #0]
    *txPowOut = txPower;
 800b814:	9b05      	ldr	r3, [sp, #20]
 800b816:	701a      	strb	r2, [r3, #0]
}
 800b818:	0028      	movs	r0, r5
 800b81a:	b00d      	add	sp, #52	; 0x34
 800b81c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 800b81e:	2500      	movs	r5, #0
 800b820:	89a1      	ldrh	r1, [r4, #12]
 800b822:	68a2      	ldr	r2, [r4, #8]
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800b824:	89e3      	ldrh	r3, [r4, #14]
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 800b826:	428a      	cmp	r2, r1
 800b828:	416d      	adcs	r5, r5
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800b82a:	185b      	adds	r3, r3, r1
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 800b82c:	b2ed      	uxtb	r5, r5
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800b82e:	429a      	cmp	r2, r3
 800b830:	d3ed      	bcc.n	800b80e <LoRaMacAdrCalcNext+0x62>
                getPhy.Attribute = PHY_MAX_TX_POWER;
 800b832:	2308      	movs	r3, #8
 800b834:	ae08      	add	r6, sp, #32
 800b836:	7033      	strb	r3, [r6, #0]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800b838:	0031      	movs	r1, r6
 800b83a:	7ce0      	ldrb	r0, [r4, #19]
 800b83c:	f000 fdc3 	bl	800c3c6 <RegionGetPhyParam>
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 800b840:	89e1      	ldrh	r1, [r4, #14]
                txPower = phyParam.Value;
 800b842:	b243      	sxtb	r3, r0
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 800b844:	68a0      	ldr	r0, [r4, #8]
                txPower = phyParam.Value;
 800b846:	9303      	str	r3, [sp, #12]
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 800b848:	f7f4 fd0a 	bl	8000260 <__aeabi_uidivmod>
 800b84c:	2901      	cmp	r1, #1
 800b84e:	d1de      	bne.n	800b80e <LoRaMacAdrCalcNext+0x62>
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800b850:	2322      	movs	r3, #34	; 0x22
                    getPhy.Datarate = datarate;
 800b852:	7077      	strb	r7, [r6, #1]
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800b854:	7033      	strb	r3, [r6, #0]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800b856:	7ca3      	ldrb	r3, [r4, #18]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800b858:	0031      	movs	r1, r6
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800b85a:	70b3      	strb	r3, [r6, #2]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800b85c:	7ce0      	ldrb	r0, [r4, #19]
 800b85e:	f000 fdb2 	bl	800c3c6 <RegionGetPhyParam>
                    if( datarate == minTxDatarate )
 800b862:	9b02      	ldr	r3, [sp, #8]
                    datarate = phyParam.Value;
 800b864:	b247      	sxtb	r7, r0
                    if( datarate == minTxDatarate )
 800b866:	42bb      	cmp	r3, r7
 800b868:	d1d1      	bne.n	800b80e <LoRaMacAdrCalcNext+0x62>
                        if( adrNext->UpdateChanMask == true )
 800b86a:	7925      	ldrb	r5, [r4, #4]
 800b86c:	2d00      	cmp	r5, #0
 800b86e:	d0ce      	beq.n	800b80e <LoRaMacAdrCalcNext+0x62>
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800b870:	2302      	movs	r3, #2
 800b872:	a90a      	add	r1, sp, #40	; 0x28
 800b874:	710b      	strb	r3, [r1, #4]
                            RegionInitDefaults( adrNext->Region, &params );
 800b876:	7ce0      	ldrb	r0, [r4, #19]
 800b878:	f000 fdb8 	bl	800c3ec <RegionInitDefaults>
 800b87c:	e7c6      	b.n	800b80c <LoRaMacAdrCalcNext+0x60>
	...

0800b880 <NvmCtxCallback>:
/*
 * \brief Wrapper function for the NvmCtx
 */
static void NvmCtxCallback( void )
{
    if( CommandsNvmCtxChanged != NULL )
 800b880:	4b03      	ldr	r3, [pc, #12]	; (800b890 <NvmCtxCallback+0x10>)
{
 800b882:	b510      	push	{r4, lr}
    if( CommandsNvmCtxChanged != NULL )
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d000      	beq.n	800b88c <NvmCtxCallback+0xc>
    {
        CommandsNvmCtxChanged( );
 800b88a:	4798      	blx	r3
    }
}
 800b88c:	bd10      	pop	{r4, pc}
 800b88e:	46c0      	nop			; (mov r8, r8)
 800b890:	20000b54 	.word	0x20000b54

0800b894 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( LoRaMacCommandsNvmEvent commandsNvmCtxChanged )
{
 800b894:	b570      	push	{r4, r5, r6, lr}
    // Initialize with default
    memset1( ( uint8_t* )&NvmCtx, 0, sizeof( NvmCtx ) );
 800b896:	4d06      	ldr	r5, [pc, #24]	; (800b8b0 <LoRaMacCommandsInit+0x1c>)
{
 800b898:	0004      	movs	r4, r0
    memset1( ( uint8_t* )&NvmCtx, 0, sizeof( NvmCtx ) );
 800b89a:	22fc      	movs	r2, #252	; 0xfc
 800b89c:	0028      	movs	r0, r5
 800b89e:	2100      	movs	r1, #0
 800b8a0:	f001 fe00 	bl	800d4a4 <memset1>
    list->First = NULL;
 800b8a4:	2000      	movs	r0, #0

    LinkedListInit( &NvmCtx.MacCommandList );

    // Assign callback
    CommandsNvmCtxChanged = commandsNvmCtxChanged;
 800b8a6:	4b03      	ldr	r3, [pc, #12]	; (800b8b4 <LoRaMacCommandsInit+0x20>)
    list->First = NULL;
 800b8a8:	6028      	str	r0, [r5, #0]
    list->Last = NULL;
 800b8aa:	6068      	str	r0, [r5, #4]
    CommandsNvmCtxChanged = commandsNvmCtxChanged;
 800b8ac:	601c      	str	r4, [r3, #0]

    return LORAMAC_COMMANDS_SUCCESS;
}
 800b8ae:	bd70      	pop	{r4, r5, r6, pc}
 800b8b0:	20000b58 	.word	0x20000b58
 800b8b4:	20000b54 	.word	0x20000b54

0800b8b8 <LoRaMacCommandsRestoreNvmCtx>:

LoRaMacCommandStatus_t LoRaMacCommandsRestoreNvmCtx( void* commandsNvmCtx )
{
 800b8b8:	0001      	movs	r1, r0
 800b8ba:	b510      	push	{r4, lr}
        memcpy1( ( uint8_t* )&NvmCtx, ( uint8_t* )commandsNvmCtx, sizeof( NvmCtx ) );
        return LORAMAC_COMMANDS_SUCCESS;
    }
    else
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800b8bc:	2001      	movs	r0, #1
    if( commandsNvmCtx != NULL )
 800b8be:	2900      	cmp	r1, #0
 800b8c0:	d004      	beq.n	800b8cc <LoRaMacCommandsRestoreNvmCtx+0x14>
        memcpy1( ( uint8_t* )&NvmCtx, ( uint8_t* )commandsNvmCtx, sizeof( NvmCtx ) );
 800b8c2:	4803      	ldr	r0, [pc, #12]	; (800b8d0 <LoRaMacCommandsRestoreNvmCtx+0x18>)
 800b8c4:	22fc      	movs	r2, #252	; 0xfc
 800b8c6:	f001 fdd7 	bl	800d478 <memcpy1>
        return LORAMAC_COMMANDS_SUCCESS;
 800b8ca:	2000      	movs	r0, #0
    }
}
 800b8cc:	bd10      	pop	{r4, pc}
 800b8ce:	46c0      	nop			; (mov r8, r8)
 800b8d0:	20000b58 	.word	0x20000b58

0800b8d4 <LoRaMacCommandsGetNvmCtx>:

void* LoRaMacCommandsGetNvmCtx( size_t* commandsNvmCtxSize )
{
    *commandsNvmCtxSize = sizeof( NvmCtx );
 800b8d4:	23fc      	movs	r3, #252	; 0xfc
 800b8d6:	6003      	str	r3, [r0, #0]
    return &NvmCtx;
}
 800b8d8:	4800      	ldr	r0, [pc, #0]	; (800b8dc <LoRaMacCommandsGetNvmCtx+0x8>)
 800b8da:	4770      	bx	lr
 800b8dc:	20000b58 	.word	0x20000b58

0800b8e0 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 800b8e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b8e2:	0015      	movs	r5, r2
    if( payload == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800b8e4:	2701      	movs	r7, #1
{
 800b8e6:	9001      	str	r0, [sp, #4]
    if( payload == NULL )
 800b8e8:	2900      	cmp	r1, #0
 800b8ea:	d03b      	beq.n	800b964 <LoRaMacCommandsAddCmd+0x84>
 800b8ec:	2400      	movs	r4, #0
 800b8ee:	4b21      	ldr	r3, [pc, #132]	; (800b974 <LoRaMacCommandsAddCmd+0x94>)
    while( IsSlotFree( ( const MacCommand_t* )&NvmCtx.MacCommandSlots[itr] ) == false )
 800b8f0:	0122      	lsls	r2, r4, #4
 800b8f2:	0018      	movs	r0, r3
 800b8f4:	4694      	mov	ip, r2
 800b8f6:	001a      	movs	r2, r3
 800b8f8:	3010      	adds	r0, #16
        if( mem[size] != 0x00 )
 800b8fa:	7817      	ldrb	r7, [r2, #0]
 800b8fc:	2f00      	cmp	r7, #0
 800b8fe:	d133      	bne.n	800b968 <LoRaMacCommandsAddCmd+0x88>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800b900:	3201      	adds	r2, #1
 800b902:	4282      	cmp	r2, r0
 800b904:	d1f9      	bne.n	800b8fa <LoRaMacCommandsAddCmd+0x1a>
    if( list->First == NULL )
 800b906:	481c      	ldr	r0, [pc, #112]	; (800b978 <LoRaMacCommandsAddCmd+0x98>)
 800b908:	6802      	ldr	r2, [r0, #0]
 800b90a:	2a00      	cmp	r2, #0
 800b90c:	d100      	bne.n	800b910 <LoRaMacCommandsAddCmd+0x30>
        list->First = element;
 800b90e:	6003      	str	r3, [r0, #0]
    if( list->Last )
 800b910:	6842      	ldr	r2, [r0, #4]
 800b912:	2a00      	cmp	r2, #0
 800b914:	d000      	beq.n	800b918 <LoRaMacCommandsAddCmd+0x38>
        list->Last->Next = element;
 800b916:	6013      	str	r3, [r2, #0]
    list->Last = element;
 800b918:	6043      	str	r3, [r0, #4]
    element->Next = NULL;
 800b91a:	0122      	lsls	r2, r4, #4
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
 800b91c:	9b01      	ldr	r3, [sp, #4]
    element->Next = NULL;
 800b91e:	1882      	adds	r2, r0, r2
    newCmd->PayloadSize = payloadSize;
 800b920:	3401      	adds	r4, #1
    newCmd->CID = cid;
 800b922:	7313      	strb	r3, [r2, #12]
    newCmd->PayloadSize = payloadSize;
 800b924:	0123      	lsls	r3, r4, #4
 800b926:	50c5      	str	r5, [r0, r3]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800b928:	4663      	mov	r3, ip
    element->Next = NULL;
 800b92a:	2600      	movs	r6, #0
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800b92c:	330d      	adds	r3, #13
    element->Next = NULL;
 800b92e:	6096      	str	r6, [r2, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800b930:	18c0      	adds	r0, r0, r3
 800b932:	b2aa      	uxth	r2, r5
 800b934:	f001 fda0 	bl	800d478 <memcpy1>
    switch( cid )
 800b938:	9b01      	ldr	r3, [sp, #4]
            return true;
 800b93a:	2201      	movs	r2, #1
    switch( cid )
 800b93c:	2b05      	cmp	r3, #5
 800b93e:	d006      	beq.n	800b94e <LoRaMacCommandsAddCmd+0x6e>
 800b940:	0018      	movs	r0, r3
 800b942:	2302      	movs	r3, #2
 800b944:	3808      	subs	r0, #8
 800b946:	b2c0      	uxtb	r0, r0
 800b948:	4283      	cmp	r3, r0
 800b94a:	4176      	adcs	r6, r6
 800b94c:	b2f2      	uxtb	r2, r6
    newCmd->IsSticky = IsSticky( cid );
 800b94e:	4b0a      	ldr	r3, [pc, #40]	; (800b978 <LoRaMacCommandsAddCmd+0x98>)
 800b950:	0124      	lsls	r4, r4, #4
 800b952:	191c      	adds	r4, r3, r4

    NvmCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800b954:	33f8      	adds	r3, #248	; 0xf8
    newCmd->IsSticky = IsSticky( cid );
 800b956:	7122      	strb	r2, [r4, #4]
    NvmCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800b958:	681a      	ldr	r2, [r3, #0]
 800b95a:	3201      	adds	r2, #1
 800b95c:	1955      	adds	r5, r2, r5
 800b95e:	601d      	str	r5, [r3, #0]

    NvmCtxCallback( );
 800b960:	f7ff ff8e 	bl	800b880 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800b964:	0038      	movs	r0, r7
 800b966:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if( itr == NUM_OF_MAC_COMMANDS )
 800b968:	3401      	adds	r4, #1
 800b96a:	0003      	movs	r3, r0
 800b96c:	2c0f      	cmp	r4, #15
 800b96e:	d1bf      	bne.n	800b8f0 <LoRaMacCommandsAddCmd+0x10>
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800b970:	2702      	movs	r7, #2
 800b972:	e7f7      	b.n	800b964 <LoRaMacCommandsAddCmd+0x84>
 800b974:	20000b60 	.word	0x20000b60
 800b978:	20000b58 	.word	0x20000b58

0800b97c <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 800b97c:	b510      	push	{r4, lr}
    if( macCmd == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800b97e:	2401      	movs	r4, #1
    if( macCmd == NULL )
 800b980:	2800      	cmp	r0, #0
 800b982:	d023      	beq.n	800b9cc <LoRaMacCommandsRemoveCmd+0x50>
    curElement = list->First;
 800b984:	4b12      	ldr	r3, [pc, #72]	; (800b9d0 <LoRaMacCommandsRemoveCmd+0x54>)
 800b986:	681a      	ldr	r2, [r3, #0]
    if( element != curElement )
 800b988:	4290      	cmp	r0, r2
 800b98a:	d104      	bne.n	800b996 <LoRaMacCommandsRemoveCmd+0x1a>
        list->First = element->Next;
 800b98c:	6802      	ldr	r2, [r0, #0]
 800b98e:	601a      	str	r2, [r3, #0]
 800b990:	2200      	movs	r2, #0
 800b992:	e005      	b.n	800b9a0 <LoRaMacCommandsRemoveCmd+0x24>
 800b994:	000a      	movs	r2, r1
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800b996:	2a00      	cmp	r2, #0
 800b998:	d002      	beq.n	800b9a0 <LoRaMacCommandsRemoveCmd+0x24>
 800b99a:	6811      	ldr	r1, [r2, #0]
 800b99c:	4288      	cmp	r0, r1
 800b99e:	d1f9      	bne.n	800b994 <LoRaMacCommandsRemoveCmd+0x18>
    if( list->Last == element )
 800b9a0:	6859      	ldr	r1, [r3, #4]
 800b9a2:	4288      	cmp	r0, r1
 800b9a4:	d100      	bne.n	800b9a8 <LoRaMacCommandsRemoveCmd+0x2c>
        list->Last = PrevElement;
 800b9a6:	605a      	str	r2, [r3, #4]
    if( PrevElement != NULL )
 800b9a8:	2a00      	cmp	r2, #0
 800b9aa:	d001      	beq.n	800b9b0 <LoRaMacCommandsRemoveCmd+0x34>
        PrevElement->Next = element->Next;
 800b9ac:	6801      	ldr	r1, [r0, #0]
 800b9ae:	6011      	str	r1, [r2, #0]
    element->Next = NULL;
 800b9b0:	2400      	movs	r4, #0
    if( LinkedListRemove( &NvmCtx.MacCommandList, macCmd ) == false )
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    NvmCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800b9b2:	33f8      	adds	r3, #248	; 0xf8
 800b9b4:	681a      	ldr	r2, [r3, #0]
 800b9b6:	6881      	ldr	r1, [r0, #8]
 800b9b8:	3a01      	subs	r2, #1
 800b9ba:	1a52      	subs	r2, r2, r1
    element->Next = NULL;
 800b9bc:	6004      	str	r4, [r0, #0]
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800b9be:	0021      	movs	r1, r4
    NvmCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800b9c0:	601a      	str	r2, [r3, #0]
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800b9c2:	2210      	movs	r2, #16
 800b9c4:	f001 fd6e 	bl	800d4a4 <memset1>
    if( FreeMacCommandSlot( macCmd ) == false )
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    NvmCtxCallback( );
 800b9c8:	f7ff ff5a 	bl	800b880 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800b9cc:	0020      	movs	r0, r4
 800b9ce:	bd10      	pop	{r4, pc}
 800b9d0:	20000b58 	.word	0x20000b58

0800b9d4 <LoRaMacCommandsRemoveNoneStickyCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 800b9d4:	4b08      	ldr	r3, [pc, #32]	; (800b9f8 <LoRaMacCommandsRemoveNoneStickyCmds+0x24>)
{
 800b9d6:	b570      	push	{r4, r5, r6, lr}
    curElement = NvmCtx.MacCommandList.First;
 800b9d8:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800b9da:	2c00      	cmp	r4, #0
 800b9dc:	d103      	bne.n	800b9e6 <LoRaMacCommandsRemoveNoneStickyCmds+0x12>
        {
            curElement = curElement->Next;
        }
    }

    NvmCtxCallback( );
 800b9de:	f7ff ff4f 	bl	800b880 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800b9e2:	0020      	movs	r0, r4
 800b9e4:	bd70      	pop	{r4, r5, r6, pc}
        if( curElement->IsSticky == false )
 800b9e6:	7b23      	ldrb	r3, [r4, #12]
 800b9e8:	6825      	ldr	r5, [r4, #0]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d102      	bne.n	800b9f4 <LoRaMacCommandsRemoveNoneStickyCmds+0x20>
            LoRaMacCommandsRemoveCmd( curElement );
 800b9ee:	0020      	movs	r0, r4
 800b9f0:	f7ff ffc4 	bl	800b97c <LoRaMacCommandsRemoveCmd>
{
 800b9f4:	002c      	movs	r4, r5
 800b9f6:	e7f0      	b.n	800b9da <LoRaMacCommandsRemoveNoneStickyCmds+0x6>
 800b9f8:	20000b58 	.word	0x20000b58

0800b9fc <LoRaMacCommandsRemoveStickyAnsCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = NvmCtx.MacCommandList.First;
 800b9fc:	4b0a      	ldr	r3, [pc, #40]	; (800ba28 <LoRaMacCommandsRemoveStickyAnsCmds+0x2c>)
{
 800b9fe:	b570      	push	{r4, r5, r6, lr}
    curElement = NvmCtx.MacCommandList.First;
 800ba00:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800ba02:	2c00      	cmp	r4, #0
 800ba04:	d103      	bne.n	800ba0e <LoRaMacCommandsRemoveStickyAnsCmds+0x12>
            LoRaMacCommandsRemoveCmd( curElement );
        }
        curElement = nexElement;
    }

    NvmCtxCallback( );
 800ba06:	f7ff ff3b 	bl	800b880 <NvmCtxCallback>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800ba0a:	0020      	movs	r0, r4
 800ba0c:	bd70      	pop	{r4, r5, r6, pc}
        if( IsSticky( curElement->CID ) == true )
 800ba0e:	7923      	ldrb	r3, [r4, #4]
        nexElement = curElement->Next;
 800ba10:	6825      	ldr	r5, [r4, #0]
    switch( cid )
 800ba12:	2b05      	cmp	r3, #5
 800ba14:	d002      	beq.n	800ba1c <LoRaMacCommandsRemoveStickyAnsCmds+0x20>
 800ba16:	3b08      	subs	r3, #8
 800ba18:	2b02      	cmp	r3, #2
 800ba1a:	d802      	bhi.n	800ba22 <LoRaMacCommandsRemoveStickyAnsCmds+0x26>
            LoRaMacCommandsRemoveCmd( curElement );
 800ba1c:	0020      	movs	r0, r4
 800ba1e:	f7ff ffad 	bl	800b97c <LoRaMacCommandsRemoveCmd>
{
 800ba22:	002c      	movs	r4, r5
 800ba24:	e7ed      	b.n	800ba02 <LoRaMacCommandsRemoveStickyAnsCmds+0x6>
 800ba26:	46c0      	nop			; (mov r8, r8)
 800ba28:	20000b58 	.word	0x20000b58

0800ba2c <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 800ba2c:	0003      	movs	r3, r0
    if( size == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800ba2e:	2001      	movs	r0, #1
    if( size == NULL )
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d004      	beq.n	800ba3e <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    }
    *size = NvmCtx.SerializedCmdsSize;
    return LORAMAC_COMMANDS_SUCCESS;
 800ba34:	2000      	movs	r0, #0
    *size = NvmCtx.SerializedCmdsSize;
 800ba36:	4a02      	ldr	r2, [pc, #8]	; (800ba40 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 800ba38:	32f8      	adds	r2, #248	; 0xf8
 800ba3a:	6812      	ldr	r2, [r2, #0]
 800ba3c:	601a      	str	r2, [r3, #0]
}
 800ba3e:	4770      	bx	lr
 800ba40:	20000b58 	.word	0x20000b58

0800ba44 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 800ba44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ba46:	000f      	movs	r7, r1
 800ba48:	9001      	str	r0, [sp, #4]
 800ba4a:	0016      	movs	r6, r2
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800ba4c:	2001      	movs	r0, #1
    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800ba4e:	2a00      	cmp	r2, #0
 800ba50:	d00a      	beq.n	800ba68 <LoRaMacCommandsSerializeCmds+0x24>
 800ba52:	2900      	cmp	r1, #0
 800ba54:	d008      	beq.n	800ba68 <LoRaMacCommandsSerializeCmds+0x24>
    MacCommand_t* curElement = NvmCtx.MacCommandList.First;
 800ba56:	4b13      	ldr	r3, [pc, #76]	; (800baa4 <LoRaMacCommandsSerializeCmds+0x60>)
 800ba58:	681c      	ldr	r4, [r3, #0]
    uint8_t itr = 0;
 800ba5a:	2300      	movs	r3, #0
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
 800ba5c:	2c00      	cmp	r4, #0
 800ba5e:	d104      	bne.n	800ba6a <LoRaMacCommandsSerializeCmds+0x26>
        LoRaMacCommandsRemoveCmd( curElement );
        curElement = nextElement;
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 800ba60:	0038      	movs	r0, r7
 800ba62:	f7ff ffe3 	bl	800ba2c <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 800ba66:	2000      	movs	r0, #0
}
 800ba68:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 800ba6a:	9a01      	ldr	r2, [sp, #4]
 800ba6c:	1ad1      	subs	r1, r2, r3
 800ba6e:	68a2      	ldr	r2, [r4, #8]
 800ba70:	3201      	adds	r2, #1
 800ba72:	4291      	cmp	r1, r2
 800ba74:	d30e      	bcc.n	800ba94 <LoRaMacCommandsSerializeCmds+0x50>
            buffer[itr++] = curElement->CID;
 800ba76:	7922      	ldrb	r2, [r4, #4]
 800ba78:	1c5d      	adds	r5, r3, #1
 800ba7a:	54f2      	strb	r2, [r6, r3]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800ba7c:	68a3      	ldr	r3, [r4, #8]
            buffer[itr++] = curElement->CID;
 800ba7e:	b2ed      	uxtb	r5, r5
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800ba80:	b29a      	uxth	r2, r3
 800ba82:	1d61      	adds	r1, r4, #5
 800ba84:	1970      	adds	r0, r6, r5
 800ba86:	f001 fcf7 	bl	800d478 <memcpy1>
            itr += curElement->PayloadSize;
 800ba8a:	68a3      	ldr	r3, [r4, #8]
        curElement = curElement->Next;
 800ba8c:	6824      	ldr	r4, [r4, #0]
            itr += curElement->PayloadSize;
 800ba8e:	18ed      	adds	r5, r5, r3
 800ba90:	b2eb      	uxtb	r3, r5
        curElement = curElement->Next;
 800ba92:	e7e3      	b.n	800ba5c <LoRaMacCommandsSerializeCmds+0x18>
        nextElement = curElement->Next;
 800ba94:	0020      	movs	r0, r4
 800ba96:	6824      	ldr	r4, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
 800ba98:	f7ff ff70 	bl	800b97c <LoRaMacCommandsRemoveCmd>
    while( curElement != NULL )
 800ba9c:	2c00      	cmp	r4, #0
 800ba9e:	d1f9      	bne.n	800ba94 <LoRaMacCommandsSerializeCmds+0x50>
 800baa0:	e7de      	b.n	800ba60 <LoRaMacCommandsSerializeCmds+0x1c>
 800baa2:	46c0      	nop			; (mov r8, r8)
 800baa4:	20000b58 	.word	0x20000b58

0800baa8 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 800baa8:	0003      	movs	r3, r0
    if( cmdsPending == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800baaa:	2001      	movs	r0, #1
    if( cmdsPending == NULL )
 800baac:	2b00      	cmp	r3, #0
 800baae:	d00b      	beq.n	800bac8 <LoRaMacCommandsStickyCmdsPending+0x20>
    }
    MacCommand_t* curElement;
    curElement = NvmCtx.MacCommandList.First;
 800bab0:	4a07      	ldr	r2, [pc, #28]	; (800bad0 <LoRaMacCommandsStickyCmdsPending+0x28>)
 800bab2:	6810      	ldr	r0, [r2, #0]

    *cmdsPending = false;
 800bab4:	2200      	movs	r2, #0
 800bab6:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800bab8:	2800      	cmp	r0, #0
 800baba:	d005      	beq.n	800bac8 <LoRaMacCommandsStickyCmdsPending+0x20>
    {
        if( curElement->IsSticky == true )
 800babc:	7b02      	ldrb	r2, [r0, #12]
 800babe:	2a00      	cmp	r2, #0
 800bac0:	d003      	beq.n	800baca <LoRaMacCommandsStickyCmdsPending+0x22>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 800bac2:	2201      	movs	r2, #1
            return LORAMAC_COMMANDS_SUCCESS;
 800bac4:	2000      	movs	r0, #0
            *cmdsPending = true;
 800bac6:	701a      	strb	r2, [r3, #0]
        }
        curElement = curElement->Next;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800bac8:	4770      	bx	lr
        curElement = curElement->Next;
 800baca:	6800      	ldr	r0, [r0, #0]
 800bacc:	e7f4      	b.n	800bab8 <LoRaMacCommandsStickyCmdsPending+0x10>
 800bace:	46c0      	nop			; (mov r8, r8)
 800bad0:	20000b58 	.word	0x20000b58

0800bad4 <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
 800bad4:	3802      	subs	r0, #2
 800bad6:	b2c3      	uxtb	r3, r0
{
 800bad8:	2000      	movs	r0, #0
 800bada:	2b11      	cmp	r3, #17
 800badc:	d801      	bhi.n	800bae2 <LoRaMacCommandsGetCmdSize+0xe>
 800bade:	4a01      	ldr	r2, [pc, #4]	; (800bae4 <LoRaMacCommandsGetCmdSize+0x10>)
 800bae0:	5cd0      	ldrb	r0, [r2, r3]
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
 800bae2:	4770      	bx	lr
 800bae4:	0800fbef 	.word	0x0800fbef

0800bae8 <GetElement.isra.0>:
        return true;
    }
    return false;
}

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
 800bae8:	b570      	push	{r4, r5, r6, lr}
{
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 800baea:	4b0d      	ldr	r3, [pc, #52]	; (800bb20 <GetElement.isra.0+0x38>)
static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
 800baec:	0004      	movs	r4, r0
 800baee:	0008      	movs	r0, r1
    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 800baf0:	6919      	ldr	r1, [r3, #16]
 800baf2:	7d0a      	ldrb	r2, [r1, #20]
    if( count == 0 )
 800baf4:	2a00      	cmp	r2, #0
 800baf6:	d010      	beq.n	800bb1a <GetElement.isra.0+0x32>
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800baf8:	000d      	movs	r5, r1
 800bafa:	2300      	movs	r3, #0
 800bafc:	3510      	adds	r5, #16
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt; elementCnt++ )
    {
        if( element->Request == request )
 800bafe:	7806      	ldrb	r6, [r0, #0]
 800bb00:	42a6      	cmp	r6, r4
 800bb02:	d007      	beq.n	800bb14 <GetElement.isra.0+0x2c>
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800bb04:	42a8      	cmp	r0, r5
 800bb06:	d106      	bne.n	800bb16 <GetElement.isra.0+0x2e>
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800bb08:	0008      	movs	r0, r1
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt; elementCnt++ )
 800bb0a:	3301      	adds	r3, #1
 800bb0c:	b2db      	uxtb	r3, r3
 800bb0e:	429a      	cmp	r2, r3
 800bb10:	d1f5      	bne.n	800bafe <GetElement.isra.0+0x16>
        return NULL;
 800bb12:	2000      	movs	r0, #0
        }
        element = IncreaseBufferPointer( element );
    }

    return NULL;
}
 800bb14:	bd70      	pop	{r4, r5, r6, pc}
        bufferPointer++;
 800bb16:	3004      	adds	r0, #4
 800bb18:	e7f7      	b.n	800bb0a <GetElement.isra.0+0x22>
        return NULL;
 800bb1a:	0010      	movs	r0, r2
 800bb1c:	e7fa      	b.n	800bb14 <GetElement.isra.0+0x2c>
 800bb1e:	46c0      	nop			; (mov r8, r8)
 800bb20:	20000c54 	.word	0x20000c54

0800bb24 <LoRaMacConfirmQueueInit>:

    // Assign nvm context
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;

    // Init counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt = 0;
 800bb24:	2300      	movs	r3, #0
{
 800bb26:	b570      	push	{r4, r5, r6, lr}
    ConfirmQueueCtx.Primitives = primitives;
 800bb28:	4c08      	ldr	r4, [pc, #32]	; (800bb4c <LoRaMacConfirmQueueInit+0x28>)
{
 800bb2a:	000d      	movs	r5, r1
    ConfirmQueueCtx.Primitives = primitives;
 800bb2c:	6020      	str	r0, [r4, #0]
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;
 800bb2e:	4808      	ldr	r0, [pc, #32]	; (800bb50 <LoRaMacConfirmQueueInit+0x2c>)

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;

    memset1( ( uint8_t* )ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue ) );
 800bb30:	2214      	movs	r2, #20
 800bb32:	21ff      	movs	r1, #255	; 0xff
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt = 0;
 800bb34:	7503      	strb	r3, [r0, #20]
    ConfirmQueueCtx.ConfirmQueueNvmCtx = &ConfirmQueueNvmCtx;
 800bb36:	6120      	str	r0, [r4, #16]
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800bb38:	6060      	str	r0, [r4, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800bb3a:	60a0      	str	r0, [r4, #8]
    memset1( ( uint8_t* )ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue ) );
 800bb3c:	f001 fcb2 	bl	800d4a4 <memset1>

    // Common status
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800bb40:	2301      	movs	r3, #1
 800bb42:	6922      	ldr	r2, [r4, #16]

    // Assign callback
    ConfirmQueueCtx.LoRaMacConfirmQueueNvmEvent = confirmQueueNvmCtxChanged;
 800bb44:	60e5      	str	r5, [r4, #12]
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800bb46:	7553      	strb	r3, [r2, #21]
}
 800bb48:	bd70      	pop	{r4, r5, r6, pc}
 800bb4a:	46c0      	nop			; (mov r8, r8)
 800bb4c:	20000c54 	.word	0x20000c54
 800bb50:	20000c68 	.word	0x20000c68

0800bb54 <LoRaMacConfirmQueueRestoreNvmCtx>:

bool LoRaMacConfirmQueueRestoreNvmCtx( void* confirmQueueNvmCtx )
{
 800bb54:	0001      	movs	r1, r0
        memcpy1( ( uint8_t* )&ConfirmQueueNvmCtx, ( uint8_t* ) confirmQueueNvmCtx, sizeof( ConfirmQueueNvmCtx ) );
        return true;
    }
    else
    {
        return false;
 800bb56:	2000      	movs	r0, #0
{
 800bb58:	b510      	push	{r4, lr}
    if( confirmQueueNvmCtx != NULL )
 800bb5a:	4281      	cmp	r1, r0
 800bb5c:	d004      	beq.n	800bb68 <LoRaMacConfirmQueueRestoreNvmCtx+0x14>
        memcpy1( ( uint8_t* )&ConfirmQueueNvmCtx, ( uint8_t* ) confirmQueueNvmCtx, sizeof( ConfirmQueueNvmCtx ) );
 800bb5e:	4803      	ldr	r0, [pc, #12]	; (800bb6c <LoRaMacConfirmQueueRestoreNvmCtx+0x18>)
 800bb60:	2216      	movs	r2, #22
 800bb62:	f001 fc89 	bl	800d478 <memcpy1>
        return true;
 800bb66:	2001      	movs	r0, #1
    }
}
 800bb68:	bd10      	pop	{r4, pc}
 800bb6a:	46c0      	nop			; (mov r8, r8)
 800bb6c:	20000c68 	.word	0x20000c68

0800bb70 <LoRaMacConfirmQueueGetNvmCtx>:

void* LoRaMacConfirmQueueGetNvmCtx( size_t* confirmQueueNvmCtxSize )
{
    *confirmQueueNvmCtxSize = sizeof( ConfirmQueueNvmCtx );
 800bb70:	2316      	movs	r3, #22
 800bb72:	6003      	str	r3, [r0, #0]
    return &ConfirmQueueNvmCtx;
}
 800bb74:	4800      	ldr	r0, [pc, #0]	; (800bb78 <LoRaMacConfirmQueueGetNvmCtx+0x8>)
 800bb76:	4770      	bx	lr
 800bb78:	20000c68 	.word	0x20000c68

0800bb7c <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 800bb7c:	b510      	push	{r4, lr}
    if( IsListFull( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 800bb7e:	4c0e      	ldr	r4, [pc, #56]	; (800bbb8 <LoRaMacConfirmQueueAdd+0x3c>)
{
 800bb80:	0001      	movs	r1, r0
    if( IsListFull( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 800bb82:	6922      	ldr	r2, [r4, #16]
    {
        // Protect the buffer against overwrites
        return false;
 800bb84:	2000      	movs	r0, #0
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800bb86:	7d13      	ldrb	r3, [r2, #20]
 800bb88:	2b04      	cmp	r3, #4
 800bb8a:	d813      	bhi.n	800bbb4 <LoRaMacConfirmQueueAdd+0x38>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800bb8c:	7808      	ldrb	r0, [r1, #0]
 800bb8e:	68a3      	ldr	r3, [r4, #8]
 800bb90:	7018      	strb	r0, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 800bb92:	7848      	ldrb	r0, [r1, #1]
 800bb94:	7058      	strb	r0, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800bb96:	78c9      	ldrb	r1, [r1, #3]
        bufferPointer++;
 800bb98:	1d18      	adds	r0, r3, #4
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800bb9a:	70d9      	strb	r1, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 800bb9c:	2100      	movs	r1, #0
 800bb9e:	7099      	strb	r1, [r3, #2]
    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt++;
 800bba0:	7d11      	ldrb	r1, [r2, #20]
 800bba2:	3101      	adds	r1, #1
 800bba4:	7511      	strb	r1, [r2, #20]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800bba6:	0011      	movs	r1, r2
 800bba8:	3110      	adds	r1, #16
 800bbaa:	428b      	cmp	r3, r1
 800bbac:	d100      	bne.n	800bbb0 <LoRaMacConfirmQueueAdd+0x34>
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800bbae:	0010      	movs	r0, r2
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800bbb0:	60a0      	str	r0, [r4, #8]

    return true;
 800bbb2:	2001      	movs	r0, #1
}
 800bbb4:	bd10      	pop	{r4, pc}
 800bbb6:	46c0      	nop			; (mov r8, r8)
 800bbb8:	20000c54 	.word	0x20000c54

0800bbbc <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 800bbbc:	b510      	push	{r4, lr}
    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 800bbbe:	4908      	ldr	r1, [pc, #32]	; (800bbe0 <LoRaMacConfirmQueueRemoveFirst+0x24>)
 800bbc0:	690a      	ldr	r2, [r1, #16]
 800bbc2:	7d13      	ldrb	r3, [r2, #20]
    {
        return false;
 800bbc4:	1e18      	subs	r0, r3, #0
    if( count == 0 )
 800bbc6:	d00a      	beq.n	800bbde <LoRaMacConfirmQueueRemoveFirst+0x22>
    }

    // Increase counter
    ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt--;
 800bbc8:	3b01      	subs	r3, #1
 800bbca:	7513      	strb	r3, [r2, #20]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800bbcc:	0013      	movs	r3, r2
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800bbce:	684c      	ldr	r4, [r1, #4]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800bbd0:	3310      	adds	r3, #16
        bufferPointer++;
 800bbd2:	1d20      	adds	r0, r4, #4
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800bbd4:	429c      	cmp	r4, r3
 800bbd6:	d100      	bne.n	800bbda <LoRaMacConfirmQueueRemoveFirst+0x1e>
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800bbd8:	0010      	movs	r0, r2
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800bbda:	6048      	str	r0, [r1, #4]

    return true;
 800bbdc:	2001      	movs	r0, #1
}
 800bbde:	bd10      	pop	{r4, pc}
 800bbe0:	20000c54 	.word	0x20000c54

0800bbe4 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 800bbe4:	b510      	push	{r4, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == false )
 800bbe6:	4b08      	ldr	r3, [pc, #32]	; (800bc08 <LoRaMacConfirmQueueSetStatus+0x24>)
{
 800bbe8:	0004      	movs	r4, r0
    if( count == 0 )
 800bbea:	691a      	ldr	r2, [r3, #16]
{
 800bbec:	0008      	movs	r0, r1
    if( count == 0 )
 800bbee:	7d12      	ldrb	r2, [r2, #20]
 800bbf0:	2a00      	cmp	r2, #0
 800bbf2:	d007      	beq.n	800bc04 <LoRaMacConfirmQueueSetStatus+0x20>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800bbf4:	6859      	ldr	r1, [r3, #4]
 800bbf6:	f7ff ff77 	bl	800bae8 <GetElement.isra.0>
        if( element != NULL )
 800bbfa:	2800      	cmp	r0, #0
 800bbfc:	d002      	beq.n	800bc04 <LoRaMacConfirmQueueSetStatus+0x20>
        {
            element->Status = status;
            element->ReadyToHandle = true;
 800bbfe:	2301      	movs	r3, #1
            element->Status = status;
 800bc00:	7044      	strb	r4, [r0, #1]
            element->ReadyToHandle = true;
 800bc02:	7083      	strb	r3, [r0, #2]
        }
    }
}
 800bc04:	bd10      	pop	{r4, pc}
 800bc06:	46c0      	nop			; (mov r8, r8)
 800bc08:	20000c54 	.word	0x20000c54

0800bc0c <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 800bc0c:	b510      	push	{r4, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == false )
 800bc0e:	4b07      	ldr	r3, [pc, #28]	; (800bc2c <LoRaMacConfirmQueueGetStatus+0x20>)
    if( count == 0 )
 800bc10:	691a      	ldr	r2, [r3, #16]
 800bc12:	7d11      	ldrb	r1, [r2, #20]
        if( element != NULL )
        {
            return element->Status;
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800bc14:	2201      	movs	r2, #1
    if( count == 0 )
 800bc16:	2900      	cmp	r1, #0
 800bc18:	d006      	beq.n	800bc28 <LoRaMacConfirmQueueGetStatus+0x1c>
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800bc1a:	6859      	ldr	r1, [r3, #4]
 800bc1c:	f7ff ff64 	bl	800bae8 <GetElement.isra.0>
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800bc20:	2201      	movs	r2, #1
        if( element != NULL )
 800bc22:	2800      	cmp	r0, #0
 800bc24:	d000      	beq.n	800bc28 <LoRaMacConfirmQueueGetStatus+0x1c>
            return element->Status;
 800bc26:	7842      	ldrb	r2, [r0, #1]
}
 800bc28:	0010      	movs	r0, r2
 800bc2a:	bd10      	pop	{r4, pc}
 800bc2c:	20000c54 	.word	0x20000c54

0800bc30 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 800bc30:	b570      	push	{r4, r5, r6, lr}
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800bc32:	490c      	ldr	r1, [pc, #48]	; (800bc64 <LoRaMacConfirmQueueSetStatusCmn+0x34>)

    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = status;
 800bc34:	690a      	ldr	r2, [r1, #16]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800bc36:	684b      	ldr	r3, [r1, #4]
    if( count == 0 )
 800bc38:	7d14      	ldrb	r4, [r2, #20]
    ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus = status;
 800bc3a:	7550      	strb	r0, [r2, #21]
    if( count == 0 )
 800bc3c:	2c00      	cmp	r4, #0
 800bc3e:	d00d      	beq.n	800bc5c <LoRaMacConfirmQueueSetStatusCmn+0x2c>
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800bc40:	0014      	movs	r4, r2
            element->Status = status;
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
            {
                element->ReadyToHandle = true;
 800bc42:	2501      	movs	r5, #1
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
 800bc44:	6889      	ldr	r1, [r1, #8]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800bc46:	3410      	adds	r4, #16
            if( element->RestrictCommonReadyToHandle == false )
 800bc48:	78de      	ldrb	r6, [r3, #3]
            element->Status = status;
 800bc4a:	7058      	strb	r0, [r3, #1]
            if( element->RestrictCommonReadyToHandle == false )
 800bc4c:	2e00      	cmp	r6, #0
 800bc4e:	d100      	bne.n	800bc52 <LoRaMacConfirmQueueSetStatusCmn+0x22>
                element->ReadyToHandle = true;
 800bc50:	709d      	strb	r5, [r3, #2]
    if( bufferPointer == &ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800bc52:	42a3      	cmp	r3, r4
 800bc54:	d103      	bne.n	800bc5e <LoRaMacConfirmQueueSetStatusCmn+0x2e>
        bufferPointer = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueue;
 800bc56:	0013      	movs	r3, r2
        }while( element != ConfirmQueueCtx.BufferEnd );
 800bc58:	4299      	cmp	r1, r3
 800bc5a:	d1f5      	bne.n	800bc48 <LoRaMacConfirmQueueSetStatusCmn+0x18>
    }
}
 800bc5c:	bd70      	pop	{r4, r5, r6, pc}
        bufferPointer++;
 800bc5e:	3304      	adds	r3, #4
 800bc60:	e7fa      	b.n	800bc58 <LoRaMacConfirmQueueSetStatusCmn+0x28>
 800bc62:	46c0      	nop			; (mov r8, r8)
 800bc64:	20000c54 	.word	0x20000c54

0800bc68 <LoRaMacConfirmQueueIsCmdActive>:
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800bc68:	4b04      	ldr	r3, [pc, #16]	; (800bc7c <LoRaMacConfirmQueueIsCmdActive+0x14>)
{
 800bc6a:	b510      	push	{r4, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800bc6c:	6859      	ldr	r1, [r3, #4]
 800bc6e:	f7ff ff3b 	bl	800bae8 <GetElement.isra.0>
 800bc72:	1e43      	subs	r3, r0, #1
 800bc74:	4198      	sbcs	r0, r3
    {
        return true;
    }
    return false;
}
 800bc76:	b2c0      	uxtb	r0, r0
 800bc78:	bd10      	pop	{r4, pc}
 800bc7a:	46c0      	nop			; (mov r8, r8)
 800bc7c:	20000c54 	.word	0x20000c54

0800bc80 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 800bc80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc82:	0005      	movs	r5, r0
    uint8_t nbElements = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 800bc84:	2400      	movs	r4, #0
    uint8_t nbElements = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 800bc86:	4e13      	ldr	r6, [pc, #76]	; (800bcd4 <LoRaMacConfirmQueueHandleCb+0x54>)
{
 800bc88:	b085      	sub	sp, #20
    uint8_t nbElements = ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 800bc8a:	6933      	ldr	r3, [r6, #16]
 800bc8c:	7d1b      	ldrb	r3, [r3, #20]
 800bc8e:	9301      	str	r3, [sp, #4]
    for( uint8_t i = 0; i < nbElements; i++ )
 800bc90:	9b01      	ldr	r3, [sp, #4]
 800bc92:	429c      	cmp	r4, r3
 800bc94:	d101      	bne.n	800bc9a <LoRaMacConfirmQueueHandleCb+0x1a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
        }
    }
}
 800bc96:	b005      	add	sp, #20
 800bc98:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800bc9a:	6873      	ldr	r3, [r6, #4]
 800bc9c:	7818      	ldrb	r0, [r3, #0]
 800bc9e:	7028      	strb	r0, [r5, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 800bca0:	7859      	ldrb	r1, [r3, #1]
 800bca2:	7069      	strb	r1, [r5, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 800bca4:	789f      	ldrb	r7, [r3, #2]
        if( readyToHandle == true )
 800bca6:	2f00      	cmp	r7, #0
 800bca8:	d00d      	beq.n	800bcc6 <LoRaMacConfirmQueueHandleCb+0x46>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 800bcaa:	6833      	ldr	r3, [r6, #0]
 800bcac:	0028      	movs	r0, r5
 800bcae:	689b      	ldr	r3, [r3, #8]
 800bcb0:	4798      	blx	r3
        LoRaMacConfirmQueueRemoveFirst( );
 800bcb2:	f7ff ff83 	bl	800bbbc <LoRaMacConfirmQueueRemoveFirst>
        if( readyToHandle == false )
 800bcb6:	2f00      	cmp	r7, #0
 800bcb8:	d102      	bne.n	800bcc0 <LoRaMacConfirmQueueHandleCb+0x40>
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 800bcba:	a803      	add	r0, sp, #12
 800bcbc:	f7ff ff5e 	bl	800bb7c <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 800bcc0:	3401      	adds	r4, #1
 800bcc2:	b2e4      	uxtb	r4, r4
 800bcc4:	e7e4      	b.n	800bc90 <LoRaMacConfirmQueueHandleCb+0x10>
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 800bcc6:	aa03      	add	r2, sp, #12
 800bcc8:	7010      	strb	r0, [r2, #0]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 800bcca:	7051      	strb	r1, [r2, #1]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 800bccc:	78db      	ldrb	r3, [r3, #3]
 800bcce:	70d3      	strb	r3, [r2, #3]
 800bcd0:	e7ef      	b.n	800bcb2 <LoRaMacConfirmQueueHandleCb+0x32>
 800bcd2:	46c0      	nop			; (mov r8, r8)
 800bcd4:	20000c54 	.word	0x20000c54

0800bcd8 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt;
 800bcd8:	4b01      	ldr	r3, [pc, #4]	; (800bce0 <LoRaMacConfirmQueueGetCnt+0x8>)
 800bcda:	691b      	ldr	r3, [r3, #16]
 800bcdc:	7d18      	ldrb	r0, [r3, #20]
}
 800bcde:	4770      	bx	lr
 800bce0:	20000c54 	.word	0x20000c54

0800bce4 <LoRaMacConfirmQueueIsFull>:
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800bce4:	2004      	movs	r0, #4

bool LoRaMacConfirmQueueIsFull( void )
{
    if( IsListFull( ConfirmQueueCtx.ConfirmQueueNvmCtx->MlmeConfirmQueueCnt ) == true )
 800bce6:	4b03      	ldr	r3, [pc, #12]	; (800bcf4 <LoRaMacConfirmQueueIsFull+0x10>)
 800bce8:	691b      	ldr	r3, [r3, #16]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800bcea:	7d1b      	ldrb	r3, [r3, #20]
 800bcec:	4298      	cmp	r0, r3
 800bcee:	4180      	sbcs	r0, r0
 800bcf0:	4240      	negs	r0, r0
    }
    else
    {
        return false;
    }
}
 800bcf2:	4770      	bx	lr
 800bcf4:	20000c54 	.word	0x20000c54

0800bcf8 <DummyCB>:
 * Dummy callback in case if the user provides NULL function pointer
 */
static void DummyCB( void )
{
    return;
}
 800bcf8:	4770      	bx	lr

0800bcfa <PayloadEncrypt>:
{
 800bcfa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bcfc:	b08d      	sub	sp, #52	; 0x34
 800bcfe:	001d      	movs	r5, r3
 800bd00:	ab12      	add	r3, sp, #72	; 0x48
 800bd02:	781b      	ldrb	r3, [r3, #0]
 800bd04:	9001      	str	r0, [sp, #4]
 800bd06:	9302      	str	r3, [sp, #8]
    if( buffer == 0 )
 800bd08:	9b01      	ldr	r3, [sp, #4]
{
 800bd0a:	000f      	movs	r7, r1
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bd0c:	200a      	movs	r0, #10
{
 800bd0e:	9203      	str	r2, [sp, #12]
    if( buffer == 0 )
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d026      	beq.n	800bd62 <PayloadEncrypt+0x68>
    uint8_t sBlock[16] = { 0 };
 800bd14:	2600      	movs	r6, #0
 800bd16:	220c      	movs	r2, #12
 800bd18:	0031      	movs	r1, r6
 800bd1a:	a805      	add	r0, sp, #20
 800bd1c:	9604      	str	r6, [sp, #16]
 800bd1e:	f003 f9c0 	bl	800f0a2 <memset>
    uint8_t aBlock[16] = { 0 };
 800bd22:	220c      	movs	r2, #12
 800bd24:	0031      	movs	r1, r6
 800bd26:	a809      	add	r0, sp, #36	; 0x24
 800bd28:	9608      	str	r6, [sp, #32]
 800bd2a:	f003 f9ba 	bl	800f0a2 <memset>
    aBlock[0] = 0x01;
 800bd2e:	2201      	movs	r2, #1
    aBlock[5] = dir;
 800bd30:	9b02      	ldr	r3, [sp, #8]
    uint8_t aBlock[16] = { 0 };
 800bd32:	ac08      	add	r4, sp, #32
    aBlock[5] = dir;
 800bd34:	7163      	strb	r3, [r4, #5]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800bd36:	0c2b      	lsrs	r3, r5, #16
 800bd38:	7223      	strb	r3, [r4, #8]
    aBlock[10] = frameCounter & 0xFF;
 800bd3a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    aBlock[6] = address & 0xFF;
 800bd3c:	80e5      	strh	r5, [r4, #6]
    aBlock[10] = frameCounter & 0xFF;
 800bd3e:	8163      	strh	r3, [r4, #10]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800bd40:	0c1b      	lsrs	r3, r3, #16
 800bd42:	7323      	strb	r3, [r4, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800bd44:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800bd46:	0e2d      	lsrs	r5, r5, #24
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800bd48:	0e1b      	lsrs	r3, r3, #24
    aBlock[0] = 0x01;
 800bd4a:	7022      	strb	r2, [r4, #0]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800bd4c:	7265      	strb	r5, [r4, #9]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800bd4e:	7363      	strb	r3, [r4, #13]
    uint16_t ctr = 1;
 800bd50:	0014      	movs	r4, r2
 800bd52:	b2e2      	uxtb	r2, r4
 800bd54:	0113      	lsls	r3, r2, #4
 800bd56:	3b10      	subs	r3, #16
 800bd58:	b2db      	uxtb	r3, r3
 800bd5a:	9302      	str	r3, [sp, #8]
    while( size > 0 )
 800bd5c:	2f00      	cmp	r7, #0
 800bd5e:	dc02      	bgt.n	800bd66 <PayloadEncrypt+0x6c>
    return LORAMAC_CRYPTO_SUCCESS;
 800bd60:	2000      	movs	r0, #0
}
 800bd62:	b00d      	add	sp, #52	; 0x34
 800bd64:	bdf0      	pop	{r4, r5, r6, r7, pc}
        aBlock[15] = ctr & 0xFF;
 800bd66:	a808      	add	r0, sp, #32
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800bd68:	ad04      	add	r5, sp, #16
        aBlock[15] = ctr & 0xFF;
 800bd6a:	73c2      	strb	r2, [r0, #15]
        ctr++;
 800bd6c:	3401      	adds	r4, #1
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800bd6e:	002b      	movs	r3, r5
 800bd70:	2110      	movs	r1, #16
 800bd72:	9a03      	ldr	r2, [sp, #12]
        ctr++;
 800bd74:	b2a4      	uxth	r4, r4
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800bd76:	f7fc fb06 	bl	8008386 <SecureElementAesEncrypt>
 800bd7a:	2800      	cmp	r0, #0
 800bd7c:	d115      	bne.n	800bdaa <PayloadEncrypt+0xb0>
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800bd7e:	1c39      	adds	r1, r7, #0
 800bd80:	1c0b      	adds	r3, r1, #0
 800bd82:	2f10      	cmp	r7, #16
 800bd84:	dd00      	ble.n	800bd88 <PayloadEncrypt+0x8e>
 800bd86:	2310      	movs	r3, #16
 800bd88:	b21b      	sxth	r3, r3
 800bd8a:	4298      	cmp	r0, r3
 800bd8c:	db02      	blt.n	800bd94 <PayloadEncrypt+0x9a>
        size -= 16;
 800bd8e:	3f10      	subs	r7, #16
 800bd90:	b23f      	sxth	r7, r7
        bufferIndex += 16;
 800bd92:	e7de      	b.n	800bd52 <PayloadEncrypt+0x58>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800bd94:	9b02      	ldr	r3, [sp, #8]
 800bd96:	5c2e      	ldrb	r6, [r5, r0]
 800bd98:	181a      	adds	r2, r3, r0
 800bd9a:	9b01      	ldr	r3, [sp, #4]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800bd9c:	3001      	adds	r0, #1
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800bd9e:	5c9b      	ldrb	r3, [r3, r2]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800bda0:	b2c0      	uxtb	r0, r0
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800bda2:	4073      	eors	r3, r6
 800bda4:	9e01      	ldr	r6, [sp, #4]
 800bda6:	54b3      	strb	r3, [r6, r2]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800bda8:	e7ea      	b.n	800bd80 <PayloadEncrypt+0x86>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bdaa:	200f      	movs	r0, #15
 800bdac:	e7d9      	b.n	800bd62 <PayloadEncrypt+0x68>
	...

0800bdb0 <GetLastFcntDown>:
    switch( fCntID )
 800bdb0:	3801      	subs	r0, #1
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.NFCntDown;
 800bdb2:	2305      	movs	r3, #5
{
 800bdb4:	b500      	push	{lr}
 800bdb6:	2803      	cmp	r0, #3
 800bdb8:	d80b      	bhi.n	800bdd2 <GetLastFcntDown+0x22>
 800bdba:	4b0d      	ldr	r3, [pc, #52]	; (800bdf0 <GetLastFcntDown+0x40>)
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	f7f4 f9ab 	bl	8000118 <__gnu_thumb1_case_uqi>
 800bdc2:	0a02      	.short	0x0a02
 800bdc4:	140f      	.short	0x140f
            *lastDown = CryptoCtx.NvmCtx->FCntList.NFCntDown;
 800bdc6:	691a      	ldr	r2, [r3, #16]
 800bdc8:	600a      	str	r2, [r1, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.NFCntDown;
 800bdca:	001a      	movs	r2, r3
 800bdcc:	3210      	adds	r2, #16
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 800bdce:	621a      	str	r2, [r3, #32]
    return LORAMAC_CRYPTO_SUCCESS;
 800bdd0:	2300      	movs	r3, #0
}
 800bdd2:	0018      	movs	r0, r3
 800bdd4:	bd00      	pop	{pc}
            *lastDown = CryptoCtx.NvmCtx->FCntList.AFCntDown;
 800bdd6:	695a      	ldr	r2, [r3, #20]
 800bdd8:	600a      	str	r2, [r1, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.AFCntDown;
 800bdda:	001a      	movs	r2, r3
 800bddc:	3214      	adds	r2, #20
 800bdde:	e7f6      	b.n	800bdce <GetLastFcntDown+0x1e>
            *lastDown = CryptoCtx.NvmCtx->FCntList.FCntDown;
 800bde0:	699a      	ldr	r2, [r3, #24]
 800bde2:	600a      	str	r2, [r1, #0]
            CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 800bde4:	001a      	movs	r2, r3
 800bde6:	3218      	adds	r2, #24
 800bde8:	e7f1      	b.n	800bdce <GetLastFcntDown+0x1e>
            *lastDown = CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 800bdea:	69db      	ldr	r3, [r3, #28]
 800bdec:	600b      	str	r3, [r1, #0]
 800bdee:	e7ef      	b.n	800bdd0 <GetLastFcntDown+0x20>
 800bdf0:	20000c80 	.word	0x20000c80

0800bdf4 <LoRaMacCryptoDeriveMcKEKey.part.0>:
    }

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
 800bdf4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }
    uint8_t compBase[16] = { 0 };
 800bdf6:	2100      	movs	r1, #0
 800bdf8:	220c      	movs	r2, #12
 800bdfa:	a801      	add	r0, sp, #4
 800bdfc:	9100      	str	r1, [sp, #0]
 800bdfe:	f003 f950 	bl	800f0a2 <memset>

    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 800be02:	4b06      	ldr	r3, [pc, #24]	; (800be1c <LoRaMacCryptoDeriveMcKEKey.part.0+0x28>)
 800be04:	2204      	movs	r2, #4
 800be06:	6818      	ldr	r0, [r3, #0]
 800be08:	4669      	mov	r1, sp
 800be0a:	237f      	movs	r3, #127	; 0x7f
 800be0c:	6800      	ldr	r0, [r0, #0]
 800be0e:	f7fc fb2c 	bl	800846a <SecureElementDeriveAndStoreKey>
 800be12:	2800      	cmp	r0, #0
 800be14:	d000      	beq.n	800be18 <LoRaMacCryptoDeriveMcKEKey.part.0+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800be16:	200f      	movs	r0, #15
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800be18:	b005      	add	sp, #20
 800be1a:	bd00      	pop	{pc}
 800be1c:	20000c80 	.word	0x20000c80

0800be20 <VerifyCmacB0.isra.0.constprop.0>:
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
 800be20:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be22:	b0c7      	sub	sp, #284	; 0x11c
 800be24:	0007      	movs	r7, r0
 800be26:	000c      	movs	r4, r1
 800be28:	001d      	movs	r5, r3
        return LORAMAC_CRYPTO_ERROR_NPE;
 800be2a:	200a      	movs	r0, #10
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
 800be2c:	9201      	str	r2, [sp, #4]
    if( msg == 0 )
 800be2e:	2f00      	cmp	r7, #0
 800be30:	d030      	beq.n	800be94 <VerifyCmacB0.isra.0.constprop.0+0x74>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800be32:	2680      	movs	r6, #128	; 0x80
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800be34:	3004      	adds	r0, #4
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800be36:	0076      	lsls	r6, r6, #1
 800be38:	42b1      	cmp	r1, r6
 800be3a:	d82b      	bhi.n	800be94 <VerifyCmacB0.isra.0.constprop.0+0x74>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800be3c:	2288      	movs	r2, #136	; 0x88
 800be3e:	2100      	movs	r1, #0
 800be40:	0052      	lsls	r2, r2, #1
 800be42:	a802      	add	r0, sp, #8
 800be44:	f001 fb2e 	bl	800d4a4 <memset1>
    b0[0] = 0x49;
 800be48:	2349      	movs	r3, #73	; 0x49
 800be4a:	9302      	str	r3, [sp, #8]
    b0[4] = 0x00;
 800be4c:	ab02      	add	r3, sp, #8
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800be4e:	aa02      	add	r2, sp, #8
    b0[4] = 0x00;
 800be50:	809e      	strh	r6, [r3, #4]
    b0[6] = devAddr & 0xFF;
 800be52:	80dd      	strh	r5, [r3, #6]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800be54:	0c2b      	lsrs	r3, r5, #16
 800be56:	7213      	strb	r3, [r2, #8]
    b0[10] = fCnt & 0xFF;
 800be58:	9b4c      	ldr	r3, [sp, #304]	; 0x130
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800be5a:	0e2d      	lsrs	r5, r5, #24
    b0[10] = fCnt & 0xFF;
 800be5c:	8153      	strh	r3, [r2, #10]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800be5e:	0c1b      	lsrs	r3, r3, #16
 800be60:	7313      	strb	r3, [r2, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800be62:	9b4c      	ldr	r3, [sp, #304]	; 0x130
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800be64:	0039      	movs	r1, r7
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800be66:	0e1e      	lsrs	r6, r3, #24
    b0[14] = 0x00;
 800be68:	2300      	movs	r3, #0
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800be6a:	7255      	strb	r5, [r2, #9]
    b0[14] = 0x00;
 800be6c:	7393      	strb	r3, [r2, #14]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800be6e:	7356      	strb	r6, [r2, #13]
    b0[15] = msgLen & 0xFF;
 800be70:	73d4      	strb	r4, [r2, #15]
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800be72:	a806      	add	r0, sp, #24
 800be74:	0022      	movs	r2, r4
 800be76:	f001 faff 	bl	800d478 <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 800be7a:	0021      	movs	r1, r4
 800be7c:	3110      	adds	r1, #16
 800be7e:	9b01      	ldr	r3, [sp, #4]
 800be80:	9a4d      	ldr	r2, [sp, #308]	; 0x134
 800be82:	b289      	uxth	r1, r1
 800be84:	a802      	add	r0, sp, #8
 800be86:	f7fc fa66 	bl	8008356 <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 800be8a:	2800      	cmp	r0, #0
 800be8c:	d002      	beq.n	800be94 <VerifyCmacB0.isra.0.constprop.0+0x74>
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 800be8e:	2801      	cmp	r0, #1
 800be90:	d000      	beq.n	800be94 <VerifyCmacB0.isra.0.constprop.0+0x74>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800be92:	200f      	movs	r0, #15
}
 800be94:	b047      	add	sp, #284	; 0x11c
 800be96:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800be98 <LoRaMacCryptoInit>:
{
 800be98:	b570      	push	{r4, r5, r6, lr}
 800be9a:	1e03      	subs	r3, r0, #0
    CryptoCtx.NvmCtx = &NvmCryptoCtx;
 800be9c:	4c0d      	ldr	r4, [pc, #52]	; (800bed4 <LoRaMacCryptoInit+0x3c>)
 800be9e:	480e      	ldr	r0, [pc, #56]	; (800bed8 <LoRaMacCryptoInit+0x40>)
 800bea0:	6020      	str	r0, [r4, #0]
    if( cryptoNvmCtxChanged != 0 )
 800bea2:	d100      	bne.n	800bea6 <LoRaMacCryptoInit+0xe>
        CryptoCtx.EventCryptoNvmCtxChanged = DummyCB;
 800bea4:	4b0d      	ldr	r3, [pc, #52]	; (800bedc <LoRaMacCryptoInit+0x44>)
    memset1( ( uint8_t* )CryptoCtx.NvmCtx, 0, sizeof( LoRaMacCryptoNvmCtx_t ) );
 800bea6:	2224      	movs	r2, #36	; 0x24
 800bea8:	2100      	movs	r1, #0
 800beaa:	6063      	str	r3, [r4, #4]
 800beac:	f001 fafa 	bl	800d4a4 <memset1>
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Major = 1;
 800beb0:	6823      	ldr	r3, [r4, #0]
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Revision = 0;
 800beb2:	4a0b      	ldr	r2, [pc, #44]	; (800bee0 <LoRaMacCryptoInit+0x48>)
    CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 800beb4:	0019      	movs	r1, r3
    CryptoCtx.NvmCtx->LrWanVersion.Fields.Revision = 0;
 800beb6:	601a      	str	r2, [r3, #0]
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800beb8:	2201      	movs	r2, #1
    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 800beba:	2500      	movs	r5, #0
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800bebc:	4252      	negs	r2, r2
    CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 800bebe:	3118      	adds	r1, #24
    CryptoCtx.NvmCtx->FCntList.FCntUp = 0;
 800bec0:	60dd      	str	r5, [r3, #12]
    CryptoCtx.NvmCtx->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800bec2:	611a      	str	r2, [r3, #16]
    CryptoCtx.NvmCtx->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800bec4:	615a      	str	r2, [r3, #20]
    CryptoCtx.NvmCtx->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800bec6:	619a      	str	r2, [r3, #24]
    CryptoCtx.NvmCtx->LastDownFCnt = &CryptoCtx.NvmCtx->FCntList.FCntDown;
 800bec8:	6219      	str	r1, [r3, #32]
    CryptoCtx.NvmCtx->FCntList.McFCntDown0 = FCNT_DOWN_INITAL_VALUE;
 800beca:	61da      	str	r2, [r3, #28]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 800becc:	6863      	ldr	r3, [r4, #4]
 800bece:	4798      	blx	r3
}
 800bed0:	0028      	movs	r0, r5
 800bed2:	bd70      	pop	{r4, r5, r6, pc}
 800bed4:	20000c80 	.word	0x20000c80
 800bed8:	20000c88 	.word	0x20000c88
 800bedc:	0800bcf9 	.word	0x0800bcf9
 800bee0:	01010100 	.word	0x01010100

0800bee4 <LoRaMacCryptoSetLrWanVersion>:
    CryptoCtx.NvmCtx->LrWanVersion = version;
 800bee4:	4b02      	ldr	r3, [pc, #8]	; (800bef0 <LoRaMacCryptoSetLrWanVersion+0xc>)
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	6018      	str	r0, [r3, #0]
}
 800beea:	2000      	movs	r0, #0
 800beec:	4770      	bx	lr
 800beee:	46c0      	nop			; (mov r8, r8)
 800bef0:	20000c80 	.word	0x20000c80

0800bef4 <LoRaMacCryptoRestoreNvmCtx>:
{
 800bef4:	0001      	movs	r1, r0
 800bef6:	b510      	push	{r4, lr}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bef8:	200a      	movs	r0, #10
    if( cryptoNvmCtx != 0 )
 800befa:	2900      	cmp	r1, #0
 800befc:	d004      	beq.n	800bf08 <LoRaMacCryptoRestoreNvmCtx+0x14>
        memcpy1( ( uint8_t* )&NvmCryptoCtx, ( uint8_t* )cryptoNvmCtx, CRYPTO_NVM_CTX_SIZE );
 800befe:	4803      	ldr	r0, [pc, #12]	; (800bf0c <LoRaMacCryptoRestoreNvmCtx+0x18>)
 800bf00:	2224      	movs	r2, #36	; 0x24
 800bf02:	f001 fab9 	bl	800d478 <memcpy1>
        return LORAMAC_CRYPTO_SUCCESS;
 800bf06:	2000      	movs	r0, #0
}
 800bf08:	bd10      	pop	{r4, pc}
 800bf0a:	46c0      	nop			; (mov r8, r8)
 800bf0c:	20000c88 	.word	0x20000c88

0800bf10 <LoRaMacCryptoGetNvmCtx>:
    *cryptoNvmCtxSize = CRYPTO_NVM_CTX_SIZE;
 800bf10:	2324      	movs	r3, #36	; 0x24
 800bf12:	6003      	str	r3, [r0, #0]
}
 800bf14:	4800      	ldr	r0, [pc, #0]	; (800bf18 <LoRaMacCryptoGetNvmCtx+0x8>)
 800bf16:	4770      	bx	lr
 800bf18:	20000c88 	.word	0x20000c88

0800bf1c <LoRaMacCryptoGetFCntUp>:
{
 800bf1c:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bf1e:	200a      	movs	r0, #10
    if( currentUp == NULL )
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d005      	beq.n	800bf30 <LoRaMacCryptoGetFCntUp+0x14>
    return LORAMAC_CRYPTO_SUCCESS;
 800bf24:	2000      	movs	r0, #0
    *currentUp = CryptoCtx.NvmCtx->FCntList.FCntUp + 1;
 800bf26:	4a03      	ldr	r2, [pc, #12]	; (800bf34 <LoRaMacCryptoGetFCntUp+0x18>)
 800bf28:	6812      	ldr	r2, [r2, #0]
 800bf2a:	68d2      	ldr	r2, [r2, #12]
 800bf2c:	3201      	adds	r2, #1
 800bf2e:	601a      	str	r2, [r3, #0]
}
 800bf30:	4770      	bx	lr
 800bf32:	46c0      	nop			; (mov r8, r8)
 800bf34:	20000c80 	.word	0x20000c80

0800bf38 <LoRaMacCryptoGetFCntDown>:
{
 800bf38:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bf3a:	001c      	movs	r4, r3
    uint32_t lastDown = 0;
 800bf3c:	2300      	movs	r3, #0
{
 800bf3e:	0006      	movs	r6, r0
 800bf40:	0015      	movs	r5, r2
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bf42:	200a      	movs	r0, #10
    uint32_t lastDown = 0;
 800bf44:	9301      	str	r3, [sp, #4]
    if( currentDown == NULL )
 800bf46:	429c      	cmp	r4, r3
 800bf48:	d006      	beq.n	800bf58 <LoRaMacCryptoGetFCntDown+0x20>
    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 800bf4a:	0030      	movs	r0, r6
 800bf4c:	a901      	add	r1, sp, #4
 800bf4e:	f7ff ff2f 	bl	800bdb0 <GetLastFcntDown>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800bf52:	2800      	cmp	r0, #0
 800bf54:	d100      	bne.n	800bf58 <LoRaMacCryptoGetFCntDown+0x20>
        *currentDown = frameFcnt;
 800bf56:	6025      	str	r5, [r4, #0]
}
 800bf58:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
	...

0800bf5c <LoRaMacCryptoSetMulticastReference>:
{
 800bf5c:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bf5e:	200a      	movs	r0, #10
    if( multicastList == NULL )
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d004      	beq.n	800bf6e <LoRaMacCryptoSetMulticastReference+0x12>
    return LORAMAC_CRYPTO_SUCCESS;
 800bf64:	2000      	movs	r0, #0
    multicastList[0].DownLinkCounter = &CryptoCtx.NvmCtx->FCntList.McFCntDown0;
 800bf66:	4a02      	ldr	r2, [pc, #8]	; (800bf70 <LoRaMacCryptoSetMulticastReference+0x14>)
 800bf68:	6812      	ldr	r2, [r2, #0]
 800bf6a:	321c      	adds	r2, #28
 800bf6c:	621a      	str	r2, [r3, #32]
}
 800bf6e:	4770      	bx	lr
 800bf70:	20000c80 	.word	0x20000c80

0800bf74 <LoRaMacCryptoPrepareJoinRequest>:
{
 800bf74:	b530      	push	{r4, r5, lr}
 800bf76:	0004      	movs	r4, r0
 800bf78:	b085      	sub	sp, #20
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bf7a:	200a      	movs	r0, #10
    if( macMsg == 0 )
 800bf7c:	2c00      	cmp	r4, #0
 800bf7e:	d024      	beq.n	800bfca <LoRaMacCryptoPrepareJoinRequest+0x56>
    uint32_t devNonce = 0;
 800bf80:	2300      	movs	r3, #0
    SecureElementRandomNumber( &devNonce );
 800bf82:	a803      	add	r0, sp, #12
    uint32_t devNonce = 0;
 800bf84:	9303      	str	r3, [sp, #12]
    SecureElementRandomNumber( &devNonce );
 800bf86:	f7fc fa91 	bl	80084ac <SecureElementRandomNumber>
    CryptoCtx.NvmCtx->DevNonce = devNonce;
 800bf8a:	4d11      	ldr	r5, [pc, #68]	; (800bfd0 <LoRaMacCryptoPrepareJoinRequest+0x5c>)
 800bf8c:	9b03      	ldr	r3, [sp, #12]
 800bf8e:	682a      	ldr	r2, [r5, #0]
 800bf90:	8093      	strh	r3, [r2, #4]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 800bf92:	686b      	ldr	r3, [r5, #4]
 800bf94:	4798      	blx	r3
    macMsg->DevNonce = CryptoCtx.NvmCtx->DevNonce;
 800bf96:	682b      	ldr	r3, [r5, #0]
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800bf98:	0020      	movs	r0, r4
    macMsg->DevNonce = CryptoCtx.NvmCtx->DevNonce;
 800bf9a:	889b      	ldrh	r3, [r3, #4]
 800bf9c:	82e3      	strh	r3, [r4, #22]
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800bf9e:	f000 f969 	bl	800c274 <LoRaMacSerializerJoinRequest>
 800bfa2:	2800      	cmp	r0, #0
 800bfa4:	d110      	bne.n	800bfc8 <LoRaMacCryptoPrepareJoinRequest+0x54>
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800bfa6:	0023      	movs	r3, r4
 800bfa8:	3318      	adds	r3, #24
 800bfaa:	9300      	str	r3, [sp, #0]
 800bfac:	2213      	movs	r2, #19
 800bfae:	2301      	movs	r3, #1
 800bfb0:	6821      	ldr	r1, [r4, #0]
 800bfb2:	f7fc f9c5 	bl	8008340 <SecureElementComputeAesCmac>
 800bfb6:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800bfb8:	200f      	movs	r0, #15
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d105      	bne.n	800bfca <LoRaMacCryptoPrepareJoinRequest+0x56>
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800bfbe:	0020      	movs	r0, r4
 800bfc0:	f000 f958 	bl	800c274 <LoRaMacSerializerJoinRequest>
 800bfc4:	2800      	cmp	r0, #0
 800bfc6:	d000      	beq.n	800bfca <LoRaMacCryptoPrepareJoinRequest+0x56>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800bfc8:	2011      	movs	r0, #17
}
 800bfca:	b005      	add	sp, #20
 800bfcc:	bd30      	pop	{r4, r5, pc}
 800bfce:	46c0      	nop			; (mov r8, r8)
 800bfd0:	20000c80 	.word	0x20000c80

0800bfd4 <LoRaMacCryptoSecureMessage>:
{
 800bfd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bfd6:	0006      	movs	r6, r0
 800bfd8:	001d      	movs	r5, r3
        return LORAMAC_CRYPTO_ERROR_NPE;
 800bfda:	240a      	movs	r4, #10
{
 800bfdc:	b087      	sub	sp, #28
    if( macMsg == NULL )
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d01f      	beq.n	800c022 <LoRaMacCryptoSecureMessage+0x4e>
    if( fCntUp < CryptoCtx.NvmCtx->FCntList.FCntUp )
 800bfe2:	4b2b      	ldr	r3, [pc, #172]	; (800c090 <LoRaMacCryptoSecureMessage+0xbc>)
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800bfe4:	3c04      	subs	r4, #4
    if( fCntUp < CryptoCtx.NvmCtx->FCntList.FCntUp )
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	68db      	ldr	r3, [r3, #12]
 800bfea:	4283      	cmp	r3, r0
 800bfec:	d819      	bhi.n	800c022 <LoRaMacCryptoSecureMessage+0x4e>
    if( macMsg->FPort == 0 )
 800bfee:	1c6a      	adds	r2, r5, #1
 800bff0:	7fd2      	ldrb	r2, [r2, #31]
        payloadDecryptionKeyID = NWK_S_KEY;
 800bff2:	1e51      	subs	r1, r2, #1
 800bff4:	418a      	sbcs	r2, r1
 800bff6:	3202      	adds	r2, #2
    if( fCntUp > CryptoCtx.NvmCtx->FCntList.FCntUp )
 800bff8:	4283      	cmp	r3, r0
 800bffa:	d306      	bcc.n	800c00a <LoRaMacCryptoSecureMessage+0x36>
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800bffc:	0028      	movs	r0, r5
 800bffe:	f000 f96e 	bl	800c2de <LoRaMacSerializerData>
 800c002:	1e03      	subs	r3, r0, #0
 800c004:	d010      	beq.n	800c028 <LoRaMacCryptoSecureMessage+0x54>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800c006:	2411      	movs	r4, #17
 800c008:	e00b      	b.n	800c022 <LoRaMacCryptoSecureMessage+0x4e>
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 800c00a:	002b      	movs	r3, r5
 800c00c:	3328      	adds	r3, #40	; 0x28
 800c00e:	7819      	ldrb	r1, [r3, #0]
 800c010:	2300      	movs	r3, #0
 800c012:	9001      	str	r0, [sp, #4]
 800c014:	9300      	str	r3, [sp, #0]
 800c016:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800c018:	68ab      	ldr	r3, [r5, #8]
 800c01a:	f7ff fe6e 	bl	800bcfa <PayloadEncrypt>
 800c01e:	1e04      	subs	r4, r0, #0
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c020:	d0ec      	beq.n	800bffc <LoRaMacCryptoSecureMessage+0x28>
}
 800c022:	0020      	movs	r0, r4
 800c024:	b007      	add	sp, #28
 800c026:	bdf0      	pop	{r4, r5, r6, r7, pc}
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800c028:	792f      	ldrb	r7, [r5, #4]
 800c02a:	6829      	ldr	r1, [r5, #0]
 800c02c:	3f04      	subs	r7, #4
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c02e:	240a      	movs	r4, #10
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800c030:	b2ba      	uxth	r2, r7
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800c032:	2900      	cmp	r1, #0
 800c034:	d0f5      	beq.n	800c022 <LoRaMacCryptoSecureMessage+0x4e>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800c036:	2080      	movs	r0, #128	; 0x80
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800c038:	240e      	movs	r4, #14
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800c03a:	0040      	lsls	r0, r0, #1
 800c03c:	4282      	cmp	r2, r0
 800c03e:	d8f0      	bhi.n	800c022 <LoRaMacCryptoSecureMessage+0x4e>
    b0[0] = 0x49;
 800c040:	38b7      	subs	r0, #183	; 0xb7
 800c042:	9002      	str	r0, [sp, #8]
    b0[4] = 0x00;
 800c044:	a802      	add	r0, sp, #8
 800c046:	8083      	strh	r3, [r0, #4]
    b0[14] = 0x00;
 800c048:	7383      	strb	r3, [r0, #14]
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800c04a:	002b      	movs	r3, r5
 800c04c:	892c      	ldrh	r4, [r5, #8]
 800c04e:	332c      	adds	r3, #44	; 0x2c
    b0[6] = devAddr & 0xFF;
 800c050:	80c4      	strh	r4, [r0, #6]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800c052:	68ac      	ldr	r4, [r5, #8]
    b0[10] = fCnt & 0xFF;
 800c054:	8146      	strh	r6, [r0, #10]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800c056:	0c24      	lsrs	r4, r4, #16
 800c058:	7204      	strb	r4, [r0, #8]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800c05a:	68ac      	ldr	r4, [r5, #8]
    b0[15] = msgLen & 0xFF;
 800c05c:	73c7      	strb	r7, [r0, #15]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800c05e:	0e24      	lsrs	r4, r4, #24
 800c060:	7244      	strb	r4, [r0, #9]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800c062:	0c34      	lsrs	r4, r6, #16
 800c064:	7304      	strb	r4, [r0, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800c066:	0e34      	lsrs	r4, r6, #24
 800c068:	7344      	strb	r4, [r0, #13]
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800c06a:	9300      	str	r3, [sp, #0]
 800c06c:	2302      	movs	r3, #2
 800c06e:	f7fc f967 	bl	8008340 <SecureElementComputeAesCmac>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c072:	240f      	movs	r4, #15
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800c074:	2800      	cmp	r0, #0
 800c076:	d1d4      	bne.n	800c022 <LoRaMacCryptoSecureMessage+0x4e>
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800c078:	0028      	movs	r0, r5
 800c07a:	f000 f930 	bl	800c2de <LoRaMacSerializerData>
 800c07e:	1e04      	subs	r4, r0, #0
 800c080:	d1c1      	bne.n	800c006 <LoRaMacCryptoSecureMessage+0x32>
    CryptoCtx.NvmCtx->FCntList.FCntUp = fCntUp;
 800c082:	4b03      	ldr	r3, [pc, #12]	; (800c090 <LoRaMacCryptoSecureMessage+0xbc>)
 800c084:	681a      	ldr	r2, [r3, #0]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 800c086:	685b      	ldr	r3, [r3, #4]
    CryptoCtx.NvmCtx->FCntList.FCntUp = fCntUp;
 800c088:	60d6      	str	r6, [r2, #12]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 800c08a:	4798      	blx	r3
    return LORAMAC_CRYPTO_SUCCESS;
 800c08c:	e7c9      	b.n	800c022 <LoRaMacCryptoSecureMessage+0x4e>
 800c08e:	46c0      	nop			; (mov r8, r8)
 800c090:	20000c80 	.word	0x20000c80

0800c094 <LoRaMacCryptoUnsecureMessage>:
{
 800c094:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c096:	b087      	sub	sp, #28
 800c098:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c09a:	000f      	movs	r7, r1
 800c09c:	001e      	movs	r6, r3
        return LORAMAC_CRYPTO_ERROR_NPE;
 800c09e:	240a      	movs	r4, #10
{
 800c0a0:	9002      	str	r0, [sp, #8]
 800c0a2:	9203      	str	r2, [sp, #12]
    if( macMsg == 0 )
 800c0a4:	2d00      	cmp	r5, #0
 800c0a6:	d04a      	beq.n	800c13e <LoRaMacCryptoUnsecureMessage+0xaa>
    uint32_t lastDown = 0;
 800c0a8:	2300      	movs	r3, #0
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800c0aa:	0010      	movs	r0, r2
 800c0ac:	a905      	add	r1, sp, #20
    uint32_t lastDown = 0;
 800c0ae:	9305      	str	r3, [sp, #20]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800c0b0:	f7ff fe7e 	bl	800bdb0 <GetLastFcntDown>
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800c0b4:	0028      	movs	r0, r5
 800c0b6:	f000 f882 	bl	800c1be <LoRaMacParserData>
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800c0ba:	3406      	adds	r4, #6
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800c0bc:	2800      	cmp	r0, #0
 800c0be:	d13e      	bne.n	800c13e <LoRaMacCryptoUnsecureMessage+0xaa>
        if( KeyAddrList[i].AddrID == addrID )
 800c0c0:	4b23      	ldr	r3, [pc, #140]	; (800c150 <LoRaMacCryptoUnsecureMessage+0xbc>)
 800c0c2:	9902      	ldr	r1, [sp, #8]
 800c0c4:	781a      	ldrb	r2, [r3, #0]
 800c0c6:	428a      	cmp	r2, r1
 800c0c8:	d004      	beq.n	800c0d4 <LoRaMacCryptoUnsecureMessage+0x40>
 800c0ca:	791a      	ldrb	r2, [r3, #4]
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 800c0cc:	3c04      	subs	r4, #4
        if( KeyAddrList[i].AddrID == addrID )
 800c0ce:	428a      	cmp	r2, r1
 800c0d0:	d135      	bne.n	800c13e <LoRaMacCryptoUnsecureMessage+0xaa>
 800c0d2:	3001      	adds	r0, #1
    if( address != macMsg->FHDR.DevAddr )
 800c0d4:	68aa      	ldr	r2, [r5, #8]
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 800c0d6:	2402      	movs	r4, #2
    if( address != macMsg->FHDR.DevAddr )
 800c0d8:	42ba      	cmp	r2, r7
 800c0da:	d130      	bne.n	800c13e <LoRaMacCryptoUnsecureMessage+0xaa>
    payloadDecryptionKeyID = curItem->AppSkey;
 800c0dc:	40a0      	lsls	r0, r4
 800c0de:	1818      	adds	r0, r3, r0
 800c0e0:	7843      	ldrb	r3, [r0, #1]
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800c0e2:	7882      	ldrb	r2, [r0, #2]
    payloadDecryptionKeyID = curItem->AppSkey;
 800c0e4:	9302      	str	r3, [sp, #8]
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800c0e6:	7929      	ldrb	r1, [r5, #4]
 800c0e8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800c0ea:	3904      	subs	r1, #4
 800c0ec:	9301      	str	r3, [sp, #4]
 800c0ee:	9600      	str	r6, [sp, #0]
 800c0f0:	003b      	movs	r3, r7
 800c0f2:	6828      	ldr	r0, [r5, #0]
 800c0f4:	b289      	uxth	r1, r1
 800c0f6:	f7ff fe93 	bl	800be20 <VerifyCmacB0.isra.0.constprop.0>
 800c0fa:	1e04      	subs	r4, r0, #0
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c0fc:	d11f      	bne.n	800c13e <LoRaMacCryptoUnsecureMessage+0xaa>
    if( macMsg->FPort == 0 )
 800c0fe:	1c6b      	adds	r3, r5, #1
 800c100:	7fdb      	ldrb	r3, [r3, #31]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d101      	bne.n	800c10a <LoRaMacCryptoUnsecureMessage+0x76>
        payloadDecryptionKeyID = NWK_S_KEY;
 800c106:	3302      	adds	r3, #2
 800c108:	9302      	str	r3, [sp, #8]
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 800c10a:	002b      	movs	r3, r5
 800c10c:	3328      	adds	r3, #40	; 0x28
 800c10e:	7819      	ldrb	r1, [r3, #0]
 800c110:	2301      	movs	r3, #1
 800c112:	9601      	str	r6, [sp, #4]
 800c114:	9300      	str	r3, [sp, #0]
 800c116:	9a02      	ldr	r2, [sp, #8]
 800c118:	003b      	movs	r3, r7
 800c11a:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800c11c:	f7ff fded 	bl	800bcfa <PayloadEncrypt>
 800c120:	1e04      	subs	r4, r0, #0
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800c122:	d10c      	bne.n	800c13e <LoRaMacCryptoUnsecureMessage+0xaa>
    switch( fCntID )
 800c124:	9803      	ldr	r0, [sp, #12]
 800c126:	4b0b      	ldr	r3, [pc, #44]	; (800c154 <LoRaMacCryptoUnsecureMessage+0xc0>)
 800c128:	3801      	subs	r0, #1
 800c12a:	2803      	cmp	r0, #3
 800c12c:	d805      	bhi.n	800c13a <LoRaMacCryptoUnsecureMessage+0xa6>
            CryptoCtx.NvmCtx->FCntList.McFCntDown0 = currentDown;
 800c12e:	681a      	ldr	r2, [r3, #0]
 800c130:	f7f3 fff2 	bl	8000118 <__gnu_thumb1_case_uqi>
 800c134:	0c0a0802 	.word	0x0c0a0802
            CryptoCtx.NvmCtx->FCntList.NFCntDown = currentDown;
 800c138:	6116      	str	r6, [r2, #16]
    CryptoCtx.EventCryptoNvmCtxChanged( );
 800c13a:	685b      	ldr	r3, [r3, #4]
 800c13c:	4798      	blx	r3
}
 800c13e:	0020      	movs	r0, r4
 800c140:	b007      	add	sp, #28
 800c142:	bdf0      	pop	{r4, r5, r6, r7, pc}
            CryptoCtx.NvmCtx->FCntList.AFCntDown = currentDown;
 800c144:	6156      	str	r6, [r2, #20]
            break;
 800c146:	e7f8      	b.n	800c13a <LoRaMacCryptoUnsecureMessage+0xa6>
            CryptoCtx.NvmCtx->FCntList.FCntDown = currentDown;
 800c148:	6196      	str	r6, [r2, #24]
            break;
 800c14a:	e7f6      	b.n	800c13a <LoRaMacCryptoUnsecureMessage+0xa6>
            CryptoCtx.NvmCtx->FCntList.McFCntDown0 = currentDown;
 800c14c:	61d6      	str	r6, [r2, #28]
            break;
 800c14e:	e7f4      	b.n	800c13a <LoRaMacCryptoUnsecureMessage+0xa6>
 800c150:	20000178 	.word	0x20000178
 800c154:	20000c80 	.word	0x20000c80

0800c158 <LoRaMacCryptoDeriveMcRootKey>:
{
 800c158:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c15a:	0001      	movs	r1, r0
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800c15c:	200b      	movs	r0, #11
    if( keyID != APP_KEY )
 800c15e:	2900      	cmp	r1, #0
 800c160:	d115      	bne.n	800c18e <LoRaMacCryptoDeriveMcRootKey+0x36>
    uint8_t compBase[16] = { 0 };
 800c162:	220c      	movs	r2, #12
 800c164:	a801      	add	r0, sp, #4
 800c166:	9100      	str	r1, [sp, #0]
 800c168:	f002 ff9b 	bl	800f0a2 <memset>
    if( CryptoCtx.NvmCtx->LrWanVersion.Fields.Minor == 1 )
 800c16c:	4b09      	ldr	r3, [pc, #36]	; (800c194 <LoRaMacCryptoDeriveMcRootKey+0x3c>)
 800c16e:	6818      	ldr	r0, [r3, #0]
 800c170:	7883      	ldrb	r3, [r0, #2]
 800c172:	2b01      	cmp	r3, #1
 800c174:	d102      	bne.n	800c17c <LoRaMacCryptoDeriveMcRootKey+0x24>
        compBase[0] = 0x20;
 800c176:	466a      	mov	r2, sp
 800c178:	331f      	adds	r3, #31
 800c17a:	7013      	strb	r3, [r2, #0]
    if( SecureElementDeriveAndStoreKey( CryptoCtx.NvmCtx->LrWanVersion, compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 800c17c:	2304      	movs	r3, #4
 800c17e:	2200      	movs	r2, #0
 800c180:	4669      	mov	r1, sp
 800c182:	6800      	ldr	r0, [r0, #0]
 800c184:	f7fc f971 	bl	800846a <SecureElementDeriveAndStoreKey>
 800c188:	2800      	cmp	r0, #0
 800c18a:	d000      	beq.n	800c18e <LoRaMacCryptoDeriveMcRootKey+0x36>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c18c:	200f      	movs	r0, #15
}
 800c18e:	b005      	add	sp, #20
 800c190:	bd00      	pop	{pc}
 800c192:	46c0      	nop			; (mov r8, r8)
 800c194:	20000c80 	.word	0x20000c80

0800c198 <LoRaMacCryptoSetKey>:
{
 800c198:	b570      	push	{r4, r5, r6, lr}
 800c19a:	0005      	movs	r5, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 800c19c:	f7fc f95c 	bl	8008458 <SecureElementSetKey>
 800c1a0:	1e04      	subs	r4, r0, #0
 800c1a2:	d109      	bne.n	800c1b8 <LoRaMacCryptoSetKey+0x20>
    if( keyID == APP_KEY )
 800c1a4:	2d00      	cmp	r5, #0
 800c1a6:	d108      	bne.n	800c1ba <LoRaMacCryptoSetKey+0x22>
        if( LoRaMacCryptoDeriveMcRootKey( keyID ) != LORAMAC_CRYPTO_SUCCESS )
 800c1a8:	f7ff ffd6 	bl	800c158 <LoRaMacCryptoDeriveMcRootKey>
 800c1ac:	2800      	cmp	r0, #0
 800c1ae:	d103      	bne.n	800c1b8 <LoRaMacCryptoSetKey+0x20>
    if( keyID != MC_ROOT_KEY )
 800c1b0:	f7ff fe20 	bl	800bdf4 <LoRaMacCryptoDeriveMcKEKey.part.0>
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800c1b4:	2800      	cmp	r0, #0
 800c1b6:	d000      	beq.n	800c1ba <LoRaMacCryptoSetKey+0x22>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800c1b8:	240f      	movs	r4, #15
}
 800c1ba:	0020      	movs	r0, r4
 800c1bc:	bd70      	pop	{r4, r5, r6, pc}

0800c1be <LoRaMacParserData>:

    return LORAMAC_PARSER_SUCCESS;
}

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 800c1be:	b570      	push	{r4, r5, r6, lr}
 800c1c0:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_PARSER_ERROR_NPE;
 800c1c2:	2002      	movs	r0, #2
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c1c4:	2c00      	cmp	r4, #0
 800c1c6:	d054      	beq.n	800c272 <LoRaMacParserData+0xb4>
 800c1c8:	6821      	ldr	r1, [r4, #0]
 800c1ca:	2900      	cmp	r1, #0
 800c1cc:	d051      	beq.n	800c272 <LoRaMacParserData+0xb4>
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800c1ce:	780b      	ldrb	r3, [r1, #0]
    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800c1d0:	0020      	movs	r0, r4
    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800c1d2:	7163      	strb	r3, [r4, #5]
    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800c1d4:	784a      	ldrb	r2, [r1, #1]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800c1d6:	3010      	adds	r0, #16
    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800c1d8:	60a2      	str	r2, [r4, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800c1da:	788b      	ldrb	r3, [r1, #2]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 800c1dc:	1c65      	adds	r5, r4, #1
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800c1de:	021b      	lsls	r3, r3, #8
 800c1e0:	431a      	orrs	r2, r3
 800c1e2:	60a2      	str	r2, [r4, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800c1e4:	78cb      	ldrb	r3, [r1, #3]
 800c1e6:	041b      	lsls	r3, r3, #16
 800c1e8:	4313      	orrs	r3, r2
 800c1ea:	60a3      	str	r3, [r4, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800c1ec:	790a      	ldrb	r2, [r1, #4]
 800c1ee:	0612      	lsls	r2, r2, #24
 800c1f0:	4313      	orrs	r3, r2
 800c1f2:	60a3      	str	r3, [r4, #8]
    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 800c1f4:	794b      	ldrb	r3, [r1, #5]
 800c1f6:	7323      	strb	r3, [r4, #12]
    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 800c1f8:	798b      	ldrb	r3, [r1, #6]
 800c1fa:	81e3      	strh	r3, [r4, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800c1fc:	79ca      	ldrb	r2, [r1, #7]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800c1fe:	3108      	adds	r1, #8
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800c200:	0212      	lsls	r2, r2, #8
 800c202:	4313      	orrs	r3, r2
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800c204:	7b22      	ldrb	r2, [r4, #12]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800c206:	81e3      	strh	r3, [r4, #14]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800c208:	0712      	lsls	r2, r2, #28
 800c20a:	0f12      	lsrs	r2, r2, #28
 800c20c:	f001 f934 	bl	800d478 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800c210:	7b21      	ldrb	r1, [r4, #12]
    macMsg->FRMPayloadSize = 0;
 800c212:	0020      	movs	r0, r4
    macMsg->FPort = 0;
 800c214:	2300      	movs	r3, #0
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800c216:	0709      	lsls	r1, r1, #28
 800c218:	0f09      	lsrs	r1, r1, #28
 800c21a:	000e      	movs	r6, r1
    macMsg->FRMPayloadSize = 0;
 800c21c:	3028      	adds	r0, #40	; 0x28
    macMsg->FPort = 0;
 800c21e:	77eb      	strb	r3, [r5, #31]
    macMsg->FRMPayloadSize = 0;
 800c220:	7003      	strb	r3, [r0, #0]

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800c222:	7922      	ldrb	r2, [r4, #4]
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800c224:	3608      	adds	r6, #8
    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800c226:	1b93      	subs	r3, r2, r6
 800c228:	2b04      	cmp	r3, #4
 800c22a:	dd0c      	ble.n	800c246 <LoRaMacParserData+0x88>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800c22c:	6823      	ldr	r3, [r4, #0]
 800c22e:	3109      	adds	r1, #9

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800c230:	3a04      	subs	r2, #4
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800c232:	5d9e      	ldrb	r6, [r3, r6]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800c234:	1a52      	subs	r2, r2, r1
 800c236:	b2d2      	uxtb	r2, r2
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800c238:	77ee      	strb	r6, [r5, #31]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800c23a:	7002      	strb	r2, [r0, #0]
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 800c23c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c23e:	b292      	uxth	r2, r2
 800c240:	1859      	adds	r1, r3, r1
 800c242:	f001 f919 	bl	800d478 <memcpy1>
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );

    return LORAMAC_PARSER_SUCCESS;
 800c246:	2000      	movs	r0, #0
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800c248:	6822      	ldr	r2, [r4, #0]
 800c24a:	7923      	ldrb	r3, [r4, #4]
 800c24c:	18d3      	adds	r3, r2, r3
 800c24e:	1f1a      	subs	r2, r3, #4
 800c250:	7811      	ldrb	r1, [r2, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800c252:	1eda      	subs	r2, r3, #3
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800c254:	62e1      	str	r1, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800c256:	7812      	ldrb	r2, [r2, #0]
 800c258:	0212      	lsls	r2, r2, #8
 800c25a:	4311      	orrs	r1, r2
 800c25c:	62e1      	str	r1, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800c25e:	1e9a      	subs	r2, r3, #2
 800c260:	7812      	ldrb	r2, [r2, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800c262:	3b01      	subs	r3, #1
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800c264:	0412      	lsls	r2, r2, #16
 800c266:	430a      	orrs	r2, r1
 800c268:	62e2      	str	r2, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800c26a:	781b      	ldrb	r3, [r3, #0]
 800c26c:	061b      	lsls	r3, r3, #24
 800c26e:	431a      	orrs	r2, r3
 800c270:	62e2      	str	r2, [r4, #44]	; 0x2c
}
 800c272:	bd70      	pop	{r4, r5, r6, pc}

0800c274 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 800c274:	b510      	push	{r4, lr}
 800c276:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800c278:	2001      	movs	r0, #1
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c27a:	2c00      	cmp	r4, #0
 800c27c:	d02e      	beq.n	800c2dc <LoRaMacSerializerJoinRequest+0x68>
 800c27e:	6823      	ldr	r3, [r4, #0]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d02b      	beq.n	800c2dc <LoRaMacSerializerJoinRequest+0x68>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800c284:	7922      	ldrb	r2, [r4, #4]
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800c286:	1800      	adds	r0, r0, r0
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800c288:	2a16      	cmp	r2, #22
 800c28a:	d927      	bls.n	800c2dc <LoRaMacSerializerJoinRequest+0x68>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800c28c:	7962      	ldrb	r2, [r4, #5]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800c28e:	1da1      	adds	r1, r4, #6
    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800c290:	701a      	strb	r2, [r3, #0]
    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800c292:	6823      	ldr	r3, [r4, #0]
 800c294:	2208      	movs	r2, #8
 800c296:	1c58      	adds	r0, r3, #1
 800c298:	f001 f8f7 	bl	800d48a <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 800c29c:	0021      	movs	r1, r4
 800c29e:	6820      	ldr	r0, [r4, #0]
 800c2a0:	2208      	movs	r2, #8
 800c2a2:	3009      	adds	r0, #9
 800c2a4:	310e      	adds	r1, #14
 800c2a6:	f001 f8f0 	bl	800d48a <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800c2aa:	8ae3      	ldrh	r3, [r4, #22]
 800c2ac:	6822      	ldr	r2, [r4, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;

    macMsg->BufSize = bufItr;

    return LORAMAC_SERIALIZER_SUCCESS;
 800c2ae:	2000      	movs	r0, #0
    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800c2b0:	7453      	strb	r3, [r2, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 800c2b2:	8ae3      	ldrh	r3, [r4, #22]
 800c2b4:	6822      	ldr	r2, [r4, #0]
 800c2b6:	0a1b      	lsrs	r3, r3, #8
 800c2b8:	7493      	strb	r3, [r2, #18]
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800c2ba:	69a3      	ldr	r3, [r4, #24]
 800c2bc:	6822      	ldr	r2, [r4, #0]
 800c2be:	74d3      	strb	r3, [r2, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800c2c0:	69a3      	ldr	r3, [r4, #24]
 800c2c2:	6822      	ldr	r2, [r4, #0]
 800c2c4:	0a1b      	lsrs	r3, r3, #8
 800c2c6:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800c2c8:	69a3      	ldr	r3, [r4, #24]
 800c2ca:	6822      	ldr	r2, [r4, #0]
 800c2cc:	0c1b      	lsrs	r3, r3, #16
 800c2ce:	7553      	strb	r3, [r2, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800c2d0:	69a3      	ldr	r3, [r4, #24]
 800c2d2:	6822      	ldr	r2, [r4, #0]
 800c2d4:	0e1b      	lsrs	r3, r3, #24
 800c2d6:	7593      	strb	r3, [r2, #22]
    macMsg->BufSize = bufItr;
 800c2d8:	2317      	movs	r3, #23
 800c2da:	7123      	strb	r3, [r4, #4]
}
 800c2dc:	bd10      	pop	{r4, pc}

0800c2de <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 800c2de:	b570      	push	{r4, r5, r6, lr}
 800c2e0:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800c2e2:	2001      	movs	r0, #1
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c2e4:	2c00      	cmp	r4, #0
 800c2e6:	d068      	beq.n	800c3ba <LoRaMacSerializerData+0xdc>
 800c2e8:	6821      	ldr	r1, [r4, #0]
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800c2ea:	2001      	movs	r0, #1
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800c2ec:	2900      	cmp	r1, #0
 800c2ee:	d064      	beq.n	800c3ba <LoRaMacSerializerData+0xdc>
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;

    if( macMsg->FRMPayloadSize > 0 )
 800c2f0:	0025      	movs	r5, r4
 800c2f2:	3528      	adds	r5, #40	; 0x28
 800c2f4:	7828      	ldrb	r0, [r5, #0]
    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800c2f6:	7b22      	ldrb	r2, [r4, #12]
 800c2f8:	0003      	movs	r3, r0
 800c2fa:	1e5e      	subs	r6, r3, #1
 800c2fc:	41b3      	sbcs	r3, r6
 800c2fe:	0712      	lsls	r2, r2, #28
 800c300:	0f12      	lsrs	r2, r2, #28
 800c302:	189b      	adds	r3, r3, r2
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
    }

    computedBufSize += macMsg->FRMPayloadSize;
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800c304:	3004      	adds	r0, #4
    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800c306:	3308      	adds	r3, #8
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800c308:	181b      	adds	r3, r3, r0

    if( macMsg->BufSize < computedBufSize )
 800c30a:	7922      	ldrb	r2, [r4, #4]
 800c30c:	b29b      	uxth	r3, r3
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800c30e:	2002      	movs	r0, #2
    if( macMsg->BufSize < computedBufSize )
 800c310:	429a      	cmp	r2, r3
 800c312:	d352      	bcc.n	800c3ba <LoRaMacSerializerData+0xdc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800c314:	7963      	ldrb	r3, [r4, #5]
 800c316:	700b      	strb	r3, [r1, #0]
    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800c318:	0021      	movs	r1, r4
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800c31a:	68a3      	ldr	r3, [r4, #8]
 800c31c:	6822      	ldr	r2, [r4, #0]
    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800c31e:	3110      	adds	r1, #16
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800c320:	7053      	strb	r3, [r2, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 800c322:	68a3      	ldr	r3, [r4, #8]
 800c324:	6822      	ldr	r2, [r4, #0]
 800c326:	0a1b      	lsrs	r3, r3, #8
 800c328:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 800c32a:	68a3      	ldr	r3, [r4, #8]
 800c32c:	6822      	ldr	r2, [r4, #0]
 800c32e:	0c1b      	lsrs	r3, r3, #16
 800c330:	70d3      	strb	r3, [r2, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 800c332:	68a3      	ldr	r3, [r4, #8]
 800c334:	6822      	ldr	r2, [r4, #0]
 800c336:	0e1b      	lsrs	r3, r3, #24
 800c338:	7113      	strb	r3, [r2, #4]
    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 800c33a:	7b23      	ldrb	r3, [r4, #12]
 800c33c:	6822      	ldr	r2, [r4, #0]
 800c33e:	7153      	strb	r3, [r2, #5]
    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 800c340:	89e3      	ldrh	r3, [r4, #14]
 800c342:	6822      	ldr	r2, [r4, #0]
 800c344:	7193      	strb	r3, [r2, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 800c346:	89e3      	ldrh	r3, [r4, #14]
 800c348:	6822      	ldr	r2, [r4, #0]
 800c34a:	0a1b      	lsrs	r3, r3, #8
 800c34c:	71d3      	strb	r3, [r2, #7]
    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800c34e:	7b22      	ldrb	r2, [r4, #12]
 800c350:	6820      	ldr	r0, [r4, #0]
 800c352:	0712      	lsls	r2, r2, #28
 800c354:	0f12      	lsrs	r2, r2, #28
 800c356:	3008      	adds	r0, #8
 800c358:	f001 f88e 	bl	800d478 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800c35c:	7b23      	ldrb	r3, [r4, #12]

    if( macMsg->FRMPayloadSize > 0 )
 800c35e:	782a      	ldrb	r2, [r5, #0]
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800c360:	071b      	lsls	r3, r3, #28
 800c362:	0f1b      	lsrs	r3, r3, #28
 800c364:	001e      	movs	r6, r3
 800c366:	3608      	adds	r6, #8
    if( macMsg->FRMPayloadSize > 0 )
 800c368:	2a00      	cmp	r2, #0
 800c36a:	d005      	beq.n	800c378 <LoRaMacSerializerData+0x9a>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 800c36c:	1c62      	adds	r2, r4, #1
 800c36e:	7fd2      	ldrb	r2, [r2, #31]
 800c370:	6821      	ldr	r1, [r4, #0]
 800c372:	3309      	adds	r3, #9
 800c374:	558a      	strb	r2, [r1, r6]
 800c376:	001e      	movs	r6, r3
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 800c378:	6823      	ldr	r3, [r4, #0]
 800c37a:	782a      	ldrb	r2, [r5, #0]
 800c37c:	1998      	adds	r0, r3, r6
 800c37e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c380:	f001 f87a 	bl	800d478 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800c384:	782b      	ldrb	r3, [r5, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800c386:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800c388:	6821      	ldr	r1, [r4, #0]
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800c38a:	18f3      	adds	r3, r6, r3
 800c38c:	b29b      	uxth	r3, r3
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800c38e:	54ca      	strb	r2, [r1, r3]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800c390:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c392:	6820      	ldr	r0, [r4, #0]
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800c394:	1c5a      	adds	r2, r3, #1
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800c396:	b292      	uxth	r2, r2
 800c398:	0a09      	lsrs	r1, r1, #8
 800c39a:	5481      	strb	r1, [r0, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800c39c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c39e:	6820      	ldr	r0, [r4, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800c3a0:	1c9a      	adds	r2, r3, #2
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800c3a2:	b292      	uxth	r2, r2
 800c3a4:	0c09      	lsrs	r1, r1, #16
 800c3a6:	5481      	strb	r1, [r0, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800c3a8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c3aa:	6820      	ldr	r0, [r4, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800c3ac:	1cda      	adds	r2, r3, #3
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800c3ae:	b292      	uxth	r2, r2
 800c3b0:	0e09      	lsrs	r1, r1, #24
 800c3b2:	5481      	strb	r1, [r0, r2]

    macMsg->BufSize = bufItr;

    return LORAMAC_SERIALIZER_SUCCESS;
 800c3b4:	2000      	movs	r0, #0
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800c3b6:	3304      	adds	r3, #4
    macMsg->BufSize = bufItr;
 800c3b8:	7123      	strb	r3, [r4, #4]
}
 800c3ba:	bd70      	pop	{r4, r5, r6, pc}

0800c3bc <RegionIsActive>:
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
    switch( region )
 800c3bc:	3801      	subs	r0, #1
 800c3be:	4243      	negs	r3, r0
 800c3c0:	4158      	adcs	r0, r3
        default:
        {
            return false;
        }
    }
}
 800c3c2:	b2c0      	uxtb	r0, r0
 800c3c4:	4770      	bx	lr

0800c3c6 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 800c3c6:	b507      	push	{r0, r1, r2, lr}
    PhyParam_t phyParam = { 0 };
    switch( region )
 800c3c8:	2801      	cmp	r0, #1
 800c3ca:	d105      	bne.n	800c3d8 <RegionGetPhyParam+0x12>
    {
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
 800c3cc:	0008      	movs	r0, r1
 800c3ce:	f000 f911 	bl	800c5f4 <RegionAU915GetPhyParam>
 800c3d2:	9001      	str	r0, [sp, #4]
        default:
        {
            return phyParam;
        }
    }
}
 800c3d4:	9801      	ldr	r0, [sp, #4]
 800c3d6:	bd0e      	pop	{r1, r2, r3, pc}
            return phyParam;
 800c3d8:	2300      	movs	r3, #0
 800c3da:	9301      	str	r3, [sp, #4]
 800c3dc:	e7fa      	b.n	800c3d4 <RegionGetPhyParam+0xe>

0800c3de <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 800c3de:	b510      	push	{r4, lr}
    switch( region )
 800c3e0:	2801      	cmp	r0, #1
 800c3e2:	d102      	bne.n	800c3ea <RegionSetBandTxDone+0xc>
    {
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
 800c3e4:	0008      	movs	r0, r1
 800c3e6:	f000 f9b9 	bl	800c75c <RegionAU915SetBandTxDone>
        default:
        {
            return;
        }
    }
}
 800c3ea:	bd10      	pop	{r4, pc}

0800c3ec <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 800c3ec:	b510      	push	{r4, lr}
    switch( region )
 800c3ee:	2801      	cmp	r0, #1
 800c3f0:	d102      	bne.n	800c3f8 <RegionInitDefaults+0xc>
    {
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
 800c3f2:	0008      	movs	r0, r1
 800c3f4:	f000 f9ca 	bl	800c78c <RegionAU915InitDefaults>
        default:
        {
            break;
        }
    }
}
 800c3f8:	bd10      	pop	{r4, pc}

0800c3fa <RegionGetNvmCtx>:
        IN865_GET_NVM_CTX( );
        US915_GET_NVM_CTX( );
        RU864_GET_NVM_CTX( );
        default:
        {
           return 0;
 800c3fa:	2300      	movs	r3, #0
{
 800c3fc:	b510      	push	{r4, lr}
    switch( region )
 800c3fe:	2801      	cmp	r0, #1
 800c400:	d103      	bne.n	800c40a <RegionGetNvmCtx+0x10>
        AU915_GET_NVM_CTX( );
 800c402:	0008      	movs	r0, r1
 800c404:	f000 fa3c 	bl	800c880 <RegionAU915GetNvmCtx>
 800c408:	0003      	movs	r3, r0
        }
    }
}
 800c40a:	0018      	movs	r0, r3
 800c40c:	bd10      	pop	{r4, pc}

0800c40e <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800c40e:	b510      	push	{r4, lr}
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 800c410:	2300      	movs	r3, #0
{
 800c412:	0004      	movs	r4, r0
 800c414:	0008      	movs	r0, r1
 800c416:	0011      	movs	r1, r2
    switch( region )
 800c418:	2c01      	cmp	r4, #1
 800c41a:	d102      	bne.n	800c422 <RegionVerify+0x14>
        AU915_VERIFY( );
 800c41c:	f000 fa38 	bl	800c890 <RegionAU915Verify>
 800c420:	0003      	movs	r3, r0
        }
    }
}
 800c422:	0018      	movs	r0, r3
 800c424:	bd10      	pop	{r4, pc}

0800c426 <RegionChanMaskSet>:
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 800c426:	2300      	movs	r3, #0
{
 800c428:	b510      	push	{r4, lr}
    switch( region )
 800c42a:	2801      	cmp	r0, #1
 800c42c:	d103      	bne.n	800c436 <RegionChanMaskSet+0x10>
        AU915_CHAN_MASK_SET( );
 800c42e:	0008      	movs	r0, r1
 800c430:	f000 fa58 	bl	800c8e4 <RegionAU915ChanMaskSet>
 800c434:	0003      	movs	r3, r0
        }
    }
}
 800c436:	0018      	movs	r0, r3
 800c438:	bd10      	pop	{r4, pc}

0800c43a <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800c43a:	b510      	push	{r4, lr}
 800c43c:	0004      	movs	r4, r0
 800c43e:	0008      	movs	r0, r1
 800c440:	0011      	movs	r1, r2
 800c442:	001a      	movs	r2, r3
    switch( region )
 800c444:	2c01      	cmp	r4, #1
 800c446:	d102      	bne.n	800c44e <RegionComputeRxWindowParameters+0x14>
    {
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
 800c448:	9b02      	ldr	r3, [sp, #8]
 800c44a:	f000 fa77 	bl	800c93c <RegionAU915ComputeRxWindowParameters>
        default:
        {
            break;
        }
    }
}
 800c44e:	bd10      	pop	{r4, pc}

0800c450 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800c450:	b510      	push	{r4, lr}
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 800c452:	2300      	movs	r3, #0
{
 800c454:	0004      	movs	r4, r0
 800c456:	0008      	movs	r0, r1
 800c458:	0011      	movs	r1, r2
    switch( region )
 800c45a:	2c01      	cmp	r4, #1
 800c45c:	d102      	bne.n	800c464 <RegionRxConfig+0x14>
        AU915_RX_CONFIG( );
 800c45e:	f000 fa9b 	bl	800c998 <RegionAU915RxConfig>
 800c462:	0003      	movs	r3, r0
        }
    }
}
 800c464:	0018      	movs	r0, r3
 800c466:	bd10      	pop	{r4, pc}

0800c468 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800c468:	b570      	push	{r4, r5, r6, lr}
 800c46a:	0005      	movs	r5, r0
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 800c46c:	2400      	movs	r4, #0
{
 800c46e:	0008      	movs	r0, r1
 800c470:	0011      	movs	r1, r2
 800c472:	001a      	movs	r2, r3
    switch( region )
 800c474:	2d01      	cmp	r5, #1
 800c476:	d102      	bne.n	800c47e <RegionTxConfig+0x16>
        AU915_TX_CONFIG( );
 800c478:	f000 faea 	bl	800ca50 <RegionAU915TxConfig>
 800c47c:	0004      	movs	r4, r0
        }
    }
}
 800c47e:	0020      	movs	r0, r4
 800c480:	bd70      	pop	{r4, r5, r6, pc}

0800c482 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800c482:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c484:	0005      	movs	r5, r0
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 800c486:	2400      	movs	r4, #0
{
 800c488:	0008      	movs	r0, r1
 800c48a:	0011      	movs	r1, r2
 800c48c:	001a      	movs	r2, r3
    switch( region )
 800c48e:	2d01      	cmp	r5, #1
 800c490:	d105      	bne.n	800c49e <RegionLinkAdrReq+0x1c>
        AU915_LINK_ADR_REQ( );
 800c492:	9b07      	ldr	r3, [sp, #28]
 800c494:	9300      	str	r3, [sp, #0]
 800c496:	9b06      	ldr	r3, [sp, #24]
 800c498:	f000 fb46 	bl	800cb28 <RegionAU915LinkAdrReq>
 800c49c:	0004      	movs	r4, r0
        }
    }
}
 800c49e:	0020      	movs	r0, r4
 800c4a0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0800c4a2 <RegionRxParamSetupReq>:
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 800c4a2:	2300      	movs	r3, #0
{
 800c4a4:	b510      	push	{r4, lr}
    switch( region )
 800c4a6:	2801      	cmp	r0, #1
 800c4a8:	d103      	bne.n	800c4b2 <RegionRxParamSetupReq+0x10>
        AU915_RX_PARAM_SETUP_REQ( );
 800c4aa:	0008      	movs	r0, r1
 800c4ac:	f000 fc22 	bl	800ccf4 <RegionAU915RxParamSetupReq>
 800c4b0:	0003      	movs	r3, r0
        }
    }
}
 800c4b2:	0018      	movs	r0, r3
 800c4b4:	bd10      	pop	{r4, pc}

0800c4b6 <RegionNewChannelReq>:
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 800c4b6:	2300      	movs	r3, #0
{
 800c4b8:	b510      	push	{r4, lr}
    switch( region )
 800c4ba:	2801      	cmp	r0, #1
 800c4bc:	d103      	bne.n	800c4c6 <RegionNewChannelReq+0x10>
        AU915_NEW_CHANNEL_REQ( );
 800c4be:	0008      	movs	r0, r1
 800c4c0:	f000 fc3f 	bl	800cd42 <RegionAU915NewChannelReq>
 800c4c4:	0003      	movs	r3, r0
        }
    }
}
 800c4c6:	0018      	movs	r0, r3
 800c4c8:	bd10      	pop	{r4, pc}

0800c4ca <RegionTxParamSetupReq>:
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 800c4ca:	2300      	movs	r3, #0
{
 800c4cc:	b510      	push	{r4, lr}
    switch( region )
 800c4ce:	2801      	cmp	r0, #1
 800c4d0:	d103      	bne.n	800c4da <RegionTxParamSetupReq+0x10>
        AU915_TX_PARAM_SETUP_REQ( );
 800c4d2:	0008      	movs	r0, r1
 800c4d4:	f000 fc37 	bl	800cd46 <RegionAU915TxParamSetupReq>
 800c4d8:	0003      	movs	r3, r0
        }
    }
}
 800c4da:	0018      	movs	r0, r3
 800c4dc:	bd10      	pop	{r4, pc}

0800c4de <RegionDlChannelReq>:
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 800c4de:	2300      	movs	r3, #0
{
 800c4e0:	b510      	push	{r4, lr}
    switch( region )
 800c4e2:	2801      	cmp	r0, #1
 800c4e4:	d103      	bne.n	800c4ee <RegionDlChannelReq+0x10>
        AU915_DL_CHANNEL_REQ( );
 800c4e6:	0008      	movs	r0, r1
 800c4e8:	f000 fc2f 	bl	800cd4a <RegionAU915DlChannelReq>
 800c4ec:	0003      	movs	r3, r0
        }
    }
}
 800c4ee:	0018      	movs	r0, r3
 800c4f0:	bd10      	pop	{r4, pc}

0800c4f2 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 800c4f2:	b510      	push	{r4, lr}
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 800c4f4:	2300      	movs	r3, #0
{
 800c4f6:	0004      	movs	r4, r0
 800c4f8:	0008      	movs	r0, r1
 800c4fa:	0011      	movs	r1, r2
    switch( region )
 800c4fc:	2c01      	cmp	r4, #1
 800c4fe:	d102      	bne.n	800c506 <RegionAlternateDr+0x14>
        AU915_ALTERNATE_DR( );
 800c500:	f000 fc26 	bl	800cd50 <RegionAU915AlternateDr>
 800c504:	0003      	movs	r3, r0
        }
    }
}
 800c506:	0018      	movs	r0, r3
 800c508:	bd10      	pop	{r4, pc}

0800c50a <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800c50a:	b570      	push	{r4, r5, r6, lr}
 800c50c:	0005      	movs	r5, r0
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800c50e:	2409      	movs	r4, #9
{
 800c510:	0008      	movs	r0, r1
 800c512:	0011      	movs	r1, r2
 800c514:	001a      	movs	r2, r3
    switch( region )
 800c516:	2d01      	cmp	r5, #1
 800c518:	d103      	bne.n	800c522 <RegionNextChannel+0x18>
        AU915_NEXT_CHANNEL( );
 800c51a:	9b04      	ldr	r3, [sp, #16]
 800c51c:	f000 fc2a 	bl	800cd74 <RegionAU915NextChannel>
 800c520:	0004      	movs	r4, r0
        }
    }
}
 800c522:	0020      	movs	r0, r4
 800c524:	bd70      	pop	{r4, r5, r6, pc}

0800c526 <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 800c526:	b510      	push	{r4, lr}
    switch( region )
 800c528:	2801      	cmp	r0, #1
 800c52a:	d102      	bne.n	800c532 <RegionSetContinuousWave+0xc>
    {
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
 800c52c:	0008      	movs	r0, r1
 800c52e:	f000 fc95 	bl	800ce5c <RegionAU915SetContinuousWave>
        default:
        {
            break;
        }
    }
}
 800c532:	bd10      	pop	{r4, pc}

0800c534 <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 800c534:	b570      	push	{r4, r5, r6, lr}
 800c536:	0005      	movs	r5, r0
 800c538:	0008      	movs	r0, r1
 800c53a:	0011      	movs	r1, r2
 800c53c:	001a      	movs	r2, r3
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 800c53e:	b2cc      	uxtb	r4, r1
    switch( region )
 800c540:	2d01      	cmp	r5, #1
 800c542:	d102      	bne.n	800c54a <RegionApplyDrOffset+0x16>
        AU915_APPLY_DR_OFFSET( );
 800c544:	f000 fcb4 	bl	800ceb0 <RegionAU915ApplyDrOffset>
 800c548:	0004      	movs	r4, r0
        }
    }
}
 800c54a:	0020      	movs	r0, r4
 800c54c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c550 <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
 800c550:	4800      	ldr	r0, [pc, #0]	; (800c554 <RegionGetVersion+0x4>)
 800c552:	4770      	bx	lr
 800c554:	01000300 	.word	0x01000300

0800c558 <GetBandwidth>:
    return nextLowerDr;
}

static uint32_t GetBandwidth( uint32_t drIndex )
{
    switch( BandwidthsAU915[drIndex] )
 800c558:	4b06      	ldr	r3, [pc, #24]	; (800c574 <GetBandwidth+0x1c>)
 800c55a:	0080      	lsls	r0, r0, #2
 800c55c:	58c3      	ldr	r3, [r0, r3]
 800c55e:	4a06      	ldr	r2, [pc, #24]	; (800c578 <GetBandwidth+0x20>)
 800c560:	2001      	movs	r0, #1
 800c562:	4293      	cmp	r3, r2
 800c564:	d004      	beq.n	800c570 <GetBandwidth+0x18>
        case 125000:
            return 0;
        case 250000:
            return 1;
        case 500000:
            return 2;
 800c566:	4a05      	ldr	r2, [pc, #20]	; (800c57c <GetBandwidth+0x24>)
 800c568:	189b      	adds	r3, r3, r2
 800c56a:	4258      	negs	r0, r3
 800c56c:	4158      	adcs	r0, r3
 800c56e:	0040      	lsls	r0, r0, #1
    }
}
 800c570:	4770      	bx	lr
 800c572:	46c0      	nop			; (mov r8, r8)
 800c574:	0800fc04 	.word	0x0800fc04
 800c578:	0003d090 	.word	0x0003d090
 800c57c:	fff85ee0 	.word	0xfff85ee0

0800c580 <GetTimeOnAir>:
    }
    return true;
}

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800c580:	b530      	push	{r4, r5, lr}
 800c582:	0005      	movs	r5, r0
 800c584:	b085      	sub	sp, #20
 800c586:	000c      	movs	r4, r1
    int8_t phyDr = DataratesAU915[datarate];
    uint32_t bandwidth = GetBandwidth( datarate );
 800c588:	f7ff ffe6 	bl	800c558 <GetBandwidth>
    int8_t phyDr = DataratesAU915[datarate];
 800c58c:	4b08      	ldr	r3, [pc, #32]	; (800c5b0 <GetTimeOnAir+0x30>)
    uint32_t bandwidth = GetBandwidth( datarate );
 800c58e:	0001      	movs	r1, r0

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800c590:	575a      	ldrsb	r2, [r3, r5]
 800c592:	2300      	movs	r3, #0
 800c594:	2001      	movs	r0, #1
 800c596:	9301      	str	r3, [sp, #4]
 800c598:	3308      	adds	r3, #8
 800c59a:	9300      	str	r3, [sp, #0]
 800c59c:	4b05      	ldr	r3, [pc, #20]	; (800c5b4 <GetTimeOnAir+0x34>)
 800c59e:	b2e4      	uxtb	r4, r4
 800c5a0:	9402      	str	r4, [sp, #8]
 800c5a2:	9003      	str	r0, [sp, #12]
 800c5a4:	6a1c      	ldr	r4, [r3, #32]
 800c5a6:	0003      	movs	r3, r0
 800c5a8:	47a0      	blx	r4
}
 800c5aa:	b005      	add	sp, #20
 800c5ac:	bd30      	pop	{r4, r5, pc}
 800c5ae:	46c0      	nop			; (mov r8, r8)
 800c5b0:	0800fc6e 	.word	0x0800fc6e
 800c5b4:	0800fd8c 	.word	0x0800fd8c

0800c5b8 <VerifyRfFreq>:
{
 800c5b8:	b513      	push	{r0, r1, r4, lr}
    if( Radio.CheckRfFrequency( freq ) == false )
 800c5ba:	4b0a      	ldr	r3, [pc, #40]	; (800c5e4 <VerifyRfFreq+0x2c>)
{
 800c5bc:	0004      	movs	r4, r0
    if( Radio.CheckRfFrequency( freq ) == false )
 800c5be:	69db      	ldr	r3, [r3, #28]
 800c5c0:	9301      	str	r3, [sp, #4]
 800c5c2:	4798      	blx	r3
 800c5c4:	1e01      	subs	r1, r0, #0
 800c5c6:	d00b      	beq.n	800c5e0 <VerifyRfFreq+0x28>
    if( ( freq < AU915_FIRST_RX1_CHANNEL ) ||
 800c5c8:	4b07      	ldr	r3, [pc, #28]	; (800c5e8 <VerifyRfFreq+0x30>)
        return false;
 800c5ca:	2100      	movs	r1, #0
    if( ( freq < AU915_FIRST_RX1_CHANNEL ) ||
 800c5cc:	18e0      	adds	r0, r4, r3
 800c5ce:	4b07      	ldr	r3, [pc, #28]	; (800c5ec <VerifyRfFreq+0x34>)
 800c5d0:	4298      	cmp	r0, r3
 800c5d2:	d805      	bhi.n	800c5e0 <VerifyRfFreq+0x28>
        ( freq > AU915_LAST_RX1_CHANNEL ) ||
 800c5d4:	4906      	ldr	r1, [pc, #24]	; (800c5f0 <VerifyRfFreq+0x38>)
 800c5d6:	f7f3 fe43 	bl	8000260 <__aeabi_uidivmod>
 800c5da:	4248      	negs	r0, r1
 800c5dc:	4141      	adcs	r1, r0
 800c5de:	b2c9      	uxtb	r1, r1
}
 800c5e0:	0008      	movs	r0, r1
 800c5e2:	bd16      	pop	{r1, r2, r4, pc}
 800c5e4:	0800fd8c 	.word	0x0800fd8c
 800c5e8:	c8f78f60 	.word	0xc8f78f60
 800c5ec:	00401640 	.word	0x00401640
 800c5f0:	000927c0 	.word	0x000927c0

0800c5f4 <RegionAU915GetPhyParam>:

PhyParam_t RegionAU915GetPhyParam( GetPhyParams_t* getPhy )
{
 800c5f4:	b507      	push	{r0, r1, r2, lr}
    PhyParam_t phyParam = { 0 };
 800c5f6:	2200      	movs	r2, #0
{
 800c5f8:	0003      	movs	r3, r0
 800c5fa:	7800      	ldrb	r0, [r0, #0]
    PhyParam_t phyParam = { 0 };
 800c5fc:	9200      	str	r2, [sp, #0]

    switch( getPhy->Attribute )
 800c5fe:	3801      	subs	r0, #1
 800c600:	2838      	cmp	r0, #56	; 0x38
 800c602:	d831      	bhi.n	800c668 <RegionAU915GetPhyParam+0x74>
 800c604:	f7f3 fd88 	bl	8000118 <__gnu_thumb1_case_uqi>
 800c608:	3030301d 	.word	0x3030301d
 800c60c:	30303030 	.word	0x30303030
 800c610:	39363030 	.word	0x39363030
 800c614:	4e30453b 	.word	0x4e30453b
 800c618:	52505250 	.word	0x52505250
 800c61c:	61305754 	.word	0x61305754
 800c620:	67656320 	.word	0x67656320
 800c624:	6b303069 	.word	0x6b303069
 800c628:	3030226e 	.word	0x3030226e
 800c62c:	30303030 	.word	0x30303030
 800c630:	30303030 	.word	0x30303030
 800c634:	70303030 	.word	0x70303030
 800c638:	207c2076 	.word	0x207c2076
 800c63c:	7e202070 	.word	0x7e202070
 800c640:	82          	.byte	0x82
 800c641:	00          	.byte	0x00
    {
        case PHY_MIN_RX_DR:
        {
            if( getPhy->DownlinkDwellTime == 0)
 800c642:	78db      	ldrb	r3, [r3, #3]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d10f      	bne.n	800c668 <RegionAU915GetPhyParam+0x74>
            phyParam.Value = AU915_RX_WND_2_FREQ;
            break;
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = AU915_RX_WND_2_DR;
 800c648:	2308      	movs	r3, #8
 800c64a:	e014      	b.n	800c676 <RegionAU915GetPhyParam+0x82>
            if( getPhy->UplinkDwellTime == 0)
 800c64c:	789a      	ldrb	r2, [r3, #2]
 800c64e:	785b      	ldrb	r3, [r3, #1]
 800c650:	b25b      	sxtb	r3, r3
 800c652:	2a00      	cmp	r2, #0
 800c654:	d10a      	bne.n	800c66c <RegionAU915GetPhyParam+0x78>
    if( dr == minDr )
 800c656:	2b00      	cmp	r3, #0
 800c658:	d004      	beq.n	800c664 <RegionAU915GetPhyParam+0x70>
        nextLowerDr = DR_6;
 800c65a:	3206      	adds	r2, #6
    else if( dr == DR_8 )
 800c65c:	2b08      	cmp	r3, #8
 800c65e:	d001      	beq.n	800c664 <RegionAU915GetPhyParam+0x70>
        nextLowerDr = dr - 1;
 800c660:	3b01      	subs	r3, #1
 800c662:	b2da      	uxtb	r2, r3
                phyParam.Value = GetNextLowerTxDr( getPhy->Datarate, AU915_DWELL_LIMIT_DATARATE );
 800c664:	b252      	sxtb	r2, r2
 800c666:	9200      	str	r2, [sp, #0]
            break;
        }
    }

    return phyParam;
}
 800c668:	9800      	ldr	r0, [sp, #0]
 800c66a:	bd0e      	pop	{r1, r2, r3, pc}
        nextLowerDr = minDr;
 800c66c:	1e1a      	subs	r2, r3, #0
    if( dr == minDr )
 800c66e:	d0f9      	beq.n	800c664 <RegionAU915GetPhyParam+0x70>
        nextLowerDr = DR_6;
 800c670:	2206      	movs	r2, #6
 800c672:	e7f3      	b.n	800c65c <RegionAU915GetPhyParam+0x68>
            phyParam.Value = AU915_ADR_ACK_LIMIT;
 800c674:	2340      	movs	r3, #64	; 0x40
            phyParam.Value = DataratesAU915[getPhy->Datarate];
 800c676:	9300      	str	r3, [sp, #0]
            break;
 800c678:	e7f6      	b.n	800c668 <RegionAU915GetPhyParam+0x74>
            phyParam.Value = AU915_ADR_ACK_DELAY;
 800c67a:	2320      	movs	r3, #32
 800c67c:	e7fb      	b.n	800c676 <RegionAU915GetPhyParam+0x82>
            if( getPhy->UplinkDwellTime == 0 )
 800c67e:	2201      	movs	r2, #1
 800c680:	569a      	ldrsb	r2, [r3, r2]
 800c682:	789b      	ldrb	r3, [r3, #2]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d102      	bne.n	800c68e <RegionAU915GetPhyParam+0x9a>
                phyParam.Value = MaxPayloadOfDatarateDwell0AU915[getPhy->Datarate];
 800c688:	4b23      	ldr	r3, [pc, #140]	; (800c718 <RegionAU915GetPhyParam+0x124>)
            phyParam.Value = DataratesAU915[getPhy->Datarate];
 800c68a:	5cd3      	ldrb	r3, [r2, r3]
 800c68c:	e7f3      	b.n	800c676 <RegionAU915GetPhyParam+0x82>
                phyParam.Value = MaxPayloadOfDatarateDwell1AU915[getPhy->Datarate];
 800c68e:	4b23      	ldr	r3, [pc, #140]	; (800c71c <RegionAU915GetPhyParam+0x128>)
 800c690:	e7fb      	b.n	800c68a <RegionAU915GetPhyParam+0x96>
            if( getPhy->UplinkDwellTime == 0)
 800c692:	2201      	movs	r2, #1
 800c694:	569a      	ldrsb	r2, [r3, r2]
 800c696:	789b      	ldrb	r3, [r3, #2]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d101      	bne.n	800c6a0 <RegionAU915GetPhyParam+0xac>
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell0AU915[getPhy->Datarate];
 800c69c:	4b20      	ldr	r3, [pc, #128]	; (800c720 <RegionAU915GetPhyParam+0x12c>)
 800c69e:	e7f4      	b.n	800c68a <RegionAU915GetPhyParam+0x96>
                phyParam.Value = MaxPayloadOfDatarateRepeaterDwell1AU915[getPhy->Datarate];
 800c6a0:	4b20      	ldr	r3, [pc, #128]	; (800c724 <RegionAU915GetPhyParam+0x130>)
 800c6a2:	e7f2      	b.n	800c68a <RegionAU915GetPhyParam+0x96>
            phyParam.Value = AU915_MAX_RX_WINDOW;
 800c6a4:	4b20      	ldr	r3, [pc, #128]	; (800c728 <RegionAU915GetPhyParam+0x134>)
 800c6a6:	e7e6      	b.n	800c676 <RegionAU915GetPhyParam+0x82>
            phyParam.Value = AU915_RECEIVE_DELAY1;
 800c6a8:	4b20      	ldr	r3, [pc, #128]	; (800c72c <RegionAU915GetPhyParam+0x138>)
 800c6aa:	e7e4      	b.n	800c676 <RegionAU915GetPhyParam+0x82>
            phyParam.Value = AU915_RECEIVE_DELAY2;
 800c6ac:	4b20      	ldr	r3, [pc, #128]	; (800c730 <RegionAU915GetPhyParam+0x13c>)
 800c6ae:	e7e2      	b.n	800c676 <RegionAU915GetPhyParam+0x82>
            phyParam.Value = AU915_MAX_FCNT_GAP;
 800c6b0:	2380      	movs	r3, #128	; 0x80
 800c6b2:	01db      	lsls	r3, r3, #7
 800c6b4:	e7df      	b.n	800c676 <RegionAU915GetPhyParam+0x82>
            phyParam.Value = ( AU915_ACKTIMEOUT + randr( -AU915_ACK_TIMEOUT_RND, AU915_ACK_TIMEOUT_RND ) );
 800c6b6:	21fa      	movs	r1, #250	; 0xfa
 800c6b8:	481e      	ldr	r0, [pc, #120]	; (800c734 <RegionAU915GetPhyParam+0x140>)
 800c6ba:	0089      	lsls	r1, r1, #2
 800c6bc:	f000 fec0 	bl	800d440 <randr>
 800c6c0:	23fa      	movs	r3, #250	; 0xfa
 800c6c2:	00db      	lsls	r3, r3, #3
 800c6c4:	18c0      	adds	r0, r0, r3
            phyParam.Value = GetBandwidth( getPhy->Datarate );
 800c6c6:	9000      	str	r0, [sp, #0]
            break;
 800c6c8:	e7ce      	b.n	800c668 <RegionAU915GetPhyParam+0x74>
            phyParam.Value = AU915_RX_WND_2_FREQ;
 800c6ca:	4b1b      	ldr	r3, [pc, #108]	; (800c738 <RegionAU915GetPhyParam+0x144>)
 800c6cc:	e7d3      	b.n	800c676 <RegionAU915GetPhyParam+0x82>
            phyParam.ChannelsMask = NvmCtx.ChannelsMask;
 800c6ce:	4b1b      	ldr	r3, [pc, #108]	; (800c73c <RegionAU915GetPhyParam+0x148>)
 800c6d0:	e7d1      	b.n	800c676 <RegionAU915GetPhyParam+0x82>
            phyParam.ChannelsMask = NvmCtx.ChannelsDefaultMask;
 800c6d2:	4b1b      	ldr	r3, [pc, #108]	; (800c740 <RegionAU915GetPhyParam+0x14c>)
 800c6d4:	e7cf      	b.n	800c676 <RegionAU915GetPhyParam+0x82>
            phyParam.Value = AU915_MAX_NB_CHANNELS;
 800c6d6:	2348      	movs	r3, #72	; 0x48
 800c6d8:	e7cd      	b.n	800c676 <RegionAU915GetPhyParam+0x82>
            phyParam.Channels = NvmCtx.Channels;
 800c6da:	4b1a      	ldr	r3, [pc, #104]	; (800c744 <RegionAU915GetPhyParam+0x150>)
 800c6dc:	e7cb      	b.n	800c676 <RegionAU915GetPhyParam+0x82>
            phyParam.fValue = AU915_DEFAULT_MAX_EIRP;
 800c6de:	4b1a      	ldr	r3, [pc, #104]	; (800c748 <RegionAU915GetPhyParam+0x154>)
            phyParam.fValue = AU915_DEFAULT_ANTENNA_GAIN;
 800c6e0:	9300      	str	r3, [sp, #0]
            break;
 800c6e2:	e7c1      	b.n	800c668 <RegionAU915GetPhyParam+0x74>
            phyParam.fValue = AU915_DEFAULT_ANTENNA_GAIN;
 800c6e4:	4b19      	ldr	r3, [pc, #100]	; (800c74c <RegionAU915GetPhyParam+0x158>)
 800c6e6:	e7fb      	b.n	800c6e0 <RegionAU915GetPhyParam+0xec>
            phyParam.Value = AU915_BEACON_CHANNEL_FREQ + ( getPhy->Channel * AU915_BEACON_CHANNEL_STEPWIDTH );
 800c6e8:	791a      	ldrb	r2, [r3, #4]
 800c6ea:	4b19      	ldr	r3, [pc, #100]	; (800c750 <RegionAU915GetPhyParam+0x15c>)
 800c6ec:	4353      	muls	r3, r2
 800c6ee:	4a12      	ldr	r2, [pc, #72]	; (800c738 <RegionAU915GetPhyParam+0x144>)
 800c6f0:	189b      	adds	r3, r3, r2
 800c6f2:	e7c0      	b.n	800c676 <RegionAU915GetPhyParam+0x82>
            phyParam.BeaconFormat.BeaconSize = AU915_BEACON_SIZE;
 800c6f4:	466a      	mov	r2, sp
 800c6f6:	4b17      	ldr	r3, [pc, #92]	; (800c754 <RegionAU915GetPhyParam+0x160>)
 800c6f8:	8013      	strh	r3, [r2, #0]
            phyParam.BeaconFormat.Rfu2Size = AU915_RFU2_SIZE;
 800c6fa:	2301      	movs	r3, #1
 800c6fc:	7093      	strb	r3, [r2, #2]
            break;
 800c6fe:	e7b3      	b.n	800c668 <RegionAU915GetPhyParam+0x74>
            phyParam.Value = AU915_BEACON_CHANNEL_STEPWIDTH;
 800c700:	4b13      	ldr	r3, [pc, #76]	; (800c750 <RegionAU915GetPhyParam+0x15c>)
 800c702:	e7b8      	b.n	800c676 <RegionAU915GetPhyParam+0x82>
            phyParam.Value = DataratesAU915[getPhy->Datarate];
 800c704:	785b      	ldrb	r3, [r3, #1]
 800c706:	4a14      	ldr	r2, [pc, #80]	; (800c758 <RegionAU915GetPhyParam+0x164>)
 800c708:	b25b      	sxtb	r3, r3
 800c70a:	e7be      	b.n	800c68a <RegionAU915GetPhyParam+0x96>
            phyParam.Value = GetBandwidth( getPhy->Datarate );
 800c70c:	2001      	movs	r0, #1
 800c70e:	5618      	ldrsb	r0, [r3, r0]
 800c710:	f7ff ff22 	bl	800c558 <GetBandwidth>
 800c714:	e7d7      	b.n	800c6c6 <RegionAU915GetPhyParam+0xd2>
 800c716:	46c0      	nop			; (mov r8, r8)
 800c718:	0800fc7e 	.word	0x0800fc7e
 800c71c:	0800fc8c 	.word	0x0800fc8c
 800c720:	0800fc9a 	.word	0x0800fc9a
 800c724:	0800fca8 	.word	0x0800fca8
 800c728:	00000bb8 	.word	0x00000bb8
 800c72c:	00001388 	.word	0x00001388
 800c730:	00001770 	.word	0x00001770
 800c734:	fffffc18 	.word	0xfffffc18
 800c738:	370870a0 	.word	0x370870a0
 800c73c:	20001020 	.word	0x20001020
 800c740:	20001038 	.word	0x20001038
 800c744:	20000cac 	.word	0x20000cac
 800c748:	41f00000 	.word	0x41f00000
 800c74c:	4009999a 	.word	0x4009999a
 800c750:	000927c0 	.word	0x000927c0
 800c754:	00000313 	.word	0x00000313
 800c758:	0800fc6e 	.word	0x0800fc6e

0800c75c <RegionAU915SetBandTxDone>:

void RegionAU915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
    RegionCommonSetBandTxDone( &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band],
 800c75c:	230c      	movs	r3, #12
{
 800c75e:	b513      	push	{r0, r1, r4, lr}
 800c760:	0001      	movs	r1, r0
    RegionCommonSetBandTxDone( &NvmCtx.Bands[NvmCtx.Channels[txDone->Channel].Band],
 800c762:	7842      	ldrb	r2, [r0, #1]
 800c764:	7800      	ldrb	r0, [r0, #0]
 800c766:	4c08      	ldr	r4, [pc, #32]	; (800c788 <RegionAU915SetBandTxDone+0x2c>)
 800c768:	4343      	muls	r3, r0
 800c76a:	2014      	movs	r0, #20
 800c76c:	18e3      	adds	r3, r4, r3
 800c76e:	7a5b      	ldrb	r3, [r3, #9]
 800c770:	4358      	muls	r0, r3
 800c772:	23d8      	movs	r3, #216	; 0xd8
 800c774:	009b      	lsls	r3, r3, #2
 800c776:	18c0      	adds	r0, r0, r3
 800c778:	690b      	ldr	r3, [r1, #16]
 800c77a:	1900      	adds	r0, r0, r4
 800c77c:	9300      	str	r3, [sp, #0]
 800c77e:	68cb      	ldr	r3, [r1, #12]
 800c780:	6889      	ldr	r1, [r1, #8]
 800c782:	f000 fc2b 	bl	800cfdc <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
}
 800c786:	bd13      	pop	{r0, r1, r4, pc}
 800c788:	20000cac 	.word	0x20000cac

0800c78c <RegionAU915InitDefaults>:

void RegionAU915InitDefaults( InitDefaultsParams_t* params )
{
    Band_t bands[AU915_MAX_NB_BANDS] =
 800c78c:	2301      	movs	r3, #1
{
 800c78e:	b570      	push	{r4, r5, r6, lr}
 800c790:	b086      	sub	sp, #24
    Band_t bands[AU915_MAX_NB_BANDS] =
 800c792:	a901      	add	r1, sp, #4
 800c794:	800b      	strh	r3, [r1, #0]
 800c796:	2300      	movs	r3, #0
 800c798:	708b      	strb	r3, [r1, #2]
 800c79a:	604b      	str	r3, [r1, #4]
 800c79c:	608b      	str	r3, [r1, #8]
 800c79e:	60cb      	str	r3, [r1, #12]
 800c7a0:	740b      	strb	r3, [r1, #16]
    {
        AU915_BAND0
    };

    switch( params->Type )
 800c7a2:	7904      	ldrb	r4, [r0, #4]
 800c7a4:	2c02      	cmp	r4, #2
 800c7a6:	d812      	bhi.n	800c7ce <RegionAU915InitDefaults+0x42>
 800c7a8:	429c      	cmp	r4, r3
 800c7aa:	d014      	beq.n	800c7d6 <RegionAU915InitDefaults+0x4a>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800c7ac:	4c28      	ldr	r4, [pc, #160]	; (800c850 <RegionAU915InitDefaults+0xc4>)
 800c7ae:	2206      	movs	r2, #6
 800c7b0:	0020      	movs	r0, r4
 800c7b2:	4928      	ldr	r1, [pc, #160]	; (800c854 <RegionAU915InitDefaults+0xc8>)
 800c7b4:	f000 fc03 	bl	800cfbe <RegionCommonChanMaskCopy>
 800c7b8:	2306      	movs	r3, #6

            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
            { // Copy-And the channels mask
                NvmCtx.ChannelsMaskRemaining[i] &= NvmCtx.ChannelsMask[i];
 800c7ba:	89a1      	ldrh	r1, [r4, #12]
 800c7bc:	8822      	ldrh	r2, [r4, #0]
 800c7be:	3b01      	subs	r3, #1
 800c7c0:	400a      	ands	r2, r1
 800c7c2:	b2db      	uxtb	r3, r3
 800c7c4:	81a2      	strh	r2, [r4, #12]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800c7c6:	3402      	adds	r4, #2
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d1f6      	bne.n	800c7ba <RegionAU915InitDefaults+0x2e>
 800c7cc:	e001      	b.n	800c7d2 <RegionAU915InitDefaults+0x46>
    switch( params->Type )
 800c7ce:	2c03      	cmp	r4, #3
 800c7d0:	d034      	beq.n	800c83c <RegionAU915InitDefaults+0xb0>
        default:
        {
            break;
        }
    }
}
 800c7d2:	b006      	add	sp, #24
 800c7d4:	bd70      	pop	{r4, r5, r6, pc}
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * AU915_MAX_NB_BANDS );
 800c7d6:	2214      	movs	r2, #20
 800c7d8:	481f      	ldr	r0, [pc, #124]	; (800c858 <RegionAU915InitDefaults+0xcc>)
 800c7da:	f000 fe4d 	bl	800d478 <memcpy1>
            for( uint8_t i = 0; i < AU915_MAX_NB_CHANNELS - 8; i++ )
 800c7de:	4b1f      	ldr	r3, [pc, #124]	; (800c85c <RegionAU915InitDefaults+0xd0>)
                NvmCtx.Channels[i].DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800c7e0:	2550      	movs	r5, #80	; 0x50
 800c7e2:	0019      	movs	r1, r3
            memcpy1( ( uint8_t* )NvmCtx.Bands, ( uint8_t* )bands, sizeof( Band_t ) * AU915_MAX_NB_BANDS );
 800c7e4:	4a1e      	ldr	r2, [pc, #120]	; (800c860 <RegionAU915InitDefaults+0xd4>)
            for( uint8_t i = 0; i < AU915_MAX_NB_CHANNELS - 8; i++ )
 800c7e6:	481f      	ldr	r0, [pc, #124]	; (800c864 <RegionAU915InitDefaults+0xd8>)
                NvmCtx.Channels[i].Frequency = 915200000 + i * 200000;
 800c7e8:	4e1f      	ldr	r6, [pc, #124]	; (800c868 <RegionAU915InitDefaults+0xdc>)
 800c7ea:	601a      	str	r2, [r3, #0]
                NvmCtx.Channels[i].DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800c7ec:	1992      	adds	r2, r2, r6
 800c7ee:	721d      	strb	r5, [r3, #8]
                NvmCtx.Channels[i].Band = 0;
 800c7f0:	725c      	strb	r4, [r3, #9]
            for( uint8_t i = 0; i < AU915_MAX_NB_CHANNELS - 8; i++ )
 800c7f2:	330c      	adds	r3, #12
 800c7f4:	4282      	cmp	r2, r0
 800c7f6:	d1f7      	bne.n	800c7e8 <RegionAU915InitDefaults+0x5c>
                NvmCtx.Channels[i].DrRange.Value = ( DR_6 << 4 ) | DR_6;
 800c7f8:	2566      	movs	r5, #102	; 0x66
                NvmCtx.Channels[i].Band = 0;
 800c7fa:	2000      	movs	r0, #0
 800c7fc:	4b1b      	ldr	r3, [pc, #108]	; (800c86c <RegionAU915InitDefaults+0xe0>)
            for( uint8_t i = 0; i < AU915_MAX_NB_CHANNELS - 8; i++ )
 800c7fe:	4a1c      	ldr	r2, [pc, #112]	; (800c870 <RegionAU915InitDefaults+0xe4>)
            for( uint8_t i = AU915_MAX_NB_CHANNELS - 8; i < AU915_MAX_NB_CHANNELS; i++ )
 800c800:	4c1c      	ldr	r4, [pc, #112]	; (800c874 <RegionAU915InitDefaults+0xe8>)
                NvmCtx.Channels[i].Frequency = 915900000 + ( i - ( AU915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 800c802:	4e1d      	ldr	r6, [pc, #116]	; (800c878 <RegionAU915InitDefaults+0xec>)
 800c804:	601a      	str	r2, [r3, #0]
                NvmCtx.Channels[i].DrRange.Value = ( DR_6 << 4 ) | DR_6;
 800c806:	1992      	adds	r2, r2, r6
 800c808:	721d      	strb	r5, [r3, #8]
                NvmCtx.Channels[i].Band = 0;
 800c80a:	7258      	strb	r0, [r3, #9]
            for( uint8_t i = AU915_MAX_NB_CHANNELS - 8; i < AU915_MAX_NB_CHANNELS; i++ )
 800c80c:	330c      	adds	r3, #12
 800c80e:	42a2      	cmp	r2, r4
 800c810:	d1f7      	bne.n	800c802 <RegionAU915InitDefaults+0x76>
            NvmCtx.ChannelsDefaultMask[0] = 0x00FF;
 800c812:	23e3      	movs	r3, #227	; 0xe3
 800c814:	22ff      	movs	r2, #255	; 0xff
 800c816:	009b      	lsls	r3, r3, #2
 800c818:	50ca      	str	r2, [r1, r3]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800c81a:	4c0d      	ldr	r4, [pc, #52]	; (800c850 <RegionAU915InitDefaults+0xc4>)
            NvmCtx.ChannelsDefaultMask[2] = 0x0000;
 800c81c:	3304      	adds	r3, #4
 800c81e:	50c8      	str	r0, [r1, r3]
            NvmCtx.ChannelsDefaultMask[4] = 0x0001;
 800c820:	3afe      	subs	r2, #254	; 0xfe
 800c822:	3304      	adds	r3, #4
 800c824:	50ca      	str	r2, [r1, r3]
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, NvmCtx.ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800c826:	0020      	movs	r0, r4
 800c828:	490a      	ldr	r1, [pc, #40]	; (800c854 <RegionAU915InitDefaults+0xc8>)
 800c82a:	3205      	adds	r2, #5
 800c82c:	f000 fbc7 	bl	800cfbe <RegionCommonChanMaskCopy>
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMaskRemaining, NvmCtx.ChannelsMask, CHANNELS_MASK_SIZE );
 800c830:	2206      	movs	r2, #6
 800c832:	0021      	movs	r1, r4
 800c834:	4811      	ldr	r0, [pc, #68]	; (800c87c <RegionAU915InitDefaults+0xf0>)
 800c836:	f000 fbc2 	bl	800cfbe <RegionCommonChanMaskCopy>
            break;
 800c83a:	e7ca      	b.n	800c7d2 <RegionAU915InitDefaults+0x46>
            if( params->NvmCtx != 0 )
 800c83c:	6801      	ldr	r1, [r0, #0]
 800c83e:	2900      	cmp	r1, #0
 800c840:	d0c7      	beq.n	800c7d2 <RegionAU915InitDefaults+0x46>
                memcpy1( (uint8_t*) &NvmCtx, (uint8_t*) params->NvmCtx, sizeof( NvmCtx ) );
 800c842:	22e6      	movs	r2, #230	; 0xe6
 800c844:	4805      	ldr	r0, [pc, #20]	; (800c85c <RegionAU915InitDefaults+0xd0>)
 800c846:	0092      	lsls	r2, r2, #2
 800c848:	f000 fe16 	bl	800d478 <memcpy1>
}
 800c84c:	e7c1      	b.n	800c7d2 <RegionAU915InitDefaults+0x46>
 800c84e:	46c0      	nop			; (mov r8, r8)
 800c850:	20001020 	.word	0x20001020
 800c854:	20001038 	.word	0x20001038
 800c858:	2000100c 	.word	0x2000100c
 800c85c:	20000cac 	.word	0x20000cac
 800c860:	368cd800 	.word	0x368cd800
 800c864:	37502800 	.word	0x37502800
 800c868:	00030d40 	.word	0x00030d40
 800c86c:	20000fac 	.word	0x20000fac
 800c870:	36978660 	.word	0x36978660
 800c874:	375ad660 	.word	0x375ad660
 800c878:	00186a00 	.word	0x00186a00
 800c87c:	2000102c 	.word	0x2000102c

0800c880 <RegionAU915GetNvmCtx>:

void* RegionAU915GetNvmCtx( GetNvmCtxParams_t* params )
{
    params->nvmCtxSize = sizeof( RegionAU915NvmCtx_t );
 800c880:	23e6      	movs	r3, #230	; 0xe6
 800c882:	009b      	lsls	r3, r3, #2
 800c884:	6003      	str	r3, [r0, #0]
    return &NvmCtx;
}
 800c886:	4801      	ldr	r0, [pc, #4]	; (800c88c <RegionAU915GetNvmCtx+0xc>)
 800c888:	4770      	bx	lr
 800c88a:	46c0      	nop			; (mov r8, r8)
 800c88c:	20000cac 	.word	0x20000cac

0800c890 <RegionAU915Verify>:

bool RegionAU915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800c890:	0003      	movs	r3, r0
 800c892:	b510      	push	{r4, lr}
 800c894:	0008      	movs	r0, r1
 800c896:	290a      	cmp	r1, #10
 800c898:	d821      	bhi.n	800c8de <RegionAU915Verify+0x4e>
 800c89a:	f7f3 fc3d 	bl	8000118 <__gnu_thumb1_case_uqi>
 800c89e:	2006      	.short	0x2006
 800c8a0:	0a202020 	.word	0x0a202020
 800c8a4:	1c200f0a 	.word	0x1c200f0a
 800c8a8:	1c          	.byte	0x1c
 800c8a9:	00          	.byte	0x00
    switch( phyAttribute )
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 800c8aa:	6818      	ldr	r0, [r3, #0]
 800c8ac:	f7ff fe84 	bl	800c5b8 <VerifyRfFreq>
            return AU915_DUTY_CYCLE_ENABLED;
        }
        default:
            return false;
    }
}
 800c8b0:	bd10      	pop	{r4, pc}
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AU915_DWELL_LIMIT_DATARATE, AU915_TX_MAX_DATARATE );
 800c8b2:	2000      	movs	r0, #0
 800c8b4:	220c      	movs	r2, #12
 800c8b6:	5618      	ldrsb	r0, [r3, r0]
            return RegionCommonValueInRange( verify->TxPower, AU915_MAX_TX_POWER, AU915_MIN_TX_POWER );
 800c8b8:	2100      	movs	r1, #0
 800c8ba:	e006      	b.n	800c8ca <RegionAU915Verify+0x3a>
            if( verify->DatarateParams.UplinkDwellTime == 0 )
 800c8bc:	2000      	movs	r0, #0
 800c8be:	5618      	ldrsb	r0, [r3, r0]
 800c8c0:	789b      	ldrb	r3, [r3, #2]
                return RegionCommonValueInRange( verify->DatarateParams.Datarate, AU915_RX_MIN_DATARATE, AU915_RX_MAX_DATARATE );
 800c8c2:	220d      	movs	r2, #13
 800c8c4:	2108      	movs	r1, #8
            if( verify->DatarateParams.UplinkDwellTime == 0 )
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d1f6      	bne.n	800c8b8 <RegionAU915Verify+0x28>
            return RegionCommonValueInRange( verify->TxPower, AU915_MAX_TX_POWER, AU915_MIN_TX_POWER );
 800c8ca:	f000 fb3b 	bl	800cf44 <RegionCommonValueInRange>
 800c8ce:	1e43      	subs	r3, r0, #1
 800c8d0:	4198      	sbcs	r0, r3
 800c8d2:	b2c0      	uxtb	r0, r0
 800c8d4:	e7ec      	b.n	800c8b0 <RegionAU915Verify+0x20>
 800c8d6:	2000      	movs	r0, #0
 800c8d8:	2216      	movs	r2, #22
 800c8da:	5618      	ldrsb	r0, [r3, r0]
 800c8dc:	e7ec      	b.n	800c8b8 <RegionAU915Verify+0x28>
{
 800c8de:	2000      	movs	r0, #0
 800c8e0:	e7e6      	b.n	800c8b0 <RegionAU915Verify+0x20>
	...

0800c8e4 <RegionAU915ChanMaskSet>:
        NvmCtx.ChannelsMaskRemaining[chMaskItr] &= NvmCtx.ChannelsMask[chMaskItr];
    }
}

bool RegionAU915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800c8e4:	b570      	push	{r4, r5, r6, lr}
    switch( chanMaskSet->ChannelsMaskType )
 800c8e6:	7904      	ldrb	r4, [r0, #4]
 800c8e8:	2c00      	cmp	r4, #0
 800c8ea:	d003      	beq.n	800c8f4 <RegionAU915ChanMaskSet+0x10>
 800c8ec:	2c01      	cmp	r4, #1
 800c8ee:	d017      	beq.n	800c920 <RegionAU915ChanMaskSet+0x3c>
 800c8f0:	2000      	movs	r0, #0
        }
        default:
            return false;
    }
    return true;
}
 800c8f2:	bd70      	pop	{r4, r5, r6, pc}
            RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, chanMaskSet->ChannelsMaskIn, 6 );
 800c8f4:	4d0e      	ldr	r5, [pc, #56]	; (800c930 <RegionAU915ChanMaskSet+0x4c>)
 800c8f6:	2206      	movs	r2, #6
 800c8f8:	6801      	ldr	r1, [r0, #0]
 800c8fa:	0028      	movs	r0, r5
 800c8fc:	f000 fb5f 	bl	800cfbe <RegionCommonChanMaskCopy>
            NvmCtx.ChannelsDefaultMask[4] = NvmCtx.ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 800c900:	23e5      	movs	r3, #229	; 0xe5
 800c902:	4a0c      	ldr	r2, [pc, #48]	; (800c934 <RegionAU915ChanMaskSet+0x50>)
 800c904:	009b      	lsls	r3, r3, #2
 800c906:	50d4      	str	r4, [r2, r3]
 800c908:	2306      	movs	r3, #6
                NvmCtx.ChannelsMaskRemaining[i] &= NvmCtx.ChannelsMask[i];
 800c90a:	89a9      	ldrh	r1, [r5, #12]
 800c90c:	882a      	ldrh	r2, [r5, #0]
 800c90e:	3b01      	subs	r3, #1
 800c910:	400a      	ands	r2, r1
 800c912:	b2db      	uxtb	r3, r3
 800c914:	81aa      	strh	r2, [r5, #12]
            for( uint8_t i = 0; i < 6; i++ )
 800c916:	3502      	adds	r5, #2
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d1f6      	bne.n	800c90a <RegionAU915ChanMaskSet+0x26>
    return true;
 800c91c:	2001      	movs	r0, #1
 800c91e:	e7e8      	b.n	800c8f2 <RegionAU915ChanMaskSet+0xe>
            RegionCommonChanMaskCopy( NvmCtx.ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 6 );
 800c920:	6801      	ldr	r1, [r0, #0]
 800c922:	2206      	movs	r2, #6
 800c924:	4804      	ldr	r0, [pc, #16]	; (800c938 <RegionAU915ChanMaskSet+0x54>)
 800c926:	f000 fb4a 	bl	800cfbe <RegionCommonChanMaskCopy>
    return true;
 800c92a:	0020      	movs	r0, r4
            break;
 800c92c:	e7e1      	b.n	800c8f2 <RegionAU915ChanMaskSet+0xe>
 800c92e:	46c0      	nop			; (mov r8, r8)
 800c930:	20001020 	.word	0x20001020
 800c934:	20000cac 	.word	0x20000cac
 800c938:	20001038 	.word	0x20001038

0800c93c <RegionAU915ComputeRxWindowParameters>:

void RegionAU915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800c93c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c93e:	001c      	movs	r4, r3
 800c940:	000e      	movs	r6, r1
 800c942:	0017      	movs	r7, r2
 800c944:	b085      	sub	sp, #20
    /* ST_WORKAROUND_BEGIN: remove float/double */
    uint32_t tSymbol = 0;
    /* ST_WORKAROUND_END */

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, AU915_RX_MAX_DATARATE );
 800c946:	1c03      	adds	r3, r0, #0
 800c948:	280d      	cmp	r0, #13
 800c94a:	dd00      	ble.n	800c94e <RegionAU915ComputeRxWindowParameters+0x12>
 800c94c:	230d      	movs	r3, #13
 800c94e:	b25d      	sxtb	r5, r3
 800c950:	7063      	strb	r3, [r4, #1]
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 800c952:	0028      	movs	r0, r5
 800c954:	f7ff fe00 	bl	800c558 <GetBandwidth>

    tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesAU915[rxConfigParams->Datarate], BandwidthsAU915[rxConfigParams->Datarate] );
 800c958:	4b0c      	ldr	r3, [pc, #48]	; (800c98c <RegionAU915ComputeRxWindowParameters+0x50>)
    rxConfigParams->Bandwidth = GetBandwidth( rxConfigParams->Datarate );
 800c95a:	70a0      	strb	r0, [r4, #2]
    tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesAU915[rxConfigParams->Datarate], BandwidthsAU915[rxConfigParams->Datarate] );
 800c95c:	5d58      	ldrb	r0, [r3, r5]
 800c95e:	4b0c      	ldr	r3, [pc, #48]	; (800c990 <RegionAU915ComputeRxWindowParameters+0x54>)
 800c960:	00aa      	lsls	r2, r5, #2
 800c962:	58d1      	ldr	r1, [r2, r3]
 800c964:	f000 fc4a 	bl	800d1fc <RegionCommonComputeSymbolTimeLoRa>

    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800c968:	4b0a      	ldr	r3, [pc, #40]	; (800c994 <RegionAU915ComputeRxWindowParameters+0x58>)
    tSymbol = RegionCommonComputeSymbolTimeLoRa( DataratesAU915[rxConfigParams->Datarate], BandwidthsAU915[rxConfigParams->Datarate] );
 800c96a:	0005      	movs	r5, r0
    RegionCommonComputeRxWindowParameters( tSymbol, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800c96c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c96e:	9303      	str	r3, [sp, #12]
 800c970:	4798      	blx	r3
 800c972:	0022      	movs	r2, r4
 800c974:	3408      	adds	r4, #8
 800c976:	320c      	adds	r2, #12
 800c978:	0003      	movs	r3, r0
 800c97a:	9201      	str	r2, [sp, #4]
 800c97c:	0031      	movs	r1, r6
 800c97e:	003a      	movs	r2, r7
 800c980:	0028      	movs	r0, r5
 800c982:	9400      	str	r4, [sp, #0]
 800c984:	f000 fc44 	bl	800d210 <RegionCommonComputeRxWindowParameters>
}
 800c988:	b005      	add	sp, #20
 800c98a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c98c:	0800fc6e 	.word	0x0800fc6e
 800c990:	0800fc04 	.word	0x0800fc04
 800c994:	0800fd8c 	.word	0x0800fd8c

0800c998 <RegionAU915RxConfig>:

bool RegionAU915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800c998:	b5f0      	push	{r4, r5, r6, r7, lr}
    int8_t dr = rxConfig->Datarate;
 800c99a:	2601      	movs	r6, #1
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;

    if( Radio.GetStatus( ) != RF_IDLE )
 800c99c:	4f26      	ldr	r7, [pc, #152]	; (800ca38 <RegionAU915RxConfig+0xa0>)
{
 800c99e:	b08f      	sub	sp, #60	; 0x3c
    if( Radio.GetStatus( ) != RF_IDLE )
 800c9a0:	687b      	ldr	r3, [r7, #4]
{
 800c9a2:	910c      	str	r1, [sp, #48]	; 0x30
    int8_t dr = rxConfig->Datarate;
 800c9a4:	5786      	ldrsb	r6, [r0, r6]
{
 800c9a6:	0004      	movs	r4, r0
    if( Radio.GetStatus( ) != RF_IDLE )
 800c9a8:	930b      	str	r3, [sp, #44]	; 0x2c
    uint32_t frequency = rxConfig->Frequency;
 800c9aa:	6845      	ldr	r5, [r0, #4]
    if( Radio.GetStatus( ) != RF_IDLE )
 800c9ac:	4798      	blx	r3
    {
        return false;
 800c9ae:	2300      	movs	r3, #0
    if( Radio.GetStatus( ) != RF_IDLE )
 800c9b0:	4298      	cmp	r0, r3
 800c9b2:	d13b      	bne.n	800ca2c <RegionAU915RxConfig+0x94>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800c9b4:	7ce3      	ldrb	r3, [r4, #19]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d106      	bne.n	800c9c8 <RegionAU915RxConfig+0x30>
    {
        // Apply window 1 frequency
        frequency = AU915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * AU915_STEPWIDTH_RX1_CHANNEL;
 800c9ba:	7825      	ldrb	r5, [r4, #0]
 800c9bc:	3307      	adds	r3, #7
 800c9be:	402b      	ands	r3, r5
 800c9c0:	4d1e      	ldr	r5, [pc, #120]	; (800ca3c <RegionAU915RxConfig+0xa4>)
 800c9c2:	435d      	muls	r5, r3
 800c9c4:	4b1e      	ldr	r3, [pc, #120]	; (800ca40 <RegionAU915RxConfig+0xa8>)
 800c9c6:	18ed      	adds	r5, r5, r3
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesAU915[dr];
 800c9c8:	4b1e      	ldr	r3, [pc, #120]	; (800ca44 <RegionAU915RxConfig+0xac>)

    Radio.SetChannel( frequency );
 800c9ca:	0028      	movs	r0, r5
    phyDr = DataratesAU915[dr];
 800c9cc:	579b      	ldrsb	r3, [r3, r6]
 800c9ce:	930b      	str	r3, [sp, #44]	; 0x2c
    Radio.SetChannel( frequency );
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	930d      	str	r3, [sp, #52]	; 0x34
 800c9d4:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800c9d6:	7ca3      	ldrb	r3, [r4, #18]
 800c9d8:	2200      	movs	r2, #0
 800c9da:	9309      	str	r3, [sp, #36]	; 0x24
 800c9dc:	68a3      	ldr	r3, [r4, #8]
 800c9de:	2001      	movs	r0, #1
 800c9e0:	b29b      	uxth	r3, r3
 800c9e2:	9302      	str	r3, [sp, #8]
 800c9e4:	2308      	movs	r3, #8
 800c9e6:	9301      	str	r3, [sp, #4]
 800c9e8:	697b      	ldr	r3, [r7, #20]
 800c9ea:	9207      	str	r2, [sp, #28]
 800c9ec:	930d      	str	r3, [sp, #52]	; 0x34
 800c9ee:	9206      	str	r2, [sp, #24]
 800c9f0:	0003      	movs	r3, r0
 800c9f2:	9205      	str	r2, [sp, #20]
 800c9f4:	9204      	str	r2, [sp, #16]
 800c9f6:	9203      	str	r2, [sp, #12]
 800c9f8:	9200      	str	r2, [sp, #0]
 800c9fa:	78a1      	ldrb	r1, [r4, #2]
 800c9fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c9fe:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800ca00:	9008      	str	r0, [sp, #32]
 800ca02:	47b8      	blx	r7

    if( rxConfig->RepeaterSupport == true )
 800ca04:	7c63      	ldrb	r3, [r4, #17]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d013      	beq.n	800ca32 <RegionAU915RxConfig+0x9a>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterDwell0AU915[dr];
 800ca0a:	4b0f      	ldr	r3, [pc, #60]	; (800ca48 <RegionAU915RxConfig+0xb0>)
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateDwell0AU915[dr];
 800ca0c:	5d99      	ldrb	r1, [r3, r6]
    }
    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800ca0e:	4b0a      	ldr	r3, [pc, #40]	; (800ca38 <RegionAU915RxConfig+0xa0>)
 800ca10:	310d      	adds	r1, #13
 800ca12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ca14:	2001      	movs	r0, #1
 800ca16:	b2c9      	uxtb	r1, r1
 800ca18:	930b      	str	r3, [sp, #44]	; 0x2c
 800ca1a:	4798      	blx	r3
    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800ca1c:	0032      	movs	r2, r6
 800ca1e:	0029      	movs	r1, r5
 800ca20:	7ce0      	ldrb	r0, [r4, #19]
 800ca22:	f000 fcd1 	bl	800d3c8 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 800ca26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ca28:	701e      	strb	r6, [r3, #0]
    return true;
 800ca2a:	2301      	movs	r3, #1
}
 800ca2c:	0018      	movs	r0, r3
 800ca2e:	b00f      	add	sp, #60	; 0x3c
 800ca30:	bdf0      	pop	{r4, r5, r6, r7, pc}
        maxPayload = MaxPayloadOfDatarateDwell0AU915[dr];
 800ca32:	4b06      	ldr	r3, [pc, #24]	; (800ca4c <RegionAU915RxConfig+0xb4>)
 800ca34:	e7ea      	b.n	800ca0c <RegionAU915RxConfig+0x74>
 800ca36:	46c0      	nop			; (mov r8, r8)
 800ca38:	0800fd8c 	.word	0x0800fd8c
 800ca3c:	000927c0 	.word	0x000927c0
 800ca40:	370870a0 	.word	0x370870a0
 800ca44:	0800fc6e 	.word	0x0800fc6e
 800ca48:	0800fc9a 	.word	0x0800fc9a
 800ca4c:	0800fc7e 	.word	0x0800fc7e

0800ca50 <RegionAU915TxConfig>:

bool RegionAU915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800ca50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca52:	0004      	movs	r4, r0
    int8_t phyDr = DataratesAU915[txConfig->Datarate];
 800ca54:	2001      	movs	r0, #1
{
 800ca56:	b091      	sub	sp, #68	; 0x44
 800ca58:	920d      	str	r2, [sp, #52]	; 0x34
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 800ca5a:	220c      	movs	r2, #12
    int8_t phyDr = DataratesAU915[txConfig->Datarate];
 800ca5c:	5620      	ldrsb	r0, [r4, r0]
 800ca5e:	4b2e      	ldr	r3, [pc, #184]	; (800cb18 <RegionAU915TxConfig+0xc8>)
{
 800ca60:	910c      	str	r1, [sp, #48]	; 0x30
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 800ca62:	7821      	ldrb	r1, [r4, #0]
    int8_t phyDr = DataratesAU915[txConfig->Datarate];
 800ca64:	561b      	ldrsb	r3, [r3, r0]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 800ca66:	434a      	muls	r2, r1
    int8_t phyDr = DataratesAU915[txConfig->Datarate];
 800ca68:	001f      	movs	r7, r3
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 800ca6a:	4b2c      	ldr	r3, [pc, #176]	; (800cb1c <RegionAU915TxConfig+0xcc>)
 800ca6c:	189a      	adds	r2, r3, r2
 800ca6e:	7a51      	ldrb	r1, [r2, #9]
 800ca70:	2214      	movs	r2, #20
 800ca72:	434a      	muls	r2, r1
    txPowerResult =  MAX( txPower, maxBandTxPower );
 800ca74:	2102      	movs	r1, #2
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 800ca76:	189b      	adds	r3, r3, r2
 800ca78:	4a29      	ldr	r2, [pc, #164]	; (800cb20 <RegionAU915TxConfig+0xd0>)
    txPowerResult =  MAX( txPower, maxBandTxPower );
 800ca7a:	5661      	ldrsb	r1, [r4, r1]
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, NvmCtx.Bands[NvmCtx.Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, NvmCtx.ChannelsMask );
 800ca7c:	189b      	adds	r3, r3, r2
    txPowerResult =  MAX( txPower, maxBandTxPower );
 800ca7e:	781b      	ldrb	r3, [r3, #0]
 800ca80:	78a2      	ldrb	r2, [r4, #2]
 800ca82:	1c1e      	adds	r6, r3, #0
 800ca84:	b25b      	sxtb	r3, r3
 800ca86:	428b      	cmp	r3, r1
 800ca88:	da00      	bge.n	800ca8c <RegionAU915TxConfig+0x3c>
 800ca8a:	1c16      	adds	r6, r2, #0
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
 800ca8c:	f7ff fd64 	bl	800c558 <GetBandwidth>
    txPowerResult =  MAX( txPower, maxBandTxPower );
 800ca90:	b275      	sxtb	r5, r6
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800ca92:	68a2      	ldr	r2, [r4, #8]
 800ca94:	6861      	ldr	r1, [r4, #4]
    uint32_t bandwidth = GetBandwidth( txConfig->Datarate );
 800ca96:	900b      	str	r0, [sp, #44]	; 0x2c
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800ca98:	0028      	movs	r0, r5
 800ca9a:	f000 fbe3 	bl	800d264 <RegionCommonComputeTxPower>

    // Setup the radio frequency
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 800ca9e:	220c      	movs	r2, #12
 800caa0:	7823      	ldrb	r3, [r4, #0]
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800caa2:	900e      	str	r0, [sp, #56]	; 0x38
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 800caa4:	4353      	muls	r3, r2
 800caa6:	4a1f      	ldr	r2, [pc, #124]	; (800cb24 <RegionAU915TxConfig+0xd4>)

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800caa8:	2501      	movs	r5, #1
    Radio.SetChannel( NvmCtx.Channels[txConfig->Channel].Frequency );
 800caaa:	68d1      	ldr	r1, [r2, #12]
 800caac:	910f      	str	r1, [sp, #60]	; 0x3c
 800caae:	491b      	ldr	r1, [pc, #108]	; (800cb1c <RegionAU915TxConfig+0xcc>)
 800cab0:	5858      	ldr	r0, [r3, r1]
 800cab2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cab4:	4798      	blx	r3
    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800cab6:	23fa      	movs	r3, #250	; 0xfa
 800cab8:	011b      	lsls	r3, r3, #4
 800caba:	9308      	str	r3, [sp, #32]
 800cabc:	2308      	movs	r3, #8
 800cabe:	2200      	movs	r2, #0
 800cac0:	9302      	str	r3, [sp, #8]
 800cac2:	4b18      	ldr	r3, [pc, #96]	; (800cb24 <RegionAU915TxConfig+0xd4>)
 800cac4:	0028      	movs	r0, r5
 800cac6:	699b      	ldr	r3, [r3, #24]
 800cac8:	990e      	ldr	r1, [sp, #56]	; 0x38
 800caca:	930f      	str	r3, [sp, #60]	; 0x3c
 800cacc:	9207      	str	r2, [sp, #28]
 800cace:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cad0:	9206      	str	r2, [sp, #24]
 800cad2:	9205      	str	r2, [sp, #20]
 800cad4:	9203      	str	r2, [sp, #12]
 800cad6:	9700      	str	r7, [sp, #0]
 800cad8:	9504      	str	r5, [sp, #16]
 800cada:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800cadc:	9501      	str	r5, [sp, #4]
 800cade:	47b8      	blx	r7
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(NvmCtx.Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800cae0:	220c      	movs	r2, #12
 800cae2:	2101      	movs	r1, #1
 800cae4:	7823      	ldrb	r3, [r4, #0]
 800cae6:	5661      	ldrsb	r1, [r4, r1]
 800cae8:	4353      	muls	r3, r2
 800caea:	4a0c      	ldr	r2, [pc, #48]	; (800cb1c <RegionAU915TxConfig+0xcc>)
 800caec:	5898      	ldr	r0, [r3, r2]
 800caee:	f000 fc95 	bl	800d41c <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 800caf2:	4b0c      	ldr	r3, [pc, #48]	; (800cb24 <RegionAU915TxConfig+0xd4>)
 800caf4:	0028      	movs	r0, r5
 800caf6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800caf8:	7b21      	ldrb	r1, [r4, #12]
 800cafa:	930b      	str	r3, [sp, #44]	; 0x2c
 800cafc:	4798      	blx	r3
    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800cafe:	2001      	movs	r0, #1
 800cb00:	89a1      	ldrh	r1, [r4, #12]
 800cb02:	5620      	ldrsb	r0, [r4, r0]
 800cb04:	f7ff fd3c 	bl	800c580 <GetTimeOnAir>
 800cb08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb0a:	6018      	str	r0, [r3, #0]

    *txPower = txPowerLimited;
    return true;
}
 800cb0c:	0028      	movs	r0, r5
    *txPower = txPowerLimited;
 800cb0e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cb10:	701e      	strb	r6, [r3, #0]
}
 800cb12:	b011      	add	sp, #68	; 0x44
 800cb14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb16:	46c0      	nop			; (mov r8, r8)
 800cb18:	0800fc6e 	.word	0x0800fc6e
 800cb1c:	20000cac 	.word	0x20000cac
 800cb20:	00000362 	.word	0x00000362
 800cb24:	0800fd8c 	.word	0x0800fd8c

0800cb28 <RegionAU915LinkAdrReq>:

uint8_t RegionAU915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800cb28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb2a:	b097      	sub	sp, #92	; 0x5c
 800cb2c:	9103      	str	r1, [sp, #12]
 800cb2e:	9204      	str	r2, [sp, #16]
    uint8_t status = 0x07;
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800cb30:	2100      	movs	r1, #0
 800cb32:	2206      	movs	r2, #6
{
 800cb34:	0004      	movs	r4, r0
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800cb36:	a809      	add	r0, sp, #36	; 0x24
{
 800cb38:	9305      	str	r3, [sp, #20]
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800cb3a:	f002 fab2 	bl	800f0a2 <memset>
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 800cb3e:	220c      	movs	r2, #12
 800cb40:	2100      	movs	r1, #0
 800cb42:	a80b      	add	r0, sp, #44	; 0x2c
 800cb44:	f002 faad 	bl	800f0a2 <memset>
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, NvmCtx.ChannelsMask, 6 );
 800cb48:	2206      	movs	r2, #6
 800cb4a:	4967      	ldr	r1, [pc, #412]	; (800cce8 <RegionAU915LinkAdrReq+0x1c0>)
 800cb4c:	a80b      	add	r0, sp, #44	; 0x2c
 800cb4e:	f000 fa36 	bl	800cfbe <RegionCommonChanMaskCopy>
    uint8_t bytesProcessed = 0;
 800cb52:	2300      	movs	r3, #0
 800cb54:	9300      	str	r3, [sp, #0]

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800cb56:	7a23      	ldrb	r3, [r4, #8]
 800cb58:	9a00      	ldr	r2, [sp, #0]
 800cb5a:	ad09      	add	r5, sp, #36	; 0x24
 800cb5c:	4293      	cmp	r3, r2
 800cb5e:	d907      	bls.n	800cb70 <RegionAU915LinkAdrReq+0x48>
    {
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800cb60:	6863      	ldr	r3, [r4, #4]
 800cb62:	9a00      	ldr	r2, [sp, #0]
 800cb64:	0029      	movs	r1, r5
 800cb66:	1898      	adds	r0, r3, r2
 800cb68:	f000 fae6 	bl	800d138 <RegionCommonParseLinkAdrReq>

        if( nextIndex == 0 )
 800cb6c:	2800      	cmp	r0, #0
 800cb6e:	d167      	bne.n	800cc40 <RegionAU915LinkAdrReq+0x118>
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_6 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 800cb70:	2301      	movs	r3, #1
 800cb72:	56eb      	ldrsb	r3, [r5, r3]
 800cb74:	2b05      	cmp	r3, #5
 800cb76:	dc07      	bgt.n	800cb88 <RegionAU915LinkAdrReq+0x60>
 800cb78:	2204      	movs	r2, #4
 800cb7a:	2100      	movs	r1, #0
 800cb7c:	a80b      	add	r0, sp, #44	; 0x2c
 800cb7e:	f000 f9ff 	bl	800cf80 <RegionCommonCountChannels>
    {
        status &= 0xFE; // Channel mask KO
 800cb82:	2506      	movs	r5, #6
    if( ( linkAdrParams.Datarate < DR_6 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 800cb84:	2801      	cmp	r0, #1
 800cb86:	d900      	bls.n	800cb8a <RegionAU915LinkAdrReq+0x62>
    uint8_t bytesProcessed = 0;
 800cb88:	2507      	movs	r5, #7
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800cb8a:	2302      	movs	r3, #2
 800cb8c:	aa06      	add	r2, sp, #24
 800cb8e:	7113      	strb	r3, [r2, #4]
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800cb90:	7a63      	ldrb	r3, [r4, #9]
    phyParam = RegionAU915GetPhyParam( &getPhy );

    linkAdrVerifyParams.Status = status;
 800cb92:	af0e      	add	r7, sp, #56	; 0x38
    phyParam = RegionAU915GetPhyParam( &getPhy );
 800cb94:	a807      	add	r0, sp, #28
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800cb96:	7193      	strb	r3, [r2, #6]
    phyParam = RegionAU915GetPhyParam( &getPhy );
 800cb98:	f7ff fd2c 	bl	800c5f4 <RegionAU915GetPhyParam>
    linkAdrVerifyParams.Status = status;
 800cb9c:	713d      	strb	r5, [r7, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800cb9e:	7aa3      	ldrb	r3, [r4, #10]
    linkAdrVerifyParams.MinTxPower = AU915_MIN_TX_POWER;
    linkAdrVerifyParams.MaxTxPower = AU915_MAX_TX_POWER;
    linkAdrVerifyParams.Version = linkAdrReq->Version;

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800cba0:	a906      	add	r1, sp, #24
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800cba2:	717b      	strb	r3, [r7, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800cba4:	ab09      	add	r3, sp, #36	; 0x24
 800cba6:	785a      	ldrb	r2, [r3, #1]
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 800cba8:	4d50      	ldr	r5, [pc, #320]	; (800ccec <RegionAU915LinkAdrReq+0x1c4>)
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800cbaa:	71ba      	strb	r2, [r7, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800cbac:	789a      	ldrb	r2, [r3, #2]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 800cbae:	ae0b      	add	r6, sp, #44	; 0x2c
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800cbb0:	71fa      	strb	r2, [r7, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800cbb2:	781a      	ldrb	r2, [r3, #0]
 800cbb4:	723a      	strb	r2, [r7, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800cbb6:	7ae2      	ldrb	r2, [r4, #11]
 800cbb8:	727a      	strb	r2, [r7, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800cbba:	7b22      	ldrb	r2, [r4, #12]
 800cbbc:	72ba      	strb	r2, [r7, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800cbbe:	7b62      	ldrb	r2, [r4, #13]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800cbc0:	7538      	strb	r0, [r7, #20]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800cbc2:	72fa      	strb	r2, [r7, #11]
    linkAdrVerifyParams.NbChannels = AU915_MAX_NB_CHANNELS;
 800cbc4:	2248      	movs	r2, #72	; 0x48
 800cbc6:	733a      	strb	r2, [r7, #12]
    linkAdrVerifyParams.MaxDatarate = AU915_TX_MAX_DATARATE;
 800cbc8:	3a3c      	subs	r2, #60	; 0x3c
 800cbca:	757a      	strb	r2, [r7, #21]
    linkAdrVerifyParams.MinTxPower = AU915_MIN_TX_POWER;
 800cbcc:	320a      	adds	r2, #10
 800cbce:	83ba      	strh	r2, [r7, #28]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800cbd0:	6822      	ldr	r2, [r4, #0]
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800cbd2:	a806      	add	r0, sp, #24
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800cbd4:	920e      	str	r2, [sp, #56]	; 0x38
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800cbd6:	220e      	movs	r2, #14
 800cbd8:	1852      	adds	r2, r2, r1
 800cbda:	210d      	movs	r1, #13
 800cbdc:	1809      	adds	r1, r1, r0
 800cbde:	0038      	movs	r0, r7
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 800cbe0:	9612      	str	r6, [sp, #72]	; 0x48
    linkAdrVerifyParams.Channels = NvmCtx.Channels;
 800cbe2:	9514      	str	r5, [sp, #80]	; 0x50
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800cbe4:	f000 fac3 	bl	800d16e <RegionCommonLinkAdrReqVerifyParams>
 800cbe8:	0004      	movs	r4, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800cbea:	2807      	cmp	r0, #7
 800cbec:	d118      	bne.n	800cc20 <RegionAU915LinkAdrReq+0xf8>
    {
        // Copy Mask
        RegionCommonChanMaskCopy( NvmCtx.ChannelsMask, channelsMask, 6 );
 800cbee:	2206      	movs	r2, #6
 800cbf0:	0031      	movs	r1, r6
 800cbf2:	483d      	ldr	r0, [pc, #244]	; (800cce8 <RegionAU915LinkAdrReq+0x1c0>)
 800cbf4:	f000 f9e3 	bl	800cfbe <RegionCommonChanMaskCopy>

        NvmCtx.ChannelsMaskRemaining[0] &= NvmCtx.ChannelsMask[0];
 800cbf8:	22e0      	movs	r2, #224	; 0xe0
 800cbfa:	23dd      	movs	r3, #221	; 0xdd
 800cbfc:	0092      	lsls	r2, r2, #2
 800cbfe:	009b      	lsls	r3, r3, #2
 800cc00:	58a9      	ldr	r1, [r5, r2]
 800cc02:	58eb      	ldr	r3, [r5, r3]
 800cc04:	400b      	ands	r3, r1
 800cc06:	50ab      	str	r3, [r5, r2]
        NvmCtx.ChannelsMaskRemaining[1] &= NvmCtx.ChannelsMask[1];
        NvmCtx.ChannelsMaskRemaining[2] &= NvmCtx.ChannelsMask[2];
 800cc08:	23de      	movs	r3, #222	; 0xde
 800cc0a:	3204      	adds	r2, #4
 800cc0c:	009b      	lsls	r3, r3, #2
 800cc0e:	58a9      	ldr	r1, [r5, r2]
 800cc10:	58eb      	ldr	r3, [r5, r3]
 800cc12:	400b      	ands	r3, r1
 800cc14:	50ab      	str	r3, [r5, r2]
        NvmCtx.ChannelsMaskRemaining[3] &= NvmCtx.ChannelsMask[3];
        NvmCtx.ChannelsMaskRemaining[4] = NvmCtx.ChannelsMask[4];
 800cc16:	23df      	movs	r3, #223	; 0xdf
 800cc18:	009b      	lsls	r3, r3, #2
 800cc1a:	58ea      	ldr	r2, [r5, r3]
 800cc1c:	330c      	adds	r3, #12
 800cc1e:	50ea      	str	r2, [r5, r3]
    *txPowOut = linkAdrParams.TxPower;
    *nbRepOut = linkAdrParams.NbRep;
    *nbBytesParsed = bytesProcessed;

    return status;
}
 800cc20:	0020      	movs	r0, r4
    *drOut = linkAdrParams.Datarate;
 800cc22:	ab09      	add	r3, sp, #36	; 0x24
 800cc24:	785a      	ldrb	r2, [r3, #1]
 800cc26:	9903      	ldr	r1, [sp, #12]
 800cc28:	700a      	strb	r2, [r1, #0]
    *txPowOut = linkAdrParams.TxPower;
 800cc2a:	789a      	ldrb	r2, [r3, #2]
 800cc2c:	9904      	ldr	r1, [sp, #16]
    *nbRepOut = linkAdrParams.NbRep;
 800cc2e:	781b      	ldrb	r3, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 800cc30:	700a      	strb	r2, [r1, #0]
    *nbRepOut = linkAdrParams.NbRep;
 800cc32:	9a05      	ldr	r2, [sp, #20]
 800cc34:	7013      	strb	r3, [r2, #0]
    *nbBytesParsed = bytesProcessed;
 800cc36:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800cc38:	9a00      	ldr	r2, [sp, #0]
 800cc3a:	701a      	strb	r2, [r3, #0]
}
 800cc3c:	b017      	add	sp, #92	; 0x5c
 800cc3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        bytesProcessed += nextIndex;
 800cc40:	9b00      	ldr	r3, [sp, #0]
 800cc42:	1818      	adds	r0, r3, r0
 800cc44:	b2c3      	uxtb	r3, r0
 800cc46:	9300      	str	r3, [sp, #0]
        if( linkAdrParams.ChMaskCtrl == 6 )
 800cc48:	78ea      	ldrb	r2, [r5, #3]
 800cc4a:	ab0b      	add	r3, sp, #44	; 0x2c
 800cc4c:	2a06      	cmp	r2, #6
 800cc4e:	d105      	bne.n	800cc5c <RegionAU915LinkAdrReq+0x134>
            channelsMask[0] = 0x00FF;//0xFFFF;
 800cc50:	32f9      	adds	r2, #249	; 0xf9
 800cc52:	920b      	str	r2, [sp, #44]	; 0x2c
            channelsMask[2] = 0x0000;//0xFFFF;
 800cc54:	2200      	movs	r2, #0
            channelsMask[2] = 0x0000;
 800cc56:	920c      	str	r2, [sp, #48]	; 0x30
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 800cc58:	811a      	strh	r2, [r3, #8]
 800cc5a:	e77c      	b.n	800cb56 <RegionAU915LinkAdrReq+0x2e>
        else if( linkAdrParams.ChMaskCtrl == 7 )
 800cc5c:	2a07      	cmp	r2, #7
 800cc5e:	d102      	bne.n	800cc66 <RegionAU915LinkAdrReq+0x13e>
            channelsMask[0] = 0x0000;
 800cc60:	2200      	movs	r2, #0
 800cc62:	920b      	str	r2, [sp, #44]	; 0x2c
 800cc64:	e7f7      	b.n	800cc56 <RegionAU915LinkAdrReq+0x12e>
        else if( linkAdrParams.ChMaskCtrl == 5 )
 800cc66:	88a9      	ldrh	r1, [r5, #4]
 800cc68:	2a05      	cmp	r2, #5
 800cc6a:	d139      	bne.n	800cce0 <RegionAU915LinkAdrReq+0x1b8>
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 800cc6c:	2000      	movs	r0, #0
 800cc6e:	32fa      	adds	r2, #250	; 0xfa
 800cc70:	400a      	ands	r2, r1
            uint8_t cntChannelMask = 0;
 800cc72:	0001      	movs	r1, r0
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 800cc74:	9202      	str	r2, [sp, #8]
 800cc76:	2701      	movs	r7, #1
 800cc78:	4087      	lsls	r7, r0
 800cc7a:	2201      	movs	r2, #1
 800cc7c:	b23d      	sxth	r5, r7
 800cc7e:	9501      	str	r5, [sp, #4]
 800cc80:	9d02      	ldr	r5, [sp, #8]
 800cc82:	4002      	ands	r2, r0
 800cc84:	004e      	lsls	r6, r1, #1
 800cc86:	4694      	mov	ip, r2
 800cc88:	5af2      	ldrh	r2, [r6, r3]
 800cc8a:	422f      	tst	r7, r5
 800cc8c:	d017      	beq.n	800ccbe <RegionAU915LinkAdrReq+0x196>
                    if( ( i % 2 ) == 0 )
 800cc8e:	4665      	mov	r5, ip
 800cc90:	2d00      	cmp	r5, #0
 800cc92:	d10a      	bne.n	800ccaa <RegionAU915LinkAdrReq+0x182>
                        channelsMask[cntChannelMask] |= 0x00FF;
 800cc94:	35ff      	adds	r5, #255	; 0xff
 800cc96:	432a      	orrs	r2, r5
 800cc98:	52f2      	strh	r2, [r6, r3]
                        channelsMask[4] |= ( bitMask << i );
 800cc9a:	891a      	ldrh	r2, [r3, #8]
 800cc9c:	9d01      	ldr	r5, [sp, #4]
 800cc9e:	4315      	orrs	r5, r2
                        channelsMask[4] &= ~( bitMask << i );
 800cca0:	811d      	strh	r5, [r3, #8]
            for( uint8_t i = 0; i <= 7; i++ )
 800cca2:	3001      	adds	r0, #1
 800cca4:	2808      	cmp	r0, #8
 800cca6:	d1e6      	bne.n	800cc76 <RegionAU915LinkAdrReq+0x14e>
 800cca8:	e755      	b.n	800cb56 <RegionAU915LinkAdrReq+0x2e>
                        channelsMask[cntChannelMask] |= 0xFF00;
 800ccaa:	4d11      	ldr	r5, [pc, #68]	; (800ccf0 <RegionAU915LinkAdrReq+0x1c8>)
 800ccac:	432a      	orrs	r2, r5
 800ccae:	52f2      	strh	r2, [r6, r3]
                        channelsMask[4] |= ( bitMask << i );
 800ccb0:	891a      	ldrh	r2, [r3, #8]
 800ccb2:	9d01      	ldr	r5, [sp, #4]
 800ccb4:	4315      	orrs	r5, r2
                        cntChannelMask++;
 800ccb6:	3101      	adds	r1, #1
                        channelsMask[4] &= ~( bitMask << i );
 800ccb8:	811d      	strh	r5, [r3, #8]
                        cntChannelMask++;
 800ccba:	b2c9      	uxtb	r1, r1
 800ccbc:	e7f1      	b.n	800cca2 <RegionAU915LinkAdrReq+0x17a>
                    if( ( i % 2 ) == 0 )
 800ccbe:	9d01      	ldr	r5, [sp, #4]
 800ccc0:	43ef      	mvns	r7, r5
 800ccc2:	4665      	mov	r5, ip
 800ccc4:	2d00      	cmp	r5, #0
 800ccc6:	d105      	bne.n	800ccd4 <RegionAU915LinkAdrReq+0x1ac>
                        channelsMask[cntChannelMask] &= 0xFF00;
 800ccc8:	35ff      	adds	r5, #255	; 0xff
 800ccca:	43aa      	bics	r2, r5
 800cccc:	52f2      	strh	r2, [r6, r3]
                        channelsMask[4] &= ~( bitMask << i );
 800ccce:	891d      	ldrh	r5, [r3, #8]
 800ccd0:	403d      	ands	r5, r7
 800ccd2:	e7e5      	b.n	800cca0 <RegionAU915LinkAdrReq+0x178>
                        channelsMask[cntChannelMask] &= 0x00FF;
 800ccd4:	25ff      	movs	r5, #255	; 0xff
 800ccd6:	402a      	ands	r2, r5
 800ccd8:	52f2      	strh	r2, [r6, r3]
                        channelsMask[4] &= ~( bitMask << i );
 800ccda:	891d      	ldrh	r5, [r3, #8]
 800ccdc:	403d      	ands	r5, r7
 800ccde:	e7ea      	b.n	800ccb6 <RegionAU915LinkAdrReq+0x18e>
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 800cce0:	0052      	lsls	r2, r2, #1
 800cce2:	5299      	strh	r1, [r3, r2]
 800cce4:	e737      	b.n	800cb56 <RegionAU915LinkAdrReq+0x2e>
 800cce6:	46c0      	nop			; (mov r8, r8)
 800cce8:	20001020 	.word	0x20001020
 800ccec:	20000cac 	.word	0x20000cac
 800ccf0:	ffffff00 	.word	0xffffff00

0800ccf4 <RegionAU915RxParamSetupReq>:

uint8_t RegionAU915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800ccf4:	b570      	push	{r4, r5, r6, lr}
 800ccf6:	0005      	movs	r5, r0
    uint8_t status = 0x07;

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 800ccf8:	6840      	ldr	r0, [r0, #4]
 800ccfa:	f7ff fc5d 	bl	800c5b8 <VerifyRfFreq>
    {
        status &= 0xFE; // Channel frequency KO
 800ccfe:	0004      	movs	r4, r0
 800cd00:	1e60      	subs	r0, r4, #1
 800cd02:	4184      	sbcs	r4, r0
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, AU915_RX_MIN_DATARATE, AU915_RX_MAX_DATARATE ) == false )
 800cd04:	2000      	movs	r0, #0
 800cd06:	220d      	movs	r2, #13
 800cd08:	2108      	movs	r1, #8
 800cd0a:	5628      	ldrsb	r0, [r5, r0]
        status &= 0xFE; // Channel frequency KO
 800cd0c:	3406      	adds	r4, #6
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, AU915_RX_MIN_DATARATE, AU915_RX_MAX_DATARATE ) == false )
 800cd0e:	f000 f919 	bl	800cf44 <RegionCommonValueInRange>
 800cd12:	2800      	cmp	r0, #0
 800cd14:	d101      	bne.n	800cd1a <RegionAU915RxParamSetupReq+0x26>
    {
        status &= 0xFD; // Datarate KO
 800cd16:	2302      	movs	r3, #2
 800cd18:	439c      	bics	r4, r3
    }
    if( ( rxParamSetupReq->Datarate == DR_7 ) ||
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	56eb      	ldrsb	r3, [r5, r3]
 800cd1e:	2b07      	cmp	r3, #7
 800cd20:	d001      	beq.n	800cd26 <RegionAU915RxParamSetupReq+0x32>
 800cd22:	2b0d      	cmp	r3, #13
 800cd24:	dd01      	ble.n	800cd2a <RegionAU915RxParamSetupReq+0x36>
        ( rxParamSetupReq->Datarate > DR_13 ) )
    {
        status &= 0xFD; // Datarate KO
 800cd26:	2302      	movs	r3, #2
 800cd28:	439c      	bics	r4, r3
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, AU915_MIN_RX1_DR_OFFSET, AU915_MAX_RX1_DR_OFFSET ) == false )
 800cd2a:	2001      	movs	r0, #1
 800cd2c:	2206      	movs	r2, #6
 800cd2e:	2100      	movs	r1, #0
 800cd30:	5628      	ldrsb	r0, [r5, r0]
 800cd32:	f000 f907 	bl	800cf44 <RegionCommonValueInRange>
 800cd36:	2800      	cmp	r0, #0
 800cd38:	d101      	bne.n	800cd3e <RegionAU915RxParamSetupReq+0x4a>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800cd3a:	2304      	movs	r3, #4
 800cd3c:	439c      	bics	r4, r3
    }

    return status;
}
 800cd3e:	0020      	movs	r0, r4
 800cd40:	bd70      	pop	{r4, r5, r6, pc}

0800cd42 <RegionAU915NewChannelReq>:

uint8_t RegionAU915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
    // Datarate and frequency KO
    return 0;
}
 800cd42:	2000      	movs	r0, #0
 800cd44:	4770      	bx	lr

0800cd46 <RegionAU915TxParamSetupReq>:

int8_t RegionAU915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Accept the request
    return 0;
}
 800cd46:	2000      	movs	r0, #0
 800cd48:	4770      	bx	lr

0800cd4a <RegionAU915DlChannelReq>:
 800cd4a:	2000      	movs	r0, #0
 800cd4c:	4770      	bx	lr
	...

0800cd50 <RegionAU915AlternateDr>:
int8_t RegionAU915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
    static int8_t trialsCount = 0;

    // Re-enable 500 kHz default channels
    NvmCtx.ChannelsMask[4] = CHANNELS_MASK_500KHZ_MASK;
 800cd50:	23df      	movs	r3, #223	; 0xdf
 800cd52:	2100      	movs	r1, #0
 800cd54:	4a05      	ldr	r2, [pc, #20]	; (800cd6c <RegionAU915AlternateDr+0x1c>)
 800cd56:	009b      	lsls	r3, r3, #2
 800cd58:	52d1      	strh	r1, [r2, r3]

    if( ( trialsCount & 0x01 ) == 0x01 )
 800cd5a:	4a05      	ldr	r2, [pc, #20]	; (800cd70 <RegionAU915AlternateDr+0x20>)
    {
        currentDr = DR_6;
 800cd5c:	2006      	movs	r0, #6
    if( ( trialsCount & 0x01 ) == 0x01 )
 800cd5e:	7813      	ldrb	r3, [r2, #0]
 800cd60:	07d9      	lsls	r1, r3, #31
 800cd62:	d400      	bmi.n	800cd66 <RegionAU915AlternateDr+0x16>
    }
    else
    {
        currentDr = DR_2;
 800cd64:	3804      	subs	r0, #4
    }
    trialsCount++;
 800cd66:	3301      	adds	r3, #1
 800cd68:	7013      	strb	r3, [r2, #0]
    return currentDr;
}
 800cd6a:	4770      	bx	lr
 800cd6c:	20000cac 	.word	0x20000cac
 800cd70:	20001044 	.word	0x20001044

0800cd74 <RegionAU915NextChannel>:

LoRaMacStatus_t RegionAU915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800cd74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd76:	b0a7      	sub	sp, #156	; 0x9c
 800cd78:	9305      	str	r3, [sp, #20]
    uint8_t nbEnabledChannels = 0;
 800cd7a:	230a      	movs	r3, #10
 800cd7c:	2500      	movs	r5, #0
{
 800cd7e:	9204      	str	r2, [sp, #16]
    uint8_t nbEnabledChannels = 0;
 800cd80:	aa04      	add	r2, sp, #16
 800cd82:	189b      	adds	r3, r3, r2
 800cd84:	701d      	strb	r5, [r3, #0]
    uint8_t nbRestrictedChannels = 0;
 800cd86:	230b      	movs	r3, #11
{
 800cd88:	9103      	str	r1, [sp, #12]
    uint8_t nbRestrictedChannels = 0;
 800cd8a:	189b      	adds	r3, r3, r2
    uint8_t enabledChannels[AU915_MAX_NB_CHANNELS] = { 0 };
 800cd8c:	0029      	movs	r1, r5
 800cd8e:	2244      	movs	r2, #68	; 0x44
{
 800cd90:	0004      	movs	r4, r0
    uint8_t enabledChannels[AU915_MAX_NB_CHANNELS] = { 0 };
 800cd92:	a815      	add	r0, sp, #84	; 0x54
    uint8_t nbRestrictedChannels = 0;
 800cd94:	701d      	strb	r5, [r3, #0]
    uint8_t enabledChannels[AU915_MAX_NB_CHANNELS] = { 0 };
 800cd96:	9514      	str	r5, [sp, #80]	; 0x50
 800cd98:	f002 f983 	bl	800f0a2 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;

    // Count 125kHz channels
    if( RegionCommonCountChannels( NvmCtx.ChannelsMaskRemaining, 0, 4 ) == 0 )
 800cd9c:	4e2b      	ldr	r6, [pc, #172]	; (800ce4c <RegionAU915NextChannel+0xd8>)
 800cd9e:	2204      	movs	r2, #4
 800cda0:	0029      	movs	r1, r5
 800cda2:	0030      	movs	r0, r6
 800cda4:	f000 f8ec 	bl	800cf80 <RegionCommonCountChannels>
 800cda8:	42a8      	cmp	r0, r5
 800cdaa:	d104      	bne.n	800cdb6 <RegionAU915NextChannel+0x42>
    { // Reactivate default channels
        RegionCommonChanMaskCopy( NvmCtx.ChannelsMaskRemaining, NvmCtx.ChannelsMask, 4  );
 800cdac:	2204      	movs	r2, #4
 800cdae:	0030      	movs	r0, r6
 800cdb0:	4927      	ldr	r1, [pc, #156]	; (800ce50 <RegionAU915NextChannel+0xdc>)
 800cdb2:	f000 f904 	bl	800cfbe <RegionCommonChanMaskCopy>
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_6 )
 800cdb6:	2008      	movs	r0, #8
 800cdb8:	5620      	ldrsb	r0, [r4, r0]
 800cdba:	2805      	cmp	r0, #5
 800cdbc:	dd05      	ble.n	800cdca <RegionAU915NextChannel+0x56>
    {
        if( ( NvmCtx.ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
        {
            NvmCtx.ChannelsMaskRemaining[4] = NvmCtx.ChannelsMask[4];
 800cdbe:	22df      	movs	r2, #223	; 0xdf
 800cdc0:	4b24      	ldr	r3, [pc, #144]	; (800ce54 <RegionAU915NextChannel+0xe0>)
 800cdc2:	0092      	lsls	r2, r2, #2
 800cdc4:	5a99      	ldrh	r1, [r3, r2]
 800cdc6:	320c      	adds	r2, #12
 800cdc8:	5299      	strh	r1, [r3, r2]
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800cdca:	7a63      	ldrb	r3, [r4, #9]
 800cdcc:	ae07      	add	r6, sp, #28
 800cdce:	7033      	strb	r3, [r6, #0]
    countChannelsParams.Datarate = nextChanParams->Datarate;
    countChannelsParams.ChannelsMask = NvmCtx.ChannelsMaskRemaining;
 800cdd0:	4b1e      	ldr	r3, [pc, #120]	; (800ce4c <RegionAU915NextChannel+0xd8>)
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800cdd2:	7070      	strb	r0, [r6, #1]
    countChannelsParams.ChannelsMask = NvmCtx.ChannelsMaskRemaining;
 800cdd4:	9308      	str	r3, [sp, #32]
    countChannelsParams.Channels = NvmCtx.Channels;
 800cdd6:	4b1f      	ldr	r3, [pc, #124]	; (800ce54 <RegionAU915NextChannel+0xe0>)
    countChannelsParams.Bands = NvmCtx.Bands;
    countChannelsParams.MaxNbChannels = AU915_MAX_NB_CHANNELS;
    countChannelsParams.JoinChannels = 0;

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800cdd8:	ad0c      	add	r5, sp, #48	; 0x30
    countChannelsParams.Channels = NvmCtx.Channels;
 800cdda:	9309      	str	r3, [sp, #36]	; 0x24
    countChannelsParams.Bands = NvmCtx.Bands;
 800cddc:	4b1e      	ldr	r3, [pc, #120]	; (800ce58 <RegionAU915NextChannel+0xe4>)
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
    identifyChannelsParam.MaxBands = AU915_MAX_NB_BANDS;

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800cdde:	0022      	movs	r2, r4
    countChannelsParams.Bands = NvmCtx.Bands;
 800cde0:	930a      	str	r3, [sp, #40]	; 0x28
    countChannelsParams.MaxNbChannels = AU915_MAX_NB_CHANNELS;
 800cde2:	2348      	movs	r3, #72	; 0x48
 800cde4:	930b      	str	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800cde6:	6823      	ldr	r3, [r4, #0]
    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800cde8:	320c      	adds	r2, #12
    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800cdea:	930c      	str	r3, [sp, #48]	; 0x30
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800cdec:	6863      	ldr	r3, [r4, #4]
 800cdee:	930d      	str	r3, [sp, #52]	; 0x34
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800cdf0:	7aa3      	ldrb	r3, [r4, #10]
 800cdf2:	722b      	strb	r3, [r5, #8]
    identifyChannelsParam.MaxBands = AU915_MAX_NB_BANDS;
 800cdf4:	2301      	movs	r3, #1
 800cdf6:	726b      	strb	r3, [r5, #9]
    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800cdf8:	ab0f      	add	r3, sp, #60	; 0x3c
 800cdfa:	ca82      	ldmia	r2!, {r1, r7}
 800cdfc:	c382      	stmia	r3!, {r1, r7}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800cdfe:	7d23      	ldrb	r3, [r4, #20]
 800ce00:	752b      	strb	r3, [r5, #20]
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800ce02:	8ae1      	ldrh	r1, [r4, #22]
 800ce04:	f7ff fbbc 	bl	800c580 <GetTimeOnAir>

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800ce08:	61ee      	str	r6, [r5, #28]

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800ce0a:	260a      	movs	r6, #10
 800ce0c:	ab04      	add	r3, sp, #16
 800ce0e:	18f6      	adds	r6, r6, r3
 800ce10:	9b04      	ldr	r3, [sp, #16]
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800ce12:	61a8      	str	r0, [r5, #24]
    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800ce14:	9301      	str	r3, [sp, #4]
 800ce16:	230b      	movs	r3, #11
 800ce18:	aa04      	add	r2, sp, #16
 800ce1a:	189b      	adds	r3, r3, r2
 800ce1c:	ac14      	add	r4, sp, #80	; 0x50
 800ce1e:	0028      	movs	r0, r5
 800ce20:	9300      	str	r3, [sp, #0]
 800ce22:	0022      	movs	r2, r4
 800ce24:	0033      	movs	r3, r6
 800ce26:	9905      	ldr	r1, [sp, #20]
 800ce28:	f000 fa88 	bl	800d33c <RegionCommonIdentifyChannels>
 800ce2c:	1e05      	subs	r5, r0, #0
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800ce2e:	d10a      	bne.n	800ce46 <RegionAU915NextChannel+0xd2>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800ce30:	7831      	ldrb	r1, [r6, #0]
 800ce32:	3901      	subs	r1, #1
 800ce34:	f000 fb04 	bl	800d440 <randr>
 800ce38:	9b03      	ldr	r3, [sp, #12]
 800ce3a:	5c21      	ldrb	r1, [r4, r0]
        // Disable the channel in the mask
        RegionCommonChanDisable( NvmCtx.ChannelsMaskRemaining, *channel, AU915_MAX_NB_CHANNELS - 8 );
 800ce3c:	2240      	movs	r2, #64	; 0x40
 800ce3e:	4803      	ldr	r0, [pc, #12]	; (800ce4c <RegionAU915NextChannel+0xd8>)
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800ce40:	7019      	strb	r1, [r3, #0]
        RegionCommonChanDisable( NvmCtx.ChannelsMaskRemaining, *channel, AU915_MAX_NB_CHANNELS - 8 );
 800ce42:	f000 f889 	bl	800cf58 <RegionCommonChanDisable>
    }
    return status;
}
 800ce46:	0028      	movs	r0, r5
 800ce48:	b027      	add	sp, #156	; 0x9c
 800ce4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce4c:	2000102c 	.word	0x2000102c
 800ce50:	20001020 	.word	0x20001020
 800ce54:	20000cac 	.word	0x20000cac
 800ce58:	2000100c 	.word	0x2000100c

0800ce5c <RegionAU915SetContinuousWave>:
{
    return LORAMAC_STATUS_PARAMETER_INVALID;
}

void RegionAU915SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 800ce5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
    int8_t phyTxPower = 0;
    uint32_t frequency = NvmCtx.Channels[continuousWave->Channel].Frequency;
 800ce5e:	220c      	movs	r2, #12
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 800ce60:	7801      	ldrb	r1, [r0, #0]
    uint32_t frequency = NvmCtx.Channels[continuousWave->Channel].Frequency;
 800ce62:	4b10      	ldr	r3, [pc, #64]	; (800cea4 <RegionAU915SetContinuousWave+0x48>)
 800ce64:	434a      	muls	r2, r1
 800ce66:	58d5      	ldr	r5, [r2, r3]
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 800ce68:	189a      	adds	r2, r3, r2
 800ce6a:	7a51      	ldrb	r1, [r2, #9]
 800ce6c:	2214      	movs	r2, #20
{
 800ce6e:	0004      	movs	r4, r0
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 800ce70:	434a      	muls	r2, r1
    txPowerResult =  MAX( txPower, maxBandTxPower );
 800ce72:	2102      	movs	r1, #2
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 800ce74:	189b      	adds	r3, r3, r2
 800ce76:	4a0c      	ldr	r2, [pc, #48]	; (800cea8 <RegionAU915SetContinuousWave+0x4c>)
    txPowerResult =  MAX( txPower, maxBandTxPower );
 800ce78:	5661      	ldrsb	r1, [r4, r1]
    int8_t txPowerLimited = LimitTxPower( continuousWave->TxPower, NvmCtx.Bands[NvmCtx.Channels[continuousWave->Channel].Band].TxMaxPower, continuousWave->Datarate, NvmCtx.ChannelsMask );
 800ce7a:	189b      	adds	r3, r3, r2
    txPowerResult =  MAX( txPower, maxBandTxPower );
 800ce7c:	781b      	ldrb	r3, [r3, #0]
 800ce7e:	7882      	ldrb	r2, [r0, #2]
 800ce80:	1c18      	adds	r0, r3, #0
 800ce82:	b25b      	sxtb	r3, r3
 800ce84:	428b      	cmp	r3, r1
 800ce86:	da00      	bge.n	800ce8a <RegionAU915SetContinuousWave+0x2e>
 800ce88:	1c10      	adds	r0, r2, #0

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 800ce8a:	68a2      	ldr	r2, [r4, #8]
 800ce8c:	6861      	ldr	r1, [r4, #4]
 800ce8e:	b240      	sxtb	r0, r0
 800ce90:	f000 f9e8 	bl	800d264 <RegionCommonComputeTxPower>

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800ce94:	4b05      	ldr	r3, [pc, #20]	; (800ceac <RegionAU915SetContinuousWave+0x50>)
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 800ce96:	0001      	movs	r1, r0
    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800ce98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce9a:	0028      	movs	r0, r5
 800ce9c:	89a2      	ldrh	r2, [r4, #12]
 800ce9e:	9301      	str	r3, [sp, #4]
 800cea0:	4798      	blx	r3
}
 800cea2:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 800cea4:	20000cac 	.word	0x20000cac
 800cea8:	00000362 	.word	0x00000362
 800ceac:	0800fd8c 	.word	0x0800fd8c

0800ceb0 <RegionAU915ApplyDrOffset>:

uint8_t RegionAU915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
    int8_t datarate = DatarateOffsetsAU915[dr][drOffset];
 800ceb0:	2306      	movs	r3, #6
 800ceb2:	434b      	muls	r3, r1
 800ceb4:	4904      	ldr	r1, [pc, #16]	; (800cec8 <RegionAU915ApplyDrOffset+0x18>)
 800ceb6:	18c9      	adds	r1, r1, r3
 800ceb8:	568b      	ldrsb	r3, [r1, r2]
        else
        {
            datarate = AU915_DWELL_LIMIT_DATARATE;
        }
    }
    return datarate;
 800ceba:	1c18      	adds	r0, r3, #0
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	da00      	bge.n	800cec2 <RegionAU915ApplyDrOffset+0x12>
 800cec0:	2000      	movs	r0, #0
 800cec2:	b2c0      	uxtb	r0, r0
}
 800cec4:	4770      	bx	lr
 800cec6:	46c0      	nop			; (mov r8, r8)
 800cec8:	0800fc44 	.word	0x0800fc44

0800cecc <RegionCommonChanVerifyDr>:
    }
    return dutyCycle;
}

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 800cecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cece:	b085      	sub	sp, #20
 800ced0:	9103      	str	r1, [sp, #12]
 800ced2:	a90a      	add	r1, sp, #40	; 0x28
 800ced4:	7809      	ldrb	r1, [r1, #0]
 800ced6:	9002      	str	r0, [sp, #8]
 800ced8:	b249      	sxtb	r1, r1
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
    {
        return false;
 800ceda:	2000      	movs	r0, #0
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 800cedc:	429a      	cmp	r2, r3
 800cede:	db2d      	blt.n	800cf3c <RegionCommonChanVerifyDr+0x70>
 800cee0:	428a      	cmp	r2, r1
 800cee2:	dc2b      	bgt.n	800cf3c <RegionCommonChanVerifyDr+0x70>
 800cee4:	260c      	movs	r6, #12
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800cee6:	270f      	movs	r7, #15
 800cee8:	e022      	b.n	800cf30 <RegionCommonChanVerifyDr+0x64>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800ceea:	9c03      	ldr	r4, [sp, #12]
 800ceec:	0041      	lsls	r1, r0, #1
 800ceee:	5b09      	ldrh	r1, [r1, r4]
 800cef0:	4373      	muls	r3, r6
 800cef2:	9101      	str	r1, [sp, #4]
 800cef4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cef6:	2400      	movs	r4, #0
 800cef8:	18cb      	adds	r3, r1, r3
 800cefa:	2101      	movs	r1, #1
 800cefc:	468c      	mov	ip, r1
 800cefe:	9901      	ldr	r1, [sp, #4]
 800cf00:	4665      	mov	r5, ip
 800cf02:	4121      	asrs	r1, r4
 800cf04:	4229      	tst	r1, r5
 800cf06:	d00e      	beq.n	800cf26 <RegionCommonChanVerifyDr+0x5a>
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800cf08:	0035      	movs	r5, r6
 800cf0a:	4365      	muls	r5, r4
 800cf0c:	18ed      	adds	r5, r5, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 800cf0e:	7a29      	ldrb	r1, [r5, #8]
 800cf10:	7a2d      	ldrb	r5, [r5, #8]
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800cf12:	0709      	lsls	r1, r1, #28
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 800cf14:	b26d      	sxtb	r5, r5
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800cf16:	1709      	asrs	r1, r1, #28
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 800cf18:	112d      	asrs	r5, r5, #4
    if( ( value >= min ) && ( value <= max ) )
 800cf1a:	4039      	ands	r1, r7
 800cf1c:	428a      	cmp	r2, r1
 800cf1e:	db02      	blt.n	800cf26 <RegionCommonChanVerifyDr+0x5a>
 800cf20:	403d      	ands	r5, r7
 800cf22:	42aa      	cmp	r2, r5
 800cf24:	dd0c      	ble.n	800cf40 <RegionCommonChanVerifyDr+0x74>
        for( uint8_t j = 0; j < 16; j++ )
 800cf26:	3401      	adds	r4, #1
 800cf28:	2c10      	cmp	r4, #16
 800cf2a:	d1e8      	bne.n	800cefe <RegionCommonChanVerifyDr+0x32>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800cf2c:	3001      	adds	r0, #1
 800cf2e:	b2c0      	uxtb	r0, r0
 800cf30:	0103      	lsls	r3, r0, #4
 800cf32:	9902      	ldr	r1, [sp, #8]
 800cf34:	b2db      	uxtb	r3, r3
 800cf36:	4299      	cmp	r1, r3
 800cf38:	d8d7      	bhi.n	800ceea <RegionCommonChanVerifyDr+0x1e>
        return false;
 800cf3a:	2000      	movs	r0, #0
}
 800cf3c:	b005      	add	sp, #20
 800cf3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
                    return true;
 800cf40:	2001      	movs	r0, #1
 800cf42:	e7fb      	b.n	800cf3c <RegionCommonChanVerifyDr+0x70>

0800cf44 <RegionCommonValueInRange>:
{
 800cf44:	0003      	movs	r3, r0
    {
        return 1;
    }
    return 0;
 800cf46:	2000      	movs	r0, #0
    if( ( value >= min ) && ( value <= max ) )
 800cf48:	428b      	cmp	r3, r1
 800cf4a:	db04      	blt.n	800cf56 <RegionCommonValueInRange+0x12>
 800cf4c:	0fd8      	lsrs	r0, r3, #31
 800cf4e:	17d1      	asrs	r1, r2, #31
 800cf50:	429a      	cmp	r2, r3
 800cf52:	4148      	adcs	r0, r1
        return 1;
 800cf54:	b2c0      	uxtb	r0, r0
}
 800cf56:	4770      	bx	lr

0800cf58 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 800cf58:	b530      	push	{r4, r5, lr}
    uint8_t index = id / 16;
 800cf5a:	090b      	lsrs	r3, r1, #4
{
 800cf5c:	0004      	movs	r4, r0

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800cf5e:	0915      	lsrs	r5, r2, #4
    {
        return false;
 800cf60:	2000      	movs	r0, #0
    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800cf62:	429d      	cmp	r5, r3
 800cf64:	d30b      	bcc.n	800cf7e <RegionCommonChanDisable+0x26>
 800cf66:	4291      	cmp	r1, r2
 800cf68:	d209      	bcs.n	800cf7e <RegionCommonChanDisable+0x26>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 800cf6a:	220f      	movs	r2, #15
 800cf6c:	3001      	adds	r0, #1
 800cf6e:	4011      	ands	r1, r2
 800cf70:	0002      	movs	r2, r0
 800cf72:	408a      	lsls	r2, r1
 800cf74:	0011      	movs	r1, r2
 800cf76:	005b      	lsls	r3, r3, #1
 800cf78:	5ae2      	ldrh	r2, [r4, r3]
 800cf7a:	438a      	bics	r2, r1
 800cf7c:	52e2      	strh	r2, [r4, r3]

    return true;
}
 800cf7e:	bd30      	pop	{r4, r5, pc}

0800cf80 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 800cf80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cf82:	1e03      	subs	r3, r0, #0
 800cf84:	9201      	str	r2, [sp, #4]
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 800cf86:	d005      	beq.n	800cf94 <RegionCommonCountChannels+0x14>
 800cf88:	0048      	lsls	r0, r1, #1
 800cf8a:	181b      	adds	r3, r3, r0
    uint8_t nbChannels = 0;
 800cf8c:	2000      	movs	r0, #0
    {
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800cf8e:	9a01      	ldr	r2, [sp, #4]
 800cf90:	4291      	cmp	r1, r2
 800cf92:	d300      	bcc.n	800cf96 <RegionCommonCountChannels+0x16>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
    }

    return nbChannels;
}
 800cf94:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        nbChannels += CountChannels( channelsMask[i], 16 );
 800cf96:	2400      	movs	r4, #0
    uint8_t nbActiveBits = 0;
 800cf98:	0022      	movs	r2, r4
        nbChannels += CountChannels( channelsMask[i], 16 );
 800cf9a:	881f      	ldrh	r7, [r3, #0]
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 800cf9c:	2501      	movs	r5, #1
 800cf9e:	40a5      	lsls	r5, r4
 800cfa0:	002e      	movs	r6, r5
 800cfa2:	403e      	ands	r6, r7
 800cfa4:	42b5      	cmp	r5, r6
 800cfa6:	d101      	bne.n	800cfac <RegionCommonCountChannels+0x2c>
            nbActiveBits++;
 800cfa8:	3201      	adds	r2, #1
 800cfaa:	b2d2      	uxtb	r2, r2
    for( uint8_t j = 0; j < nbBits; j++ )
 800cfac:	3401      	adds	r4, #1
 800cfae:	2c10      	cmp	r4, #16
 800cfb0:	d1f4      	bne.n	800cf9c <RegionCommonCountChannels+0x1c>
        nbChannels += CountChannels( channelsMask[i], 16 );
 800cfb2:	1880      	adds	r0, r0, r2
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800cfb4:	3101      	adds	r1, #1
        nbChannels += CountChannels( channelsMask[i], 16 );
 800cfb6:	b2c0      	uxtb	r0, r0
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800cfb8:	b2c9      	uxtb	r1, r1
 800cfba:	3302      	adds	r3, #2
 800cfbc:	e7e7      	b.n	800cf8e <RegionCommonCountChannels+0xe>

0800cfbe <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 800cfbe:	b510      	push	{r4, lr}
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 800cfc0:	2800      	cmp	r0, #0
 800cfc2:	d005      	beq.n	800cfd0 <RegionCommonChanMaskCopy+0x12>
 800cfc4:	2900      	cmp	r1, #0
 800cfc6:	d003      	beq.n	800cfd0 <RegionCommonChanMaskCopy+0x12>
 800cfc8:	2300      	movs	r3, #0
 800cfca:	0052      	lsls	r2, r2, #1
    {
        for( uint8_t i = 0; i < len; i++ )
 800cfcc:	4293      	cmp	r3, r2
 800cfce:	d100      	bne.n	800cfd2 <RegionCommonChanMaskCopy+0x14>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
        }
    }
}
 800cfd0:	bd10      	pop	{r4, pc}
            channelsMaskDest[i] = channelsMaskSrc[i];
 800cfd2:	5acc      	ldrh	r4, [r1, r3]
 800cfd4:	52c4      	strh	r4, [r0, r3]
        for( uint8_t i = 0; i < len; i++ )
 800cfd6:	3302      	adds	r3, #2
 800cfd8:	e7f8      	b.n	800cfcc <RegionCommonChanMaskCopy+0xe>
	...

0800cfdc <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800cfdc:	b082      	sub	sp, #8
 800cfde:	b570      	push	{r4, r5, r6, lr}
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800cfe0:	8805      	ldrh	r5, [r0, #0]
{
 800cfe2:	9305      	str	r3, [sp, #20]
    if( joined == false )
 800cfe4:	2a00      	cmp	r2, #0
 800cfe6:	d111      	bne.n	800d00c <RegionCommonSetBandTxDone+0x30>
    if( elapsedTime.Seconds < 3600 )
 800cfe8:	26e1      	movs	r6, #225	; 0xe1
        dutyCycle = BACKOFF_DC_1_HOUR;
 800cfea:	2464      	movs	r4, #100	; 0x64
    if( elapsedTime.Seconds < 3600 )
 800cfec:	0136      	lsls	r6, r6, #4
 800cfee:	42b3      	cmp	r3, r6
 800cff0:	d307      	bcc.n	800d002 <RegionCommonSetBandTxDone+0x26>
    else if( elapsedTime.Seconds < ( 3600 + 36000 ) )
 800cff2:	4c0e      	ldr	r4, [pc, #56]	; (800d02c <RegionCommonSetBandTxDone+0x50>)
        dutyCycle = BACKOFF_DC_24_HOURS;
 800cff4:	429c      	cmp	r4, r3
 800cff6:	4152      	adcs	r2, r2
 800cff8:	4254      	negs	r4, r2
 800cffa:	4a0d      	ldr	r2, [pc, #52]	; (800d030 <RegionCommonSetBandTxDone+0x54>)
 800cffc:	4b0d      	ldr	r3, [pc, #52]	; (800d034 <RegionCommonSetBandTxDone+0x58>)
 800cffe:	4014      	ands	r4, r2
 800d000:	18e4      	adds	r4, r4, r3
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800d002:	1c2b      	adds	r3, r5, #0
 800d004:	42a5      	cmp	r5, r4
 800d006:	d200      	bcs.n	800d00a <RegionCommonSetBandTxDone+0x2e>
 800d008:	1c23      	adds	r3, r4, #0
 800d00a:	b29d      	uxth	r5, r3

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 800d00c:	6882      	ldr	r2, [r0, #8]
 800d00e:	1c2b      	adds	r3, r5, #0
 800d010:	2d00      	cmp	r5, #0
 800d012:	d100      	bne.n	800d016 <RegionCommonSetBandTxDone+0x3a>
 800d014:	2301      	movs	r3, #1
 800d016:	b29b      	uxth	r3, r3
 800d018:	4359      	muls	r1, r3
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
    }
    else
    {
        band->TimeCredits = 0;
 800d01a:	2300      	movs	r3, #0
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 800d01c:	428a      	cmp	r2, r1
 800d01e:	d900      	bls.n	800d022 <RegionCommonSetBandTxDone+0x46>
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 800d020:	1a53      	subs	r3, r2, r1
    }
}
 800d022:	6083      	str	r3, [r0, #8]
 800d024:	bc70      	pop	{r4, r5, r6}
 800d026:	bc08      	pop	{r3}
 800d028:	b002      	add	sp, #8
 800d02a:	4718      	bx	r3
 800d02c:	00009aaf 	.word	0x00009aaf
 800d030:	ffffdcd8 	.word	0xffffdcd8
 800d034:	00002710 	.word	0x00002710

0800d038 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 800d038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d03a:	b087      	sub	sp, #28
 800d03c:	9302      	str	r3, [sp, #8]
 800d03e:	ab0c      	add	r3, sp, #48	; 0x30
 800d040:	781b      	ldrb	r3, [r3, #0]
 800d042:	0015      	movs	r5, r2
 800d044:	000c      	movs	r4, r1
 800d046:	9305      	str	r3, [sp, #20]
 800d048:	0007      	movs	r7, r0
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800d04a:	f001 fd3b 	bl	800eac4 <UTIL_TIMER_GetCurrentTime>
 800d04e:	2214      	movs	r2, #20
 800d050:	4355      	muls	r5, r2
 800d052:	1963      	adds	r3, r4, r5
 800d054:	9304      	str	r3, [sp, #16]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 800d056:	2301      	movs	r3, #1
    TimerTime_t creditCosts = 0;
    uint16_t dutyCycle = 1;
    uint8_t validBands = 0;
 800d058:	2600      	movs	r6, #0
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 800d05a:	425b      	negs	r3, r3
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800d05c:	9003      	str	r0, [sp, #12]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 800d05e:	9301      	str	r3, [sp, #4]

    for( uint8_t i = 0; i < nbBands; i++ )
 800d060:	9b04      	ldr	r3, [sp, #16]
 800d062:	42a3      	cmp	r3, r4
 800d064:	d107      	bne.n	800d076 <RegionCommonUpdateBandTimeOff+0x3e>
            }
        }
    }


    if( validBands == 0 )
 800d066:	2e00      	cmp	r6, #0
 800d068:	d102      	bne.n	800d070 <RegionCommonUpdateBandTimeOff+0x38>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 800d06a:	2301      	movs	r3, #1
 800d06c:	425b      	negs	r3, r3
 800d06e:	9301      	str	r3, [sp, #4]
    }
    return minTimeToWait;
}
 800d070:	9801      	ldr	r0, [sp, #4]
 800d072:	b007      	add	sp, #28
 800d074:	bdf0      	pop	{r4, r5, r6, r7, pc}
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 800d076:	990d      	ldr	r1, [sp, #52]	; 0x34
    uint16_t dutyCycle = band->DCycle;
 800d078:	8822      	ldrh	r2, [r4, #0]
    if( joined == false )
 800d07a:	2f00      	cmp	r7, #0
 800d07c:	d112      	bne.n	800d0a4 <RegionCommonUpdateBandTimeOff+0x6c>
    if( elapsedTime.Seconds < 3600 )
 800d07e:	20e1      	movs	r0, #225	; 0xe1
        dutyCycle = BACKOFF_DC_1_HOUR;
 800d080:	2364      	movs	r3, #100	; 0x64
    if( elapsedTime.Seconds < 3600 )
 800d082:	0100      	lsls	r0, r0, #4
 800d084:	4281      	cmp	r1, r0
 800d086:	d308      	bcc.n	800d09a <RegionCommonUpdateBandTimeOff+0x62>
        dutyCycle = BACKOFF_DC_24_HOURS;
 800d088:	0038      	movs	r0, r7
    else if( elapsedTime.Seconds < ( 3600 + 36000 ) )
 800d08a:	4b27      	ldr	r3, [pc, #156]	; (800d128 <RegionCommonUpdateBandTimeOff+0xf0>)
        dutyCycle = BACKOFF_DC_24_HOURS;
 800d08c:	428b      	cmp	r3, r1
 800d08e:	4178      	adcs	r0, r7
 800d090:	4926      	ldr	r1, [pc, #152]	; (800d12c <RegionCommonUpdateBandTimeOff+0xf4>)
 800d092:	4243      	negs	r3, r0
 800d094:	400b      	ands	r3, r1
 800d096:	4926      	ldr	r1, [pc, #152]	; (800d130 <RegionCommonUpdateBandTimeOff+0xf8>)
 800d098:	185b      	adds	r3, r3, r1
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800d09a:	1c11      	adds	r1, r2, #0
 800d09c:	429a      	cmp	r2, r3
 800d09e:	d200      	bcs.n	800d0a2 <RegionCommonUpdateBandTimeOff+0x6a>
 800d0a0:	1c19      	adds	r1, r3, #0
 800d0a2:	b28a      	uxth	r2, r1
    if( dutyCycle == 0 )
 800d0a4:	1c15      	adds	r5, r2, #0
 800d0a6:	2a00      	cmp	r2, #0
 800d0a8:	d100      	bne.n	800d0ac <RegionCommonUpdateBandTimeOff+0x74>
 800d0aa:	2501      	movs	r5, #1
    uint8_t timePeriodFactor = 1;
 800d0ac:	2001      	movs	r0, #1
 800d0ae:	b2ad      	uxth	r5, r5
    if( joined == false )
 800d0b0:	2f00      	cmp	r7, #0
 800d0b2:	d104      	bne.n	800d0be <RegionCommonUpdateBandTimeOff+0x86>
        timePeriodFactor = dutyCycle / BACKOFF_DC_TIMER_PERIOD_FACTOR;
 800d0b4:	2164      	movs	r1, #100	; 0x64
 800d0b6:	0028      	movs	r0, r5
 800d0b8:	f7f3 f84c 	bl	8000154 <__udivsi3>
 800d0bc:	b2c0      	uxtb	r0, r0
    band->MaxTimeCredits = DUTY_CYCLE_TIME_PERIOD * timePeriodFactor;
 800d0be:	4b1d      	ldr	r3, [pc, #116]	; (800d134 <RegionCommonUpdateBandTimeOff+0xfc>)
 800d0c0:	4343      	muls	r3, r0
    if( band->LastBandUpdateTime == 0 )
 800d0c2:	6860      	ldr	r0, [r4, #4]
    band->MaxTimeCredits = DUTY_CYCLE_TIME_PERIOD * timePeriodFactor;
 800d0c4:	60e3      	str	r3, [r4, #12]
    if( band->LastBandUpdateTime == 0 )
 800d0c6:	2800      	cmp	r0, #0
 800d0c8:	d100      	bne.n	800d0cc <RegionCommonUpdateBandTimeOff+0x94>
        band->TimeCredits = band->MaxTimeCredits;
 800d0ca:	60a3      	str	r3, [r4, #8]
        if( ( dutyCycleEnabled == false ) &&
 800d0cc:	9a02      	ldr	r2, [sp, #8]
    if( joined == false )
 800d0ce:	2f00      	cmp	r7, #0
 800d0d0:	d102      	bne.n	800d0d8 <RegionCommonUpdateBandTimeOff+0xa0>
        if( ( dutyCycleEnabled == false ) &&
 800d0d2:	2a00      	cmp	r2, #0
 800d0d4:	d103      	bne.n	800d0de <RegionCommonUpdateBandTimeOff+0xa6>
 800d0d6:	9a05      	ldr	r2, [sp, #20]
        if( dutyCycleEnabled == false )
 800d0d8:	2a00      	cmp	r2, #0
 800d0da:	d100      	bne.n	800d0de <RegionCommonUpdateBandTimeOff+0xa6>
            band->TimeCredits = band->MaxTimeCredits;
 800d0dc:	60a3      	str	r3, [r4, #8]
    band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 800d0de:	f001 fcfb 	bl	800ead8 <UTIL_TIMER_GetElapsedTime>
 800d0e2:	68a3      	ldr	r3, [r4, #8]
 800d0e4:	18c0      	adds	r0, r0, r3
    if( band->TimeCredits > band->MaxTimeCredits )
 800d0e6:	68e3      	ldr	r3, [r4, #12]
    band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 800d0e8:	60a0      	str	r0, [r4, #8]
    if( band->TimeCredits > band->MaxTimeCredits )
 800d0ea:	4298      	cmp	r0, r3
 800d0ec:	d900      	bls.n	800d0f0 <RegionCommonUpdateBandTimeOff+0xb8>
        band->TimeCredits = band->MaxTimeCredits;
 800d0ee:	60a3      	str	r3, [r4, #8]
    band->LastBandUpdateTime = currentTime;
 800d0f0:	9a03      	ldr	r2, [sp, #12]
 800d0f2:	6062      	str	r2, [r4, #4]
        creditCosts = expectedTimeOnAir * dutyCycle;
 800d0f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d0f6:	4355      	muls	r5, r2
        if( ( bands[i].TimeCredits > creditCosts ) ||
 800d0f8:	68a2      	ldr	r2, [r4, #8]
 800d0fa:	42aa      	cmp	r2, r5
 800d0fc:	d802      	bhi.n	800d104 <RegionCommonUpdateBandTimeOff+0xcc>
 800d0fe:	9902      	ldr	r1, [sp, #8]
 800d100:	2900      	cmp	r1, #0
 800d102:	d105      	bne.n	800d110 <RegionCommonUpdateBandTimeOff+0xd8>
            bands[i].ReadyForTransmission = true;
 800d104:	2301      	movs	r3, #1
 800d106:	7423      	strb	r3, [r4, #16]
            validBands++;
 800d108:	18f6      	adds	r6, r6, r3
                validBands++;
 800d10a:	b2f6      	uxtb	r6, r6
    for( uint8_t i = 0; i < nbBands; i++ )
 800d10c:	3414      	adds	r4, #20
 800d10e:	e7a7      	b.n	800d060 <RegionCommonUpdateBandTimeOff+0x28>
            bands[i].ReadyForTransmission = false;
 800d110:	2100      	movs	r1, #0
 800d112:	7421      	strb	r1, [r4, #16]
            if( bands[i].MaxTimeCredits > creditCosts )
 800d114:	429d      	cmp	r5, r3
 800d116:	d2f9      	bcs.n	800d10c <RegionCommonUpdateBandTimeOff+0xd4>
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 800d118:	9b01      	ldr	r3, [sp, #4]
 800d11a:	1aad      	subs	r5, r5, r2
 800d11c:	42ab      	cmp	r3, r5
 800d11e:	d900      	bls.n	800d122 <RegionCommonUpdateBandTimeOff+0xea>
 800d120:	9501      	str	r5, [sp, #4]
                validBands++;
 800d122:	3601      	adds	r6, #1
 800d124:	e7f1      	b.n	800d10a <RegionCommonUpdateBandTimeOff+0xd2>
 800d126:	46c0      	nop			; (mov r8, r8)
 800d128:	00009aaf 	.word	0x00009aaf
 800d12c:	ffffdcd8 	.word	0xffffdcd8
 800d130:	00002710 	.word	0x00002710
 800d134:	0036ee80 	.word	0x0036ee80

0800d138 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 800d138:	b510      	push	{r4, lr}
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800d13a:	7802      	ldrb	r2, [r0, #0]
{
 800d13c:	0003      	movs	r3, r0
    uint8_t retIndex = 0;
 800d13e:	2000      	movs	r0, #0
    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800d140:	2a03      	cmp	r2, #3
 800d142:	d113      	bne.n	800d16c <RegionCommonParseLinkAdrReq+0x34>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 800d144:	785a      	ldrb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800d146:	300f      	adds	r0, #15
 800d148:	0014      	movs	r4, r2
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800d14a:	0912      	lsrs	r2, r2, #4
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800d14c:	4004      	ands	r4, r0
 800d14e:	708c      	strb	r4, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800d150:	704a      	strb	r2, [r1, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 800d152:	789a      	ldrb	r2, [r3, #2]
 800d154:	808a      	strh	r2, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 800d156:	78dc      	ldrb	r4, [r3, #3]
 800d158:	0224      	lsls	r4, r4, #8
 800d15a:	4322      	orrs	r2, r4
 800d15c:	808a      	strh	r2, [r1, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 800d15e:	791b      	ldrb	r3, [r3, #4]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800d160:	065a      	lsls	r2, r3, #25
 800d162:	0f52      	lsrs	r2, r2, #29
        linkAdrParams->NbRep &= 0x0F;
 800d164:	4003      	ands	r3, r0
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800d166:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 800d168:	700b      	strb	r3, [r1, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 800d16a:	380a      	subs	r0, #10
    }
    return retIndex;
}
 800d16c:	bd10      	pop	{r4, pc}

0800d16e <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 800d16e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d170:	b087      	sub	sp, #28
 800d172:	9305      	str	r3, [sp, #20]
    uint8_t status = verifyParams->Status;
    int8_t datarate = verifyParams->Datarate;
 800d174:	2306      	movs	r3, #6
    int8_t txPower = verifyParams->TxPower;
 800d176:	2707      	movs	r7, #7
{
 800d178:	9103      	str	r1, [sp, #12]
 800d17a:	9204      	str	r2, [sp, #16]
    int8_t datarate = verifyParams->Datarate;
 800d17c:	56c3      	ldrsb	r3, [r0, r3]
    uint8_t status = verifyParams->Status;
 800d17e:	7905      	ldrb	r5, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 800d180:	9302      	str	r3, [sp, #8]
    int8_t nbRepetitions = verifyParams->NbRep;

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 800d182:	7943      	ldrb	r3, [r0, #5]
{
 800d184:	0004      	movs	r4, r0
    int8_t txPower = verifyParams->TxPower;
 800d186:	57c7      	ldrsb	r7, [r0, r7]
    int8_t nbRepetitions = verifyParams->NbRep;
 800d188:	7a06      	ldrb	r6, [r0, #8]
    if( verifyParams->AdrEnabled == false )
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d026      	beq.n	800d1dc <RegionCommonLinkAdrReqVerifyParams+0x6e>
    int8_t nbRepetitions = verifyParams->NbRep;
 800d18e:	b276      	sxtb	r6, r6
        nbRepetitions = verifyParams->CurrentNbRep;
        datarate =  verifyParams->CurrentDatarate;
        txPower =  verifyParams->CurrentTxPower;
    }

    if( status != 0 )
 800d190:	2d00      	cmp	r5, #0
 800d192:	d019      	beq.n	800d1c8 <RegionCommonLinkAdrReqVerifyParams+0x5a>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 800d194:	69a2      	ldr	r2, [r4, #24]
 800d196:	2314      	movs	r3, #20
 800d198:	9201      	str	r2, [sp, #4]
 800d19a:	2215      	movs	r2, #21
 800d19c:	56a2      	ldrsb	r2, [r4, r2]
 800d19e:	56e3      	ldrsb	r3, [r4, r3]
 800d1a0:	9200      	str	r2, [sp, #0]
 800d1a2:	7b20      	ldrb	r0, [r4, #12]
 800d1a4:	9a02      	ldr	r2, [sp, #8]
 800d1a6:	6921      	ldr	r1, [r4, #16]
 800d1a8:	f7ff fe90 	bl	800cecc <RegionCommonChanVerifyDr>
 800d1ac:	2800      	cmp	r0, #0
 800d1ae:	d101      	bne.n	800d1b4 <RegionCommonLinkAdrReqVerifyParams+0x46>
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
        {
            status &= 0xFD; // Datarate KO
 800d1b0:	2302      	movs	r3, #2
 800d1b2:	439d      	bics	r5, r3
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 800d1b4:	231d      	movs	r3, #29
 800d1b6:	221c      	movs	r2, #28
 800d1b8:	56e3      	ldrsb	r3, [r4, r3]
 800d1ba:	56a2      	ldrsb	r2, [r4, r2]
    if( ( value >= min ) && ( value <= max ) )
 800d1bc:	42bb      	cmp	r3, r7
 800d1be:	dc15      	bgt.n	800d1ec <RegionCommonLinkAdrReqVerifyParams+0x7e>
 800d1c0:	42ba      	cmp	r2, r7
 800d1c2:	da14      	bge.n	800d1ee <RegionCommonLinkAdrReqVerifyParams+0x80>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
            }
            else
            {
                status &= 0xFB; // TxPower KO
 800d1c4:	2304      	movs	r3, #4
 800d1c6:	439d      	bics	r5, r3
    *dr = datarate;
    *txPow = txPower;
    *nbRep = nbRepetitions;

    return status;
}
 800d1c8:	0028      	movs	r0, r5
    *dr = datarate;
 800d1ca:	9b03      	ldr	r3, [sp, #12]
 800d1cc:	9a02      	ldr	r2, [sp, #8]
 800d1ce:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 800d1d0:	9b04      	ldr	r3, [sp, #16]
 800d1d2:	701f      	strb	r7, [r3, #0]
    *nbRep = nbRepetitions;
 800d1d4:	9b05      	ldr	r3, [sp, #20]
 800d1d6:	701e      	strb	r6, [r3, #0]
}
 800d1d8:	b007      	add	sp, #28
 800d1da:	bdf0      	pop	{r4, r5, r6, r7, pc}
        datarate =  verifyParams->CurrentDatarate;
 800d1dc:	2309      	movs	r3, #9
        nbRepetitions = verifyParams->CurrentNbRep;
 800d1de:	260b      	movs	r6, #11
        txPower =  verifyParams->CurrentTxPower;
 800d1e0:	270a      	movs	r7, #10
        datarate =  verifyParams->CurrentDatarate;
 800d1e2:	56c3      	ldrsb	r3, [r0, r3]
        nbRepetitions = verifyParams->CurrentNbRep;
 800d1e4:	5786      	ldrsb	r6, [r0, r6]
        datarate =  verifyParams->CurrentDatarate;
 800d1e6:	9302      	str	r3, [sp, #8]
        txPower =  verifyParams->CurrentTxPower;
 800d1e8:	57c7      	ldrsb	r7, [r0, r7]
 800d1ea:	e7d1      	b.n	800d190 <RegionCommonLinkAdrReqVerifyParams+0x22>
 800d1ec:	001f      	movs	r7, r3
    if( status == 0x07 )
 800d1ee:	2d07      	cmp	r5, #7
 800d1f0:	d1ea      	bne.n	800d1c8 <RegionCommonLinkAdrReqVerifyParams+0x5a>
        if( nbRepetitions == 0 )
 800d1f2:	2e00      	cmp	r6, #0
 800d1f4:	d1e8      	bne.n	800d1c8 <RegionCommonLinkAdrReqVerifyParams+0x5a>
            nbRepetitions = 1;
 800d1f6:	3601      	adds	r6, #1
 800d1f8:	e7e6      	b.n	800d1c8 <RegionCommonLinkAdrReqVerifyParams+0x5a>
	...

0800d1fc <RegionCommonComputeSymbolTimeLoRa>:

/* ST_WORKAROUND_BEGIN: remove float/double */
uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidth )
{
 800d1fc:	b510      	push	{r4, lr}
 800d1fe:	0004      	movs	r4, r0
    return (1000000000UL/bandwidth) * (1 << phyDr);
 800d200:	4802      	ldr	r0, [pc, #8]	; (800d20c <RegionCommonComputeSymbolTimeLoRa+0x10>)
 800d202:	f7f2 ffa7 	bl	8000154 <__udivsi3>
 800d206:	40a0      	lsls	r0, r4
}
 800d208:	bd10      	pop	{r4, pc}
 800d20a:	46c0      	nop			; (mov r8, r8)
 800d20c:	3b9aca00 	.word	0x3b9aca00

0800d210 <RegionCommonComputeRxWindowParameters>:
    // ((8 * 1000000) / 50);
    return 160000UL;
}

void RegionCommonComputeRxWindowParameters( uint32_t tSymbol, uint8_t minRxSymbols, uint32_t rxError, uint32_t wakeUpTime, uint32_t* windowTimeout, int32_t* windowOffset )
{
 800d210:	b570      	push	{r4, r5, r6, lr}
 800d212:	0004      	movs	r4, r0
  *windowTimeout = MAX( (uint32_t)2 * minRxSymbols - 8 + DIVC(2 * rxError * 1000000UL, tSymbol ), minRxSymbols);
 800d214:	480f      	ldr	r0, [pc, #60]	; (800d254 <RegionCommonComputeRxWindowParameters+0x44>)
{
 800d216:	000e      	movs	r6, r1
  *windowTimeout = MAX( (uint32_t)2 * minRxSymbols - 8 + DIVC(2 * rxError * 1000000UL, tSymbol ), minRxSymbols);
 800d218:	4350      	muls	r0, r2
 800d21a:	1e62      	subs	r2, r4, #1
 800d21c:	0021      	movs	r1, r4
 800d21e:	1880      	adds	r0, r0, r2
{
 800d220:	001d      	movs	r5, r3
  *windowTimeout = MAX( (uint32_t)2 * minRxSymbols - 8 + DIVC(2 * rxError * 1000000UL, tSymbol ), minRxSymbols);
 800d222:	f7f2 ff97 	bl	8000154 <__udivsi3>
 800d226:	4b0c      	ldr	r3, [pc, #48]	; (800d258 <RegionCommonComputeRxWindowParameters+0x48>)
 800d228:	18f3      	adds	r3, r6, r3
 800d22a:	005b      	lsls	r3, r3, #1
 800d22c:	18c0      	adds	r0, r0, r3
 800d22e:	42b0      	cmp	r0, r6
 800d230:	d200      	bcs.n	800d234 <RegionCommonComputeRxWindowParameters+0x24>
 800d232:	0030      	movs	r0, r6
 800d234:	9b04      	ldr	r3, [sp, #16]
  *windowOffset = DIVC((int32_t)(4 * tSymbol - ((*windowTimeout * tSymbol) >> 1)), 1000000L) - 1 - wakeUpTime;
 800d236:	4909      	ldr	r1, [pc, #36]	; (800d25c <RegionCommonComputeRxWindowParameters+0x4c>)
  *windowTimeout = MAX( (uint32_t)2 * minRxSymbols - 8 + DIVC(2 * rxError * 1000000UL, tSymbol ), minRxSymbols);
 800d238:	6018      	str	r0, [r3, #0]
  *windowOffset = DIVC((int32_t)(4 * tSymbol - ((*windowTimeout * tSymbol) >> 1)), 1000000L) - 1 - wakeUpTime;
 800d23a:	00a3      	lsls	r3, r4, #2
 800d23c:	4344      	muls	r4, r0
 800d23e:	0864      	lsrs	r4, r4, #1
 800d240:	1b18      	subs	r0, r3, r4
 800d242:	4b07      	ldr	r3, [pc, #28]	; (800d260 <RegionCommonComputeRxWindowParameters+0x50>)
 800d244:	43ed      	mvns	r5, r5
 800d246:	18c0      	adds	r0, r0, r3
 800d248:	f7f3 f80e 	bl	8000268 <__divsi3>
 800d24c:	9b05      	ldr	r3, [sp, #20]
 800d24e:	1940      	adds	r0, r0, r5
 800d250:	6018      	str	r0, [r3, #0]
}
 800d252:	bd70      	pop	{r4, r5, r6, pc}
 800d254:	001e8480 	.word	0x001e8480
 800d258:	7ffffffc 	.word	0x7ffffffc
 800d25c:	000f4240 	.word	0x000f4240
 800d260:	000f423f 	.word	0x000f423f

0800d264 <RegionCommonComputeTxPower>:
/* ST_WORKAROUND_END */

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 800d264:	b570      	push	{r4, r5, r6, lr}
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800d266:	0040      	lsls	r0, r0, #1
{
 800d268:	1c14      	adds	r4, r2, #0
 800d26a:	1c0d      	adds	r5, r1, #0
    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800d26c:	f7f3 fc20 	bl	8000ab0 <__aeabi_ui2f>
 800d270:	1c01      	adds	r1, r0, #0
 800d272:	1c28      	adds	r0, r5, #0
 800d274:	f7f3 fa54 	bl	8000720 <__aeabi_fsub>
 800d278:	1c21      	adds	r1, r4, #0
 800d27a:	f7f3 fa51 	bl	8000720 <__aeabi_fsub>
 800d27e:	f7f4 ffb1 	bl	80021e4 <__aeabi_f2d>
 800d282:	f001 ff17 	bl	800f0b4 <floor>
 800d286:	f7f4 ff51 	bl	800212c <__aeabi_d2iz>

    return phyTxPower;
 800d28a:	b240      	sxtb	r0, r0
}
 800d28c:	bd70      	pop	{r4, r5, r6, pc}

0800d28e <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 800d28e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d290:	b087      	sub	sp, #28
 800d292:	9305      	str	r3, [sp, #20]
    uint8_t nbChannelCount = 0;
    uint8_t nbRestrictedChannelsCount = 0;

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800d294:	2300      	movs	r3, #0
    uint8_t nbRestrictedChannelsCount = 0;
 800d296:	469c      	mov	ip, r3
    uint8_t nbChannelCount = 0;
 800d298:	001e      	movs	r6, r3
{
 800d29a:	9103      	str	r1, [sp, #12]
 800d29c:	9204      	str	r2, [sp, #16]
 800d29e:	011c      	lsls	r4, r3, #4
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800d2a0:	8a02      	ldrh	r2, [r0, #16]
 800d2a2:	b2e4      	uxtb	r4, r4
 800d2a4:	42a2      	cmp	r2, r4
 800d2a6:	d806      	bhi.n	800d2b6 <RegionCommonCountNbOfEnabledChannels+0x28>
                enabledChannels[nbChannelCount++] = i + j;
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 800d2a8:	4662      	mov	r2, ip
    *nbEnabledChannels = nbChannelCount;
 800d2aa:	9b04      	ldr	r3, [sp, #16]
 800d2ac:	701e      	strb	r6, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 800d2ae:	9b05      	ldr	r3, [sp, #20]
 800d2b0:	701a      	strb	r2, [r3, #0]
}
 800d2b2:	b007      	add	sp, #28
 800d2b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 800d2b6:	005a      	lsls	r2, r3, #1
 800d2b8:	9202      	str	r2, [sp, #8]
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	6841      	ldr	r1, [r0, #4]
 800d2be:	9d02      	ldr	r5, [sp, #8]
 800d2c0:	2701      	movs	r7, #1
 800d2c2:	5b49      	ldrh	r1, [r1, r5]
 800d2c4:	4111      	asrs	r1, r2
 800d2c6:	4239      	tst	r1, r7
 800d2c8:	d02c      	beq.n	800d324 <RegionCommonCountNbOfEnabledChannels+0x96>
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 800d2ca:	210c      	movs	r1, #12
 800d2cc:	1915      	adds	r5, r2, r4
 800d2ce:	434d      	muls	r5, r1
 800d2d0:	6881      	ldr	r1, [r0, #8]
 800d2d2:	194d      	adds	r5, r1, r5
 800d2d4:	6829      	ldr	r1, [r5, #0]
 800d2d6:	2900      	cmp	r1, #0
 800d2d8:	d024      	beq.n	800d324 <RegionCommonCountNbOfEnabledChannels+0x96>
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800d2da:	7801      	ldrb	r1, [r0, #0]
 800d2dc:	2900      	cmp	r1, #0
 800d2de:	d105      	bne.n	800d2ec <RegionCommonCountNbOfEnabledChannels+0x5e>
                    ( countNbOfEnabledChannelsParams->JoinChannels > 0 ) )
 800d2e0:	8a41      	ldrh	r1, [r0, #18]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800d2e2:	2900      	cmp	r1, #0
 800d2e4:	d002      	beq.n	800d2ec <RegionCommonCountNbOfEnabledChannels+0x5e>
                    if( ( countNbOfEnabledChannelsParams->JoinChannels & ( 1 << j ) ) == 0 )
 800d2e6:	4111      	asrs	r1, r2
 800d2e8:	4239      	tst	r1, r7
 800d2ea:	d01b      	beq.n	800d324 <RegionCommonCountNbOfEnabledChannels+0x96>
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 800d2ec:	2101      	movs	r1, #1
 800d2ee:	5641      	ldrsb	r1, [r0, r1]
 800d2f0:	9100      	str	r1, [sp, #0]
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 800d2f2:	7a29      	ldrb	r1, [r5, #8]
 800d2f4:	070f      	lsls	r7, r1, #28
 800d2f6:	9101      	str	r1, [sp, #4]
    if( ( value >= min ) && ( value <= max ) )
 800d2f8:	1739      	asrs	r1, r7, #28
 800d2fa:	9f00      	ldr	r7, [sp, #0]
 800d2fc:	428f      	cmp	r7, r1
 800d2fe:	db11      	blt.n	800d324 <RegionCommonCountNbOfEnabledChannels+0x96>
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 800d300:	4669      	mov	r1, sp
 800d302:	7909      	ldrb	r1, [r1, #4]
 800d304:	b249      	sxtb	r1, r1
    if( ( value >= min ) && ( value <= max ) )
 800d306:	1109      	asrs	r1, r1, #4
 800d308:	428f      	cmp	r7, r1
 800d30a:	dc0b      	bgt.n	800d324 <RegionCommonCountNbOfEnabledChannels+0x96>
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 800d30c:	7a69      	ldrb	r1, [r5, #9]
 800d30e:	2514      	movs	r5, #20
 800d310:	4369      	muls	r1, r5
 800d312:	68c5      	ldr	r5, [r0, #12]
 800d314:	1869      	adds	r1, r5, r1
 800d316:	7c09      	ldrb	r1, [r1, #16]
 800d318:	2900      	cmp	r1, #0
 800d31a:	d109      	bne.n	800d330 <RegionCommonCountNbOfEnabledChannels+0xa2>
                    nbRestrictedChannelsCount++;
 800d31c:	4661      	mov	r1, ip
 800d31e:	3101      	adds	r1, #1
 800d320:	b2c9      	uxtb	r1, r1
 800d322:	468c      	mov	ip, r1
        for( uint8_t j = 0; j < 16; j++ )
 800d324:	3201      	adds	r2, #1
 800d326:	2a10      	cmp	r2, #16
 800d328:	d1c8      	bne.n	800d2bc <RegionCommonCountNbOfEnabledChannels+0x2e>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800d32a:	3301      	adds	r3, #1
 800d32c:	b2db      	uxtb	r3, r3
 800d32e:	e7b6      	b.n	800d29e <RegionCommonCountNbOfEnabledChannels+0x10>
                enabledChannels[nbChannelCount++] = i + j;
 800d330:	9f03      	ldr	r7, [sp, #12]
 800d332:	1c71      	adds	r1, r6, #1
 800d334:	18a5      	adds	r5, r4, r2
 800d336:	55bd      	strb	r5, [r7, r6]
 800d338:	b2ce      	uxtb	r6, r1
 800d33a:	e7f3      	b.n	800d324 <RegionCommonCountNbOfEnabledChannels+0x96>

0800d33c <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 800d33c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d33e:	0004      	movs	r4, r0
 800d340:	b089      	sub	sp, #36	; 0x24
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 800d342:	6840      	ldr	r0, [r0, #4]
{
 800d344:	001d      	movs	r5, r3
 800d346:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800d348:	9206      	str	r2, [sp, #24]
 800d34a:	000e      	movs	r6, r1
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 800d34c:	f001 fbc4 	bl	800ead8 <UTIL_TIMER_GetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 800d350:	6823      	ldr	r3, [r4, #0]
    *nbRestrictedChannels = 1;
 800d352:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 800d354:	1a1b      	subs	r3, r3, r0
 800d356:	603b      	str	r3, [r7, #0]
    *nbRestrictedChannels = 1;
 800d358:	2301      	movs	r3, #1
 800d35a:	7013      	strb	r3, [r2, #0]
    *nbEnabledChannels = 0;
 800d35c:	2300      	movs	r3, #0
 800d35e:	702b      	strb	r3, [r5, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800d360:	9305      	str	r3, [sp, #20]
 800d362:	6863      	ldr	r3, [r4, #4]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d002      	beq.n	800d36e <RegionCommonIdentifyChannels+0x32>
 800d368:	6823      	ldr	r3, [r4, #0]
 800d36a:	4283      	cmp	r3, r0
 800d36c:	d825      	bhi.n	800d3ba <RegionCommonIdentifyChannels+0x7e>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 800d36e:	9b05      	ldr	r3, [sp, #20]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800d370:	69e1      	ldr	r1, [r4, #28]
        *aggregatedTimeOff = 0;
 800d372:	6033      	str	r3, [r6, #0]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800d374:	7808      	ldrb	r0, [r1, #0]
 800d376:	69a1      	ldr	r1, [r4, #24]
 800d378:	7a23      	ldrb	r3, [r4, #8]
 800d37a:	9103      	str	r1, [sp, #12]
 800d37c:	0021      	movs	r1, r4
 800d37e:	469c      	mov	ip, r3
 800d380:	7a63      	ldrb	r3, [r4, #9]
 800d382:	ae01      	add	r6, sp, #4
 800d384:	9307      	str	r3, [sp, #28]
 800d386:	310c      	adds	r1, #12
 800d388:	c90c      	ldmia	r1!, {r2, r3}
 800d38a:	c60c      	stmia	r6!, {r2, r3}
 800d38c:	7d21      	ldrb	r1, [r4, #20]
 800d38e:	4663      	mov	r3, ip
 800d390:	9100      	str	r1, [sp, #0]
 800d392:	69e1      	ldr	r1, [r4, #28]
 800d394:	9a07      	ldr	r2, [sp, #28]
 800d396:	68c9      	ldr	r1, [r1, #12]
 800d398:	f7ff fe4e 	bl	800d038 <RegionCommonUpdateBandTimeOff>
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 800d39c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800d39e:	6038      	str	r0, [r7, #0]
        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 800d3a0:	002a      	movs	r2, r5
 800d3a2:	9906      	ldr	r1, [sp, #24]
 800d3a4:	69e0      	ldr	r0, [r4, #28]
 800d3a6:	f7ff ff72 	bl	800d28e <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 800d3aa:	782b      	ldrb	r3, [r5, #0]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d004      	beq.n	800d3ba <RegionCommonIdentifyChannels+0x7e>
    {
        *nextTxDelay = 0;
        return LORAMAC_STATUS_OK;
 800d3b0:	2000      	movs	r0, #0
        *nextTxDelay = 0;
 800d3b2:	9b05      	ldr	r3, [sp, #20]
 800d3b4:	603b      	str	r3, [r7, #0]
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 800d3b6:	b009      	add	sp, #36	; 0x24
 800d3b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if( *nbRestrictedChannels > 0 )
 800d3ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d3bc:	7818      	ldrb	r0, [r3, #0]
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 800d3be:	4243      	negs	r3, r0
 800d3c0:	4158      	adcs	r0, r3
 800d3c2:	300b      	adds	r0, #11
 800d3c4:	e7f7      	b.n	800d3b6 <RegionCommonIdentifyChannels+0x7a>
	...

0800d3c8 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 800d3c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3ca:	b08b      	sub	sp, #44	; 0x2c
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 800d3cc:	ac04      	add	r4, sp, #16
 800d3ce:	0025      	movs	r5, r4
{
 800d3d0:	4694      	mov	ip, r2
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 800d3d2:	4b0f      	ldr	r3, [pc, #60]	; (800d410 <RegionCommonRxConfigPrint+0x48>)
 800d3d4:	cbc4      	ldmia	r3!, {r2, r6, r7}
 800d3d6:	c5c4      	stmia	r5!, {r2, r6, r7}
 800d3d8:	cbc4      	ldmia	r3!, {r2, r6, r7}
 800d3da:	c5c4      	stmia	r5!, {r2, r6, r7}

    if ( rxSlot < RX_SLOT_NONE )
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", slotStrings[rxSlot], frequency, dr );
 800d3dc:	4663      	mov	r3, ip
    if ( rxSlot < RX_SLOT_NONE )
 800d3de:	2805      	cmp	r0, #5
 800d3e0:	d80c      	bhi.n	800d3fc <RegionCommonRxConfigPrint+0x34>
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", slotStrings[rxSlot], frequency, dr );
 800d3e2:	9101      	str	r1, [sp, #4]
 800d3e4:	0080      	lsls	r0, r0, #2
 800d3e6:	9302      	str	r3, [sp, #8]
 800d3e8:	5903      	ldr	r3, [r0, r4]
 800d3ea:	2201      	movs	r2, #1
 800d3ec:	9300      	str	r3, [sp, #0]
 800d3ee:	2100      	movs	r1, #0
 800d3f0:	2002      	movs	r0, #2
 800d3f2:	4b08      	ldr	r3, [pc, #32]	; (800d414 <RegionCommonRxConfigPrint+0x4c>)
 800d3f4:	f001 fd78 	bl	800eee8 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 800d3f8:	b00b      	add	sp, #44	; 0x2c
 800d3fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 800d3fc:	9301      	str	r3, [sp, #4]
 800d3fe:	9100      	str	r1, [sp, #0]
 800d400:	2201      	movs	r2, #1
 800d402:	2100      	movs	r1, #0
 800d404:	4b04      	ldr	r3, [pc, #16]	; (800d418 <RegionCommonRxConfigPrint+0x50>)
 800d406:	2002      	movs	r0, #2
 800d408:	f001 fd6e 	bl	800eee8 <UTIL_ADV_TRACE_COND_FSend>
}
 800d40c:	e7f4      	b.n	800d3f8 <RegionCommonRxConfigPrint+0x30>
 800d40e:	46c0      	nop			; (mov r8, r8)
 800d410:	0800f1e0 	.word	0x0800f1e0
 800d414:	0800fcca 	.word	0x0800fcca
 800d418:	0800fce9 	.word	0x0800fce9

0800d41c <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 800d41c:	b507      	push	{r0, r1, r2, lr}
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 800d41e:	4b04      	ldr	r3, [pc, #16]	; (800d430 <RegionCommonTxConfigPrint+0x14>)
 800d420:	9101      	str	r1, [sp, #4]
 800d422:	9000      	str	r0, [sp, #0]
 800d424:	2201      	movs	r2, #1
 800d426:	2100      	movs	r1, #0
 800d428:	2002      	movs	r0, #2
 800d42a:	f001 fd5d 	bl	800eee8 <UTIL_ADV_TRACE_COND_FSend>
}
 800d42e:	bd07      	pop	{r0, r1, r2, pc}
 800d430:	0800fd05 	.word	0x0800fd05

0800d434 <srand1>:
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
}

void srand1( uint32_t seed )
{
    next = seed;
 800d434:	4b01      	ldr	r3, [pc, #4]	; (800d43c <srand1+0x8>)
 800d436:	6018      	str	r0, [r3, #0]
}
 800d438:	4770      	bx	lr
 800d43a:	46c0      	nop			; (mov r8, r8)
 800d43c:	20000180 	.word	0x20000180

0800d440 <randr>:
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800d440:	4b09      	ldr	r3, [pc, #36]	; (800d468 <randr+0x28>)
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 800d442:	b570      	push	{r4, r5, r6, lr}
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800d444:	681a      	ldr	r2, [r3, #0]
{
 800d446:	0005      	movs	r5, r0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800d448:	4808      	ldr	r0, [pc, #32]	; (800d46c <randr+0x2c>)
{
 800d44a:	000c      	movs	r4, r1
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800d44c:	4350      	muls	r0, r2
 800d44e:	4a08      	ldr	r2, [pc, #32]	; (800d470 <randr+0x30>)
 800d450:	4908      	ldr	r1, [pc, #32]	; (800d474 <randr+0x34>)
 800d452:	1880      	adds	r0, r0, r2
 800d454:	6018      	str	r0, [r3, #0]
 800d456:	f7f2 ff03 	bl	8000260 <__aeabi_uidivmod>
 800d45a:	0008      	movs	r0, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 800d45c:	1b61      	subs	r1, r4, r5
 800d45e:	3101      	adds	r1, #1
 800d460:	f7f2 ffe8 	bl	8000434 <__aeabi_idivmod>
 800d464:	1948      	adds	r0, r1, r5
}
 800d466:	bd70      	pop	{r4, r5, r6, pc}
 800d468:	20000180 	.word	0x20000180
 800d46c:	41c64e6d 	.word	0x41c64e6d
 800d470:	00003039 	.word	0x00003039
 800d474:	7fffffff 	.word	0x7fffffff

0800d478 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 800d478:	2300      	movs	r3, #0
{
 800d47a:	b510      	push	{r4, lr}
    while( size-- )
 800d47c:	4293      	cmp	r3, r2
 800d47e:	d100      	bne.n	800d482 <memcpy1+0xa>
    {
        *dst++ = *src++;
    }
}
 800d480:	bd10      	pop	{r4, pc}
        *dst++ = *src++;
 800d482:	5ccc      	ldrb	r4, [r1, r3]
 800d484:	54c4      	strb	r4, [r0, r3]
 800d486:	3301      	adds	r3, #1
 800d488:	e7f8      	b.n	800d47c <memcpy1+0x4>

0800d48a <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
 800d48a:	1e53      	subs	r3, r2, #1
 800d48c:	18c0      	adds	r0, r0, r3
    while( size-- )
 800d48e:	2300      	movs	r3, #0
{
 800d490:	b530      	push	{r4, r5, lr}
    while( size-- )
 800d492:	429a      	cmp	r2, r3
 800d494:	d100      	bne.n	800d498 <memcpyr+0xe>
    {
        *dst-- = *src++;
    }
}
 800d496:	bd30      	pop	{r4, r5, pc}
        *dst-- = *src++;
 800d498:	5ccd      	ldrb	r5, [r1, r3]
 800d49a:	425c      	negs	r4, r3
 800d49c:	5505      	strb	r5, [r0, r4]
 800d49e:	3301      	adds	r3, #1
 800d4a0:	e7f7      	b.n	800d492 <memcpyr+0x8>
	...

0800d4a4 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
    while( size-- )
 800d4a4:	4b04      	ldr	r3, [pc, #16]	; (800d4b8 <memset1+0x14>)
 800d4a6:	3a01      	subs	r2, #1
 800d4a8:	b292      	uxth	r2, r2
 800d4aa:	429a      	cmp	r2, r3
 800d4ac:	d100      	bne.n	800d4b0 <memset1+0xc>
    {
        *dst++ = value;
    }
}
 800d4ae:	4770      	bx	lr
        *dst++ = value;
 800d4b0:	7001      	strb	r1, [r0, #0]
 800d4b2:	3001      	adds	r0, #1
 800d4b4:	e7f7      	b.n	800d4a6 <memset1+0x2>
 800d4b6:	46c0      	nop			; (mov r8, r8)
 800d4b8:	0000ffff 	.word	0x0000ffff

0800d4bc <RadioCheckRfFrequency>:
}

bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 800d4bc:	2001      	movs	r0, #1
 800d4be:	4770      	bx	lr

0800d4c0 <RadioTimeOnAir>:

uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                              uint32_t datarate, uint8_t coderate,
                              uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                              bool crcOn )
{
 800d4c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d4c2:	0014      	movs	r4, r2
 800d4c4:	aa08      	add	r2, sp, #32
 800d4c6:	8816      	ldrh	r6, [r2, #0]
 800d4c8:	aa09      	add	r2, sp, #36	; 0x24
 800d4ca:	000d      	movs	r5, r1
 800d4cc:	7812      	ldrb	r2, [r2, #0]
 800d4ce:	a90a      	add	r1, sp, #40	; 0x28
 800d4d0:	0007      	movs	r7, r0
 800d4d2:	7808      	ldrb	r0, [r1, #0]
 800d4d4:	a90b      	add	r1, sp, #44	; 0x2c
 800d4d6:	4694      	mov	ip, r2
 800d4d8:	7809      	ldrb	r1, [r1, #0]
    uint32_t numerator = 0;
    uint32_t denominator = 1;

	if( modem == MODEM_LORA){
 800d4da:	2f01      	cmp	r7, #1
 800d4dc:	d150      	bne.n	800d580 <RadioTimeOnAir+0xc0>
    int32_t crDenom           = coderate + 4;
 800d4de:	3304      	adds	r3, #4
 800d4e0:	9301      	str	r3, [sp, #4]
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800d4e2:	1f63      	subs	r3, r4, #5
 800d4e4:	2b01      	cmp	r3, #1
 800d4e6:	d804      	bhi.n	800d4f2 <RadioTimeOnAir+0x32>
        if( preambleLen < 12 )
 800d4e8:	1c33      	adds	r3, r6, #0
 800d4ea:	2e0c      	cmp	r6, #12
 800d4ec:	d200      	bcs.n	800d4f0 <RadioTimeOnAir+0x30>
 800d4ee:	230c      	movs	r3, #12
 800d4f0:	b29e      	uxth	r6, r3
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800d4f2:	2d00      	cmp	r5, #0
 800d4f4:	d13c      	bne.n	800d570 <RadioTimeOnAir+0xb0>
 800d4f6:	0023      	movs	r3, r4
 800d4f8:	2701      	movs	r7, #1
 800d4fa:	002a      	movs	r2, r5
 800d4fc:	3b0b      	subs	r3, #11
 800d4fe:	429f      	cmp	r7, r3
 800d500:	416a      	adcs	r2, r5
 800d502:	0013      	movs	r3, r2
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800d504:	b2db      	uxtb	r3, r3
                            ( crcOn ? 16 : 0 ) -
 800d506:	1e4f      	subs	r7, r1, #1
 800d508:	41b9      	sbcs	r1, r7
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800d50a:	00c0      	lsls	r0, r0, #3
                            ( crcOn ? 16 : 0 ) -
 800d50c:	010f      	lsls	r7, r1, #4
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800d50e:	19c0      	adds	r0, r0, r7
                            ( fixLen ? 0 : 20 );
 800d510:	4662      	mov	r2, ip
 800d512:	2700      	movs	r7, #0
                            ( 4 * datarate ) +
 800d514:	00a1      	lsls	r1, r4, #2
                            ( crcOn ? 16 : 0 ) -
 800d516:	1a40      	subs	r0, r0, r1
                            ( fixLen ? 0 : 20 );
 800d518:	42ba      	cmp	r2, r7
 800d51a:	d100      	bne.n	800d51e <RadioTimeOnAir+0x5e>
 800d51c:	3714      	adds	r7, #20
                            ( 4 * datarate ) +
 800d51e:	19c0      	adds	r0, r0, r7
    if( datarate <= 6 )
 800d520:	1ea7      	subs	r7, r4, #2
 800d522:	2c06      	cmp	r4, #6
 800d524:	d903      	bls.n	800d52e <RadioTimeOnAir+0x6e>
        ceilNumerator += 8;
 800d526:	3008      	adds	r0, #8
        if( lowDatareOptimize == true )
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d000      	beq.n	800d52e <RadioTimeOnAir+0x6e>
            ceilDenominator = 4 * ( datarate - 2 );
 800d52c:	00b9      	lsls	r1, r7, #2
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800d52e:	43c3      	mvns	r3, r0
 800d530:	17db      	asrs	r3, r3, #31
 800d532:	4018      	ands	r0, r3
 800d534:	1840      	adds	r0, r0, r1
 800d536:	3801      	subs	r0, #1
 800d538:	f7f2 fe96 	bl	8000268 <__divsi3>
 800d53c:	9b01      	ldr	r3, [sp, #4]
 800d53e:	4343      	muls	r3, r0
 800d540:	199e      	adds	r6, r3, r6
        intermediate += 2;
 800d542:	0032      	movs	r2, r6
 800d544:	320e      	adds	r2, #14
    if( datarate <= 6 )
 800d546:	2c06      	cmp	r4, #6
 800d548:	d900      	bls.n	800d54c <RadioTimeOnAir+0x8c>
    int32_t intermediate =
 800d54a:	3a02      	subs	r2, #2
		numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
															  coderate, preambleLen,
															  fixLen, payloadLen, crcOn );
		denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 800d54c:	4b0e      	ldr	r3, [pc, #56]	; (800d588 <RadioTimeOnAir+0xc8>)
 800d54e:	5d5b      	ldrb	r3, [r3, r5]
    switch( bw )
 800d550:	2b0a      	cmp	r3, #10
 800d552:	d818      	bhi.n	800d586 <RadioTimeOnAir+0xc6>
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800d554:	0092      	lsls	r2, r2, #2
		numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 800d556:	20fa      	movs	r0, #250	; 0xfa
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800d558:	3201      	adds	r2, #1
 800d55a:	40ba      	lsls	r2, r7
		numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 800d55c:	0080      	lsls	r0, r0, #2
 800d55e:	4350      	muls	r0, r2
 800d560:	4a0a      	ldr	r2, [pc, #40]	; (800d58c <RadioTimeOnAir+0xcc>)
 800d562:	009b      	lsls	r3, r3, #2
 800d564:	5899      	ldr	r1, [r3, r2]
	}
    // Perform integral ceil()
    return ( numerator + denominator - 1 ) / denominator;
 800d566:	1840      	adds	r0, r0, r1
 800d568:	3801      	subs	r0, #1
 800d56a:	f7f2 fdf3 	bl	8000154 <__udivsi3>
}
 800d56e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    bool    lowDatareOptimize = false;
 800d570:	2300      	movs	r3, #0
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800d572:	2d01      	cmp	r5, #1
 800d574:	d1c7      	bne.n	800d506 <RadioTimeOnAir+0x46>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800d576:	0023      	movs	r3, r4
 800d578:	3b0c      	subs	r3, #12
 800d57a:	425f      	negs	r7, r3
 800d57c:	417b      	adcs	r3, r7
 800d57e:	e7c1      	b.n	800d504 <RadioTimeOnAir+0x44>
    uint32_t denominator = 1;
 800d580:	2101      	movs	r1, #1
    uint32_t numerator = 0;
 800d582:	2000      	movs	r0, #0
 800d584:	e7ef      	b.n	800d566 <RadioTimeOnAir+0xa6>
    return ( numerator + denominator - 1 ) / denominator;
 800d586:	deff      	udf	#255	; 0xff
 800d588:	0800fd56 	.word	0x0800fd56
 800d58c:	0800fd5c 	.word	0x0800fd5c

0800d590 <RadioOnTxTimeoutIrq>:
    return (uint32_t) Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
}

void RadioOnTxTimeoutIrq( void* context )
{
    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800d590:	4b04      	ldr	r3, [pc, #16]	; (800d5a4 <RadioOnTxTimeoutIrq+0x14>)
{
 800d592:	b510      	push	{r4, lr}
    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d003      	beq.n	800d5a2 <RadioOnTxTimeoutIrq+0x12>
 800d59a:	685b      	ldr	r3, [r3, #4]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d000      	beq.n	800d5a2 <RadioOnTxTimeoutIrq+0x12>
    {
        RadioEvents->TxTimeout( );
 800d5a0:	4798      	blx	r3
    }
}
 800d5a2:	bd10      	pop	{r4, pc}
 800d5a4:	20001048 	.word	0x20001048

0800d5a8 <RadioOnRxTimeoutIrq>:

void RadioOnRxTimeoutIrq( void* context )
{
    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800d5a8:	4b04      	ldr	r3, [pc, #16]	; (800d5bc <RadioOnRxTimeoutIrq+0x14>)
{
 800d5aa:	b510      	push	{r4, lr}
    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d003      	beq.n	800d5ba <RadioOnRxTimeoutIrq+0x12>
 800d5b2:	68db      	ldr	r3, [r3, #12]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d000      	beq.n	800d5ba <RadioOnRxTimeoutIrq+0x12>
    {
        RadioEvents->RxTimeout( );
 800d5b8:	4798      	blx	r3
    }
}
 800d5ba:	bd10      	pop	{r4, pc}
 800d5bc:	20001048 	.word	0x20001048

0800d5c0 <RadioStandby>:
{
 800d5c0:	b510      	push	{r4, lr}
	SX126xSetStandby(STDBY_XOSC);//SX126xSetStandby( STDBY_RC );
 800d5c2:	2001      	movs	r0, #1
 800d5c4:	f000 fbc8 	bl	800dd58 <SX126xSetStandby>
}
 800d5c8:	bd10      	pop	{r4, pc}
	...

0800d5cc <RadioGetStatus>:
{
 800d5cc:	b510      	push	{r4, lr}
    switch( SX126xGetOperatingMode( ) )
 800d5ce:	f000 fb6b 	bl	800dca8 <SX126xGetOperatingMode>
 800d5d2:	1f03      	subs	r3, r0, #4
 800d5d4:	b2db      	uxtb	r3, r3
 800d5d6:	2000      	movs	r0, #0
 800d5d8:	2b03      	cmp	r3, #3
 800d5da:	d801      	bhi.n	800d5e0 <RadioGetStatus+0x14>
 800d5dc:	4a01      	ldr	r2, [pc, #4]	; (800d5e4 <RadioGetStatus+0x18>)
 800d5de:	5cd0      	ldrb	r0, [r2, r3]
}
 800d5e0:	bd10      	pop	{r4, pc}
 800d5e2:	46c0      	nop			; (mov r8, r8)
 800d5e4:	0800fd88 	.word	0x0800fd88

0800d5e8 <RadioSetChannel>:
{
 800d5e8:	b510      	push	{r4, lr}
    SX126xSetRfFrequency( freq );
 800d5ea:	f000 fca1 	bl	800df30 <SX126xSetRfFrequency>
}
 800d5ee:	bd10      	pop	{r4, pc}

0800d5f0 <RadioRead>:
{
 800d5f0:	b510      	push	{r4, lr}
    return SX126xReadRegister( addr );
 800d5f2:	b280      	uxth	r0, r0
 800d5f4:	f000 fe40 	bl	800e278 <SX126xReadRegister>
}
 800d5f8:	bd10      	pop	{r4, pc}

0800d5fa <RadioWrite>:
{
 800d5fa:	b510      	push	{r4, lr}
    SX126xWriteRegister( addr, data );
 800d5fc:	b280      	uxth	r0, r0
 800d5fe:	f000 fd9b 	bl	800e138 <SX126xWriteRegister>
}
 800d602:	bd10      	pop	{r4, pc}

0800d604 <RadioSend>:
    SX126xSetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 800d604:	2300      	movs	r3, #0
{
 800d606:	b570      	push	{r4, r5, r6, lr}
 800d608:	000c      	movs	r4, r1
    SX126xSetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 800d60a:	4910      	ldr	r1, [pc, #64]	; (800d64c <RadioSend+0x48>)
 800d60c:	001a      	movs	r2, r3
{
 800d60e:	0005      	movs	r5, r0
    SX126xSetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT,
 800d610:	0008      	movs	r0, r1
 800d612:	f000 fc43 	bl	800de9c <SX126xSetDioIrqParams>
    if( SX126xGetPacketType( ) == PACKET_TYPE_LORA )
 800d616:	f000 fb65 	bl	800dce4 <SX126xGetPacketType>
 800d61a:	4b0d      	ldr	r3, [pc, #52]	; (800d650 <RadioSend+0x4c>)
 800d61c:	2801      	cmp	r0, #1
 800d61e:	d112      	bne.n	800d646 <RadioSend+0x42>
        SX126x.PacketParams.Params.LoRa.PayloadLength = size;
 800d620:	73dc      	strb	r4, [r3, #15]
    SX126xSetPacketParams( &SX126x.PacketParams );
 800d622:	0018      	movs	r0, r3
 800d624:	f000 fcd0 	bl	800dfc8 <SX126xSetPacketParams>
    SX126xSendPayload( buffer, size, 0 );
 800d628:	2200      	movs	r2, #0
 800d62a:	0028      	movs	r0, r5
 800d62c:	0021      	movs	r1, r4
 800d62e:	f000 fed9 	bl	800e3e4 <SX126xSendPayload>
    TimerSetValue( &TxTimeoutTimer, TxTimeout );
 800d632:	4c08      	ldr	r4, [pc, #32]	; (800d654 <RadioSend+0x50>)
 800d634:	4b08      	ldr	r3, [pc, #32]	; (800d658 <RadioSend+0x54>)
 800d636:	0020      	movs	r0, r4
 800d638:	6819      	ldr	r1, [r3, #0]
 800d63a:	f001 fb37 	bl	800ecac <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800d63e:	0020      	movs	r0, r4
 800d640:	f001 fad8 	bl	800ebf4 <UTIL_TIMER_Start>
}
 800d644:	bd70      	pop	{r4, r5, r6, pc}
        SX126x.PacketParams.Params.Gfsk.PayloadLength = size;
 800d646:	721c      	strb	r4, [r3, #8]
 800d648:	e7eb      	b.n	800d622 <RadioSend+0x1e>
 800d64a:	46c0      	nop			; (mov r8, r8)
 800d64c:	00000201 	.word	0x00000201
 800d650:	200017c0 	.word	0x200017c0
 800d654:	200017fc 	.word	0x200017fc
 800d658:	20001054 	.word	0x20001054

0800d65c <RadioSleep>:
{
 800d65c:	b510      	push	{r4, lr}
    SX126xSetSleep( params );
 800d65e:	2004      	movs	r0, #4
 800d660:	f000 fb62 	bl	800dd28 <SX126xSetSleep>
    RADIO_DELAY_MS( 2 );
 800d664:	2002      	movs	r0, #2
 800d666:	f7f5 fbad 	bl	8002dc4 <HAL_Delay>
}
 800d66a:	bd10      	pop	{r4, pc}

0800d66c <RadioSetRxDutyCycle>:
{
 800d66c:	b510      	push	{r4, lr}
    SX126xSetRxDutyCycle( rxTime, sleepTime );
 800d66e:	f000 fb85 	bl	800dd7c <SX126xSetRxDutyCycle>
}
 800d672:	bd10      	pop	{r4, pc}

0800d674 <RadioSetTxContinuousWave>:
{
 800d674:	b570      	push	{r4, r5, r6, lr}
 800d676:	000d      	movs	r5, r1
 800d678:	0014      	movs	r4, r2
    SX126xSetRfFrequency( freq );
 800d67a:	f000 fc59 	bl	800df30 <SX126xSetRfFrequency>
    SX126xSetRfTxPower( power );
 800d67e:	0028      	movs	r0, r5
 800d680:	f000 fe64 	bl	800e34c <SX126xSetRfTxPower>
    SX126xSetTxContinuousWave( );
 800d684:	f000 fb90 	bl	800dda8 <SX126xSetTxContinuousWave>
    uint32_t timeout = ( uint32_t )time * 1000;
 800d688:	21fa      	movs	r1, #250	; 0xfa
 800d68a:	0089      	lsls	r1, r1, #2
 800d68c:	4361      	muls	r1, r4
    TimerSetValue( &TxTimeoutTimer, timeout );
 800d68e:	4c04      	ldr	r4, [pc, #16]	; (800d6a0 <RadioSetTxContinuousWave+0x2c>)
 800d690:	0020      	movs	r0, r4
 800d692:	f001 fb0b 	bl	800ecac <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 800d696:	0020      	movs	r0, r4
 800d698:	f001 faac 	bl	800ebf4 <UTIL_TIMER_Start>
}
 800d69c:	bd70      	pop	{r4, r5, r6, pc}
 800d69e:	46c0      	nop			; (mov r8, r8)
 800d6a0:	200017fc 	.word	0x200017fc

0800d6a4 <RadioWriteBuffer>:
{
 800d6a4:	b510      	push	{r4, lr}
    SX126xWriteRegisters( addr, buffer, size );
 800d6a6:	b280      	uxth	r0, r0
 800d6a8:	f000 fd26 	bl	800e0f8 <SX126xWriteRegisters>
}
 800d6ac:	bd10      	pop	{r4, pc}

0800d6ae <RadioReadBuffer>:
{
 800d6ae:	b510      	push	{r4, lr}
    SX126xReadRegisters( addr, buffer, size );
 800d6b0:	b280      	uxth	r0, r0
 800d6b2:	f000 fdbd 	bl	800e230 <SX126xReadRegisters>
}
 800d6b6:	bd10      	pop	{r4, pc}

0800d6b8 <RadioGetWakeupTime>:
{
 800d6b8:	b510      	push	{r4, lr}
    return (uint32_t) Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
 800d6ba:	f7f6 fd81 	bl	80041c0 <SX1262DVK1CAS_RADIO_GetWakeUpTime>
 800d6be:	3003      	adds	r0, #3
}
 800d6c0:	bd10      	pop	{r4, pc}
	...

0800d6c4 <RadioInit>:
    RadioEvents = events;
 800d6c4:	4b17      	ldr	r3, [pc, #92]	; (800d724 <RadioInit+0x60>)
{
 800d6c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    RadioEvents = events;
 800d6c8:	6018      	str	r0, [r3, #0]
    SX126xInit( RadioOnDioIrq );
 800d6ca:	4817      	ldr	r0, [pc, #92]	; (800d728 <RadioInit+0x64>)
 800d6cc:	f000 fc0e 	bl	800deec <SX126xInit>
    SX126xSetStandby( STDBY_XOSC );//SX126xSetStandby( STDBY_RC );
 800d6d0:	2001      	movs	r0, #1
 800d6d2:	f000 fb41 	bl	800dd58 <SX126xSetStandby>
    SX126xSetRegulatorMode( USE_DCDC );
 800d6d6:	2001      	movs	r0, #1
 800d6d8:	f000 fb7b 	bl	800ddd2 <SX126xSetRegulatorMode>
    SX126xSetBufferBaseAddress( 0x00, 0x00 );
 800d6dc:	2100      	movs	r1, #0
 800d6de:	0008      	movs	r0, r1
 800d6e0:	f000 fc9e 	bl	800e020 <SX126xSetBufferBaseAddress>
    SX126xSetTxParams( 0, RADIO_RAMP_200_US );
 800d6e4:	2104      	movs	r1, #4
 800d6e6:	2000      	movs	r0, #0
 800d6e8:	f000 fe08 	bl	800e2fc <SX126xSetTxParams>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 800d6ec:	2501      	movs	r5, #1
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800d6ee:	2300      	movs	r3, #0
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 800d6f0:	2400      	movs	r4, #0
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800d6f2:	480e      	ldr	r0, [pc, #56]	; (800d72c <RadioInit+0x68>)
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 800d6f4:	426d      	negs	r5, r5
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800d6f6:	001a      	movs	r2, r3
 800d6f8:	0001      	movs	r1, r0
 800d6fa:	f000 fbcf 	bl	800de9c <SX126xSetDioIrqParams>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 800d6fe:	0029      	movs	r1, r5
 800d700:	0022      	movs	r2, r4
 800d702:	4b0b      	ldr	r3, [pc, #44]	; (800d730 <RadioInit+0x6c>)
 800d704:	9400      	str	r4, [sp, #0]
 800d706:	480b      	ldr	r0, [pc, #44]	; (800d734 <RadioInit+0x70>)
 800d708:	f001 f9c0 	bl	800ea8c <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 800d70c:	0029      	movs	r1, r5
 800d70e:	0022      	movs	r2, r4
 800d710:	4b09      	ldr	r3, [pc, #36]	; (800d738 <RadioInit+0x74>)
 800d712:	9400      	str	r4, [sp, #0]
 800d714:	4809      	ldr	r0, [pc, #36]	; (800d73c <RadioInit+0x78>)
 800d716:	f001 f9b9 	bl	800ea8c <UTIL_TIMER_Create>
    IrqFired = false;
 800d71a:	4b09      	ldr	r3, [pc, #36]	; (800d740 <RadioInit+0x7c>)
 800d71c:	701c      	strb	r4, [r3, #0]
    return ( uint32_t )RadioGetWakeupTime( ) ;
 800d71e:	f7ff ffcb 	bl	800d6b8 <RadioGetWakeupTime>
}
 800d722:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 800d724:	20001048 	.word	0x20001048
 800d728:	0800d9d9 	.word	0x0800d9d9
 800d72c:	0000ffff 	.word	0x0000ffff
 800d730:	0800d591 	.word	0x0800d591
 800d734:	200017fc 	.word	0x200017fc
 800d738:	0800d5a9 	.word	0x0800d5a9
 800d73c:	20001928 	.word	0x20001928
 800d740:	20001045 	.word	0x20001045

0800d744 <RadioSetMaxPayloadLength>:
{
 800d744:	b510      	push	{r4, lr}
    if( modem == MODEM_LORA )
 800d746:	2801      	cmp	r0, #1
 800d748:	d105      	bne.n	800d756 <RadioSetMaxPayloadLength+0x12>
        SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 800d74a:	4b03      	ldr	r3, [pc, #12]	; (800d758 <RadioSetMaxPayloadLength+0x14>)
 800d74c:	4803      	ldr	r0, [pc, #12]	; (800d75c <RadioSetMaxPayloadLength+0x18>)
 800d74e:	7019      	strb	r1, [r3, #0]
 800d750:	73c1      	strb	r1, [r0, #15]
        SX126xSetPacketParams( &SX126x.PacketParams );
 800d752:	f000 fc39 	bl	800dfc8 <SX126xSetPacketParams>
}
 800d756:	bd10      	pop	{r4, pc}
 800d758:	20000184 	.word	0x20000184
 800d75c:	200017c0 	.word	0x200017c0

0800d760 <RadioRx>:
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 800d760:	2300      	movs	r3, #0
 800d762:	490e      	ldr	r1, [pc, #56]	; (800d79c <RadioRx+0x3c>)
{
 800d764:	b570      	push	{r4, r5, r6, lr}
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 800d766:	001a      	movs	r2, r3
{
 800d768:	0004      	movs	r4, r0
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 800d76a:	0008      	movs	r0, r1
 800d76c:	f000 fb96 	bl	800de9c <SX126xSetDioIrqParams>
    if( timeout != 0 )
 800d770:	2c00      	cmp	r4, #0
 800d772:	d007      	beq.n	800d784 <RadioRx+0x24>
        TimerSetValue( &RxTimeoutTimer, timeout );
 800d774:	4d0a      	ldr	r5, [pc, #40]	; (800d7a0 <RadioRx+0x40>)
 800d776:	0021      	movs	r1, r4
 800d778:	0028      	movs	r0, r5
 800d77a:	f001 fa97 	bl	800ecac <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800d77e:	0028      	movs	r0, r5
 800d780:	f001 fa38 	bl	800ebf4 <UTIL_TIMER_Start>
    if( RxContinuous == true )
 800d784:	4b07      	ldr	r3, [pc, #28]	; (800d7a4 <RadioRx+0x44>)
 800d786:	781b      	ldrb	r3, [r3, #0]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d003      	beq.n	800d794 <RadioRx+0x34>
        SX126xSetRx( 0xFFFFFF ); // Rx Continuous
 800d78c:	4806      	ldr	r0, [pc, #24]	; (800d7a8 <RadioRx+0x48>)
        SX126xSetRx( RxTimeout << 6 );
 800d78e:	f000 fcff 	bl	800e190 <SX126xSetRx>
}
 800d792:	bd70      	pop	{r4, r5, r6, pc}
        SX126xSetRx( RxTimeout << 6 );
 800d794:	4b05      	ldr	r3, [pc, #20]	; (800d7ac <RadioRx+0x4c>)
 800d796:	6818      	ldr	r0, [r3, #0]
 800d798:	0180      	lsls	r0, r0, #6
 800d79a:	e7f8      	b.n	800d78e <RadioRx+0x2e>
 800d79c:	0000ffff 	.word	0x0000ffff
 800d7a0:	20001928 	.word	0x20001928
 800d7a4:	2000104e 	.word	0x2000104e
 800d7a8:	00ffffff 	.word	0x00ffffff
 800d7ac:	20001050 	.word	0x20001050

0800d7b0 <RadioRxBoosted>:
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	490e      	ldr	r1, [pc, #56]	; (800d7ec <RadioRxBoosted+0x3c>)
{
 800d7b4:	b570      	push	{r4, r5, r6, lr}
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 800d7b6:	001a      	movs	r2, r3
{
 800d7b8:	0004      	movs	r4, r0
    SX126xSetDioIrqParams( IRQ_RADIO_ALL, //IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT,
 800d7ba:	0008      	movs	r0, r1
 800d7bc:	f000 fb6e 	bl	800de9c <SX126xSetDioIrqParams>
    if( timeout != 0 )
 800d7c0:	2c00      	cmp	r4, #0
 800d7c2:	d007      	beq.n	800d7d4 <RadioRxBoosted+0x24>
        TimerSetValue( &RxTimeoutTimer, timeout );
 800d7c4:	4d0a      	ldr	r5, [pc, #40]	; (800d7f0 <RadioRxBoosted+0x40>)
 800d7c6:	0021      	movs	r1, r4
 800d7c8:	0028      	movs	r0, r5
 800d7ca:	f001 fa6f 	bl	800ecac <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800d7ce:	0028      	movs	r0, r5
 800d7d0:	f001 fa10 	bl	800ebf4 <UTIL_TIMER_Start>
    if( RxContinuous == true )
 800d7d4:	4b07      	ldr	r3, [pc, #28]	; (800d7f4 <RadioRxBoosted+0x44>)
 800d7d6:	781b      	ldrb	r3, [r3, #0]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d003      	beq.n	800d7e4 <RadioRxBoosted+0x34>
        SX126xSetRxBoosted( 0xFFFFFF ); // Rx Continuous
 800d7dc:	4806      	ldr	r0, [pc, #24]	; (800d7f8 <RadioRxBoosted+0x48>)
        SX126xSetRxBoosted( RxTimeout << 6 );
 800d7de:	f000 fcf9 	bl	800e1d4 <SX126xSetRxBoosted>
}
 800d7e2:	bd70      	pop	{r4, r5, r6, pc}
        SX126xSetRxBoosted( RxTimeout << 6 );
 800d7e4:	4b05      	ldr	r3, [pc, #20]	; (800d7fc <RadioRxBoosted+0x4c>)
 800d7e6:	6818      	ldr	r0, [r3, #0]
 800d7e8:	0180      	lsls	r0, r0, #6
 800d7ea:	e7f8      	b.n	800d7de <RadioRxBoosted+0x2e>
 800d7ec:	0000ffff 	.word	0x0000ffff
 800d7f0:	20001928 	.word	0x20001928
 800d7f4:	2000104e 	.word	0x2000104e
 800d7f8:	00ffffff 	.word	0x00ffffff
 800d7fc:	20001050 	.word	0x20001050

0800d800 <RadioIrqProcess>:
  RadioIrqProcess();
}

void RadioIrqProcess( void )
{
    if( IrqFired == true )
 800d800:	4b67      	ldr	r3, [pc, #412]	; (800d9a0 <RadioIrqProcess+0x1a0>)
{
 800d802:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if( IrqFired == true )
 800d804:	781a      	ldrb	r2, [r3, #0]
 800d806:	2a00      	cmp	r2, #0
 800d808:	d100      	bne.n	800d80c <RadioIrqProcess+0xc>
 800d80a:	e086      	b.n	800d91a <RadioIrqProcess+0x11a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d80c:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800d810:	b672      	cpsid	i
    {
        CRITICAL_SECTION_BEGIN( );
        // Clear IRQ flag
        IrqFired = false;
 800d812:	2100      	movs	r1, #0
 800d814:	7019      	strb	r1, [r3, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d816:	f382 8810 	msr	PRIMASK, r2
        CRITICAL_SECTION_END( );

        uint16_t irqRegs = SX126xGetIrqStatus( );
 800d81a:	f000 fc34 	bl	800e086 <SX126xGetIrqStatus>
 800d81e:	0004      	movs	r4, r0
        SX126xClearIrqStatus( IRQ_RADIO_ALL );
 800d820:	4860      	ldr	r0, [pc, #384]	; (800d9a4 <RadioIrqProcess+0x1a4>)
 800d822:	f000 fc07 	bl	800e034 <SX126xClearIrqStatus>

        if( ( irqRegs & IRQ_TX_DONE ) == IRQ_TX_DONE )
 800d826:	07e3      	lsls	r3, r4, #31
 800d828:	d50d      	bpl.n	800d846 <RadioIrqProcess+0x46>
        {
            TimerStop( &TxTimeoutTimer );
 800d82a:	485f      	ldr	r0, [pc, #380]	; (800d9a8 <RadioIrqProcess+0x1a8>)
 800d82c:	f001 f98e 	bl	800eb4c <UTIL_TIMER_Stop>
            //!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
            SX126xSetOperatingMode(MODE_STDBY_XOSC);//SX126xSetOperatingMode( MODE_STDBY_RC );
 800d830:	2002      	movs	r0, #2
 800d832:	f000 fa3f 	bl	800dcb4 <SX126xSetOperatingMode>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800d836:	4b5d      	ldr	r3, [pc, #372]	; (800d9ac <RadioIrqProcess+0x1ac>)
 800d838:	681b      	ldr	r3, [r3, #0]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d003      	beq.n	800d846 <RadioIrqProcess+0x46>
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d000      	beq.n	800d846 <RadioIrqProcess+0x46>
            {
                RadioEvents->TxDone( );
 800d844:	4798      	blx	r3
            }
        }

        if( ( irqRegs & IRQ_RX_DONE ) == IRQ_RX_DONE )
 800d846:	2502      	movs	r5, #2
 800d848:	422c      	tst	r4, r5
 800d84a:	d010      	beq.n	800d86e <RadioIrqProcess+0x6e>
        {
            if( ( irqRegs & IRQ_CRC_ERROR ) == IRQ_CRC_ERROR )
 800d84c:	4f57      	ldr	r7, [pc, #348]	; (800d9ac <RadioIrqProcess+0x1ac>)
 800d84e:	4e58      	ldr	r6, [pc, #352]	; (800d9b0 <RadioIrqProcess+0x1b0>)
 800d850:	0663      	lsls	r3, r4, #25
 800d852:	d563      	bpl.n	800d91c <RadioIrqProcess+0x11c>
            {
                if( RxContinuous == false )
 800d854:	7833      	ldrb	r3, [r6, #0]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d102      	bne.n	800d860 <RadioIrqProcess+0x60>
                {
                    //!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
                	SX126xSetOperatingMode(MODE_STDBY_XOSC);//SX126xSetOperatingMode( MODE_STDBY_RC );
 800d85a:	0028      	movs	r0, r5
 800d85c:	f000 fa2a 	bl	800dcb4 <SX126xSetOperatingMode>
                }
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 800d860:	683b      	ldr	r3, [r7, #0]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d003      	beq.n	800d86e <RadioIrqProcess+0x6e>
 800d866:	691b      	ldr	r3, [r3, #16]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d000      	beq.n	800d86e <RadioIrqProcess+0x6e>
                {
                    RadioEvents->RxError( );
 800d86c:	4798      	blx	r3
                    RadioEvents->RxDone( RadioRxPayload, size, RadioPktStatus.Params.LoRa.RssiPkt, RadioPktStatus.Params.LoRa.SnrPkt );
                }
            }
        }

        if( ( irqRegs & IRQ_CAD_DONE ) == IRQ_CAD_DONE )
 800d86e:	0623      	lsls	r3, r4, #24
 800d870:	d50c      	bpl.n	800d88c <RadioIrqProcess+0x8c>
        {
            //!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
        	SX126xSetOperatingMode(MODE_STDBY_XOSC);//SX126xSetOperatingMode( MODE_STDBY_RC );
 800d872:	2002      	movs	r0, #2
 800d874:	f000 fa1e 	bl	800dcb4 <SX126xSetOperatingMode>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800d878:	4b4c      	ldr	r3, [pc, #304]	; (800d9ac <RadioIrqProcess+0x1ac>)
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d005      	beq.n	800d88c <RadioIrqProcess+0x8c>
 800d880:	699b      	ldr	r3, [r3, #24]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d002      	beq.n	800d88c <RadioIrqProcess+0x8c>
            {
                RadioEvents->CadDone( ( ( irqRegs & IRQ_CAD_ACTIVITY_DETECTED ) == IRQ_CAD_ACTIVITY_DETECTED ) );
 800d886:	05e0      	lsls	r0, r4, #23
 800d888:	0fc0      	lsrs	r0, r0, #31
 800d88a:	4798      	blx	r3
            }
        }

        if( ( irqRegs & IRQ_RX_TX_TIMEOUT ) == IRQ_RX_TX_TIMEOUT )
 800d88c:	05a3      	lsls	r3, r4, #22
 800d88e:	d512      	bpl.n	800d8b6 <RadioIrqProcess+0xb6>
        {
            if( SX126xGetOperatingMode( ) == MODE_TX )
 800d890:	f000 fa0a 	bl	800dca8 <SX126xGetOperatingMode>
 800d894:	2804      	cmp	r0, #4
 800d896:	d000      	beq.n	800d89a <RadioIrqProcess+0x9a>
 800d898:	e071      	b.n	800d97e <RadioIrqProcess+0x17e>
            {
                TimerStop( &TxTimeoutTimer );
 800d89a:	4843      	ldr	r0, [pc, #268]	; (800d9a8 <RadioIrqProcess+0x1a8>)
 800d89c:	f001 f956 	bl	800eb4c <UTIL_TIMER_Stop>
                //!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
                SX126xSetOperatingMode(MODE_STDBY_XOSC);//SX126xSetOperatingMode( MODE_STDBY_RC );
 800d8a0:	2002      	movs	r0, #2
 800d8a2:	f000 fa07 	bl	800dcb4 <SX126xSetOperatingMode>
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800d8a6:	4b41      	ldr	r3, [pc, #260]	; (800d9ac <RadioIrqProcess+0x1ac>)
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d003      	beq.n	800d8b6 <RadioIrqProcess+0xb6>
 800d8ae:	685b      	ldr	r3, [r3, #4]
            else if( SX126xGetOperatingMode( ) == MODE_RX )
            {
                TimerStop( &RxTimeoutTimer );
                //!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
                SX126xSetOperatingMode(MODE_STDBY_XOSC);//SX126xSetOperatingMode( MODE_STDBY_RC );
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d000      	beq.n	800d8b6 <RadioIrqProcess+0xb6>
                {
                    RadioEvents->RxTimeout( );
 800d8b4:	4798      	blx	r3
                }
            }
        }

        if( ( irqRegs & IRQ_PREAMBLE_DETECTED ) == IRQ_PREAMBLE_DETECTED )
 800d8b6:	0763      	lsls	r3, r4, #29
 800d8b8:	d505      	bpl.n	800d8c6 <RadioIrqProcess+0xc6>
        {
            MW_LOG(TS_OFF, VLEVEL_H, "PHY PRE OK\n\r" );
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	2003      	movs	r0, #3
 800d8be:	0011      	movs	r1, r2
 800d8c0:	4b3c      	ldr	r3, [pc, #240]	; (800d9b4 <RadioIrqProcess+0x1b4>)
 800d8c2:	f001 fb11 	bl	800eee8 <UTIL_ADV_TRACE_COND_FSend>
        }

        if( ( irqRegs & IRQ_SYNCWORD_VALID ) == IRQ_SYNCWORD_VALID )
 800d8c6:	0723      	lsls	r3, r4, #28
 800d8c8:	d505      	bpl.n	800d8d6 <RadioIrqProcess+0xd6>
        {
            MW_LOG(TS_OFF, VLEVEL_H, "PHY SYNC OK\n\r" );
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	2003      	movs	r0, #3
 800d8ce:	0011      	movs	r1, r2
 800d8d0:	4b39      	ldr	r3, [pc, #228]	; (800d9b8 <RadioIrqProcess+0x1b8>)
 800d8d2:	f001 fb09 	bl	800eee8 <UTIL_ADV_TRACE_COND_FSend>
        }

        if( ( irqRegs & IRQ_HEADER_VALID ) == IRQ_HEADER_VALID )
 800d8d6:	06e3      	lsls	r3, r4, #27
 800d8d8:	d505      	bpl.n	800d8e6 <RadioIrqProcess+0xe6>
        {
            MW_LOG(TS_OFF, VLEVEL_H, "PHY HDR OK\n\r" );
 800d8da:	2200      	movs	r2, #0
 800d8dc:	2003      	movs	r0, #3
 800d8de:	0011      	movs	r1, r2
 800d8e0:	4b36      	ldr	r3, [pc, #216]	; (800d9bc <RadioIrqProcess+0x1bc>)
 800d8e2:	f001 fb01 	bl	800eee8 <UTIL_ADV_TRACE_COND_FSend>
        }

        if( ( irqRegs & IRQ_HEADER_ERROR ) == IRQ_HEADER_ERROR )
 800d8e6:	06a3      	lsls	r3, r4, #26
 800d8e8:	d517      	bpl.n	800d91a <RadioIrqProcess+0x11a>
        {
            TimerStop( &RxTimeoutTimer );
 800d8ea:	4835      	ldr	r0, [pc, #212]	; (800d9c0 <RadioIrqProcess+0x1c0>)
 800d8ec:	f001 f92e 	bl	800eb4c <UTIL_TIMER_Stop>
            if( RxContinuous == false )
 800d8f0:	4b2f      	ldr	r3, [pc, #188]	; (800d9b0 <RadioIrqProcess+0x1b0>)
 800d8f2:	781b      	ldrb	r3, [r3, #0]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d102      	bne.n	800d8fe <RadioIrqProcess+0xfe>
            {
                //!< Update operating mode state to a value lower than \ref MODE_STDBY_XOSC
            	SX126xSetOperatingMode(MODE_STDBY_XOSC);//SX126xSetOperatingMode( MODE_STDBY_RC );
 800d8f8:	2002      	movs	r0, #2
 800d8fa:	f000 f9db 	bl	800dcb4 <SX126xSetOperatingMode>
            }
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800d8fe:	4b2b      	ldr	r3, [pc, #172]	; (800d9ac <RadioIrqProcess+0x1ac>)
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d009      	beq.n	800d91a <RadioIrqProcess+0x11a>
 800d906:	68db      	ldr	r3, [r3, #12]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d006      	beq.n	800d91a <RadioIrqProcess+0x11a>
            {
                RadioEvents->RxTimeout( );
 800d90c:	4798      	blx	r3
                MW_LOG(TS_OFF, VLEVEL_H, "PHY HDR KO\n\r" );
 800d90e:	2200      	movs	r2, #0
 800d910:	2003      	movs	r0, #3
 800d912:	0011      	movs	r1, r2
 800d914:	4b2b      	ldr	r3, [pc, #172]	; (800d9c4 <RadioIrqProcess+0x1c4>)
 800d916:	f001 fae7 	bl	800eee8 <UTIL_ADV_TRACE_COND_FSend>
            }
        }
    }
}
 800d91a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
                TimerStop( &RxTimeoutTimer );
 800d91c:	4828      	ldr	r0, [pc, #160]	; (800d9c0 <RadioIrqProcess+0x1c0>)
 800d91e:	f001 f915 	bl	800eb4c <UTIL_TIMER_Stop>
                if( RxContinuous == false )
 800d922:	7836      	ldrb	r6, [r6, #0]
 800d924:	2e00      	cmp	r6, #0
 800d926:	d10e      	bne.n	800d946 <RadioIrqProcess+0x146>
                	SX126xSetOperatingMode(MODE_STDBY_XOSC);//SX126xSetOperatingMode( MODE_STDBY_RC );
 800d928:	0028      	movs	r0, r5
 800d92a:	f000 f9c3 	bl	800dcb4 <SX126xSetOperatingMode>
                    SX126xWriteRegister( 0x0902, 0x00 );
 800d92e:	0031      	movs	r1, r6
 800d930:	4825      	ldr	r0, [pc, #148]	; (800d9c8 <RadioIrqProcess+0x1c8>)
 800d932:	f000 fc01 	bl	800e138 <SX126xWriteRegister>
                    SX126xWriteRegister( 0x0944, SX126xReadRegister( 0x0944 ) | ( 1 << 1 ) );
 800d936:	4825      	ldr	r0, [pc, #148]	; (800d9cc <RadioIrqProcess+0x1cc>)
 800d938:	f000 fc9e 	bl	800e278 <SX126xReadRegister>
 800d93c:	4305      	orrs	r5, r0
 800d93e:	b2e9      	uxtb	r1, r5
 800d940:	4822      	ldr	r0, [pc, #136]	; (800d9cc <RadioIrqProcess+0x1cc>)
 800d942:	f000 fbf9 	bl	800e138 <SX126xWriteRegister>
                SX126xGetPayload( RadioRxPayload, &size , 255 );
 800d946:	466b      	mov	r3, sp
 800d948:	4e21      	ldr	r6, [pc, #132]	; (800d9d0 <RadioIrqProcess+0x1d0>)
 800d94a:	1dd9      	adds	r1, r3, #7
 800d94c:	22ff      	movs	r2, #255	; 0xff
 800d94e:	0030      	movs	r0, r6
 800d950:	f000 fd71 	bl	800e436 <SX126xGetPayload>
                SX126xGetPacketStatus( &RadioPktStatus );
 800d954:	4d1f      	ldr	r5, [pc, #124]	; (800d9d4 <RadioIrqProcess+0x1d4>)
 800d956:	0028      	movs	r0, r5
 800d958:	f000 fba2 	bl	800e0a0 <SX126xGetPacketStatus>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800d95c:	683b      	ldr	r3, [r7, #0]
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d100      	bne.n	800d964 <RadioIrqProcess+0x164>
 800d962:	e784      	b.n	800d86e <RadioIrqProcess+0x6e>
 800d964:	689f      	ldr	r7, [r3, #8]
 800d966:	2f00      	cmp	r7, #0
 800d968:	d100      	bne.n	800d96c <RadioIrqProcess+0x16c>
 800d96a:	e780      	b.n	800d86e <RadioIrqProcess+0x6e>
                    RadioEvents->RxDone( RadioRxPayload, size, RadioPktStatus.Params.LoRa.RssiPkt, RadioPktStatus.Params.LoRa.SnrPkt );
 800d96c:	4669      	mov	r1, sp
 800d96e:	230d      	movs	r3, #13
 800d970:	220c      	movs	r2, #12
 800d972:	0030      	movs	r0, r6
 800d974:	56eb      	ldrsb	r3, [r5, r3]
 800d976:	56aa      	ldrsb	r2, [r5, r2]
 800d978:	79c9      	ldrb	r1, [r1, #7]
 800d97a:	47b8      	blx	r7
 800d97c:	e777      	b.n	800d86e <RadioIrqProcess+0x6e>
            else if( SX126xGetOperatingMode( ) == MODE_RX )
 800d97e:	f000 f993 	bl	800dca8 <SX126xGetOperatingMode>
 800d982:	2805      	cmp	r0, #5
 800d984:	d197      	bne.n	800d8b6 <RadioIrqProcess+0xb6>
                TimerStop( &RxTimeoutTimer );
 800d986:	480e      	ldr	r0, [pc, #56]	; (800d9c0 <RadioIrqProcess+0x1c0>)
 800d988:	f001 f8e0 	bl	800eb4c <UTIL_TIMER_Stop>
                SX126xSetOperatingMode(MODE_STDBY_XOSC);//SX126xSetOperatingMode( MODE_STDBY_RC );
 800d98c:	2002      	movs	r0, #2
 800d98e:	f000 f991 	bl	800dcb4 <SX126xSetOperatingMode>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800d992:	4b06      	ldr	r3, [pc, #24]	; (800d9ac <RadioIrqProcess+0x1ac>)
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d100      	bne.n	800d99c <RadioIrqProcess+0x19c>
 800d99a:	e78c      	b.n	800d8b6 <RadioIrqProcess+0xb6>
 800d99c:	68db      	ldr	r3, [r3, #12]
 800d99e:	e787      	b.n	800d8b0 <RadioIrqProcess+0xb0>
 800d9a0:	20001045 	.word	0x20001045
 800d9a4:	0000ffff 	.word	0x0000ffff
 800d9a8:	200017fc 	.word	0x200017fc
 800d9ac:	20001048 	.word	0x20001048
 800d9b0:	2000104e 	.word	0x2000104e
 800d9b4:	0800fd21 	.word	0x0800fd21
 800d9b8:	0800fd2e 	.word	0x0800fd2e
 800d9bc:	0800fd3c 	.word	0x0800fd3c
 800d9c0:	20001928 	.word	0x20001928
 800d9c4:	0800fd49 	.word	0x0800fd49
 800d9c8:	00000902 	.word	0x00000902
 800d9cc:	00000944 	.word	0x00000944
 800d9d0:	20001814 	.word	0x20001814
 800d9d4:	20001914 	.word	0x20001914

0800d9d8 <RadioOnDioIrq>:
  IrqFired = true;
 800d9d8:	2201      	movs	r2, #1
{
 800d9da:	b510      	push	{r4, lr}
  IrqFired = true;
 800d9dc:	4b02      	ldr	r3, [pc, #8]	; (800d9e8 <RadioOnDioIrq+0x10>)
 800d9de:	701a      	strb	r2, [r3, #0]
  RadioIrqProcess();
 800d9e0:	f7ff ff0e 	bl	800d800 <RadioIrqProcess>
}
 800d9e4:	bd10      	pop	{r4, pc}
 800d9e6:	46c0      	nop			; (mov r8, r8)
 800d9e8:	20001045 	.word	0x20001045

0800d9ec <RadioSetPublicNetwork>:
    RadioPublicNetwork.Current = RadioPublicNetwork.Previous = enable;
 800d9ec:	4b0c      	ldr	r3, [pc, #48]	; (800da20 <RadioSetPublicNetwork+0x34>)
{
 800d9ee:	b510      	push	{r4, lr}
 800d9f0:	0004      	movs	r4, r0
    RadioPublicNetwork.Current = RadioPublicNetwork.Previous = enable;
 800d9f2:	7018      	strb	r0, [r3, #0]
 800d9f4:	7058      	strb	r0, [r3, #1]
    if( modem == MODEM_LORA){
 800d9f6:	f000 f817 	bl	800da28 <RadioSetModem.part.0>
    if( enable == true )
 800d9fa:	2c00      	cmp	r4, #0
 800d9fc:	d009      	beq.n	800da12 <RadioSetPublicNetwork+0x26>
        SX126xWriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 800d9fe:	20e8      	movs	r0, #232	; 0xe8
 800da00:	2134      	movs	r1, #52	; 0x34
 800da02:	00c0      	lsls	r0, r0, #3
 800da04:	f000 fb98 	bl	800e138 <SX126xWriteRegister>
        SX126xWriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 800da08:	2144      	movs	r1, #68	; 0x44
        SX126xWriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 800da0a:	4806      	ldr	r0, [pc, #24]	; (800da24 <RadioSetPublicNetwork+0x38>)
 800da0c:	f000 fb94 	bl	800e138 <SX126xWriteRegister>
}
 800da10:	bd10      	pop	{r4, pc}
        SX126xWriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 800da12:	20e8      	movs	r0, #232	; 0xe8
 800da14:	2114      	movs	r1, #20
 800da16:	00c0      	lsls	r0, r0, #3
 800da18:	f000 fb8e 	bl	800e138 <SX126xWriteRegister>
        SX126xWriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 800da1c:	2124      	movs	r1, #36	; 0x24
 800da1e:	e7f4      	b.n	800da0a <RadioSetPublicNetwork+0x1e>
 800da20:	2000104c 	.word	0x2000104c
 800da24:	00000741 	.word	0x00000741

0800da28 <RadioSetModem.part.0>:
        SX126xSetPacketType( PACKET_TYPE_LORA );
 800da28:	2001      	movs	r0, #1
void RadioSetModem( RadioModems_t modem )
 800da2a:	b510      	push	{r4, lr}
        SX126xSetPacketType( PACKET_TYPE_LORA );
 800da2c:	f000 faa0 	bl	800df70 <SX126xSetPacketType>
        if( RadioPublicNetwork.Current != RadioPublicNetwork.Previous )
 800da30:	4b04      	ldr	r3, [pc, #16]	; (800da44 <RadioSetModem.part.0+0x1c>)
 800da32:	7818      	ldrb	r0, [r3, #0]
 800da34:	785a      	ldrb	r2, [r3, #1]
 800da36:	4282      	cmp	r2, r0
 800da38:	d002      	beq.n	800da40 <RadioSetModem.part.0+0x18>
            RadioPublicNetwork.Current = RadioPublicNetwork.Previous;
 800da3a:	7058      	strb	r0, [r3, #1]
            RadioSetPublicNetwork( RadioPublicNetwork.Current );
 800da3c:	f7ff ffd6 	bl	800d9ec <RadioSetPublicNetwork>
}
 800da40:	bd10      	pop	{r4, pc}
 800da42:	46c0      	nop			; (mov r8, r8)
 800da44:	2000104c 	.word	0x2000104c

0800da48 <RadioSetModem>:
{
 800da48:	b510      	push	{r4, lr}
    if( modem == MODEM_LORA){
 800da4a:	2801      	cmp	r0, #1
 800da4c:	d101      	bne.n	800da52 <RadioSetModem+0xa>
 800da4e:	f7ff ffeb 	bl	800da28 <RadioSetModem.part.0>
}
 800da52:	bd10      	pop	{r4, pc}

0800da54 <RadioRandom>:
{
 800da54:	b510      	push	{r4, lr}
 800da56:	f7ff ffe7 	bl	800da28 <RadioSetModem.part.0>
    SX126xSetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800da5a:	2300      	movs	r3, #0
 800da5c:	001a      	movs	r2, r3
 800da5e:	0019      	movs	r1, r3
 800da60:	0018      	movs	r0, r3
 800da62:	f000 fa1b 	bl	800de9c <SX126xSetDioIrqParams>
    rnd = SX126xGetRandom( );
 800da66:	f000 fc11 	bl	800e28c <SX126xGetRandom>
}
 800da6a:	bd10      	pop	{r4, pc}

0800da6c <RadioSetRxConfig>:
{
 800da6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da6e:	b087      	sub	sp, #28
 800da70:	9303      	str	r3, [sp, #12]
 800da72:	ab0d      	add	r3, sp, #52	; 0x34
 800da74:	881b      	ldrh	r3, [r3, #0]
 800da76:	0015      	movs	r5, r2
 800da78:	9301      	str	r3, [sp, #4]
 800da7a:	ab0e      	add	r3, sp, #56	; 0x38
 800da7c:	881b      	ldrh	r3, [r3, #0]
 800da7e:	000e      	movs	r6, r1
 800da80:	9300      	str	r3, [sp, #0]
 800da82:	ab0f      	add	r3, sp, #60	; 0x3c
 800da84:	781b      	ldrb	r3, [r3, #0]
 800da86:	a906      	add	r1, sp, #24
 800da88:	9302      	str	r3, [sp, #8]
 800da8a:	ab10      	add	r3, sp, #64	; 0x40
 800da8c:	781a      	ldrb	r2, [r3, #0]
 800da8e:	ab11      	add	r3, sp, #68	; 0x44
 800da90:	781b      	ldrb	r3, [r3, #0]
 800da92:	0007      	movs	r7, r0
 800da94:	9304      	str	r3, [sp, #16]
 800da96:	2319      	movs	r3, #25
 800da98:	185b      	adds	r3, r3, r1
 800da9a:	7fdb      	ldrb	r3, [r3, #31]
 800da9c:	9305      	str	r3, [sp, #20]
 800da9e:	231d      	movs	r3, #29
 800daa0:	185b      	adds	r3, r3, r1
 800daa2:	7fdb      	ldrb	r3, [r3, #31]
    RxContinuous = rxContinuous;
 800daa4:	4937      	ldr	r1, [pc, #220]	; (800db84 <RadioSetRxConfig+0x118>)
 800daa6:	700b      	strb	r3, [r1, #0]
        symbTimeout = 0;
 800daa8:	4259      	negs	r1, r3
 800daaa:	414b      	adcs	r3, r1
 800daac:	9900      	ldr	r1, [sp, #0]
 800daae:	425b      	negs	r3, r3
 800dab0:	4019      	ands	r1, r3
    if( fixLen == true )
 800dab2:	9b02      	ldr	r3, [sp, #8]
        symbTimeout = 0;
 800dab4:	9100      	str	r1, [sp, #0]
    if( fixLen == true )
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d100      	bne.n	800dabc <RadioSetRxConfig+0x50>
        MaxPayloadLength = 0xFF;
 800daba:	22ff      	movs	r2, #255	; 0xff
 800dabc:	4b32      	ldr	r3, [pc, #200]	; (800db88 <RadioSetRxConfig+0x11c>)
 800dabe:	701a      	strb	r2, [r3, #0]
    if(modem == MODEM_LORA){
 800dac0:	2f01      	cmp	r7, #1
 800dac2:	d14c      	bne.n	800db5e <RadioSetRxConfig+0xf2>
            SX126xSetStopRxTimerOnPreambleDetect( false );
 800dac4:	2000      	movs	r0, #0
 800dac6:	f000 f97b 	bl	800ddc0 <SX126xSetStopRxTimerOnPreambleDetect>
            SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800daca:	4c30      	ldr	r4, [pc, #192]	; (800db8c <RadioSetRxConfig+0x120>)
            SX126x.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 800dacc:	4930      	ldr	r1, [pc, #192]	; (800db90 <RadioSetRxConfig+0x124>)
            SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800dace:	0023      	movs	r3, r4
            SX126x.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 800dad0:	0022      	movs	r2, r4
            SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800dad2:	3328      	adds	r3, #40	; 0x28
            SX126x.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 800dad4:	3238      	adds	r2, #56	; 0x38
            SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800dad6:	701f      	strb	r7, [r3, #0]
            SX126x.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 800dad8:	b2eb      	uxtb	r3, r5
 800dada:	7013      	strb	r3, [r2, #0]
            SX126x.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 800dadc:	0022      	movs	r2, r4
 800dade:	5d89      	ldrb	r1, [r1, r6]
 800dae0:	3239      	adds	r2, #57	; 0x39
 800dae2:	7011      	strb	r1, [r2, #0]
            SX126x.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 800dae4:	0022      	movs	r2, r4
 800dae6:	9903      	ldr	r1, [sp, #12]
 800dae8:	323a      	adds	r2, #58	; 0x3a
 800daea:	7011      	strb	r1, [r2, #0]
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800daec:	2e00      	cmp	r6, #0
 800daee:	d138      	bne.n	800db62 <RadioSetRxConfig+0xf6>
 800daf0:	3d0b      	subs	r5, #11
 800daf2:	42af      	cmp	r7, r5
 800daf4:	4176      	adcs	r6, r6
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800daf6:	b2f1      	uxtb	r1, r6
 800daf8:	0022      	movs	r2, r4
 800dafa:	323b      	adds	r2, #59	; 0x3b
 800dafc:	7011      	strb	r1, [r2, #0]
            SX126x.PacketParams.PacketType = PACKET_TYPE_LORA;
 800dafe:	2201      	movs	r2, #1
            if( ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800db00:	3b05      	subs	r3, #5
            SX126x.PacketParams.PacketType = PACKET_TYPE_LORA;
 800db02:	7022      	strb	r2, [r4, #0]
            if( ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800db04:	4293      	cmp	r3, r2
 800db06:	d834      	bhi.n	800db72 <RadioSetRxConfig+0x106>
                if( preambleLen < 12 )
 800db08:	9b01      	ldr	r3, [sp, #4]
 800db0a:	2b0b      	cmp	r3, #11
 800db0c:	d831      	bhi.n	800db72 <RadioSetRxConfig+0x106>
                    SX126x.PacketParams.Params.LoRa.PreambleLength = 12;
 800db0e:	230c      	movs	r3, #12
 800db10:	81a3      	strh	r3, [r4, #12]
            SX126x.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800db12:	9b02      	ldr	r3, [sp, #8]
 800db14:	73a3      	strb	r3, [r4, #14]
            SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800db16:	4b1c      	ldr	r3, [pc, #112]	; (800db88 <RadioSetRxConfig+0x11c>)
 800db18:	781b      	ldrb	r3, [r3, #0]
 800db1a:	73e3      	strb	r3, [r4, #15]
            SX126x.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800db1c:	9b04      	ldr	r3, [sp, #16]
 800db1e:	7423      	strb	r3, [r4, #16]
            SX126x.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800db20:	9b05      	ldr	r3, [sp, #20]
 800db22:	7463      	strb	r3, [r4, #17]
            RadioStandby( );
 800db24:	f7ff fd4c 	bl	800d5c0 <RadioStandby>
    if( modem == MODEM_LORA){
 800db28:	f7ff ff7e 	bl	800da28 <RadioSetModem.part.0>
            SX126xSetModulationParams( &SX126x.ModulationParams );
 800db2c:	4819      	ldr	r0, [pc, #100]	; (800db94 <RadioSetRxConfig+0x128>)
 800db2e:	f000 fa2d 	bl	800df8c <SX126xSetModulationParams>
            SX126xSetPacketParams( &SX126x.PacketParams );
 800db32:	0020      	movs	r0, r4
 800db34:	f000 fa48 	bl	800dfc8 <SX126xSetPacketParams>
            SX126xSetLoRaSymbNumTimeout( symbTimeout );
 800db38:	466b      	mov	r3, sp
 800db3a:	7818      	ldrb	r0, [r3, #0]
 800db3c:	f000 fb62 	bl	800e204 <SX126xSetLoRaSymbNumTimeout>
            if( SX126x.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800db40:	7c63      	ldrb	r3, [r4, #17]
                SX126xWriteRegister( 0x0736, SX126xReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 800db42:	4815      	ldr	r0, [pc, #84]	; (800db98 <RadioSetRxConfig+0x12c>)
 800db44:	2404      	movs	r4, #4
            if( SX126x.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 800db46:	2b01      	cmp	r3, #1
 800db48:	d117      	bne.n	800db7a <RadioSetRxConfig+0x10e>
                SX126xWriteRegister( 0x0736, SX126xReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 800db4a:	f000 fb95 	bl	800e278 <SX126xReadRegister>
 800db4e:	43a0      	bics	r0, r4
 800db50:	b2c1      	uxtb	r1, r0
                SX126xWriteRegister( 0x0736, SX126xReadRegister( 0x0736 ) | ( 1 << 2 ) );
 800db52:	4811      	ldr	r0, [pc, #68]	; (800db98 <RadioSetRxConfig+0x12c>)
 800db54:	f000 faf0 	bl	800e138 <SX126xWriteRegister>
            RxTimeout = 0xFFFF;
 800db58:	4b10      	ldr	r3, [pc, #64]	; (800db9c <RadioSetRxConfig+0x130>)
 800db5a:	4a11      	ldr	r2, [pc, #68]	; (800dba0 <RadioSetRxConfig+0x134>)
 800db5c:	601a      	str	r2, [r3, #0]
}
 800db5e:	b007      	add	sp, #28
 800db60:	bdf0      	pop	{r4, r5, r6, r7, pc}
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800db62:	2100      	movs	r1, #0
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800db64:	2e01      	cmp	r6, #1
 800db66:	d1c7      	bne.n	800daf8 <RadioSetRxConfig+0x8c>
            ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800db68:	3d0c      	subs	r5, #12
 800db6a:	426a      	negs	r2, r5
 800db6c:	4155      	adcs	r5, r2
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800db6e:	b2e9      	uxtb	r1, r5
 800db70:	e7c2      	b.n	800daf8 <RadioSetRxConfig+0x8c>
                    SX126x.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800db72:	4b06      	ldr	r3, [pc, #24]	; (800db8c <RadioSetRxConfig+0x120>)
 800db74:	9a01      	ldr	r2, [sp, #4]
 800db76:	819a      	strh	r2, [r3, #12]
 800db78:	e7cb      	b.n	800db12 <RadioSetRxConfig+0xa6>
                SX126xWriteRegister( 0x0736, SX126xReadRegister( 0x0736 ) | ( 1 << 2 ) );
 800db7a:	f000 fb7d 	bl	800e278 <SX126xReadRegister>
 800db7e:	4304      	orrs	r4, r0
 800db80:	b2e1      	uxtb	r1, r4
 800db82:	e7e6      	b.n	800db52 <RadioSetRxConfig+0xe6>
 800db84:	2000104e 	.word	0x2000104e
 800db88:	20000184 	.word	0x20000184
 800db8c:	200017c0 	.word	0x200017c0
 800db90:	0800fd56 	.word	0x0800fd56
 800db94:	200017e8 	.word	0x200017e8
 800db98:	00000736 	.word	0x00000736
 800db9c:	20001050 	.word	0x20001050
 800dba0:	0000ffff 	.word	0x0000ffff

0800dba4 <RadioSetTxConfig>:
{
 800dba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dba6:	b087      	sub	sp, #28
 800dba8:	9101      	str	r1, [sp, #4]
 800dbaa:	a90c      	add	r1, sp, #48	; 0x30
 800dbac:	c904      	ldmia	r1!, {r2}
 800dbae:	7809      	ldrb	r1, [r1, #0]
 800dbb0:	9102      	str	r1, [sp, #8]
 800dbb2:	a90e      	add	r1, sp, #56	; 0x38
 800dbb4:	880e      	ldrh	r6, [r1, #0]
 800dbb6:	a90f      	add	r1, sp, #60	; 0x3c
 800dbb8:	7809      	ldrb	r1, [r1, #0]
 800dbba:	9103      	str	r1, [sp, #12]
 800dbbc:	a910      	add	r1, sp, #64	; 0x40
 800dbbe:	7809      	ldrb	r1, [r1, #0]
 800dbc0:	9104      	str	r1, [sp, #16]
 800dbc2:	a913      	add	r1, sp, #76	; 0x4c
 800dbc4:	7809      	ldrb	r1, [r1, #0]
 800dbc6:	9105      	str	r1, [sp, #20]
    if( modem == MODEM_LORA){
 800dbc8:	2801      	cmp	r0, #1
 800dbca:	d135      	bne.n	800dc38 <RadioSetTxConfig+0x94>
            SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800dbcc:	4c2d      	ldr	r4, [pc, #180]	; (800dc84 <RadioSetTxConfig+0xe0>)
            SX126x.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 800dbce:	4d2e      	ldr	r5, [pc, #184]	; (800dc88 <RadioSetTxConfig+0xe4>)
            SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800dbd0:	0021      	movs	r1, r4
            SX126x.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 800dbd2:	0027      	movs	r7, r4
            SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800dbd4:	3128      	adds	r1, #40	; 0x28
            SX126x.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 800dbd6:	3738      	adds	r7, #56	; 0x38
            SX126x.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800dbd8:	7008      	strb	r0, [r1, #0]
            SX126x.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 800dbda:	b2d1      	uxtb	r1, r2
 800dbdc:	7039      	strb	r1, [r7, #0]
            SX126x.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 800dbde:	0027      	movs	r7, r4
 800dbe0:	5ced      	ldrb	r5, [r5, r3]
 800dbe2:	3739      	adds	r7, #57	; 0x39
 800dbe4:	703d      	strb	r5, [r7, #0]
            SX126x.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 800dbe6:	0027      	movs	r7, r4
 800dbe8:	9d02      	ldr	r5, [sp, #8]
 800dbea:	373a      	adds	r7, #58	; 0x3a
 800dbec:	703d      	strb	r5, [r7, #0]
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d138      	bne.n	800dc64 <RadioSetTxConfig+0xc0>
 800dbf2:	3a0b      	subs	r2, #11
 800dbf4:	4290      	cmp	r0, r2
 800dbf6:	415b      	adcs	r3, r3
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800dbf8:	b2d8      	uxtb	r0, r3
 800dbfa:	0023      	movs	r3, r4
 800dbfc:	333b      	adds	r3, #59	; 0x3b
 800dbfe:	7018      	strb	r0, [r3, #0]
            SX126x.PacketParams.PacketType = PACKET_TYPE_LORA;
 800dc00:	2301      	movs	r3, #1
            if( ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800dc02:	3905      	subs	r1, #5
            SX126x.PacketParams.PacketType = PACKET_TYPE_LORA;
 800dc04:	7023      	strb	r3, [r4, #0]
            if( ( SX126x.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800dc06:	4299      	cmp	r1, r3
 800dc08:	d834      	bhi.n	800dc74 <RadioSetTxConfig+0xd0>
                if( preambleLen < 12 )
 800dc0a:	2e0b      	cmp	r6, #11
 800dc0c:	d832      	bhi.n	800dc74 <RadioSetTxConfig+0xd0>
                    SX126x.PacketParams.Params.LoRa.PreambleLength = 12;
 800dc0e:	330b      	adds	r3, #11
 800dc10:	81a3      	strh	r3, [r4, #12]
            SX126x.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800dc12:	9b03      	ldr	r3, [sp, #12]
 800dc14:	73a3      	strb	r3, [r4, #14]
            SX126x.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800dc16:	4b1d      	ldr	r3, [pc, #116]	; (800dc8c <RadioSetTxConfig+0xe8>)
 800dc18:	781b      	ldrb	r3, [r3, #0]
 800dc1a:	73e3      	strb	r3, [r4, #15]
            SX126x.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 800dc1c:	9b04      	ldr	r3, [sp, #16]
 800dc1e:	7423      	strb	r3, [r4, #16]
            SX126x.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800dc20:	9b05      	ldr	r3, [sp, #20]
 800dc22:	7463      	strb	r3, [r4, #17]
            RadioStandby( );
 800dc24:	f7ff fccc 	bl	800d5c0 <RadioStandby>
    if( modem == MODEM_LORA){
 800dc28:	f7ff fefe 	bl	800da28 <RadioSetModem.part.0>
            SX126xSetModulationParams( &SX126x.ModulationParams );
 800dc2c:	4818      	ldr	r0, [pc, #96]	; (800dc90 <RadioSetTxConfig+0xec>)
 800dc2e:	f000 f9ad 	bl	800df8c <SX126xSetModulationParams>
            SX126xSetPacketParams( &SX126x.PacketParams );
 800dc32:	0020      	movs	r0, r4
 800dc34:	f000 f9c8 	bl	800dfc8 <SX126xSetPacketParams>
    if( SX126x.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 800dc38:	4b12      	ldr	r3, [pc, #72]	; (800dc84 <RadioSetTxConfig+0xe0>)
 800dc3a:	2404      	movs	r4, #4
 800dc3c:	3339      	adds	r3, #57	; 0x39
 800dc3e:	781b      	ldrb	r3, [r3, #0]
        SX126xWriteRegister( 0x0889, SX126xReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 800dc40:	4814      	ldr	r0, [pc, #80]	; (800dc94 <RadioSetTxConfig+0xf0>)
    if( SX126x.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 800dc42:	2b06      	cmp	r3, #6
 800dc44:	d119      	bne.n	800dc7a <RadioSetTxConfig+0xd6>
        SX126xWriteRegister( 0x0889, SX126xReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 800dc46:	f000 fb17 	bl	800e278 <SX126xReadRegister>
 800dc4a:	43a0      	bics	r0, r4
 800dc4c:	b2c1      	uxtb	r1, r0
        SX126xWriteRegister( 0x0889, SX126xReadRegister( 0x0889 ) | ( 1 << 2 ) );
 800dc4e:	4811      	ldr	r0, [pc, #68]	; (800dc94 <RadioSetTxConfig+0xf0>)
 800dc50:	f000 fa72 	bl	800e138 <SX126xWriteRegister>
    SX126xSetRfTxPower( power );
 800dc54:	9801      	ldr	r0, [sp, #4]
 800dc56:	f000 fb79 	bl	800e34c <SX126xSetRfTxPower>
    TxTimeout = timeout;
 800dc5a:	4b0f      	ldr	r3, [pc, #60]	; (800dc98 <RadioSetTxConfig+0xf4>)
 800dc5c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800dc5e:	601a      	str	r2, [r3, #0]
}
 800dc60:	b007      	add	sp, #28
 800dc62:	bdf0      	pop	{r4, r5, r6, r7, pc}
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800dc64:	2000      	movs	r0, #0
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800dc66:	2b01      	cmp	r3, #1
 800dc68:	d1c7      	bne.n	800dbfa <RadioSetTxConfig+0x56>
            ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800dc6a:	3a0c      	subs	r2, #12
 800dc6c:	4250      	negs	r0, r2
 800dc6e:	4150      	adcs	r0, r2
                SX126x.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800dc70:	b2c0      	uxtb	r0, r0
 800dc72:	e7c2      	b.n	800dbfa <RadioSetTxConfig+0x56>
                    SX126x.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800dc74:	4b03      	ldr	r3, [pc, #12]	; (800dc84 <RadioSetTxConfig+0xe0>)
 800dc76:	819e      	strh	r6, [r3, #12]
 800dc78:	e7cb      	b.n	800dc12 <RadioSetTxConfig+0x6e>
        SX126xWriteRegister( 0x0889, SX126xReadRegister( 0x0889 ) | ( 1 << 2 ) );
 800dc7a:	f000 fafd 	bl	800e278 <SX126xReadRegister>
 800dc7e:	4304      	orrs	r4, r0
 800dc80:	b2e1      	uxtb	r1, r4
 800dc82:	e7e4      	b.n	800dc4e <RadioSetTxConfig+0xaa>
 800dc84:	200017c0 	.word	0x200017c0
 800dc88:	0800fd56 	.word	0x0800fd56
 800dc8c:	20000184 	.word	0x20000184
 800dc90:	200017e8 	.word	0x200017e8
 800dc94:	00000889 	.word	0x00000889
 800dc98:	20001054 	.word	0x20001054

0800dc9c <SX126xFreqCorrection>:

    SX126xSetOperatingMode(MODE_STDBY_XOSC);//SX126xSetOperatingMode( MODE_STDBY_RC );
}

void SX126xFreqCorrection(uint8_t trim){
	xta_trim = trim;
 800dc9c:	4b01      	ldr	r3, [pc, #4]	; (800dca4 <SX126xFreqCorrection+0x8>)
 800dc9e:	7018      	strb	r0, [r3, #0]
}
 800dca0:	4770      	bx	lr
 800dca2:	46c0      	nop			; (mov r8, r8)
 800dca4:	20000185 	.word	0x20000185

0800dca8 <SX126xGetOperatingMode>:


RadioOperatingModes_t SX126xGetOperatingMode( void )
{
    return OperatingMode;
 800dca8:	4b01      	ldr	r3, [pc, #4]	; (800dcb0 <SX126xGetOperatingMode+0x8>)
 800dcaa:	7818      	ldrb	r0, [r3, #0]
}
 800dcac:	4770      	bx	lr
 800dcae:	46c0      	nop			; (mov r8, r8)
 800dcb0:	2000105e 	.word	0x2000105e

0800dcb4 <SX126xSetOperatingMode>:

void SX126xSetOperatingMode( RadioOperatingModes_t mode )
{
    OperatingMode = mode;
 800dcb4:	4b01      	ldr	r3, [pc, #4]	; (800dcbc <SX126xSetOperatingMode+0x8>)
 800dcb6:	7018      	strb	r0, [r3, #0]
}
 800dcb8:	4770      	bx	lr
 800dcba:	46c0      	nop			; (mov r8, r8)
 800dcbc:	2000105e 	.word	0x2000105e

0800dcc0 <SX126xCheckDeviceReady>:

void SX126xCheckDeviceReady( void )
{
 800dcc0:	b510      	push	{r4, lr}
    return OperatingMode;
 800dcc2:	4b07      	ldr	r3, [pc, #28]	; (800dce0 <SX126xCheckDeviceReady+0x20>)
 800dcc4:	781b      	ldrb	r3, [r3, #0]
    if( ( SX126xGetOperatingMode( ) == MODE_SLEEP ) || ( SX126xGetOperatingMode( ) == MODE_RX_DC ) )
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d001      	beq.n	800dcce <SX126xCheckDeviceReady+0xe>
 800dcca:	2b06      	cmp	r3, #6
 800dccc:	d104      	bne.n	800dcd8 <SX126xCheckDeviceReady+0x18>
    {
        Sx_Board_WakeUp( );
 800dcce:	f7f6 faef 	bl	80042b0 <SX1262DVK1CAS_RADIO_WakeUp>
        // Switch is turned off when device is in sleep mode and turned on is all other modes
        Sx_Board_SetAntSw( RFSW_ON );
 800dcd2:	2005      	movs	r0, #5
 800dcd4:	f7f6 faca 	bl	800426c <SX1262DVK1CAS_RADIO_SetAntSw>
    }
    Sx_Board_WaitOnBusy( );
 800dcd8:	f7f6 fab2 	bl	8004240 <SX1262DVK1CAS_RADIO_WaitOnBusy>
}
 800dcdc:	bd10      	pop	{r4, pc}
 800dcde:	46c0      	nop			; (mov r8, r8)
 800dce0:	2000105e 	.word	0x2000105e

0800dce4 <SX126xGetPacketType>:
    SX126xWriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
}

RadioPacketTypes_t SX126xGetPacketType( void )
{
    return PacketType;
 800dce4:	4b01      	ldr	r3, [pc, #4]	; (800dcec <SX126xGetPacketType+0x8>)
 800dce6:	7818      	ldrb	r0, [r3, #0]
}
 800dce8:	4770      	bx	lr
 800dcea:	46c0      	nop			; (mov r8, r8)
 800dcec:	2000105f 	.word	0x2000105f

0800dcf0 <SX126xWriteCommand>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SX126xWriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SX126xWriteCommand( RadioCommands_t command, uint8_t *buffer, uint16_t size )
{
 800dcf0:	b570      	push	{r4, r5, r6, lr}
 800dcf2:	0006      	movs	r6, r0
 800dcf4:	000c      	movs	r4, r1
 800dcf6:	0015      	movs	r5, r2
    SX126xCheckDeviceReady( );
 800dcf8:	f7ff ffe2 	bl	800dcc0 <SX126xCheckDeviceReady>

    Sx_Board_ChipSelect( 0 );
 800dcfc:	2000      	movs	r0, #0
 800dcfe:	f7f6 faa9 	bl	8004254 <SX1262DVK1CAS_RADIO_ChipSelect>

    Sx_Board_SendRecv(  ( uint8_t )command );
 800dd02:	b2b0      	uxth	r0, r6
 800dd04:	f7f6 fac6 	bl	8004294 <SX1262DVK1CAS_RADIO_SendRecv>

    for( uint16_t i = 0; i < size; i++ )
 800dd08:	1965      	adds	r5, r4, r5
 800dd0a:	42ac      	cmp	r4, r5
 800dd0c:	d107      	bne.n	800dd1e <SX126xWriteCommand+0x2e>
    {
        Sx_Board_SendRecv(  buffer[i] );
    }

    Sx_Board_ChipSelect( 1 );
 800dd0e:	2001      	movs	r0, #1
 800dd10:	f7f6 faa0 	bl	8004254 <SX1262DVK1CAS_RADIO_ChipSelect>

    if( command != RADIO_SET_SLEEP )
 800dd14:	2e84      	cmp	r6, #132	; 0x84
 800dd16:	d001      	beq.n	800dd1c <SX126xWriteCommand+0x2c>
    {
        Sx_Board_WaitOnBusy( );
 800dd18:	f7f6 fa92 	bl	8004240 <SX1262DVK1CAS_RADIO_WaitOnBusy>
    }
}
 800dd1c:	bd70      	pop	{r4, r5, r6, pc}
        Sx_Board_SendRecv(  buffer[i] );
 800dd1e:	7820      	ldrb	r0, [r4, #0]
 800dd20:	f7f6 fab8 	bl	8004294 <SX1262DVK1CAS_RADIO_SendRecv>
    for( uint16_t i = 0; i < size; i++ )
 800dd24:	3401      	adds	r4, #1
 800dd26:	e7f0      	b.n	800dd0a <SX126xWriteCommand+0x1a>

0800dd28 <SX126xSetSleep>:
{
 800dd28:	b513      	push	{r0, r1, r4, lr}
 800dd2a:	1c04      	adds	r4, r0, #0
    Sx_Board_SetAntSw( RFSW_OFF );
 800dd2c:	2000      	movs	r0, #0
 800dd2e:	f7f6 fa9d 	bl	800426c <SX1262DVK1CAS_RADIO_SetAntSw>
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800dd32:	2006      	movs	r0, #6
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800dd34:	466b      	mov	r3, sp
 800dd36:	4020      	ands	r0, r4
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 800dd38:	07e4      	lsls	r4, r4, #31
 800dd3a:	0fe4      	lsrs	r4, r4, #31
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800dd3c:	1dd9      	adds	r1, r3, #7
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800dd3e:	4304      	orrs	r4, r0
    SX126xWriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800dd40:	2201      	movs	r2, #1
 800dd42:	2084      	movs	r0, #132	; 0x84
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800dd44:	700c      	strb	r4, [r1, #0]
    SX126xWriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800dd46:	f7ff ffd3 	bl	800dcf0 <SX126xWriteCommand>
    OperatingMode = mode;
 800dd4a:	2200      	movs	r2, #0
 800dd4c:	4b01      	ldr	r3, [pc, #4]	; (800dd54 <SX126xSetSleep+0x2c>)
 800dd4e:	701a      	strb	r2, [r3, #0]
}
 800dd50:	bd13      	pop	{r0, r1, r4, pc}
 800dd52:	46c0      	nop			; (mov r8, r8)
 800dd54:	2000105e 	.word	0x2000105e

0800dd58 <SX126xSetStandby>:
{
 800dd58:	b507      	push	{r0, r1, r2, lr}
 800dd5a:	466b      	mov	r3, sp
    SX126xWriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 800dd5c:	2201      	movs	r2, #1
{
 800dd5e:	71d8      	strb	r0, [r3, #7]
    SX126xWriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 800dd60:	1dd9      	adds	r1, r3, #7
 800dd62:	2080      	movs	r0, #128	; 0x80
 800dd64:	f7ff ffc4 	bl	800dcf0 <SX126xWriteCommand>
    if( standbyConfig == STDBY_RC )
 800dd68:	466b      	mov	r3, sp
 800dd6a:	79db      	ldrb	r3, [r3, #7]
    OperatingMode = mode;
 800dd6c:	1e5a      	subs	r2, r3, #1
 800dd6e:	4193      	sbcs	r3, r2
 800dd70:	4a01      	ldr	r2, [pc, #4]	; (800dd78 <SX126xSetStandby+0x20>)
 800dd72:	3301      	adds	r3, #1
 800dd74:	7013      	strb	r3, [r2, #0]
}
 800dd76:	bd07      	pop	{r0, r1, r2, pc}
 800dd78:	2000105e 	.word	0x2000105e

0800dd7c <SX126xSetRxDutyCycle>:
{
 800dd7c:	b507      	push	{r0, r1, r2, lr}
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 800dd7e:	466a      	mov	r2, sp
 800dd80:	0c03      	lsrs	r3, r0, #16
 800dd82:	7013      	strb	r3, [r2, #0]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 800dd84:	0a03      	lsrs	r3, r0, #8
 800dd86:	7053      	strb	r3, [r2, #1]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 800dd88:	0c0b      	lsrs	r3, r1, #16
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 800dd8a:	ba49      	rev16	r1, r1
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 800dd8c:	7090      	strb	r0, [r2, #2]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 800dd8e:	70d3      	strb	r3, [r2, #3]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 800dd90:	8091      	strh	r1, [r2, #4]
    SX126xWriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 800dd92:	2094      	movs	r0, #148	; 0x94
 800dd94:	2206      	movs	r2, #6
 800dd96:	4669      	mov	r1, sp
 800dd98:	f7ff ffaa 	bl	800dcf0 <SX126xWriteCommand>
    OperatingMode = mode;
 800dd9c:	2206      	movs	r2, #6
 800dd9e:	4b01      	ldr	r3, [pc, #4]	; (800dda4 <SX126xSetRxDutyCycle+0x28>)
 800dda0:	701a      	strb	r2, [r3, #0]
}
 800dda2:	bd07      	pop	{r0, r1, r2, pc}
 800dda4:	2000105e 	.word	0x2000105e

0800dda8 <SX126xSetTxContinuousWave>:
    SX126xWriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 800dda8:	2200      	movs	r2, #0
{
 800ddaa:	b510      	push	{r4, lr}
    SX126xWriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 800ddac:	0011      	movs	r1, r2
 800ddae:	20d1      	movs	r0, #209	; 0xd1
 800ddb0:	f7ff ff9e 	bl	800dcf0 <SX126xWriteCommand>
    OperatingMode = mode;
 800ddb4:	2204      	movs	r2, #4
 800ddb6:	4b01      	ldr	r3, [pc, #4]	; (800ddbc <SX126xSetTxContinuousWave+0x14>)
 800ddb8:	701a      	strb	r2, [r3, #0]
}
 800ddba:	bd10      	pop	{r4, pc}
 800ddbc:	2000105e 	.word	0x2000105e

0800ddc0 <SX126xSetStopRxTimerOnPreambleDetect>:
{
 800ddc0:	b507      	push	{r0, r1, r2, lr}
 800ddc2:	466b      	mov	r3, sp
    SX126xWriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800ddc4:	2201      	movs	r2, #1
{
 800ddc6:	1dd9      	adds	r1, r3, #7
 800ddc8:	7008      	strb	r0, [r1, #0]
    SX126xWriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800ddca:	209f      	movs	r0, #159	; 0x9f
 800ddcc:	f7ff ff90 	bl	800dcf0 <SX126xWriteCommand>
}
 800ddd0:	bd07      	pop	{r0, r1, r2, pc}

0800ddd2 <SX126xSetRegulatorMode>:
{
 800ddd2:	b507      	push	{r0, r1, r2, lr}
 800ddd4:	466b      	mov	r3, sp
    SX126xWriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800ddd6:	2201      	movs	r2, #1
{
 800ddd8:	1dd9      	adds	r1, r3, #7
 800ddda:	7008      	strb	r0, [r1, #0]
    SX126xWriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 800dddc:	2096      	movs	r0, #150	; 0x96
 800ddde:	f7ff ff87 	bl	800dcf0 <SX126xWriteCommand>
}
 800dde2:	bd07      	pop	{r0, r1, r2, pc}

0800dde4 <SX126xCalibrate>:
{
 800dde4:	b507      	push	{r0, r1, r2, lr}
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800dde6:	466a      	mov	r2, sp
{
 800dde8:	1c03      	adds	r3, r0, #0
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800ddea:	2060      	movs	r0, #96	; 0x60
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800ddec:	1dd1      	adds	r1, r2, #7
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800ddee:	07da      	lsls	r2, r3, #31
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800ddf0:	4018      	ands	r0, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 800ddf2:	0fd2      	lsrs	r2, r2, #31
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800ddf4:	4310      	orrs	r0, r2
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800ddf6:	2210      	movs	r2, #16
 800ddf8:	401a      	ands	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800ddfa:	4310      	orrs	r0, r2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 800ddfc:	2208      	movs	r2, #8
 800ddfe:	401a      	ands	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800de00:	4310      	orrs	r0, r2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 800de02:	2204      	movs	r2, #4
 800de04:	401a      	ands	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 800de06:	4310      	orrs	r0, r2
 800de08:	2202      	movs	r2, #2
 800de0a:	4013      	ands	r3, r2
 800de0c:	4318      	orrs	r0, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800de0e:	7008      	strb	r0, [r1, #0]
    SX126xWriteCommand( RADIO_CALIBRATE, &value, 1 );
 800de10:	3a01      	subs	r2, #1
 800de12:	2089      	movs	r0, #137	; 0x89
 800de14:	f7ff ff6c 	bl	800dcf0 <SX126xWriteCommand>
}
 800de18:	bd07      	pop	{r0, r1, r2, pc}
	...

0800de1c <SX126xCalibrateImage>:
{
 800de1c:	b507      	push	{r0, r1, r2, lr}
    if( freq > 900000000 )
 800de1e:	4b0f      	ldr	r3, [pc, #60]	; (800de5c <SX126xCalibrateImage+0x40>)
 800de20:	a901      	add	r1, sp, #4
 800de22:	4298      	cmp	r0, r3
 800de24:	d906      	bls.n	800de34 <SX126xCalibrateImage+0x18>
        calFreq[0] = 0xE1;
 800de26:	4b0e      	ldr	r3, [pc, #56]	; (800de60 <SX126xCalibrateImage+0x44>)
        calFreq[0] = 0x6B;
 800de28:	800b      	strh	r3, [r1, #0]
    SX126xWriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 800de2a:	2202      	movs	r2, #2
 800de2c:	2098      	movs	r0, #152	; 0x98
 800de2e:	f7ff ff5f 	bl	800dcf0 <SX126xWriteCommand>
}
 800de32:	bd07      	pop	{r0, r1, r2, pc}
    else if( freq > 850000000 )
 800de34:	4b0b      	ldr	r3, [pc, #44]	; (800de64 <SX126xCalibrateImage+0x48>)
 800de36:	4298      	cmp	r0, r3
 800de38:	d901      	bls.n	800de3e <SX126xCalibrateImage+0x22>
        calFreq[0] = 0xD7;
 800de3a:	4b0b      	ldr	r3, [pc, #44]	; (800de68 <SX126xCalibrateImage+0x4c>)
 800de3c:	e7f4      	b.n	800de28 <SX126xCalibrateImage+0xc>
    else if( freq > 770000000 )
 800de3e:	4b0b      	ldr	r3, [pc, #44]	; (800de6c <SX126xCalibrateImage+0x50>)
 800de40:	4298      	cmp	r0, r3
 800de42:	d901      	bls.n	800de48 <SX126xCalibrateImage+0x2c>
        calFreq[0] = 0xC1;
 800de44:	4b0a      	ldr	r3, [pc, #40]	; (800de70 <SX126xCalibrateImage+0x54>)
 800de46:	e7ef      	b.n	800de28 <SX126xCalibrateImage+0xc>
    else if( freq > 460000000 )
 800de48:	4b0a      	ldr	r3, [pc, #40]	; (800de74 <SX126xCalibrateImage+0x58>)
 800de4a:	4298      	cmp	r0, r3
 800de4c:	d901      	bls.n	800de52 <SX126xCalibrateImage+0x36>
        calFreq[0] = 0x75;
 800de4e:	4b0a      	ldr	r3, [pc, #40]	; (800de78 <SX126xCalibrateImage+0x5c>)
 800de50:	e7ea      	b.n	800de28 <SX126xCalibrateImage+0xc>
    else if( freq > 425000000 )
 800de52:	4b0a      	ldr	r3, [pc, #40]	; (800de7c <SX126xCalibrateImage+0x60>)
 800de54:	4298      	cmp	r0, r3
 800de56:	d9e8      	bls.n	800de2a <SX126xCalibrateImage+0xe>
        calFreq[0] = 0x6B;
 800de58:	4b09      	ldr	r3, [pc, #36]	; (800de80 <SX126xCalibrateImage+0x64>)
 800de5a:	e7e5      	b.n	800de28 <SX126xCalibrateImage+0xc>
 800de5c:	35a4e900 	.word	0x35a4e900
 800de60:	ffffe9e1 	.word	0xffffe9e1
 800de64:	32a9f880 	.word	0x32a9f880
 800de68:	ffffdbd7 	.word	0xffffdbd7
 800de6c:	2de54480 	.word	0x2de54480
 800de70:	ffffc5c1 	.word	0xffffc5c1
 800de74:	1b6b0b00 	.word	0x1b6b0b00
 800de78:	ffff8175 	.word	0xffff8175
 800de7c:	1954fc40 	.word	0x1954fc40
 800de80:	00006f6b 	.word	0x00006f6b

0800de84 <SX126xSetPaConfig>:
{
 800de84:	b513      	push	{r0, r1, r4, lr}
    buf[0] = paDutyCycle;
 800de86:	ac01      	add	r4, sp, #4
 800de88:	7020      	strb	r0, [r4, #0]
    buf[1] = hpMax;
 800de8a:	7061      	strb	r1, [r4, #1]
    buf[2] = deviceSel;
 800de8c:	70a2      	strb	r2, [r4, #2]
    SX126xWriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800de8e:	0021      	movs	r1, r4
 800de90:	2204      	movs	r2, #4
 800de92:	2095      	movs	r0, #149	; 0x95
    buf[3] = paLut;
 800de94:	70e3      	strb	r3, [r4, #3]
    SX126xWriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 800de96:	f7ff ff2b 	bl	800dcf0 <SX126xWriteCommand>
}
 800de9a:	bd13      	pop	{r0, r1, r4, pc}

0800de9c <SX126xSetDioIrqParams>:
{
 800de9c:	b513      	push	{r0, r1, r4, lr}
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800de9e:	466c      	mov	r4, sp
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800dea0:	ba52      	rev16	r2, r2
 800dea2:	80a2      	strh	r2, [r4, #4]
    SX126xWriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800dea4:	2208      	movs	r2, #8
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800dea6:	ba40      	rev16	r0, r0
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800dea8:	ba49      	rev16	r1, r1
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 800deaa:	8020      	strh	r0, [r4, #0]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 800deac:	8061      	strh	r1, [r4, #2]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800deae:	ba5b      	rev16	r3, r3
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 800deb0:	4669      	mov	r1, sp
    SX126xWriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800deb2:	0010      	movs	r0, r2
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 800deb4:	80e3      	strh	r3, [r4, #6]
    SX126xWriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800deb6:	f7ff ff1b 	bl	800dcf0 <SX126xWriteCommand>
}
 800deba:	bd13      	pop	{r0, r1, r4, pc}

0800debc <SX126xSetDio2AsRfSwitchCtrl>:
{
 800debc:	b507      	push	{r0, r1, r2, lr}
 800debe:	466b      	mov	r3, sp
    SX126xWriteCommand( RADIO_SET_RFSWITCHMODE, &enable, 1 );
 800dec0:	2201      	movs	r2, #1
{
 800dec2:	1dd9      	adds	r1, r3, #7
 800dec4:	7008      	strb	r0, [r1, #0]
    SX126xWriteCommand( RADIO_SET_RFSWITCHMODE, &enable, 1 );
 800dec6:	209d      	movs	r0, #157	; 0x9d
 800dec8:	f7ff ff12 	bl	800dcf0 <SX126xWriteCommand>
}
 800decc:	bd07      	pop	{r0, r1, r2, pc}

0800dece <SX126xSetDio3AsTcxoCtrl>:
{
 800dece:	b507      	push	{r0, r1, r2, lr}
 800ded0:	000b      	movs	r3, r1
    buf[0] = tcxoVoltage & 0x07;
 800ded2:	2207      	movs	r2, #7
 800ded4:	a901      	add	r1, sp, #4
 800ded6:	4010      	ands	r0, r2
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800ded8:	0c1a      	lsrs	r2, r3, #16
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800deda:	ba5b      	rev16	r3, r3
    buf[0] = tcxoVoltage & 0x07;
 800dedc:	7008      	strb	r0, [r1, #0]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800dede:	704a      	strb	r2, [r1, #1]
    SX126xWriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800dee0:	2097      	movs	r0, #151	; 0x97
 800dee2:	2204      	movs	r2, #4
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800dee4:	804b      	strh	r3, [r1, #2]
    SX126xWriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800dee6:	f7ff ff03 	bl	800dcf0 <SX126xWriteCommand>
}
 800deea:	bd07      	pop	{r0, r1, r2, pc}

0800deec <SX126xInit>:
{
 800deec:	b507      	push	{r0, r1, r2, lr}
 800deee:	9001      	str	r0, [sp, #4]
    Sx_Board_Reset( );
 800def0:	f7f6 f968 	bl	80041c4 <SX1262DVK1CAS_RADIO_Reset>
    Sx_Board_IoIrqInit( &dioIrq );
 800def4:	a801      	add	r0, sp, #4
 800def6:	f7f6 f949 	bl	800418c <SX1262DVK1CAS_RADIO_IoIrqInit>
    Sx_Board_WakeUp( );
 800defa:	f7f6 f9d9 	bl	80042b0 <SX1262DVK1CAS_RADIO_WakeUp>
    SX126xSetStandby( STDBY_XOSC );//SX126xSetStandby( STDBY_RC );
 800defe:	2001      	movs	r0, #1
 800df00:	f7ff ff2a 	bl	800dd58 <SX126xSetStandby>
    if (Sx_Board_IsTcxo()  == true )
 800df04:	f7f6 f9c0 	bl	8004288 <SX1262DVK1CAS_RADIO_BoardIsTcxo>
 800df08:	2800      	cmp	r0, #0
 800df0a:	d008      	beq.n	800df1e <SX126xInit+0x32>
      SX126xSetDio3AsTcxoCtrl( TCXO_CTRL_1_7V, Sx_Board_GetWakeUpTime( ) << 6 ); // convert from ms to SX126x time base
 800df0c:	f7f6 f958 	bl	80041c0 <SX1262DVK1CAS_RADIO_GetWakeUpTime>
 800df10:	0181      	lsls	r1, r0, #6
 800df12:	2001      	movs	r0, #1
 800df14:	f7ff ffdb 	bl	800dece <SX126xSetDio3AsTcxoCtrl>
      SX126xCalibrate( calibParam );
 800df18:	207f      	movs	r0, #127	; 0x7f
 800df1a:	f7ff ff63 	bl	800dde4 <SX126xCalibrate>
    SX126xSetDio2AsRfSwitchCtrl( true );
 800df1e:	2001      	movs	r0, #1
 800df20:	f7ff ffcc 	bl	800debc <SX126xSetDio2AsRfSwitchCtrl>
    OperatingMode = mode;
 800df24:	2202      	movs	r2, #2
 800df26:	4b01      	ldr	r3, [pc, #4]	; (800df2c <SX126xInit+0x40>)
 800df28:	701a      	strb	r2, [r3, #0]
}
 800df2a:	bd07      	pop	{r0, r1, r2, pc}
 800df2c:	2000105e 	.word	0x2000105e

0800df30 <SX126xSetRfFrequency>:
{
 800df30:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if( ImageCalibrated == false )
 800df32:	4d0d      	ldr	r5, [pc, #52]	; (800df68 <SX126xSetRfFrequency+0x38>)
{
 800df34:	0004      	movs	r4, r0
    if( ImageCalibrated == false )
 800df36:	782b      	ldrb	r3, [r5, #0]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d103      	bne.n	800df44 <SX126xSetRfFrequency+0x14>
        SX126xCalibrateImage( frequency );
 800df3c:	f7ff ff6e 	bl	800de1c <SX126xCalibrateImage>
        ImageCalibrated = true;
 800df40:	2301      	movs	r3, #1
 800df42:	702b      	strb	r3, [r5, #0]
    freq = ( uint32_t )( ( double )frequency / ( double )FREQ_STEP );
 800df44:	0020      	movs	r0, r4
 800df46:	f7f4 f927 	bl	8002198 <__aeabi_ui2d>
 800df4a:	4b08      	ldr	r3, [pc, #32]	; (800df6c <SX126xSetRfFrequency+0x3c>)
 800df4c:	2200      	movs	r2, #0
 800df4e:	f7f3 f955 	bl	80011fc <__aeabi_ddiv>
 800df52:	f7f2 fafb 	bl	800054c <__aeabi_d2uiz>
 800df56:	ba00      	rev	r0, r0
    buf[0] = ( uint8_t )( ( freq >> 24 ) & 0xFF );
 800df58:	9001      	str	r0, [sp, #4]
    SX126xWriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 800df5a:	2204      	movs	r2, #4
 800df5c:	2086      	movs	r0, #134	; 0x86
 800df5e:	a901      	add	r1, sp, #4
 800df60:	f7ff fec6 	bl	800dcf0 <SX126xWriteCommand>
}
 800df64:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 800df66:	46c0      	nop			; (mov r8, r8)
 800df68:	2000105c 	.word	0x2000105c
 800df6c:	3fee8480 	.word	0x3fee8480

0800df70 <SX126xSetPacketType>:
{
 800df70:	b507      	push	{r0, r1, r2, lr}
 800df72:	466b      	mov	r3, sp
 800df74:	1dd9      	adds	r1, r3, #7
    PacketType = packetType;
 800df76:	4b04      	ldr	r3, [pc, #16]	; (800df88 <SX126xSetPacketType+0x18>)
{
 800df78:	7008      	strb	r0, [r1, #0]
    PacketType = packetType;
 800df7a:	7018      	strb	r0, [r3, #0]
    SX126xWriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 800df7c:	2201      	movs	r2, #1
 800df7e:	208a      	movs	r0, #138	; 0x8a
 800df80:	f7ff feb6 	bl	800dcf0 <SX126xWriteCommand>
}
 800df84:	bd07      	pop	{r0, r1, r2, pc}
 800df86:	46c0      	nop			; (mov r8, r8)
 800df88:	2000105f 	.word	0x2000105f

0800df8c <SX126xSetModulationParams>:
{
 800df8c:	b513      	push	{r0, r1, r4, lr}
 800df8e:	0004      	movs	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800df90:	2208      	movs	r2, #8
 800df92:	4668      	mov	r0, sp
 800df94:	490a      	ldr	r1, [pc, #40]	; (800dfc0 <SX126xSetModulationParams+0x34>)
 800df96:	f001 f87b 	bl	800f090 <memcpy>
    if( PacketType != modulationParams->PacketType )
 800df9a:	4b0a      	ldr	r3, [pc, #40]	; (800dfc4 <SX126xSetModulationParams+0x38>)
 800df9c:	7820      	ldrb	r0, [r4, #0]
 800df9e:	781b      	ldrb	r3, [r3, #0]
 800dfa0:	4283      	cmp	r3, r0
 800dfa2:	d001      	beq.n	800dfa8 <SX126xSetModulationParams+0x1c>
        SX126xSetPacketType( modulationParams->PacketType );
 800dfa4:	f7ff ffe4 	bl	800df70 <SX126xSetPacketType>
    if( modulationParams->PacketType == PACKET_TYPE_LORA)
 800dfa8:	7823      	ldrb	r3, [r4, #0]
 800dfaa:	2b01      	cmp	r3, #1
 800dfac:	d106      	bne.n	800dfbc <SX126xSetModulationParams+0x30>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800dfae:	6923      	ldr	r3, [r4, #16]
        SX126xWriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800dfb0:	2204      	movs	r2, #4
 800dfb2:	4669      	mov	r1, sp
 800dfb4:	208b      	movs	r0, #139	; 0x8b
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 800dfb6:	9300      	str	r3, [sp, #0]
        SX126xWriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 800dfb8:	f7ff fe9a 	bl	800dcf0 <SX126xWriteCommand>
}
 800dfbc:	bd13      	pop	{r0, r1, r4, pc}
 800dfbe:	46c0      	nop			; (mov r8, r8)
 800dfc0:	0800f1f8 	.word	0x0800f1f8
 800dfc4:	2000105f 	.word	0x2000105f

0800dfc8 <SX126xSetPacketParams>:
{
 800dfc8:	b530      	push	{r4, r5, lr}
 800dfca:	0004      	movs	r4, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800dfcc:	4911      	ldr	r1, [pc, #68]	; (800e014 <SX126xSetPacketParams+0x4c>)
{
 800dfce:	b085      	sub	sp, #20
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 800dfd0:	ad01      	add	r5, sp, #4
 800dfd2:	2209      	movs	r2, #9
 800dfd4:	0028      	movs	r0, r5
 800dfd6:	3108      	adds	r1, #8
 800dfd8:	f001 f85a 	bl	800f090 <memcpy>
    if( PacketType != packetParams->PacketType )
 800dfdc:	4b0e      	ldr	r3, [pc, #56]	; (800e018 <SX126xSetPacketParams+0x50>)
 800dfde:	7820      	ldrb	r0, [r4, #0]
 800dfe0:	781b      	ldrb	r3, [r3, #0]
 800dfe2:	4283      	cmp	r3, r0
 800dfe4:	d001      	beq.n	800dfea <SX126xSetPacketParams+0x22>
        SX126xSetPacketType( packetParams->PacketType );
 800dfe6:	f7ff ffc3 	bl	800df70 <SX126xSetPacketType>
    if( packetParams->PacketType == PACKET_TYPE_LORA)
 800dfea:	7823      	ldrb	r3, [r4, #0]
 800dfec:	2b01      	cmp	r3, #1
 800dfee:	d10a      	bne.n	800e006 <SX126xSetPacketParams+0x3e>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 800dff0:	89a3      	ldrh	r3, [r4, #12]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 800dff2:	4a0a      	ldr	r2, [pc, #40]	; (800e01c <SX126xSetPacketParams+0x54>)
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 800dff4:	ba5b      	rev16	r3, r3
 800dff6:	802b      	strh	r3, [r5, #0]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 800dff8:	7ba3      	ldrb	r3, [r4, #14]
 800dffa:	7013      	strb	r3, [r2, #0]
 800dffc:	70ab      	strb	r3, [r5, #2]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 800dffe:	7be3      	ldrb	r3, [r4, #15]
 800e000:	70eb      	strb	r3, [r5, #3]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 800e002:	8a23      	ldrh	r3, [r4, #16]
 800e004:	80ab      	strh	r3, [r5, #4]
    SX126xWriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 800e006:	2206      	movs	r2, #6
 800e008:	0029      	movs	r1, r5
 800e00a:	208c      	movs	r0, #140	; 0x8c
 800e00c:	f7ff fe70 	bl	800dcf0 <SX126xWriteCommand>
}
 800e010:	b005      	add	sp, #20
 800e012:	bd30      	pop	{r4, r5, pc}
 800e014:	0800f1f8 	.word	0x0800f1f8
 800e018:	2000105f 	.word	0x2000105f
 800e01c:	2000105d 	.word	0x2000105d

0800e020 <SX126xSetBufferBaseAddress>:
{
 800e020:	b507      	push	{r0, r1, r2, lr}
    buf[0] = txBaseAddress;
 800e022:	466b      	mov	r3, sp
    SX126xWriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 800e024:	2202      	movs	r2, #2
    buf[0] = txBaseAddress;
 800e026:	7118      	strb	r0, [r3, #4]
    buf[1] = rxBaseAddress;
 800e028:	7159      	strb	r1, [r3, #5]
    SX126xWriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 800e02a:	208f      	movs	r0, #143	; 0x8f
 800e02c:	a901      	add	r1, sp, #4
 800e02e:	f7ff fe5f 	bl	800dcf0 <SX126xWriteCommand>
}
 800e032:	bd07      	pop	{r0, r1, r2, pc}

0800e034 <SX126xClearIrqStatus>:
{
 800e034:	b507      	push	{r0, r1, r2, lr}
    SX126xWriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
 800e036:	2202      	movs	r2, #2
    buf[0] = ( uint8_t )( ( ( uint16_t )irq >> 8 ) & 0x00FF );
 800e038:	a901      	add	r1, sp, #4
 800e03a:	ba40      	rev16	r0, r0
 800e03c:	8008      	strh	r0, [r1, #0]
    SX126xWriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
 800e03e:	0010      	movs	r0, r2
 800e040:	f7ff fe56 	bl	800dcf0 <SX126xWriteCommand>
}
 800e044:	bd07      	pop	{r0, r1, r2, pc}

0800e046 <SX126xReadCommand>:

uint8_t SX126xReadCommand( RadioCommands_t command, uint8_t *buffer, uint16_t size )
{
 800e046:	b570      	push	{r4, r5, r6, lr}
 800e048:	0006      	movs	r6, r0
 800e04a:	000c      	movs	r4, r1
 800e04c:	0015      	movs	r5, r2
    uint8_t status = 0;

    SX126xCheckDeviceReady( );
 800e04e:	f7ff fe37 	bl	800dcc0 <SX126xCheckDeviceReady>

    Sx_Board_ChipSelect( 0 );
 800e052:	2000      	movs	r0, #0
 800e054:	f7f6 f8fe 	bl	8004254 <SX1262DVK1CAS_RADIO_ChipSelect>

    Sx_Board_SendRecv(  ( uint8_t )command );
 800e058:	b2b0      	uxth	r0, r6
 800e05a:	f7f6 f91b 	bl	8004294 <SX1262DVK1CAS_RADIO_SendRecv>
    status = Sx_Board_SendRecv(  0x00 );
 800e05e:	2000      	movs	r0, #0
 800e060:	f7f6 f918 	bl	8004294 <SX1262DVK1CAS_RADIO_SendRecv>
 800e064:	1965      	adds	r5, r4, r5
 800e066:	b2c6      	uxtb	r6, r0
    for( uint16_t i = 0; i < size; i++ )
 800e068:	42ac      	cmp	r4, r5
 800e06a:	d106      	bne.n	800e07a <SX126xReadCommand+0x34>
    {
        buffer[i] = Sx_Board_SendRecv(  0 );
    }

    Sx_Board_ChipSelect( 1 );
 800e06c:	2001      	movs	r0, #1
 800e06e:	f7f6 f8f1 	bl	8004254 <SX1262DVK1CAS_RADIO_ChipSelect>

    Sx_Board_WaitOnBusy( );
 800e072:	f7f6 f8e5 	bl	8004240 <SX1262DVK1CAS_RADIO_WaitOnBusy>

    return status;
}
 800e076:	0030      	movs	r0, r6
 800e078:	bd70      	pop	{r4, r5, r6, pc}
        buffer[i] = Sx_Board_SendRecv(  0 );
 800e07a:	2000      	movs	r0, #0
 800e07c:	f7f6 f90a 	bl	8004294 <SX1262DVK1CAS_RADIO_SendRecv>
 800e080:	7020      	strb	r0, [r4, #0]
    for( uint16_t i = 0; i < size; i++ )
 800e082:	3401      	adds	r4, #1
 800e084:	e7f0      	b.n	800e068 <SX126xReadCommand+0x22>

0800e086 <SX126xGetIrqStatus>:
{
 800e086:	b507      	push	{r0, r1, r2, lr}
    SX126xReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
 800e088:	2202      	movs	r2, #2
 800e08a:	2012      	movs	r0, #18
 800e08c:	a901      	add	r1, sp, #4
 800e08e:	f7ff ffda 	bl	800e046 <SX126xReadCommand>
    return ( irqStatus[0] << 8 ) | irqStatus[1];
 800e092:	466b      	mov	r3, sp
 800e094:	466a      	mov	r2, sp
 800e096:	791b      	ldrb	r3, [r3, #4]
 800e098:	7950      	ldrb	r0, [r2, #5]
 800e09a:	021b      	lsls	r3, r3, #8
 800e09c:	4318      	orrs	r0, r3
}
 800e09e:	bd0e      	pop	{r1, r2, r3, pc}

0800e0a0 <SX126xGetPacketStatus>:
{
 800e0a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e0a2:	0004      	movs	r4, r0
    SX126xReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 800e0a4:	ad01      	add	r5, sp, #4
 800e0a6:	2203      	movs	r2, #3
 800e0a8:	0029      	movs	r1, r5
 800e0aa:	2014      	movs	r0, #20
 800e0ac:	f7ff ffcb 	bl	800e046 <SX126xReadCommand>
    return PacketType;
 800e0b0:	4b0f      	ldr	r3, [pc, #60]	; (800e0f0 <SX126xGetPacketStatus+0x50>)
 800e0b2:	781e      	ldrb	r6, [r3, #0]
    pktStatus->packetType = SX126xGetPacketType( );
 800e0b4:	7026      	strb	r6, [r4, #0]
    if( pktStatus->packetType == PACKET_TYPE_LORA)
 800e0b6:	2e01      	cmp	r6, #1
 800e0b8:	d110      	bne.n	800e0dc <SX126xGetPacketStatus+0x3c>
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 800e0ba:	782b      	ldrb	r3, [r5, #0]
 800e0bc:	425b      	negs	r3, r3
 800e0be:	105b      	asrs	r3, r3, #1
 800e0c0:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800e0c2:	2301      	movs	r3, #1
 800e0c4:	56eb      	ldrsb	r3, [r5, r3]
 800e0c6:	3302      	adds	r3, #2
 800e0c8:	109b      	asrs	r3, r3, #2
 800e0ca:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800e0cc:	78ab      	ldrb	r3, [r5, #2]
 800e0ce:	425b      	negs	r3, r3
 800e0d0:	105b      	asrs	r3, r3, #1
 800e0d2:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 800e0d4:	4b07      	ldr	r3, [pc, #28]	; (800e0f4 <SX126xGetPacketStatus+0x54>)
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	6123      	str	r3, [r4, #16]
}
 800e0da:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    }else if(pktStatus->packetType == PACKET_TYPE_NONE){
 800e0dc:	2e0f      	cmp	r6, #15
 800e0de:	d1fc      	bne.n	800e0da <SX126xGetPacketStatus+0x3a>
            memset( pktStatus, 0, sizeof( PacketStatus_t ) );
 800e0e0:	2214      	movs	r2, #20
 800e0e2:	2100      	movs	r1, #0
 800e0e4:	0020      	movs	r0, r4
 800e0e6:	f000 ffdc 	bl	800f0a2 <memset>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800e0ea:	7026      	strb	r6, [r4, #0]
}
 800e0ec:	e7f5      	b.n	800e0da <SX126xGetPacketStatus+0x3a>
 800e0ee:	46c0      	nop			; (mov r8, r8)
 800e0f0:	2000105f 	.word	0x2000105f
 800e0f4:	20001058 	.word	0x20001058

0800e0f8 <SX126xWriteRegisters>:

void SX126xWriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800e0f8:	b570      	push	{r4, r5, r6, lr}
 800e0fa:	0005      	movs	r5, r0
 800e0fc:	000c      	movs	r4, r1
 800e0fe:	0016      	movs	r6, r2
    SX126xCheckDeviceReady( );
 800e100:	f7ff fdde 	bl	800dcc0 <SX126xCheckDeviceReady>

    Sx_Board_ChipSelect( 0 );
 800e104:	2000      	movs	r0, #0
 800e106:	f7f6 f8a5 	bl	8004254 <SX1262DVK1CAS_RADIO_ChipSelect>
    
    Sx_Board_SendRecv(  RADIO_WRITE_REGISTER );
 800e10a:	200d      	movs	r0, #13
 800e10c:	f7f6 f8c2 	bl	8004294 <SX1262DVK1CAS_RADIO_SendRecv>
    Sx_Board_SendRecv(  ( address & 0xFF00 ) >> 8 );
 800e110:	0a28      	lsrs	r0, r5, #8
 800e112:	f7f6 f8bf 	bl	8004294 <SX1262DVK1CAS_RADIO_SendRecv>
    Sx_Board_SendRecv(  address & 0x00FF );
 800e116:	b2e8      	uxtb	r0, r5
 800e118:	f7f6 f8bc 	bl	8004294 <SX1262DVK1CAS_RADIO_SendRecv>
    
    for( uint16_t i = 0; i < size; i++ )
 800e11c:	19a6      	adds	r6, r4, r6
 800e11e:	42b4      	cmp	r4, r6
 800e120:	d105      	bne.n	800e12e <SX126xWriteRegisters+0x36>
    {
        Sx_Board_SendRecv(  buffer[i] );
    }

    Sx_Board_ChipSelect( 1 );
 800e122:	2001      	movs	r0, #1
 800e124:	f7f6 f896 	bl	8004254 <SX1262DVK1CAS_RADIO_ChipSelect>

    Sx_Board_WaitOnBusy( );
 800e128:	f7f6 f88a 	bl	8004240 <SX1262DVK1CAS_RADIO_WaitOnBusy>
}
 800e12c:	bd70      	pop	{r4, r5, r6, pc}
        Sx_Board_SendRecv(  buffer[i] );
 800e12e:	7820      	ldrb	r0, [r4, #0]
 800e130:	f7f6 f8b0 	bl	8004294 <SX1262DVK1CAS_RADIO_SendRecv>
    for( uint16_t i = 0; i < size; i++ )
 800e134:	3401      	adds	r4, #1
 800e136:	e7f2      	b.n	800e11e <SX126xWriteRegisters+0x26>

0800e138 <SX126xWriteRegister>:

void SX126xWriteRegister( uint16_t address, uint8_t value )
{
 800e138:	b507      	push	{r0, r1, r2, lr}
 800e13a:	466b      	mov	r3, sp
 800e13c:	71d9      	strb	r1, [r3, #7]
 800e13e:	3307      	adds	r3, #7
    SX126xWriteRegisters( address, &value, 1 );
 800e140:	2201      	movs	r2, #1
 800e142:	0019      	movs	r1, r3
 800e144:	f7ff ffd8 	bl	800e0f8 <SX126xWriteRegisters>
}
 800e148:	bd07      	pop	{r0, r1, r2, pc}
	...

0800e14c <SX126xSetTx>:
{
 800e14c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    OperatingMode = mode;
 800e14e:	2204      	movs	r2, #4
 800e150:	4b0b      	ldr	r3, [pc, #44]	; (800e180 <SX126xSetTx+0x34>)
	SX126xWriteRegister(REG_XTA_TRIM, xta_trim);
 800e152:	4d0c      	ldr	r5, [pc, #48]	; (800e184 <SX126xSetTx+0x38>)
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800e154:	ac01      	add	r4, sp, #4
    OperatingMode = mode;
 800e156:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800e158:	0c03      	lsrs	r3, r0, #16
	SX126xWriteRegister(REG_XTA_TRIM, xta_trim);
 800e15a:	7829      	ldrb	r1, [r5, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800e15c:	7023      	strb	r3, [r4, #0]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800e15e:	70a0      	strb	r0, [r4, #2]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800e160:	0a03      	lsrs	r3, r0, #8
	SX126xWriteRegister(REG_XTA_TRIM, xta_trim);
 800e162:	4809      	ldr	r0, [pc, #36]	; (800e188 <SX126xSetTx+0x3c>)
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800e164:	7063      	strb	r3, [r4, #1]
	SX126xWriteRegister(REG_XTA_TRIM, xta_trim);
 800e166:	f7ff ffe7 	bl	800e138 <SX126xWriteRegister>
	SX126xWriteRegister(REG_XTB_TRIM, xta_trim);
 800e16a:	7829      	ldrb	r1, [r5, #0]
 800e16c:	4807      	ldr	r0, [pc, #28]	; (800e18c <SX126xSetTx+0x40>)
 800e16e:	f7ff ffe3 	bl	800e138 <SX126xWriteRegister>
    SX126xWriteCommand( RADIO_SET_TX, buf, 3 );
 800e172:	2203      	movs	r2, #3
 800e174:	0021      	movs	r1, r4
 800e176:	2083      	movs	r0, #131	; 0x83
 800e178:	f7ff fdba 	bl	800dcf0 <SX126xWriteCommand>
}
 800e17c:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 800e17e:	46c0      	nop			; (mov r8, r8)
 800e180:	2000105e 	.word	0x2000105e
 800e184:	20000185 	.word	0x20000185
 800e188:	00000911 	.word	0x00000911
 800e18c:	00000912 	.word	0x00000912

0800e190 <SX126xSetRx>:
{
 800e190:	b537      	push	{r0, r1, r2, r4, r5, lr}
    OperatingMode = mode;
 800e192:	2205      	movs	r2, #5
 800e194:	4b0b      	ldr	r3, [pc, #44]	; (800e1c4 <SX126xSetRx+0x34>)
	SX126xWriteRegister(REG_XTA_TRIM, xta_trim);
 800e196:	4d0c      	ldr	r5, [pc, #48]	; (800e1c8 <SX126xSetRx+0x38>)
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800e198:	ac01      	add	r4, sp, #4
    OperatingMode = mode;
 800e19a:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800e19c:	0c03      	lsrs	r3, r0, #16
	SX126xWriteRegister(REG_XTA_TRIM, xta_trim);
 800e19e:	7829      	ldrb	r1, [r5, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800e1a0:	7023      	strb	r3, [r4, #0]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800e1a2:	70a0      	strb	r0, [r4, #2]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800e1a4:	0a03      	lsrs	r3, r0, #8
	SX126xWriteRegister(REG_XTA_TRIM, xta_trim);
 800e1a6:	4809      	ldr	r0, [pc, #36]	; (800e1cc <SX126xSetRx+0x3c>)
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800e1a8:	7063      	strb	r3, [r4, #1]
	SX126xWriteRegister(REG_XTA_TRIM, xta_trim);
 800e1aa:	f7ff ffc5 	bl	800e138 <SX126xWriteRegister>
	SX126xWriteRegister(REG_XTB_TRIM, xta_trim);
 800e1ae:	7829      	ldrb	r1, [r5, #0]
 800e1b0:	4807      	ldr	r0, [pc, #28]	; (800e1d0 <SX126xSetRx+0x40>)
 800e1b2:	f7ff ffc1 	bl	800e138 <SX126xWriteRegister>
    SX126xWriteCommand( RADIO_SET_RX, buf, 3 );
 800e1b6:	2203      	movs	r2, #3
 800e1b8:	0021      	movs	r1, r4
 800e1ba:	2082      	movs	r0, #130	; 0x82
 800e1bc:	f7ff fd98 	bl	800dcf0 <SX126xWriteCommand>
}
 800e1c0:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 800e1c2:	46c0      	nop			; (mov r8, r8)
 800e1c4:	2000105e 	.word	0x2000105e
 800e1c8:	20000185 	.word	0x20000185
 800e1cc:	00000911 	.word	0x00000911
 800e1d0:	00000912 	.word	0x00000912

0800e1d4 <SX126xSetRxBoosted>:
{
 800e1d4:	b513      	push	{r0, r1, r4, lr}
    OperatingMode = mode;
 800e1d6:	2205      	movs	r2, #5
{
 800e1d8:	0004      	movs	r4, r0
    OperatingMode = mode;
 800e1da:	4b08      	ldr	r3, [pc, #32]	; (800e1fc <SX126xSetRxBoosted+0x28>)
    SX126xWriteRegister( REG_RX_GAIN, 0x96 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensivity
 800e1dc:	2196      	movs	r1, #150	; 0x96
 800e1de:	4808      	ldr	r0, [pc, #32]	; (800e200 <SX126xSetRxBoosted+0x2c>)
    OperatingMode = mode;
 800e1e0:	701a      	strb	r2, [r3, #0]
    SX126xWriteRegister( REG_RX_GAIN, 0x96 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensivity
 800e1e2:	f7ff ffa9 	bl	800e138 <SX126xWriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800e1e6:	a901      	add	r1, sp, #4
 800e1e8:	0c23      	lsrs	r3, r4, #16
 800e1ea:	700b      	strb	r3, [r1, #0]
    SX126xWriteCommand( RADIO_SET_RX, buf, 3 );
 800e1ec:	2203      	movs	r2, #3
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800e1ee:	0a23      	lsrs	r3, r4, #8
    SX126xWriteCommand( RADIO_SET_RX, buf, 3 );
 800e1f0:	2082      	movs	r0, #130	; 0x82
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800e1f2:	704b      	strb	r3, [r1, #1]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 800e1f4:	708c      	strb	r4, [r1, #2]
    SX126xWriteCommand( RADIO_SET_RX, buf, 3 );
 800e1f6:	f7ff fd7b 	bl	800dcf0 <SX126xWriteCommand>
}
 800e1fa:	bd13      	pop	{r0, r1, r4, pc}
 800e1fc:	2000105e 	.word	0x2000105e
 800e200:	000008ac 	.word	0x000008ac

0800e204 <SX126xSetLoRaSymbNumTimeout>:
{
 800e204:	b507      	push	{r0, r1, r2, lr}
 800e206:	466b      	mov	r3, sp
    SX126xWriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 800e208:	2201      	movs	r2, #1
{
 800e20a:	71d8      	strb	r0, [r3, #7]
    SX126xWriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 800e20c:	1dd9      	adds	r1, r3, #7
 800e20e:	20a0      	movs	r0, #160	; 0xa0
 800e210:	f7ff fd6e 	bl	800dcf0 <SX126xWriteCommand>
    if( symbNum >= 64 )
 800e214:	466b      	mov	r3, sp
 800e216:	79d9      	ldrb	r1, [r3, #7]
 800e218:	293f      	cmp	r1, #63	; 0x3f
 800e21a:	d906      	bls.n	800e22a <SX126xSetLoRaSymbNumTimeout+0x26>
            mant >>= 2;
 800e21c:	08c9      	lsrs	r1, r1, #3
        reg = exp + ( mant << 3 );
 800e21e:	00c9      	lsls	r1, r1, #3
 800e220:	3101      	adds	r1, #1
        SX126xWriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 800e222:	4802      	ldr	r0, [pc, #8]	; (800e22c <SX126xSetLoRaSymbNumTimeout+0x28>)
 800e224:	b2c9      	uxtb	r1, r1
 800e226:	f7ff ff87 	bl	800e138 <SX126xWriteRegister>
}
 800e22a:	bd07      	pop	{r0, r1, r2, pc}
 800e22c:	00000706 	.word	0x00000706

0800e230 <SX126xReadRegisters>:

void SX126xReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 800e230:	b570      	push	{r4, r5, r6, lr}
 800e232:	0005      	movs	r5, r0
 800e234:	000c      	movs	r4, r1
 800e236:	0016      	movs	r6, r2
    SX126xCheckDeviceReady( );
 800e238:	f7ff fd42 	bl	800dcc0 <SX126xCheckDeviceReady>

    Sx_Board_ChipSelect( 0 );
 800e23c:	2000      	movs	r0, #0
 800e23e:	f7f6 f809 	bl	8004254 <SX1262DVK1CAS_RADIO_ChipSelect>

    Sx_Board_SendRecv(  RADIO_READ_REGISTER );
 800e242:	201d      	movs	r0, #29
 800e244:	f7f6 f826 	bl	8004294 <SX1262DVK1CAS_RADIO_SendRecv>
    Sx_Board_SendRecv(  ( address & 0xFF00 ) >> 8 );
 800e248:	0a28      	lsrs	r0, r5, #8
 800e24a:	f7f6 f823 	bl	8004294 <SX1262DVK1CAS_RADIO_SendRecv>
    Sx_Board_SendRecv(  address & 0x00FF );
 800e24e:	b2e8      	uxtb	r0, r5
 800e250:	f7f6 f820 	bl	8004294 <SX1262DVK1CAS_RADIO_SendRecv>
    Sx_Board_SendRecv(  0 );
 800e254:	2000      	movs	r0, #0
 800e256:	f7f6 f81d 	bl	8004294 <SX1262DVK1CAS_RADIO_SendRecv>
    for( uint16_t i = 0; i < size; i++ )
 800e25a:	19a6      	adds	r6, r4, r6
 800e25c:	42b4      	cmp	r4, r6
 800e25e:	d105      	bne.n	800e26c <SX126xReadRegisters+0x3c>
    {
        buffer[i] = Sx_Board_SendRecv(  0 );
    }
    Sx_Board_ChipSelect( 1 );
 800e260:	2001      	movs	r0, #1
 800e262:	f7f5 fff7 	bl	8004254 <SX1262DVK1CAS_RADIO_ChipSelect>

    Sx_Board_WaitOnBusy( );
 800e266:	f7f5 ffeb 	bl	8004240 <SX1262DVK1CAS_RADIO_WaitOnBusy>
}
 800e26a:	bd70      	pop	{r4, r5, r6, pc}
        buffer[i] = Sx_Board_SendRecv(  0 );
 800e26c:	2000      	movs	r0, #0
 800e26e:	f7f6 f811 	bl	8004294 <SX1262DVK1CAS_RADIO_SendRecv>
 800e272:	7020      	strb	r0, [r4, #0]
    for( uint16_t i = 0; i < size; i++ )
 800e274:	3401      	adds	r4, #1
 800e276:	e7f1      	b.n	800e25c <SX126xReadRegisters+0x2c>

0800e278 <SX126xReadRegister>:

uint8_t SX126xReadRegister( uint16_t address )
{
 800e278:	b513      	push	{r0, r1, r4, lr}
    uint8_t data;
    SX126xReadRegisters( address, &data, 1 );
 800e27a:	466b      	mov	r3, sp
 800e27c:	1ddc      	adds	r4, r3, #7
 800e27e:	2201      	movs	r2, #1
 800e280:	0021      	movs	r1, r4
 800e282:	f7ff ffd5 	bl	800e230 <SX126xReadRegisters>
    return data;
 800e286:	7820      	ldrb	r0, [r4, #0]
}
 800e288:	bd16      	pop	{r1, r2, r4, pc}
	...

0800e28c <SX126xGetRandom>:
    uint32_t number = 0;
 800e28c:	2300      	movs	r3, #0
{
 800e28e:	b5f0      	push	{r4, r5, r6, r7, lr}
    regAnaLna = SX126xReadRegister( REG_ANA_LNA );
 800e290:	4e16      	ldr	r6, [pc, #88]	; (800e2ec <SX126xGetRandom+0x60>)
{
 800e292:	b085      	sub	sp, #20
    regAnaLna = SX126xReadRegister( REG_ANA_LNA );
 800e294:	0030      	movs	r0, r6
    uint32_t number = 0;
 800e296:	9303      	str	r3, [sp, #12]
    regAnaLna = SX126xReadRegister( REG_ANA_LNA );
 800e298:	f7ff ffee 	bl	800e278 <SX126xReadRegister>
    SX126xWriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 800e29c:	2701      	movs	r7, #1
 800e29e:	0001      	movs	r1, r0
    regAnaMixer = SX126xReadRegister( REG_ANA_MIXER );
 800e2a0:	4d13      	ldr	r5, [pc, #76]	; (800e2f0 <SX126xGetRandom+0x64>)
    SX126xWriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 800e2a2:	43b9      	bics	r1, r7
    regAnaLna = SX126xReadRegister( REG_ANA_LNA );
 800e2a4:	0004      	movs	r4, r0
    SX126xWriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 800e2a6:	b2c9      	uxtb	r1, r1
 800e2a8:	0030      	movs	r0, r6
 800e2aa:	f7ff ff45 	bl	800e138 <SX126xWriteRegister>
    regAnaMixer = SX126xReadRegister( REG_ANA_MIXER );
 800e2ae:	0028      	movs	r0, r5
 800e2b0:	f7ff ffe2 	bl	800e278 <SX126xReadRegister>
    SX126xWriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 800e2b4:	217f      	movs	r1, #127	; 0x7f
    regAnaMixer = SX126xReadRegister( REG_ANA_MIXER );
 800e2b6:	9001      	str	r0, [sp, #4]
    SX126xWriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 800e2b8:	4001      	ands	r1, r0
 800e2ba:	0028      	movs	r0, r5
 800e2bc:	f7ff ff3c 	bl	800e138 <SX126xWriteRegister>
    SX126xSetRx( 0xFFFFFF ); // Rx Continuous
 800e2c0:	480c      	ldr	r0, [pc, #48]	; (800e2f4 <SX126xGetRandom+0x68>)
 800e2c2:	f7ff ff65 	bl	800e190 <SX126xSetRx>
    SX126xReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 800e2c6:	2204      	movs	r2, #4
 800e2c8:	a903      	add	r1, sp, #12
 800e2ca:	480b      	ldr	r0, [pc, #44]	; (800e2f8 <SX126xGetRandom+0x6c>)
 800e2cc:	f7ff ffb0 	bl	800e230 <SX126xReadRegisters>
    SX126xSetStandby( STDBY_XOSC );//SX126xSetStandby( STDBY_RC );
 800e2d0:	0038      	movs	r0, r7
 800e2d2:	f7ff fd41 	bl	800dd58 <SX126xSetStandby>
    SX126xWriteRegister( REG_ANA_LNA, regAnaLna );
 800e2d6:	0021      	movs	r1, r4
 800e2d8:	0030      	movs	r0, r6
 800e2da:	f7ff ff2d 	bl	800e138 <SX126xWriteRegister>
    SX126xWriteRegister( REG_ANA_MIXER, regAnaMixer );
 800e2de:	0028      	movs	r0, r5
 800e2e0:	9901      	ldr	r1, [sp, #4]
 800e2e2:	f7ff ff29 	bl	800e138 <SX126xWriteRegister>
}
 800e2e6:	9803      	ldr	r0, [sp, #12]
 800e2e8:	b005      	add	sp, #20
 800e2ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e2ec:	000008e2 	.word	0x000008e2
 800e2f0:	000008e5 	.word	0x000008e5
 800e2f4:	00ffffff 	.word	0x00ffffff
 800e2f8:	00000819 	.word	0x00000819

0800e2fc <SX126xSetTxParams>:
{
 800e2fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e2fe:	0005      	movs	r5, r0
	SX126xWriteRegister( 0x08D8, SX126xReadRegister( 0x08D8 ) | ( 0x0F << 1 ) );
 800e300:	4810      	ldr	r0, [pc, #64]	; (800e344 <SX126xSetTxParams+0x48>)
{
 800e302:	000c      	movs	r4, r1
	SX126xWriteRegister( 0x08D8, SX126xReadRegister( 0x08D8 ) | ( 0x0F << 1 ) );
 800e304:	f7ff ffb8 	bl	800e278 <SX126xReadRegister>
 800e308:	231e      	movs	r3, #30
 800e30a:	4303      	orrs	r3, r0
 800e30c:	b2d9      	uxtb	r1, r3
 800e30e:	480d      	ldr	r0, [pc, #52]	; (800e344 <SX126xSetTxParams+0x48>)
 800e310:	f7ff ff12 	bl	800e138 <SX126xWriteRegister>
	SX126xSetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 800e314:	2301      	movs	r3, #1
 800e316:	2200      	movs	r2, #0
 800e318:	2107      	movs	r1, #7
 800e31a:	2004      	movs	r0, #4
 800e31c:	f7ff fdb2 	bl	800de84 <SX126xSetPaConfig>
	if( power > 22 )
 800e320:	1c2b      	adds	r3, r5, #0
 800e322:	3509      	adds	r5, #9
 800e324:	da01      	bge.n	800e32a <SX126xSetTxParams+0x2e>
 800e326:	4b08      	ldr	r3, [pc, #32]	; (800e348 <SX126xSetTxParams+0x4c>)
 800e328:	781b      	ldrb	r3, [r3, #0]
    buf[0] = power;
 800e32a:	b25a      	sxtb	r2, r3
 800e32c:	2a16      	cmp	r2, #22
 800e32e:	dd00      	ble.n	800e332 <SX126xSetTxParams+0x36>
 800e330:	2316      	movs	r3, #22
 800e332:	466a      	mov	r2, sp
    SX126xWriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 800e334:	208e      	movs	r0, #142	; 0x8e
    buf[0] = power;
 800e336:	7113      	strb	r3, [r2, #4]
    buf[1] = ( uint8_t )rampTime;
 800e338:	7154      	strb	r4, [r2, #5]
    SX126xWriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 800e33a:	a901      	add	r1, sp, #4
 800e33c:	2202      	movs	r2, #2
 800e33e:	f7ff fcd7 	bl	800dcf0 <SX126xWriteCommand>
}
 800e342:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 800e344:	000008d8 	.word	0x000008d8
 800e348:	0800fdec 	.word	0x0800fdec

0800e34c <SX126xSetRfTxPower>:
{
 800e34c:	b510      	push	{r4, lr}
    SX126xSetTxParams( power, RADIO_RAMP_40_US );
 800e34e:	2102      	movs	r1, #2
 800e350:	f7ff ffd4 	bl	800e2fc <SX126xSetTxParams>
}
 800e354:	bd10      	pop	{r4, pc}
	...

0800e358 <SX126xGetRxBufferStatus>:
{
 800e358:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e35a:	0004      	movs	r4, r0
 800e35c:	000d      	movs	r5, r1
    SX126xReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 800e35e:	2202      	movs	r2, #2
 800e360:	2013      	movs	r0, #19
 800e362:	a901      	add	r1, sp, #4
 800e364:	f7ff fe6f 	bl	800e046 <SX126xReadCommand>
    return PacketType;
 800e368:	4b09      	ldr	r3, [pc, #36]	; (800e390 <SX126xGetRxBufferStatus+0x38>)
    if( ( SX126xGetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800e36a:	781b      	ldrb	r3, [r3, #0]
 800e36c:	2b01      	cmp	r3, #1
 800e36e:	d10b      	bne.n	800e388 <SX126xGetRxBufferStatus+0x30>
 800e370:	4b08      	ldr	r3, [pc, #32]	; (800e394 <SX126xGetRxBufferStatus+0x3c>)
 800e372:	781b      	ldrb	r3, [r3, #0]
 800e374:	2b01      	cmp	r3, #1
 800e376:	d107      	bne.n	800e388 <SX126xGetRxBufferStatus+0x30>
        *payloadLength = SX126xReadRegister( REG_LR_PAYLOADLENGTH );
 800e378:	4807      	ldr	r0, [pc, #28]	; (800e398 <SX126xGetRxBufferStatus+0x40>)
 800e37a:	f7ff ff7d 	bl	800e278 <SX126xReadRegister>
 800e37e:	7020      	strb	r0, [r4, #0]
    *rxStartBufferPointer = status[1];
 800e380:	466b      	mov	r3, sp
 800e382:	795b      	ldrb	r3, [r3, #5]
 800e384:	702b      	strb	r3, [r5, #0]
}
 800e386:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
        *payloadLength = status[0];
 800e388:	466b      	mov	r3, sp
 800e38a:	791b      	ldrb	r3, [r3, #4]
 800e38c:	7023      	strb	r3, [r4, #0]
 800e38e:	e7f7      	b.n	800e380 <SX126xGetRxBufferStatus+0x28>
 800e390:	2000105f 	.word	0x2000105f
 800e394:	2000105d 	.word	0x2000105d
 800e398:	00000702 	.word	0x00000702

0800e39c <SX126xWriteBuffer>:

void SX126xWriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800e39c:	b570      	push	{r4, r5, r6, lr}
 800e39e:	0005      	movs	r5, r0
 800e3a0:	000c      	movs	r4, r1
 800e3a2:	0016      	movs	r6, r2
    SX126xCheckDeviceReady( );
 800e3a4:	f7ff fc8c 	bl	800dcc0 <SX126xCheckDeviceReady>

    Sx_Board_ChipSelect( 0 );
 800e3a8:	2000      	movs	r0, #0
 800e3aa:	f7f5 ff53 	bl	8004254 <SX1262DVK1CAS_RADIO_ChipSelect>

    Sx_Board_SendRecv(  RADIO_WRITE_BUFFER );
 800e3ae:	200e      	movs	r0, #14
 800e3b0:	f7f5 ff70 	bl	8004294 <SX1262DVK1CAS_RADIO_SendRecv>
    Sx_Board_SendRecv(  offset );
 800e3b4:	b2a8      	uxth	r0, r5
 800e3b6:	f7f5 ff6d 	bl	8004294 <SX1262DVK1CAS_RADIO_SendRecv>
    for( uint16_t i = 0; i < size; i++ )
 800e3ba:	19a6      	adds	r6, r4, r6
 800e3bc:	42b4      	cmp	r4, r6
 800e3be:	d105      	bne.n	800e3cc <SX126xWriteBuffer+0x30>
    {
        Sx_Board_SendRecv(  buffer[i] );
    }
    Sx_Board_ChipSelect( 1 );
 800e3c0:	2001      	movs	r0, #1
 800e3c2:	f7f5 ff47 	bl	8004254 <SX1262DVK1CAS_RADIO_ChipSelect>

    Sx_Board_WaitOnBusy( );
 800e3c6:	f7f5 ff3b 	bl	8004240 <SX1262DVK1CAS_RADIO_WaitOnBusy>
}
 800e3ca:	bd70      	pop	{r4, r5, r6, pc}
        Sx_Board_SendRecv(  buffer[i] );
 800e3cc:	7820      	ldrb	r0, [r4, #0]
 800e3ce:	f7f5 ff61 	bl	8004294 <SX1262DVK1CAS_RADIO_SendRecv>
    for( uint16_t i = 0; i < size; i++ )
 800e3d2:	3401      	adds	r4, #1
 800e3d4:	e7f2      	b.n	800e3bc <SX126xWriteBuffer+0x20>

0800e3d6 <SX126xSetPayload>:
{
 800e3d6:	b510      	push	{r4, lr}
 800e3d8:	000a      	movs	r2, r1
    SX126xWriteBuffer( 0x00, payload, size );
 800e3da:	0001      	movs	r1, r0
 800e3dc:	2000      	movs	r0, #0
 800e3de:	f7ff ffdd 	bl	800e39c <SX126xWriteBuffer>
}
 800e3e2:	bd10      	pop	{r4, pc}

0800e3e4 <SX126xSendPayload>:
{
 800e3e4:	b510      	push	{r4, lr}
 800e3e6:	0014      	movs	r4, r2
    SX126xSetPayload( payload, size );
 800e3e8:	f7ff fff5 	bl	800e3d6 <SX126xSetPayload>
    SX126xSetTx( timeout );
 800e3ec:	0020      	movs	r0, r4
 800e3ee:	f7ff fead 	bl	800e14c <SX126xSetTx>
}
 800e3f2:	bd10      	pop	{r4, pc}

0800e3f4 <SX126xReadBuffer>:

void SX126xReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 800e3f4:	b570      	push	{r4, r5, r6, lr}
 800e3f6:	0005      	movs	r5, r0
 800e3f8:	000c      	movs	r4, r1
 800e3fa:	0016      	movs	r6, r2
    SX126xCheckDeviceReady( );
 800e3fc:	f7ff fc60 	bl	800dcc0 <SX126xCheckDeviceReady>

    Sx_Board_ChipSelect( 0 );
 800e400:	2000      	movs	r0, #0
 800e402:	f7f5 ff27 	bl	8004254 <SX1262DVK1CAS_RADIO_ChipSelect>

    Sx_Board_SendRecv(  RADIO_READ_BUFFER );
 800e406:	201e      	movs	r0, #30
 800e408:	f7f5 ff44 	bl	8004294 <SX1262DVK1CAS_RADIO_SendRecv>
    Sx_Board_SendRecv(  offset );
 800e40c:	b2a8      	uxth	r0, r5
 800e40e:	f7f5 ff41 	bl	8004294 <SX1262DVK1CAS_RADIO_SendRecv>
    Sx_Board_SendRecv(  0 );
 800e412:	2000      	movs	r0, #0
 800e414:	f7f5 ff3e 	bl	8004294 <SX1262DVK1CAS_RADIO_SendRecv>
    for( uint16_t i = 0; i < size; i++ )
 800e418:	19a6      	adds	r6, r4, r6
 800e41a:	42b4      	cmp	r4, r6
 800e41c:	d105      	bne.n	800e42a <SX126xReadBuffer+0x36>
    {
        buffer[i] = Sx_Board_SendRecv(  0 );
    }
    Sx_Board_ChipSelect( 1 );
 800e41e:	2001      	movs	r0, #1
 800e420:	f7f5 ff18 	bl	8004254 <SX1262DVK1CAS_RADIO_ChipSelect>

    Sx_Board_WaitOnBusy( );
 800e424:	f7f5 ff0c 	bl	8004240 <SX1262DVK1CAS_RADIO_WaitOnBusy>
}
 800e428:	bd70      	pop	{r4, r5, r6, pc}
        buffer[i] = Sx_Board_SendRecv(  0 );
 800e42a:	2000      	movs	r0, #0
 800e42c:	f7f5 ff32 	bl	8004294 <SX1262DVK1CAS_RADIO_SendRecv>
 800e430:	7020      	strb	r0, [r4, #0]
    for( uint16_t i = 0; i < size; i++ )
 800e432:	3401      	adds	r4, #1
 800e434:	e7f1      	b.n	800e41a <SX126xReadBuffer+0x26>

0800e436 <SX126xGetPayload>:
{
 800e436:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e438:	000c      	movs	r4, r1
    uint8_t offset = 0;
 800e43a:	466b      	mov	r3, sp
 800e43c:	2700      	movs	r7, #0
{
 800e43e:	0005      	movs	r5, r0
    SX126xGetRxBufferStatus( size, &offset );
 800e440:	1dd9      	adds	r1, r3, #7
 800e442:	0020      	movs	r0, r4
{
 800e444:	0016      	movs	r6, r2
    uint8_t offset = 0;
 800e446:	71df      	strb	r7, [r3, #7]
    SX126xGetRxBufferStatus( size, &offset );
 800e448:	f7ff ff86 	bl	800e358 <SX126xGetRxBufferStatus>
    if( *size > maxSize )
 800e44c:	7822      	ldrb	r2, [r4, #0]
        return 1;
 800e44e:	2001      	movs	r0, #1
    if( *size > maxSize )
 800e450:	42b2      	cmp	r2, r6
 800e452:	d805      	bhi.n	800e460 <SX126xGetPayload+0x2a>
    SX126xReadBuffer( offset, buffer, *size );
 800e454:	466b      	mov	r3, sp
 800e456:	0029      	movs	r1, r5
 800e458:	79d8      	ldrb	r0, [r3, #7]
 800e45a:	f7ff ffcb 	bl	800e3f4 <SX126xReadBuffer>
    return 0;
 800e45e:	0038      	movs	r0, r7
}
 800e460:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

0800e464 <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800e464:	2300      	movs	r3, #0
 800e466:	4a02      	ldr	r2, [pc, #8]	; (800e470 <UTIL_LPM_Init+0xc>)
 800e468:	6013      	str	r3, [r2, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800e46a:	4a02      	ldr	r2, [pc, #8]	; (800e474 <UTIL_LPM_Init+0x10>)
 800e46c:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800e46e:	4770      	bx	lr
 800e470:	20001064 	.word	0x20001064
 800e474:	20001060 	.word	0x20001060

0800e478 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800e478:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e47a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800e47e:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 800e480:	2900      	cmp	r1, #0
 800e482:	d008      	beq.n	800e496 <UTIL_LPM_SetStopMode+0x1e>
 800e484:	2901      	cmp	r1, #1
 800e486:	d103      	bne.n	800e490 <UTIL_LPM_SetStopMode+0x18>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 800e488:	4b05      	ldr	r3, [pc, #20]	; (800e4a0 <UTIL_LPM_SetStopMode+0x28>)
 800e48a:	681a      	ldr	r2, [r3, #0]
 800e48c:	4310      	orrs	r0, r2
 800e48e:	6018      	str	r0, [r3, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e490:	f384 8810 	msr	PRIMASK, r4
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800e494:	bd10      	pop	{r4, pc}
      StopModeDisable &= ( ~lpm_id_bm );
 800e496:	4a02      	ldr	r2, [pc, #8]	; (800e4a0 <UTIL_LPM_SetStopMode+0x28>)
 800e498:	6813      	ldr	r3, [r2, #0]
 800e49a:	4383      	bics	r3, r0
 800e49c:	6013      	str	r3, [r2, #0]
      break;
 800e49e:	e7f7      	b.n	800e490 <UTIL_LPM_SetStopMode+0x18>
 800e4a0:	20001064 	.word	0x20001064

0800e4a4 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800e4a4:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e4a6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800e4aa:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 800e4ac:	2900      	cmp	r1, #0
 800e4ae:	d008      	beq.n	800e4c2 <UTIL_LPM_SetOffMode+0x1e>
 800e4b0:	2901      	cmp	r1, #1
 800e4b2:	d103      	bne.n	800e4bc <UTIL_LPM_SetOffMode+0x18>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800e4b4:	4b05      	ldr	r3, [pc, #20]	; (800e4cc <UTIL_LPM_SetOffMode+0x28>)
 800e4b6:	681a      	ldr	r2, [r3, #0]
 800e4b8:	4310      	orrs	r0, r2
 800e4ba:	6018      	str	r0, [r3, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e4bc:	f384 8810 	msr	PRIMASK, r4
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800e4c0:	bd10      	pop	{r4, pc}
      OffModeDisable &= ( ~lpm_id_bm );
 800e4c2:	4a02      	ldr	r2, [pc, #8]	; (800e4cc <UTIL_LPM_SetOffMode+0x28>)
 800e4c4:	6813      	ldr	r3, [r2, #0]
 800e4c6:	4383      	bics	r3, r0
 800e4c8:	6013      	str	r3, [r2, #0]
      break;
 800e4ca:	e7f7      	b.n	800e4bc <UTIL_LPM_SetOffMode+0x18>
 800e4cc:	20001060 	.word	0x20001060

0800e4d0 <UTIL_LPM_GetMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e4d0:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800e4d4:	b672      	cpsid	i
  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
  {
    /**
     * At least one user disallows Stop Mode
     */
    mode_selected = UTIL_LPM_SLEEPMODE;
 800e4d6:	2000      	movs	r0, #0
  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800e4d8:	4a05      	ldr	r2, [pc, #20]	; (800e4f0 <UTIL_LPM_GetMode+0x20>)
 800e4da:	6812      	ldr	r2, [r2, #0]
 800e4dc:	4282      	cmp	r2, r0
 800e4de:	d104      	bne.n	800e4ea <UTIL_LPM_GetMode+0x1a>
  }
  else
  {
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800e4e0:	4a04      	ldr	r2, [pc, #16]	; (800e4f4 <UTIL_LPM_GetMode+0x24>)
 800e4e2:	6810      	ldr	r0, [r2, #0]
       */
      mode_selected = UTIL_LPM_STOPMODE;
    }
    else
    {
      mode_selected = UTIL_LPM_OFFMODE;
 800e4e4:	4242      	negs	r2, r0
 800e4e6:	4150      	adcs	r0, r2
 800e4e8:	3001      	adds	r0, #1
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e4ea:	f383 8810 	msr	PRIMASK, r3
  }

  UTIL_LPM_EXIT_CRITICAL_SECTION( );

  return mode_selected;
}
 800e4ee:	4770      	bx	lr
 800e4f0:	20001064 	.word	0x20001064
 800e4f4:	20001060 	.word	0x20001060

0800e4f8 <UTIL_LPM_EnterLowPower>:

void UTIL_LPM_EnterLowPower( void )
{
 800e4f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e4fa:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800e4fe:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800e500:	4b0d      	ldr	r3, [pc, #52]	; (800e538 <UTIL_LPM_EnterLowPower+0x40>)
 800e502:	4c0e      	ldr	r4, [pc, #56]	; (800e53c <UTIL_LPM_EnterLowPower+0x44>)
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	2b00      	cmp	r3, #0
 800e508:	d008      	beq.n	800e51c <UTIL_LPM_EnterLowPower+0x24>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 800e50a:	6823      	ldr	r3, [r4, #0]
 800e50c:	9301      	str	r3, [sp, #4]
 800e50e:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 800e510:	6863      	ldr	r3, [r4, #4]
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
      UTIL_PowerDriver.ExitOffMode( );
 800e512:	9301      	str	r3, [sp, #4]
 800e514:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e516:	f385 8810 	msr	PRIMASK, r5
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 800e51a:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800e51c:	4b08      	ldr	r3, [pc, #32]	; (800e540 <UTIL_LPM_EnterLowPower+0x48>)
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d004      	beq.n	800e52e <UTIL_LPM_EnterLowPower+0x36>
        UTIL_PowerDriver.EnterStopMode( );
 800e524:	68a3      	ldr	r3, [r4, #8]
 800e526:	9301      	str	r3, [sp, #4]
 800e528:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 800e52a:	68e3      	ldr	r3, [r4, #12]
 800e52c:	e7f1      	b.n	800e512 <UTIL_LPM_EnterLowPower+0x1a>
      UTIL_PowerDriver.EnterOffMode( );
 800e52e:	6923      	ldr	r3, [r4, #16]
 800e530:	9301      	str	r3, [sp, #4]
 800e532:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 800e534:	6963      	ldr	r3, [r4, #20]
 800e536:	e7ec      	b.n	800e512 <UTIL_LPM_EnterLowPower+0x1a>
 800e538:	20001064 	.word	0x20001064
 800e53c:	0800f2a4 	.word	0x0800f2a4
 800e540:	20001060 	.word	0x20001060

0800e544 <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 800e544:	2300      	movs	r3, #0
{
 800e546:	b510      	push	{r4, lr}
  while( size-- )
 800e548:	4293      	cmp	r3, r2
 800e54a:	d100      	bne.n	800e54e <UTIL_MEM_cpy_8+0xa>
    {
        *dst8++ = *src8++;
    }
}
 800e54c:	bd10      	pop	{r4, pc}
        *dst8++ = *src8++;
 800e54e:	5ccc      	ldrb	r4, [r1, r3]
 800e550:	54c4      	strb	r4, [r0, r3]
 800e552:	3301      	adds	r3, #1
 800e554:	e7f8      	b.n	800e548 <UTIL_MEM_cpy_8+0x4>
	...

0800e558 <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 800e558:	4b04      	ldr	r3, [pc, #16]	; (800e56c <UTIL_MEM_set_8+0x14>)
 800e55a:	3a01      	subs	r2, #1
 800e55c:	b292      	uxth	r2, r2
 800e55e:	429a      	cmp	r2, r3
 800e560:	d100      	bne.n	800e564 <UTIL_MEM_set_8+0xc>
  {
    *dst8++ = value;
  }
}
 800e562:	4770      	bx	lr
    *dst8++ = value;
 800e564:	7001      	strb	r1, [r0, #0]
 800e566:	3001      	adds	r0, #1
 800e568:	e7f7      	b.n	800e55a <UTIL_MEM_set_8+0x2>
 800e56a:	46c0      	nop			; (mov r8, r8)
 800e56c:	0000ffff 	.word	0x0000ffff

0800e570 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 800e570:	b082      	sub	sp, #8
 800e572:	b513      	push	{r0, r1, r4, lr}
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };

  c.Seconds = a.Seconds + b.Seconds;
 800e574:	18c9      	adds	r1, r1, r3
{
 800e576:	9305      	str	r3, [sp, #20]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800e578:	ab05      	add	r3, sp, #20
 800e57a:	889c      	ldrh	r4, [r3, #4]
 800e57c:	18a2      	adds	r2, r4, r2
  if( c.SubSeconds >= 1000 )
 800e57e:	24fa      	movs	r4, #250	; 0xfa
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800e580:	b293      	uxth	r3, r2
 800e582:	b212      	sxth	r2, r2
  if( c.SubSeconds >= 1000 )
 800e584:	00a4      	lsls	r4, r4, #2
 800e586:	42a2      	cmp	r2, r4
 800e588:	db03      	blt.n	800e592 <SysTimeAdd+0x22>
  {
    c.Seconds++;
    c.SubSeconds -= 1000;
 800e58a:	4a05      	ldr	r2, [pc, #20]	; (800e5a0 <SysTimeAdd+0x30>)
    c.Seconds++;
 800e58c:	3101      	adds	r1, #1
    c.SubSeconds -= 1000;
 800e58e:	189b      	adds	r3, r3, r2
 800e590:	b21a      	sxth	r2, r3
  }
  return c;
 800e592:	6001      	str	r1, [r0, #0]
 800e594:	8082      	strh	r2, [r0, #4]
}
 800e596:	bc16      	pop	{r1, r2, r4}
 800e598:	bc08      	pop	{r3}
 800e59a:	b002      	add	sp, #8
 800e59c:	4718      	bx	r3
 800e59e:	46c0      	nop			; (mov r8, r8)
 800e5a0:	fffffc18 	.word	0xfffffc18

0800e5a4 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 800e5a4:	b082      	sub	sp, #8
 800e5a6:	b513      	push	{r0, r1, r4, lr}
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };

  c.Seconds = a.Seconds - b.Seconds;
 800e5a8:	1ac9      	subs	r1, r1, r3
{
 800e5aa:	9305      	str	r3, [sp, #20]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800e5ac:	ab05      	add	r3, sp, #20
 800e5ae:	889b      	ldrh	r3, [r3, #4]
 800e5b0:	1ad2      	subs	r2, r2, r3
 800e5b2:	b293      	uxth	r3, r2
 800e5b4:	b214      	sxth	r4, r2
  if( c.SubSeconds < 0 )
 800e5b6:	0412      	lsls	r2, r2, #16
 800e5b8:	d504      	bpl.n	800e5c4 <SysTimeSub+0x20>
  {
    c.Seconds--;
    c.SubSeconds += 1000;
 800e5ba:	22fa      	movs	r2, #250	; 0xfa
 800e5bc:	0092      	lsls	r2, r2, #2
 800e5be:	189b      	adds	r3, r3, r2
    c.Seconds--;
 800e5c0:	3901      	subs	r1, #1
    c.SubSeconds += 1000;
 800e5c2:	b21c      	sxth	r4, r3
  }
  return c;
 800e5c4:	6001      	str	r1, [r0, #0]
 800e5c6:	8084      	strh	r4, [r0, #4]
}
 800e5c8:	bc16      	pop	{r1, r2, r4}
 800e5ca:	bc08      	pop	{r3}
 800e5cc:	b002      	add	sp, #8
 800e5ce:	4718      	bx	r3

0800e5d0 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
  SysTime_t DeltaTime;
  
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800e5d0:	2300      	movs	r3, #0
{
 800e5d2:	b530      	push	{r4, r5, lr}

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800e5d4:	4c11      	ldr	r4, [pc, #68]	; (800e61c <SysTimeSet+0x4c>)
{
 800e5d6:	b087      	sub	sp, #28
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800e5d8:	ad04      	add	r5, sp, #16
 800e5da:	80ab      	strh	r3, [r5, #4]
 800e5dc:	9304      	str	r3, [sp, #16]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800e5de:	6923      	ldr	r3, [r4, #16]
{
 800e5e0:	9002      	str	r0, [sp, #8]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800e5e2:	a805      	add	r0, sp, #20
 800e5e4:	9301      	str	r3, [sp, #4]
{
 800e5e6:	9103      	str	r1, [sp, #12]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800e5e8:	4798      	blx	r3
  c.Seconds = a.Seconds - b.Seconds;
 800e5ea:	9b02      	ldr	r3, [sp, #8]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800e5ec:	9004      	str	r0, [sp, #16]
  c.Seconds = a.Seconds - b.Seconds;
 800e5ee:	1a18      	subs	r0, r3, r0
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800e5f0:	ab02      	add	r3, sp, #8
 800e5f2:	88aa      	ldrh	r2, [r5, #4]
 800e5f4:	889b      	ldrh	r3, [r3, #4]
 800e5f6:	1a9b      	subs	r3, r3, r2
 800e5f8:	b29a      	uxth	r2, r3
 800e5fa:	b21d      	sxth	r5, r3
  if( c.SubSeconds < 0 )
 800e5fc:	041b      	lsls	r3, r3, #16
 800e5fe:	d504      	bpl.n	800e60a <SysTimeSet+0x3a>
    c.SubSeconds += 1000;
 800e600:	23fa      	movs	r3, #250	; 0xfa
 800e602:	009b      	lsls	r3, r3, #2
 800e604:	18d2      	adds	r2, r2, r3
    c.Seconds--;
 800e606:	3801      	subs	r0, #1
    c.SubSeconds += 1000;
 800e608:	b215      	sxth	r5, r2

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 800e60a:	6823      	ldr	r3, [r4, #0]
 800e60c:	9301      	str	r3, [sp, #4]
 800e60e:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 800e610:	68a3      	ldr	r3, [r4, #8]
 800e612:	0028      	movs	r0, r5
 800e614:	9301      	str	r3, [sp, #4]
 800e616:	4798      	blx	r3
}
 800e618:	b007      	add	sp, #28
 800e61a:	bd30      	pop	{r4, r5, pc}
 800e61c:	0800f264 	.word	0x0800f264

0800e620 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 800e620:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800e622:	2300      	movs	r3, #0
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800e624:	4e12      	ldr	r6, [pc, #72]	; (800e670 <SysTimeGet+0x50>)
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800e626:	aa02      	add	r2, sp, #8
 800e628:	8093      	strh	r3, [r2, #4]
 800e62a:	9302      	str	r3, [sp, #8]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800e62c:	6933      	ldr	r3, [r6, #16]
{
 800e62e:	0004      	movs	r4, r0
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800e630:	a803      	add	r0, sp, #12
 800e632:	9301      	str	r3, [sp, #4]
 800e634:	4798      	blx	r3

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800e636:	68f3      	ldr	r3, [r6, #12]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800e638:	9002      	str	r0, [sp, #8]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800e63a:	9301      	str	r3, [sp, #4]
 800e63c:	4798      	blx	r3
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800e63e:	6873      	ldr	r3, [r6, #4]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800e640:	0005      	movs	r5, r0
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800e642:	9301      	str	r3, [sp, #4]
 800e644:	4798      	blx	r3
  if( c.SubSeconds >= 1000 )
 800e646:	22fa      	movs	r2, #250	; 0xfa
  c.Seconds = a.Seconds + b.Seconds;
 800e648:	9b02      	ldr	r3, [sp, #8]
  if( c.SubSeconds >= 1000 )
 800e64a:	0092      	lsls	r2, r2, #2
  c.Seconds = a.Seconds + b.Seconds;
 800e64c:	18c0      	adds	r0, r0, r3
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800e64e:	ab02      	add	r3, sp, #8
 800e650:	889b      	ldrh	r3, [r3, #4]
 800e652:	195b      	adds	r3, r3, r5
 800e654:	b299      	uxth	r1, r3
 800e656:	b21b      	sxth	r3, r3
  if( c.SubSeconds >= 1000 )
 800e658:	4293      	cmp	r3, r2
 800e65a:	db03      	blt.n	800e664 <SysTimeGet+0x44>
    c.SubSeconds -= 1000;
 800e65c:	4b05      	ldr	r3, [pc, #20]	; (800e674 <SysTimeGet+0x54>)
    c.Seconds++;
 800e65e:	3001      	adds	r0, #1
    c.SubSeconds -= 1000;
 800e660:	18c9      	adds	r1, r1, r3
 800e662:	b20b      	sxth	r3, r1

  sysTime = SysTimeAdd( DeltaTime, calendarTime );

  return sysTime;
 800e664:	6020      	str	r0, [r4, #0]
}
 800e666:	0020      	movs	r0, r4
  return sysTime;
 800e668:	80a3      	strh	r3, [r4, #4]
}
 800e66a:	b004      	add	sp, #16
 800e66c:	bd70      	pop	{r4, r5, r6, pc}
 800e66e:	46c0      	nop			; (mov r8, r8)
 800e670:	0800f264 	.word	0x0800f264
 800e674:	fffffc18 	.word	0xfffffc18

0800e678 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 800e678:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800e67a:	2300      	movs	r3, #0
 800e67c:	466d      	mov	r5, sp
{
 800e67e:	0004      	movs	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800e680:	9300      	str	r3, [sp, #0]
 800e682:	80ab      	strh	r3, [r5, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800e684:	4b04      	ldr	r3, [pc, #16]	; (800e698 <SysTimeGetMcuTime+0x20>)
 800e686:	a801      	add	r0, sp, #4
 800e688:	691b      	ldr	r3, [r3, #16]
 800e68a:	4798      	blx	r3
  
  return calendarTime;
 800e68c:	0023      	movs	r3, r4
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800e68e:	9000      	str	r0, [sp, #0]
  return calendarTime;
 800e690:	cd06      	ldmia	r5!, {r1, r2}
 800e692:	c306      	stmia	r3!, {r1, r2}
}
 800e694:	0020      	movs	r0, r4
 800e696:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 800e698:	0800f264 	.word	0x0800f264

0800e69c <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 800e69c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e69e:	b09f      	sub	sp, #124	; 0x7c
 800e6a0:	9002      	str	r0, [sp, #8]
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
  {
    return 0;
 800e6a2:	2000      	movs	r0, #0
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800e6a4:	9c02      	ldr	r4, [sp, #8]
{
 800e6a6:	910a      	str	r1, [sp, #40]	; 0x28
  if (size <= 0)
 800e6a8:	4281      	cmp	r1, r0
 800e6aa:	dc0a      	bgt.n	800e6c2 <tiny_vsnprintf_like+0x26>
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
  }

  *str = '\0';
  return str - buf;
}
 800e6ac:	b01f      	add	sp, #124	; 0x7c
 800e6ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    CHECK_STR_SIZE(buf, str, size);
 800e6b0:	4288      	cmp	r0, r1
 800e6b2:	da0d      	bge.n	800e6d0 <tiny_vsnprintf_like+0x34>
    if (*fmt != '%')
 800e6b4:	2d25      	cmp	r5, #37	; 0x25
 800e6b6:	d00e      	beq.n	800e6d6 <tiny_vsnprintf_like+0x3a>
      *str++ = *fmt;
 800e6b8:	7025      	strb	r5, [r4, #0]
      continue;
 800e6ba:	9201      	str	r2, [sp, #4]
      *str++ = *fmt;
 800e6bc:	3401      	adds	r4, #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800e6be:	9a01      	ldr	r2, [sp, #4]
 800e6c0:	3201      	adds	r2, #1
 800e6c2:	9902      	ldr	r1, [sp, #8]
 800e6c4:	7815      	ldrb	r5, [r2, #0]
 800e6c6:	1a60      	subs	r0, r4, r1
 800e6c8:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e6ca:	3901      	subs	r1, #1
 800e6cc:	2d00      	cmp	r5, #0
 800e6ce:	d1ef      	bne.n	800e6b0 <tiny_vsnprintf_like+0x14>
  *str = '\0';
 800e6d0:	2300      	movs	r3, #0
 800e6d2:	7023      	strb	r3, [r4, #0]
  return str - buf;
 800e6d4:	e7ea      	b.n	800e6ac <tiny_vsnprintf_like+0x10>
 800e6d6:	1c50      	adds	r0, r2, #1
    if (*fmt == '0')
 800e6d8:	7852      	ldrb	r2, [r2, #1]
 800e6da:	9001      	str	r0, [sp, #4]
 800e6dc:	0015      	movs	r5, r2
 800e6de:	3d30      	subs	r5, #48	; 0x30
 800e6e0:	9205      	str	r2, [sp, #20]
 800e6e2:	4268      	negs	r0, r5
 800e6e4:	4168      	adcs	r0, r5
    if (is_digit(*fmt))
 800e6e6:	b2ed      	uxtb	r5, r5
      flags |= ZEROPAD;
 800e6e8:	0002      	movs	r2, r0
    if (is_digit(*fmt))
 800e6ea:	2d09      	cmp	r5, #9
 800e6ec:	d92d      	bls.n	800e74a <tiny_vsnprintf_like+0xae>
    field_width = -1;
 800e6ee:	2701      	movs	r7, #1
 800e6f0:	427f      	negs	r7, r7
    switch (*fmt)
 800e6f2:	9d01      	ldr	r5, [sp, #4]
 800e6f4:	782e      	ldrb	r6, [r5, #0]
 800e6f6:	2e69      	cmp	r6, #105	; 0x69
 800e6f8:	d100      	bne.n	800e6fc <tiny_vsnprintf_like+0x60>
 800e6fa:	e0ab      	b.n	800e854 <tiny_vsnprintf_like+0x1b8>
 800e6fc:	d827      	bhi.n	800e74e <tiny_vsnprintf_like+0xb2>
 800e6fe:	2e63      	cmp	r6, #99	; 0x63
 800e700:	d036      	beq.n	800e770 <tiny_vsnprintf_like+0xd4>
 800e702:	2e64      	cmp	r6, #100	; 0x64
 800e704:	d100      	bne.n	800e708 <tiny_vsnprintf_like+0x6c>
 800e706:	e0a5      	b.n	800e854 <tiny_vsnprintf_like+0x1b8>
 800e708:	2e58      	cmp	r6, #88	; 0x58
 800e70a:	d068      	beq.n	800e7de <tiny_vsnprintf_like+0x142>
        if (*fmt != '%') *str++ = '%';
 800e70c:	0020      	movs	r0, r4
 800e70e:	2e25      	cmp	r6, #37	; 0x25
 800e710:	d125      	bne.n	800e75e <tiny_vsnprintf_like+0xc2>
        if (*fmt)
 800e712:	9c01      	ldr	r4, [sp, #4]
 800e714:	7825      	ldrb	r5, [r4, #0]
 800e716:	2d00      	cmp	r5, #0
 800e718:	d100      	bne.n	800e71c <tiny_vsnprintf_like+0x80>
 800e71a:	e09f      	b.n	800e85c <tiny_vsnprintf_like+0x1c0>
          *str++ = *fmt;
 800e71c:	1c44      	adds	r4, r0, #1
 800e71e:	7005      	strb	r5, [r0, #0]
        CHECK_STR_SIZE(buf, str, size);
 800e720:	9802      	ldr	r0, [sp, #8]
    base = 10;
 800e722:	250a      	movs	r5, #10
        CHECK_STR_SIZE(buf, str, size);
 800e724:	1a20      	subs	r0, r4, r0
 800e726:	4288      	cmp	r0, r1
 800e728:	da5c      	bge.n	800e7e4 <tiny_vsnprintf_like+0x148>
 800e72a:	e7c8      	b.n	800e6be <tiny_vsnprintf_like+0x22>
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 800e72c:	9e01      	ldr	r6, [sp, #4]
 800e72e:	3601      	adds	r6, #1
 800e730:	9601      	str	r6, [sp, #4]
 800e732:	260a      	movs	r6, #10
 800e734:	4377      	muls	r7, r6
 800e736:	197d      	adds	r5, r7, r5
 800e738:	3d30      	subs	r5, #48	; 0x30
 800e73a:	002f      	movs	r7, r5
 800e73c:	9d01      	ldr	r5, [sp, #4]
 800e73e:	782d      	ldrb	r5, [r5, #0]
 800e740:	002e      	movs	r6, r5
 800e742:	3e30      	subs	r6, #48	; 0x30
 800e744:	2e09      	cmp	r6, #9
 800e746:	d9f1      	bls.n	800e72c <tiny_vsnprintf_like+0x90>
 800e748:	e7d3      	b.n	800e6f2 <tiny_vsnprintf_like+0x56>
  int i = 0;
 800e74a:	2700      	movs	r7, #0
 800e74c:	e7f6      	b.n	800e73c <tiny_vsnprintf_like+0xa0>
    switch (*fmt)
 800e74e:	2e75      	cmp	r6, #117	; 0x75
 800e750:	d100      	bne.n	800e754 <tiny_vsnprintf_like+0xb8>
 800e752:	e081      	b.n	800e858 <tiny_vsnprintf_like+0x1bc>
 800e754:	2510      	movs	r5, #16
 800e756:	2e78      	cmp	r6, #120	; 0x78
 800e758:	d044      	beq.n	800e7e4 <tiny_vsnprintf_like+0x148>
 800e75a:	2e73      	cmp	r6, #115	; 0x73
 800e75c:	d020      	beq.n	800e7a0 <tiny_vsnprintf_like+0x104>
        if (*fmt != '%') *str++ = '%';
 800e75e:	2525      	movs	r5, #37	; 0x25
 800e760:	1c60      	adds	r0, r4, #1
 800e762:	7025      	strb	r5, [r4, #0]
        CHECK_STR_SIZE(buf, str, size);
 800e764:	9c02      	ldr	r4, [sp, #8]
 800e766:	1b04      	subs	r4, r0, r4
 800e768:	428c      	cmp	r4, r1
 800e76a:	dbd2      	blt.n	800e712 <tiny_vsnprintf_like+0x76>
        if (*fmt != '%') *str++ = '%';
 800e76c:	0004      	movs	r4, r0
 800e76e:	e073      	b.n	800e858 <tiny_vsnprintf_like+0x1bc>
 800e770:	0021      	movs	r1, r4
    switch (*fmt)
 800e772:	003a      	movs	r2, r7
          while (--field_width > 0) *str++ = ' ';
 800e774:	3a01      	subs	r2, #1
 800e776:	2a00      	cmp	r2, #0
 800e778:	dc0e      	bgt.n	800e798 <tiny_vsnprintf_like+0xfc>
 800e77a:	2200      	movs	r2, #0
 800e77c:	4297      	cmp	r7, r2
 800e77e:	dd00      	ble.n	800e782 <tiny_vsnprintf_like+0xe6>
 800e780:	1e7a      	subs	r2, r7, #1
 800e782:	2101      	movs	r1, #1
 800e784:	18a2      	adds	r2, r4, r2
 800e786:	2f00      	cmp	r7, #0
 800e788:	dd00      	ble.n	800e78c <tiny_vsnprintf_like+0xf0>
 800e78a:	0039      	movs	r1, r7
        *str++ = (unsigned char) va_arg(args, int);
 800e78c:	001d      	movs	r5, r3
 800e78e:	cd08      	ldmia	r5!, {r3}
 800e790:	1864      	adds	r4, r4, r1
 800e792:	7013      	strb	r3, [r2, #0]
        s = va_arg(args, char *);
 800e794:	002b      	movs	r3, r5
 800e796:	e792      	b.n	800e6be <tiny_vsnprintf_like+0x22>
          while (--field_width > 0) *str++ = ' ';
 800e798:	2020      	movs	r0, #32
 800e79a:	7008      	strb	r0, [r1, #0]
 800e79c:	3101      	adds	r1, #1
 800e79e:	e7e9      	b.n	800e774 <tiny_vsnprintf_like+0xd8>
        s = va_arg(args, char *);
 800e7a0:	001d      	movs	r5, r3
 800e7a2:	cd40      	ldmia	r5!, {r6}
        if (!s) s = "<NULL>";
 800e7a4:	2e00      	cmp	r6, #0
 800e7a6:	d100      	bne.n	800e7aa <tiny_vsnprintf_like+0x10e>
 800e7a8:	4e50      	ldr	r6, [pc, #320]	; (800e8ec <tiny_vsnprintf_like+0x250>)
        len = strlen(s);
 800e7aa:	0030      	movs	r0, r6
 800e7ac:	f7f1 fcac 	bl	8000108 <strlen>
          while (len < field_width--) *str++ = ' ';
 800e7b0:	0023      	movs	r3, r4
 800e7b2:	19e1      	adds	r1, r4, r7
 800e7b4:	1aca      	subs	r2, r1, r3
 800e7b6:	4290      	cmp	r0, r2
 800e7b8:	db09      	blt.n	800e7ce <tiny_vsnprintf_like+0x132>
 800e7ba:	2300      	movs	r3, #0
 800e7bc:	4287      	cmp	r7, r0
 800e7be:	db00      	blt.n	800e7c2 <tiny_vsnprintf_like+0x126>
 800e7c0:	1a3b      	subs	r3, r7, r0
 800e7c2:	18e4      	adds	r4, r4, r3
        for (i = 0; i < len; ++i) *str++ = *s++;
 800e7c4:	2300      	movs	r3, #0
 800e7c6:	4283      	cmp	r3, r0
 800e7c8:	db05      	blt.n	800e7d6 <tiny_vsnprintf_like+0x13a>
 800e7ca:	1824      	adds	r4, r4, r0
 800e7cc:	e7e2      	b.n	800e794 <tiny_vsnprintf_like+0xf8>
          while (len < field_width--) *str++ = ' ';
 800e7ce:	2220      	movs	r2, #32
 800e7d0:	701a      	strb	r2, [r3, #0]
 800e7d2:	3301      	adds	r3, #1
 800e7d4:	e7ee      	b.n	800e7b4 <tiny_vsnprintf_like+0x118>
        for (i = 0; i < len; ++i) *str++ = *s++;
 800e7d6:	5cf2      	ldrb	r2, [r6, r3]
 800e7d8:	54e2      	strb	r2, [r4, r3]
 800e7da:	3301      	adds	r3, #1
 800e7dc:	e7f3      	b.n	800e7c6 <tiny_vsnprintf_like+0x12a>
        flags |= UPPERCASE;
 800e7de:	2240      	movs	r2, #64	; 0x40
        base = 16;
 800e7e0:	2510      	movs	r5, #16
        flags |= UPPERCASE;
 800e7e2:	4302      	orrs	r2, r0
    else if (flags & SIGN)
 800e7e4:	2602      	movs	r6, #2
 800e7e6:	9306      	str	r3, [sp, #24]
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800e7e8:	9b02      	ldr	r3, [sp, #8]
    else if (flags & SIGN)
 800e7ea:	4016      	ands	r6, r2
 800e7ec:	46b4      	mov	ip, r6
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800e7ee:	1ae6      	subs	r6, r4, r3
 800e7f0:	9b06      	ldr	r3, [sp, #24]
 800e7f2:	1b8e      	subs	r6, r1, r6
 800e7f4:	cb01      	ldmia	r3!, {r0}
  if (type & UPPERCASE)  dig = upper_digits;
 800e7f6:	493e      	ldr	r1, [pc, #248]	; (800e8f0 <tiny_vsnprintf_like+0x254>)
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800e7f8:	9306      	str	r3, [sp, #24]
  if (type & UPPERCASE)  dig = upper_digits;
 800e7fa:	2340      	movs	r3, #64	; 0x40
 800e7fc:	9108      	str	r1, [sp, #32]
 800e7fe:	421a      	tst	r2, r3
 800e800:	d101      	bne.n	800e806 <tiny_vsnprintf_like+0x16a>
  char *dig = lower_digits;
 800e802:	4b3c      	ldr	r3, [pc, #240]	; (800e8f4 <tiny_vsnprintf_like+0x258>)
 800e804:	9308      	str	r3, [sp, #32]
  c = (type & ZEROPAD) ? '0' : ' ';
 800e806:	2330      	movs	r3, #48	; 0x30
 800e808:	9309      	str	r3, [sp, #36]	; 0x24
 800e80a:	9b05      	ldr	r3, [sp, #20]
 800e80c:	2b30      	cmp	r3, #48	; 0x30
 800e80e:	d001      	beq.n	800e814 <tiny_vsnprintf_like+0x178>
 800e810:	2320      	movs	r3, #32
 800e812:	9309      	str	r3, [sp, #36]	; 0x24
  if (type & SIGN)
 800e814:	4663      	mov	r3, ip
 800e816:	2b00      	cmp	r3, #0
 800e818:	d025      	beq.n	800e866 <tiny_vsnprintf_like+0x1ca>
    if (num < 0)
 800e81a:	2800      	cmp	r0, #0
 800e81c:	da23      	bge.n	800e866 <tiny_vsnprintf_like+0x1ca>
      sign = '-';
 800e81e:	232d      	movs	r3, #45	; 0x2d
      num = -num;
 800e820:	4240      	negs	r0, r0
      size--;
 800e822:	3f01      	subs	r7, #1
  if (num == 0)
 800e824:	9304      	str	r3, [sp, #16]
  if (base < 2 || base > 36) return 0;
 800e826:	2300      	movs	r3, #0
 800e828:	9303      	str	r3, [sp, #12]
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 800e82a:	0029      	movs	r1, r5
 800e82c:	9007      	str	r0, [sp, #28]
 800e82e:	f7f1 fd17 	bl	8000260 <__aeabi_uidivmod>
 800e832:	9b03      	ldr	r3, [sp, #12]
 800e834:	000a      	movs	r2, r1
 800e836:	469c      	mov	ip, r3
 800e838:	900b      	str	r0, [sp, #44]	; 0x2c
 800e83a:	4660      	mov	r0, ip
 800e83c:	0019      	movs	r1, r3
 800e83e:	9b08      	ldr	r3, [sp, #32]
 800e840:	3101      	adds	r1, #1
 800e842:	5c9a      	ldrb	r2, [r3, r2]
 800e844:	ab0d      	add	r3, sp, #52	; 0x34
 800e846:	541a      	strb	r2, [r3, r0]
    while (num != 0)
 800e848:	9b07      	ldr	r3, [sp, #28]
      num = ((unsigned long) num) / (unsigned) base;
 800e84a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800e84c:	9103      	str	r1, [sp, #12]
    while (num != 0)
 800e84e:	429d      	cmp	r5, r3
 800e850:	d9eb      	bls.n	800e82a <tiny_vsnprintf_like+0x18e>
 800e852:	e011      	b.n	800e878 <tiny_vsnprintf_like+0x1dc>
        flags |= SIGN;
 800e854:	2202      	movs	r2, #2
 800e856:	4302      	orrs	r2, r0
    base = 10;
 800e858:	250a      	movs	r5, #10
 800e85a:	e7c3      	b.n	800e7e4 <tiny_vsnprintf_like+0x148>
          --fmt;
 800e85c:	9a01      	ldr	r2, [sp, #4]
 800e85e:	0004      	movs	r4, r0
 800e860:	3a01      	subs	r2, #1
 800e862:	9201      	str	r2, [sp, #4]
        CHECK_STR_SIZE(buf, str, size);
 800e864:	e72b      	b.n	800e6be <tiny_vsnprintf_like+0x22>
  if (num == 0)
 800e866:	2800      	cmp	r0, #0
 800e868:	d001      	beq.n	800e86e <tiny_vsnprintf_like+0x1d2>
 800e86a:	2300      	movs	r3, #0
 800e86c:	e7da      	b.n	800e824 <tiny_vsnprintf_like+0x188>
    tmp[i++] = '0';
 800e86e:	2230      	movs	r2, #48	; 0x30
 800e870:	2101      	movs	r1, #1
 800e872:	ab0d      	add	r3, sp, #52	; 0x34
 800e874:	701a      	strb	r2, [r3, #0]
 800e876:	9004      	str	r0, [sp, #16]
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800e878:	9b05      	ldr	r3, [sp, #20]
  size -= precision;
 800e87a:	1a78      	subs	r0, r7, r1
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800e87c:	2b30      	cmp	r3, #48	; 0x30
 800e87e:	d005      	beq.n	800e88c <tiny_vsnprintf_like+0x1f0>
 800e880:	0023      	movs	r3, r4
 800e882:	0002      	movs	r2, r0
 800e884:	001c      	movs	r4, r3
 800e886:	3801      	subs	r0, #1
 800e888:	2a00      	cmp	r2, #0
 800e88a:	dc0b      	bgt.n	800e8a4 <tiny_vsnprintf_like+0x208>
  if (sign) ASSIGN_STR(sign);
 800e88c:	9b04      	ldr	r3, [sp, #16]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d005      	beq.n	800e89e <tiny_vsnprintf_like+0x202>
 800e892:	1c62      	adds	r2, r4, #1
 800e894:	3e01      	subs	r6, #1
 800e896:	7023      	strb	r3, [r4, #0]
 800e898:	0014      	movs	r4, r2
 800e89a:	2e00      	cmp	r6, #0
 800e89c:	d009      	beq.n	800e8b2 <tiny_vsnprintf_like+0x216>
 800e89e:	0033      	movs	r3, r6
 800e8a0:	1b80      	subs	r0, r0, r6
 800e8a2:	e010      	b.n	800e8c6 <tiny_vsnprintf_like+0x22a>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800e8a4:	2520      	movs	r5, #32
 800e8a6:	3301      	adds	r3, #1
 800e8a8:	3e01      	subs	r6, #1
 800e8aa:	001a      	movs	r2, r3
 800e8ac:	7025      	strb	r5, [r4, #0]
 800e8ae:	2e00      	cmp	r6, #0
 800e8b0:	d1e7      	bne.n	800e882 <tiny_vsnprintf_like+0x1e6>
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800e8b2:	0014      	movs	r4, r2
 800e8b4:	9b06      	ldr	r3, [sp, #24]
 800e8b6:	e702      	b.n	800e6be <tiny_vsnprintf_like+0x22>
  while (size-- > 0) ASSIGN_STR(c);
 800e8b8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800e8ba:	3401      	adds	r4, #1
 800e8bc:	3b01      	subs	r3, #1
 800e8be:	0022      	movs	r2, r4
 800e8c0:	702e      	strb	r6, [r5, #0]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d0f5      	beq.n	800e8b2 <tiny_vsnprintf_like+0x216>
 800e8c6:	18c2      	adds	r2, r0, r3
 800e8c8:	0025      	movs	r5, r4
 800e8ca:	2a00      	cmp	r2, #0
 800e8cc:	dcf4      	bgt.n	800e8b8 <tiny_vsnprintf_like+0x21c>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 800e8ce:	ad0d      	add	r5, sp, #52	; 0x34
 800e8d0:	191b      	adds	r3, r3, r4
 800e8d2:	0020      	movs	r0, r4
 800e8d4:	3901      	subs	r1, #1
 800e8d6:	d201      	bcs.n	800e8dc <tiny_vsnprintf_like+0x240>
 800e8d8:	0022      	movs	r2, r4
 800e8da:	e7ea      	b.n	800e8b2 <tiny_vsnprintf_like+0x216>
 800e8dc:	5d4e      	ldrb	r6, [r1, r5]
 800e8de:	3401      	adds	r4, #1
 800e8e0:	0022      	movs	r2, r4
 800e8e2:	7006      	strb	r6, [r0, #0]
 800e8e4:	429c      	cmp	r4, r3
 800e8e6:	d1f4      	bne.n	800e8d2 <tiny_vsnprintf_like+0x236>
 800e8e8:	e7e3      	b.n	800e8b2 <tiny_vsnprintf_like+0x216>
 800e8ea:	46c0      	nop			; (mov r8, r8)
 800e8ec:	0800fded 	.word	0x0800fded
 800e8f0:	0800fdf4 	.word	0x0800fdf4
 800e8f4:	0800fe19 	.word	0x0800fe19

0800e8f8 <UTIL_SEQ_SetTask>:

  return;
}

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800e8f8:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e8fa:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800e8fe:	b672      	cpsid	i
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 800e900:	4a05      	ldr	r2, [pc, #20]	; (800e918 <UTIL_SEQ_SetTask+0x20>)
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800e902:	00c9      	lsls	r1, r1, #3
  TaskSet |= TaskId_bm;
 800e904:	6813      	ldr	r3, [r2, #0]
 800e906:	4303      	orrs	r3, r0
 800e908:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800e90a:	4b04      	ldr	r3, [pc, #16]	; (800e91c <UTIL_SEQ_SetTask+0x24>)
 800e90c:	58ca      	ldr	r2, [r1, r3]
 800e90e:	4310      	orrs	r0, r2
 800e910:	50c8      	str	r0, [r1, r3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e912:	f384 8810 	msr	PRIMASK, r4

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 800e916:	bd10      	pop	{r4, pc}
 800e918:	20001104 	.word	0x20001104
 800e91c:	200010f4 	.word	0x200010f4

0800e920 <UTIL_SEQ_PreIdle>:
 800e920:	4770      	bx	lr

0800e922 <UTIL_SEQ_PostIdle>:
 800e922:	4770      	bx	lr

0800e924 <SEQ_BitPosition>:
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
  uint8_t n = 0U;
 800e924:	2300      	movs	r3, #0

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 800e926:	0c02      	lsrs	r2, r0, #16
 800e928:	429a      	cmp	r2, r3
 800e92a:	d101      	bne.n	800e930 <SEQ_BitPosition+0xc>
 800e92c:	0400      	lsls	r0, r0, #16
 800e92e:	3310      	adds	r3, #16
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 800e930:	0e02      	lsrs	r2, r0, #24
 800e932:	d102      	bne.n	800e93a <SEQ_BitPosition+0x16>
 800e934:	3308      	adds	r3, #8
 800e936:	b2db      	uxtb	r3, r3
 800e938:	0200      	lsls	r0, r0, #8
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 800e93a:	0f02      	lsrs	r2, r0, #28
 800e93c:	d102      	bne.n	800e944 <SEQ_BitPosition+0x20>
 800e93e:	3304      	adds	r3, #4
 800e940:	b2db      	uxtb	r3, r3
 800e942:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[Value >> (32-4)];

  return (uint8_t)(31U-n);
 800e944:	221f      	movs	r2, #31
 800e946:	1ad3      	subs	r3, r2, r3
 800e948:	4a02      	ldr	r2, [pc, #8]	; (800e954 <SEQ_BitPosition+0x30>)
  n += SEQ_clz_table_4bit[Value >> (32-4)];
 800e94a:	0f00      	lsrs	r0, r0, #28
  return (uint8_t)(31U-n);
 800e94c:	5c10      	ldrb	r0, [r2, r0]
 800e94e:	1a18      	subs	r0, r3, r0
 800e950:	b2c0      	uxtb	r0, r0
}
 800e952:	4770      	bx	lr
 800e954:	0800fe3e 	.word	0x0800fe3e

0800e958 <UTIL_SEQ_Run>:
{
 800e958:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  super_mask_backup = SuperMask;
 800e95a:	4e36      	ldr	r6, [pc, #216]	; (800ea34 <UTIL_SEQ_Run+0xdc>)
 800e95c:	6833      	ldr	r3, [r6, #0]
  SuperMask &= Mask_bm;
 800e95e:	4018      	ands	r0, r3
  super_mask_backup = SuperMask;
 800e960:	9300      	str	r3, [sp, #0]
  SuperMask &= Mask_bm;
 800e962:	6030      	str	r0, [r6, #0]
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800e964:	4c34      	ldr	r4, [pc, #208]	; (800ea38 <UTIL_SEQ_Run+0xe0>)
 800e966:	4f35      	ldr	r7, [pc, #212]	; (800ea3c <UTIL_SEQ_Run+0xe4>)
 800e968:	6821      	ldr	r1, [r4, #0]
 800e96a:	683a      	ldr	r2, [r7, #0]
 800e96c:	6833      	ldr	r3, [r6, #0]
 800e96e:	400a      	ands	r2, r1
 800e970:	4213      	tst	r3, r2
 800e972:	d040      	beq.n	800e9f6 <UTIL_SEQ_Run+0x9e>
 800e974:	4832      	ldr	r0, [pc, #200]	; (800ea40 <UTIL_SEQ_Run+0xe8>)
 800e976:	4a33      	ldr	r2, [pc, #204]	; (800ea44 <UTIL_SEQ_Run+0xec>)
 800e978:	6800      	ldr	r0, [r0, #0]
 800e97a:	6812      	ldr	r2, [r2, #0]
 800e97c:	0005      	movs	r5, r0
 800e97e:	4015      	ands	r5, r2
 800e980:	4210      	tst	r0, r2
 800e982:	d138      	bne.n	800e9f6 <UTIL_SEQ_Run+0x9e>
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800e984:	4c30      	ldr	r4, [pc, #192]	; (800ea48 <UTIL_SEQ_Run+0xf0>)
 800e986:	400b      	ands	r3, r1
 800e988:	6822      	ldr	r2, [r4, #0]
 800e98a:	0010      	movs	r0, r2
 800e98c:	4018      	ands	r0, r3
 800e98e:	421a      	tst	r2, r3
 800e990:	d102      	bne.n	800e998 <UTIL_SEQ_Run+0x40>
      counter++;
 800e992:	2501      	movs	r5, #1
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800e994:	68a0      	ldr	r0, [r4, #8]
 800e996:	4018      	ands	r0, r3
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800e998:	00ed      	lsls	r5, r5, #3
 800e99a:	1963      	adds	r3, r4, r5
 800e99c:	685a      	ldr	r2, [r3, #4]
 800e99e:	4202      	tst	r2, r0
 800e9a0:	d102      	bne.n	800e9a8 <UTIL_SEQ_Run+0x50>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800e9a2:	2201      	movs	r2, #1
 800e9a4:	4252      	negs	r2, r2
 800e9a6:	605a      	str	r2, [r3, #4]
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800e9a8:	1965      	adds	r5, r4, r5
 800e9aa:	686f      	ldr	r7, [r5, #4]
 800e9ac:	4038      	ands	r0, r7
 800e9ae:	f7ff ffb9 	bl	800e924 <SEQ_BitPosition>
 800e9b2:	4b26      	ldr	r3, [pc, #152]	; (800ea4c <UTIL_SEQ_Run+0xf4>)
 800e9b4:	6018      	str	r0, [r3, #0]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800e9b6:	2301      	movs	r3, #1
 800e9b8:	4083      	lsls	r3, r0
 800e9ba:	439f      	bics	r7, r3
 800e9bc:	606f      	str	r7, [r5, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e9be:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800e9c2:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 800e9c4:	4b21      	ldr	r3, [pc, #132]	; (800ea4c <UTIL_SEQ_Run+0xf4>)
 800e9c6:	481d      	ldr	r0, [pc, #116]	; (800ea3c <UTIL_SEQ_Run+0xe4>)
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	9301      	str	r3, [sp, #4]
 800e9cc:	2301      	movs	r3, #1
 800e9ce:	9a01      	ldr	r2, [sp, #4]
 800e9d0:	4093      	lsls	r3, r2
 800e9d2:	6802      	ldr	r2, [r0, #0]
 800e9d4:	439a      	bics	r2, r3
 800e9d6:	6002      	str	r2, [r0, #0]
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800e9d8:	68a2      	ldr	r2, [r4, #8]
 800e9da:	439a      	bics	r2, r3
 800e9dc:	60a2      	str	r2, [r4, #8]
 800e9de:	6822      	ldr	r2, [r4, #0]
 800e9e0:	439a      	bics	r2, r3
 800e9e2:	6022      	str	r2, [r4, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e9e4:	f381 8810 	msr	PRIMASK, r1
    TaskCb[CurrentTaskIdx]( );
 800e9e8:	4b18      	ldr	r3, [pc, #96]	; (800ea4c <UTIL_SEQ_Run+0xf4>)
 800e9ea:	4a19      	ldr	r2, [pc, #100]	; (800ea50 <UTIL_SEQ_Run+0xf8>)
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	009b      	lsls	r3, r3, #2
 800e9f0:	589b      	ldr	r3, [r3, r2]
 800e9f2:	4798      	blx	r3
 800e9f4:	e7b6      	b.n	800e964 <UTIL_SEQ_Run+0xc>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800e9f6:	2301      	movs	r3, #1
 800e9f8:	4a14      	ldr	r2, [pc, #80]	; (800ea4c <UTIL_SEQ_Run+0xf4>)
 800e9fa:	425b      	negs	r3, r3
 800e9fc:	6013      	str	r3, [r2, #0]
  UTIL_SEQ_PreIdle( );
 800e9fe:	f7ff ff8f 	bl	800e920 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ea02:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800ea06:	b672      	cpsid	i
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 800ea08:	683a      	ldr	r2, [r7, #0]
 800ea0a:	6823      	ldr	r3, [r4, #0]
 800ea0c:	4013      	ands	r3, r2
 800ea0e:	6832      	ldr	r2, [r6, #0]
 800ea10:	4013      	ands	r3, r2
 800ea12:	4a0c      	ldr	r2, [pc, #48]	; (800ea44 <UTIL_SEQ_Run+0xec>)
 800ea14:	6811      	ldr	r1, [r2, #0]
 800ea16:	4a0a      	ldr	r2, [pc, #40]	; (800ea40 <UTIL_SEQ_Run+0xe8>)
 800ea18:	6812      	ldr	r2, [r2, #0]
 800ea1a:	400a      	ands	r2, r1
 800ea1c:	4313      	orrs	r3, r2
 800ea1e:	d101      	bne.n	800ea24 <UTIL_SEQ_Run+0xcc>
	UTIL_SEQ_Idle( );
 800ea20:	f7f4 f97c 	bl	8002d1c <UTIL_SEQ_Idle>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ea24:	f385 8810 	msr	PRIMASK, r5
  UTIL_SEQ_PostIdle( );
 800ea28:	f7ff ff7b 	bl	800e922 <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 800ea2c:	9b00      	ldr	r3, [sp, #0]
 800ea2e:	6033      	str	r3, [r6, #0]
}
 800ea30:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800ea32:	46c0      	nop			; (mov r8, r8)
 800ea34:	20000188 	.word	0x20000188
 800ea38:	2000018c 	.word	0x2000018c
 800ea3c:	20001104 	.word	0x20001104
 800ea40:	20001070 	.word	0x20001070
 800ea44:	2000106c 	.word	0x2000106c
 800ea48:	200010f4 	.word	0x200010f4
 800ea4c:	20001068 	.word	0x20001068
 800ea50:	20001074 	.word	0x20001074

0800ea54 <UTIL_SEQ_RegTask>:
{
 800ea54:	b570      	push	{r4, r5, r6, lr}
 800ea56:	0014      	movs	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ea58:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800ea5c:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800ea5e:	f7ff ff61 	bl	800e924 <SEQ_BitPosition>
 800ea62:	4b03      	ldr	r3, [pc, #12]	; (800ea70 <UTIL_SEQ_RegTask+0x1c>)
 800ea64:	0080      	lsls	r0, r0, #2
 800ea66:	50c4      	str	r4, [r0, r3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ea68:	f385 8810 	msr	PRIMASK, r5
}
 800ea6c:	bd70      	pop	{r4, r5, r6, pc}
 800ea6e:	46c0      	nop			; (mov r8, r8)
 800ea70:	20001074 	.word	0x20001074

0800ea74 <UTIL_TIMER_Init>:
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 800ea74:	2200      	movs	r2, #0
{
 800ea76:	b510      	push	{r4, lr}
  TimerListHead = NULL;
 800ea78:	4b02      	ldr	r3, [pc, #8]	; (800ea84 <UTIL_TIMER_Init+0x10>)
 800ea7a:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 800ea7c:	4b02      	ldr	r3, [pc, #8]	; (800ea88 <UTIL_TIMER_Init+0x14>)
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	4798      	blx	r3
}
 800ea82:	bd10      	pop	{r4, pc}
 800ea84:	20001108 	.word	0x20001108
 800ea88:	0800f278 	.word	0x0800f278

0800ea8c <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 800ea8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ea8e:	0004      	movs	r4, r0
 800ea90:	0017      	movs	r7, r2
 800ea92:	0008      	movs	r0, r1
 800ea94:	001e      	movs	r6, r3
    TimerObject->Next = NULL;
    return UTIL_TIMER_OK;
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 800ea96:	2501      	movs	r5, #1
  if((TimerObject != NULL) && (Callback != NULL))
 800ea98:	2c00      	cmp	r4, #0
 800ea9a:	d00f      	beq.n	800eabc <UTIL_TIMER_Create+0x30>
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d00d      	beq.n	800eabc <UTIL_TIMER_Create+0x30>
    TimerObject->Timestamp = 0U;
 800eaa0:	2500      	movs	r5, #0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800eaa2:	4b07      	ldr	r3, [pc, #28]	; (800eac0 <UTIL_TIMER_Create+0x34>)
    TimerObject->Timestamp = 0U;
 800eaa4:	6025      	str	r5, [r4, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800eaa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eaa8:	9301      	str	r3, [sp, #4]
 800eaaa:	4798      	blx	r3
    TimerObject->argument = Argument;
 800eaac:	9b08      	ldr	r3, [sp, #32]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800eaae:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 800eab0:	8125      	strh	r5, [r4, #8]
    TimerObject->IsReloadStopped = 0U;
 800eab2:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 800eab4:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 800eab6:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 800eab8:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 800eaba:	6165      	str	r5, [r4, #20]
  }
}
 800eabc:	0028      	movs	r0, r5
 800eabe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800eac0:	0800f278 	.word	0x0800f278

0800eac4 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800eac4:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800eac6:	4c03      	ldr	r4, [pc, #12]	; (800ead4 <UTIL_TIMER_GetCurrentTime+0x10>)
 800eac8:	69e3      	ldr	r3, [r4, #28]
 800eaca:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 800eacc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800eace:	4798      	blx	r3
}
 800ead0:	bd10      	pop	{r4, pc}
 800ead2:	46c0      	nop			; (mov r8, r8)
 800ead4:	0800f278 	.word	0x0800f278

0800ead8 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800ead8:	b570      	push	{r4, r5, r6, lr}
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800eada:	4d06      	ldr	r5, [pc, #24]	; (800eaf4 <UTIL_TIMER_GetElapsedTime+0x1c>)
{
 800eadc:	0006      	movs	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800eade:	69eb      	ldr	r3, [r5, #28]
 800eae0:	4798      	blx	r3
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800eae2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800eae4:	0004      	movs	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800eae6:	0030      	movs	r0, r6
 800eae8:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800eaea:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800eaec:	1a20      	subs	r0, r4, r0
 800eaee:	4798      	blx	r3
}
 800eaf0:	bd70      	pop	{r4, r5, r6, pc}
 800eaf2:	46c0      	nop			; (mov r8, r8)
 800eaf4:	0800f278 	.word	0x0800f278

0800eaf8 <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800eaf8:	4a05      	ldr	r2, [pc, #20]	; (800eb10 <TimerExists+0x18>)
{
 800eafa:	0003      	movs	r3, r0
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800eafc:	6810      	ldr	r0, [r2, #0]

  while( cur != NULL )
 800eafe:	2800      	cmp	r0, #0
 800eb00:	d100      	bne.n	800eb04 <TimerExists+0xc>
      return true;
    }
    cur = cur->Next;
  }
  return false;
}
 800eb02:	4770      	bx	lr
    if( cur == TimerObject )
 800eb04:	4298      	cmp	r0, r3
 800eb06:	d001      	beq.n	800eb0c <TimerExists+0x14>
    cur = cur->Next;
 800eb08:	6940      	ldr	r0, [r0, #20]
 800eb0a:	e7f8      	b.n	800eafe <TimerExists+0x6>
      return true;
 800eb0c:	2001      	movs	r0, #1
 800eb0e:	e7f8      	b.n	800eb02 <TimerExists+0xa>
 800eb10:	20001108 	.word	0x20001108

0800eb14 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800eb14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800eb16:	4e0c      	ldr	r6, [pc, #48]	; (800eb48 <TimerSetTimeout+0x34>)
{
 800eb18:	0004      	movs	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800eb1a:	6a33      	ldr	r3, [r6, #32]
 800eb1c:	9301      	str	r3, [sp, #4]
 800eb1e:	4798      	blx	r3
  TimerObject->IsPending = 1;
 800eb20:	2301      	movs	r3, #1
 800eb22:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800eb24:	69b3      	ldr	r3, [r6, #24]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800eb26:	0005      	movs	r5, r0
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800eb28:	6827      	ldr	r7, [r4, #0]
 800eb2a:	9301      	str	r3, [sp, #4]
 800eb2c:	4798      	blx	r3
 800eb2e:	1940      	adds	r0, r0, r5
 800eb30:	4287      	cmp	r7, r0
 800eb32:	d203      	bcs.n	800eb3c <TimerSetTimeout+0x28>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800eb34:	9b01      	ldr	r3, [sp, #4]
 800eb36:	4798      	blx	r3
 800eb38:	1945      	adds	r5, r0, r5
 800eb3a:	6025      	str	r5, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800eb3c:	68b3      	ldr	r3, [r6, #8]
 800eb3e:	6820      	ldr	r0, [r4, #0]
 800eb40:	9301      	str	r3, [sp, #4]
 800eb42:	4798      	blx	r3
}
 800eb44:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800eb46:	46c0      	nop			; (mov r8, r8)
 800eb48:	0800f278 	.word	0x0800f278

0800eb4c <UTIL_TIMER_Stop>:
{
 800eb4c:	0003      	movs	r3, r0
 800eb4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    ret = UTIL_TIMER_INVALID_PARAM;
 800eb50:	2001      	movs	r0, #1
  if (NULL != TimerObject)
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d016      	beq.n	800eb84 <UTIL_TIMER_Stop+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eb56:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800eb5a:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800eb5c:	4c11      	ldr	r4, [pc, #68]	; (800eba4 <UTIL_TIMER_Stop+0x58>)
    TimerObject->IsReloadStopped = 1U;
 800eb5e:	7298      	strb	r0, [r3, #10]
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800eb60:	6822      	ldr	r2, [r4, #0]
    if(NULL != TimerListHead)
 800eb62:	2a00      	cmp	r2, #0
 800eb64:	d00b      	beq.n	800eb7e <UTIL_TIMER_Stop+0x32>
      TimerObject->IsRunning = 0U;
 800eb66:	2100      	movs	r1, #0
 800eb68:	7259      	strb	r1, [r3, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800eb6a:	4293      	cmp	r3, r2
 800eb6c:	d111      	bne.n	800eb92 <UTIL_TIMER_Stop+0x46>
 800eb6e:	695e      	ldr	r6, [r3, #20]
          TimerListHead->IsPending = 0;
 800eb70:	7219      	strb	r1, [r3, #8]
          if( TimerListHead->Next != NULL )
 800eb72:	428e      	cmp	r6, r1
 800eb74:	d007      	beq.n	800eb86 <UTIL_TIMER_Stop+0x3a>
            TimerSetTimeout( TimerListHead );
 800eb76:	0030      	movs	r0, r6
            TimerListHead = TimerListHead->Next;
 800eb78:	6026      	str	r6, [r4, #0]
            TimerSetTimeout( TimerListHead );
 800eb7a:	f7ff ffcb 	bl	800eb14 <TimerSetTimeout>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eb7e:	f385 8810 	msr	PRIMASK, r5
}
 800eb82:	2000      	movs	r0, #0
}
 800eb84:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
            UTIL_TimerDriver.StopTimerEvt( );
 800eb86:	4b08      	ldr	r3, [pc, #32]	; (800eba8 <UTIL_TIMER_Stop+0x5c>)
 800eb88:	68db      	ldr	r3, [r3, #12]
 800eb8a:	9301      	str	r3, [sp, #4]
 800eb8c:	4798      	blx	r3
            TimerListHead = NULL;
 800eb8e:	6026      	str	r6, [r4, #0]
 800eb90:	e7f5      	b.n	800eb7e <UTIL_TIMER_Stop+0x32>
            cur = cur->Next;
 800eb92:	0011      	movs	r1, r2
 800eb94:	6952      	ldr	r2, [r2, #20]
        while( cur != NULL )
 800eb96:	2a00      	cmp	r2, #0
 800eb98:	d0f1      	beq.n	800eb7e <UTIL_TIMER_Stop+0x32>
          if( cur == TimerObject )
 800eb9a:	4293      	cmp	r3, r2
 800eb9c:	d1f9      	bne.n	800eb92 <UTIL_TIMER_Stop+0x46>
            if( cur->Next != NULL )
 800eb9e:	695b      	ldr	r3, [r3, #20]
 800eba0:	614b      	str	r3, [r1, #20]
 800eba2:	e7ec      	b.n	800eb7e <UTIL_TIMER_Stop+0x32>
 800eba4:	20001108 	.word	0x20001108
 800eba8:	0800f278 	.word	0x0800f278

0800ebac <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800ebac:	4b09      	ldr	r3, [pc, #36]	; (800ebd4 <TimerInsertTimer+0x28>)
 800ebae:	681b      	ldr	r3, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800ebb0:	695a      	ldr	r2, [r3, #20]

  while (cur->Next != NULL )
 800ebb2:	6959      	ldr	r1, [r3, #20]
 800ebb4:	2900      	cmp	r1, #0
 800ebb6:	d102      	bne.n	800ebbe <TimerInsertTimer+0x12>
        TimerObject->Next = next;
        return;

    }
  }
  cur->Next = TimerObject;
 800ebb8:	6158      	str	r0, [r3, #20]
  TimerObject->Next = NULL;
 800ebba:	6141      	str	r1, [r0, #20]
 800ebbc:	e009      	b.n	800ebd2 <TimerInsertTimer+0x26>
    if( TimerObject->Timestamp  > next->Timestamp )
 800ebbe:	6801      	ldr	r1, [r0, #0]
 800ebc0:	468c      	mov	ip, r1
 800ebc2:	6811      	ldr	r1, [r2, #0]
 800ebc4:	458c      	cmp	ip, r1
 800ebc6:	d902      	bls.n	800ebce <TimerInsertTimer+0x22>
        next = next->Next;
 800ebc8:	0013      	movs	r3, r2
 800ebca:	6952      	ldr	r2, [r2, #20]
 800ebcc:	e7f1      	b.n	800ebb2 <TimerInsertTimer+0x6>
        cur->Next = TimerObject;
 800ebce:	6158      	str	r0, [r3, #20]
        TimerObject->Next = next;
 800ebd0:	6142      	str	r2, [r0, #20]
}
 800ebd2:	4770      	bx	lr
 800ebd4:	20001108 	.word	0x20001108

0800ebd8 <TimerInsertNewHeadTimer>:
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800ebd8:	4a05      	ldr	r2, [pc, #20]	; (800ebf0 <TimerInsertNewHeadTimer+0x18>)
{
 800ebda:	b510      	push	{r4, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800ebdc:	6813      	ldr	r3, [r2, #0]

  if( cur != NULL )
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d001      	beq.n	800ebe6 <TimerInsertNewHeadTimer+0xe>
  {
    cur->IsPending = 0;
 800ebe2:	2100      	movs	r1, #0
 800ebe4:	7219      	strb	r1, [r3, #8]
  }

  TimerObject->Next = cur;
 800ebe6:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 800ebe8:	6010      	str	r0, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800ebea:	f7ff ff93 	bl	800eb14 <TimerSetTimeout>
}
 800ebee:	bd10      	pop	{r4, pc}
 800ebf0:	20001108 	.word	0x20001108

0800ebf4 <UTIL_TIMER_Start>:
{
 800ebf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ebf6:	0004      	movs	r4, r0
    ret =  UTIL_TIMER_INVALID_PARAM;
 800ebf8:	2501      	movs	r5, #1
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800ebfa:	2800      	cmp	r0, #0
 800ebfc:	d025      	beq.n	800ec4a <UTIL_TIMER_Start+0x56>
 800ebfe:	f7ff ff7b 	bl	800eaf8 <TimerExists>
 800ec02:	2800      	cmp	r0, #0
 800ec04:	d121      	bne.n	800ec4a <UTIL_TIMER_Start+0x56>
 800ec06:	7a65      	ldrb	r5, [r4, #9]
 800ec08:	2d00      	cmp	r5, #0
 800ec0a:	d12e      	bne.n	800ec6a <UTIL_TIMER_Start+0x76>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ec0c:	f3ef 8310 	mrs	r3, PRIMASK
 800ec10:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800ec12:	b672      	cpsid	i
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800ec14:	4e16      	ldr	r6, [pc, #88]	; (800ec70 <UTIL_TIMER_Start+0x7c>)
    ticks = TimerObject->ReloadValue;
 800ec16:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800ec18:	6a33      	ldr	r3, [r6, #32]
 800ec1a:	9301      	str	r3, [sp, #4]
 800ec1c:	4798      	blx	r3
    TimerObject->Timestamp = ticks;
 800ec1e:	4287      	cmp	r7, r0
 800ec20:	d200      	bcs.n	800ec24 <UTIL_TIMER_Start+0x30>
 800ec22:	0007      	movs	r7, r0
    TimerObject->IsPending = 0U;
 800ec24:	2380      	movs	r3, #128	; 0x80
 800ec26:	005b      	lsls	r3, r3, #1
 800ec28:	8123      	strh	r3, [r4, #8]
    TimerObject->IsReloadStopped = 0U;
 800ec2a:	2300      	movs	r3, #0
    TimerObject->Timestamp = ticks;
 800ec2c:	6027      	str	r7, [r4, #0]
    if( TimerListHead == NULL )
 800ec2e:	4f11      	ldr	r7, [pc, #68]	; (800ec74 <UTIL_TIMER_Start+0x80>)
    TimerObject->IsReloadStopped = 0U;
 800ec30:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 800ec32:	683b      	ldr	r3, [r7, #0]
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d10a      	bne.n	800ec4e <UTIL_TIMER_Start+0x5a>
      UTIL_TimerDriver.SetTimerContext();
 800ec38:	6933      	ldr	r3, [r6, #16]
 800ec3a:	9301      	str	r3, [sp, #4]
 800ec3c:	4798      	blx	r3
        TimerInsertNewHeadTimer( TimerObject);
 800ec3e:	0020      	movs	r0, r4
 800ec40:	f7ff ffca 	bl	800ebd8 <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ec44:	9b00      	ldr	r3, [sp, #0]
 800ec46:	f383 8810 	msr	PRIMASK, r3
}
 800ec4a:	0028      	movs	r0, r5
 800ec4c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800ec4e:	69b3      	ldr	r3, [r6, #24]
 800ec50:	9301      	str	r3, [sp, #4]
 800ec52:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 800ec54:	6823      	ldr	r3, [r4, #0]
 800ec56:	18c0      	adds	r0, r0, r3
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800ec58:	683b      	ldr	r3, [r7, #0]
      TimerObject->Timestamp += elapsedTime;
 800ec5a:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	4298      	cmp	r0, r3
 800ec60:	d3ed      	bcc.n	800ec3e <UTIL_TIMER_Start+0x4a>
        TimerInsertTimer( TimerObject);
 800ec62:	0020      	movs	r0, r4
 800ec64:	f7ff ffa2 	bl	800ebac <TimerInsertTimer>
 800ec68:	e7ec      	b.n	800ec44 <UTIL_TIMER_Start+0x50>
    ret =  UTIL_TIMER_INVALID_PARAM;
 800ec6a:	2501      	movs	r5, #1
 800ec6c:	e7ed      	b.n	800ec4a <UTIL_TIMER_Start+0x56>
 800ec6e:	46c0      	nop			; (mov r8, r8)
 800ec70:	0800f278 	.word	0x0800f278
 800ec74:	20001108 	.word	0x20001108

0800ec78 <UTIL_TIMER_StartWithPeriod>:
{
 800ec78:	b513      	push	{r0, r1, r4, lr}
 800ec7a:	0004      	movs	r4, r0
    ret = UTIL_TIMER_INVALID_PARAM;
 800ec7c:	2001      	movs	r0, #1
  if(NULL == TimerObject)
 800ec7e:	2c00      	cmp	r4, #0
 800ec80:	d010      	beq.n	800eca4 <UTIL_TIMER_StartWithPeriod+0x2c>
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800ec82:	4b09      	ldr	r3, [pc, #36]	; (800eca8 <UTIL_TIMER_StartWithPeriod+0x30>)
 800ec84:	0008      	movs	r0, r1
 800ec86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec88:	9301      	str	r3, [sp, #4]
 800ec8a:	4798      	blx	r3
 800ec8c:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 800ec8e:	0020      	movs	r0, r4
 800ec90:	f7ff ff32 	bl	800eaf8 <TimerExists>
 800ec94:	2800      	cmp	r0, #0
 800ec96:	d002      	beq.n	800ec9e <UTIL_TIMER_StartWithPeriod+0x26>
      (void)UTIL_TIMER_Stop(TimerObject);
 800ec98:	0020      	movs	r0, r4
 800ec9a:	f7ff ff57 	bl	800eb4c <UTIL_TIMER_Stop>
    ret = UTIL_TIMER_Start(TimerObject);
 800ec9e:	0020      	movs	r0, r4
 800eca0:	f7ff ffa8 	bl	800ebf4 <UTIL_TIMER_Start>
}
 800eca4:	bd16      	pop	{r1, r2, r4, pc}
 800eca6:	46c0      	nop			; (mov r8, r8)
 800eca8:	0800f278 	.word	0x0800f278

0800ecac <UTIL_TIMER_SetPeriod>:
{
 800ecac:	b513      	push	{r0, r1, r4, lr}
	  ret = UTIL_TIMER_INVALID_PARAM;
 800ecae:	2301      	movs	r3, #1
{
 800ecb0:	0004      	movs	r4, r0
 800ecb2:	0008      	movs	r0, r1
  if(NULL == TimerObject)
 800ecb4:	2c00      	cmp	r4, #0
 800ecb6:	d011      	beq.n	800ecdc <UTIL_TIMER_SetPeriod+0x30>
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800ecb8:	4b09      	ldr	r3, [pc, #36]	; (800ece0 <UTIL_TIMER_SetPeriod+0x34>)
 800ecba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ecbc:	9301      	str	r3, [sp, #4]
 800ecbe:	4798      	blx	r3
 800ecc0:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 800ecc2:	0020      	movs	r0, r4
 800ecc4:	f7ff ff18 	bl	800eaf8 <TimerExists>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800ecc8:	2300      	movs	r3, #0
    if(TimerExists(TimerObject))
 800ecca:	4298      	cmp	r0, r3
 800eccc:	d006      	beq.n	800ecdc <UTIL_TIMER_SetPeriod+0x30>
      (void)UTIL_TIMER_Stop(TimerObject);
 800ecce:	0020      	movs	r0, r4
 800ecd0:	f7ff ff3c 	bl	800eb4c <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800ecd4:	0020      	movs	r0, r4
 800ecd6:	f7ff ff8d 	bl	800ebf4 <UTIL_TIMER_Start>
 800ecda:	0003      	movs	r3, r0
}
 800ecdc:	0018      	movs	r0, r3
 800ecde:	bd16      	pop	{r1, r2, r4, pc}
 800ece0:	0800f278 	.word	0x0800f278

0800ece4 <UTIL_TIMER_IRQ_Handler>:
{
 800ece4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ece6:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800ecea:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 800ecec:	4e1e      	ldr	r6, [pc, #120]	; (800ed68 <UTIL_TIMER_IRQ_Handler+0x84>)
 800ecee:	6973      	ldr	r3, [r6, #20]
 800ecf0:	9301      	str	r3, [sp, #4]
 800ecf2:	4798      	blx	r3
  now  =  UTIL_TimerDriver.SetTimerContext( );
 800ecf4:	6933      	ldr	r3, [r6, #16]
  old  =  UTIL_TimerDriver.GetTimerContext( );
 800ecf6:	0004      	movs	r4, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 800ecf8:	9301      	str	r3, [sp, #4]
 800ecfa:	4798      	blx	r3
  if ( TimerListHead != NULL )
 800ecfc:	4d1b      	ldr	r5, [pc, #108]	; (800ed6c <UTIL_TIMER_IRQ_Handler+0x88>)
  DeltaContext = now  - old; /*intentional wrap around */
 800ecfe:	1b01      	subs	r1, r0, r4
  if ( TimerListHead != NULL )
 800ed00:	682b      	ldr	r3, [r5, #0]
        cur->Timestamp -= DeltaContext;
 800ed02:	1a24      	subs	r4, r4, r0
  if ( TimerListHead != NULL )
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d01f      	beq.n	800ed48 <UTIL_TIMER_IRQ_Handler+0x64>
      if (cur->Timestamp > DeltaContext)
 800ed08:	6818      	ldr	r0, [r3, #0]
        cur->Timestamp = 0;
 800ed0a:	2200      	movs	r2, #0
      if (cur->Timestamp > DeltaContext)
 800ed0c:	4288      	cmp	r0, r1
 800ed0e:	d900      	bls.n	800ed12 <UTIL_TIMER_IRQ_Handler+0x2e>
        cur->Timestamp -= DeltaContext;
 800ed10:	1822      	adds	r2, r4, r0
 800ed12:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 800ed14:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 800ed16:	e7f5      	b.n	800ed04 <UTIL_TIMER_IRQ_Handler+0x20>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800ed18:	681c      	ldr	r4, [r3, #0]
 800ed1a:	2c00      	cmp	r4, #0
 800ed1c:	d004      	beq.n	800ed28 <UTIL_TIMER_IRQ_Handler+0x44>
 800ed1e:	69b3      	ldr	r3, [r6, #24]
 800ed20:	9301      	str	r3, [sp, #4]
 800ed22:	4798      	blx	r3
 800ed24:	4284      	cmp	r4, r0
 800ed26:	d212      	bcs.n	800ed4e <UTIL_TIMER_IRQ_Handler+0x6a>
      cur = TimerListHead;
 800ed28:	682c      	ldr	r4, [r5, #0]
      TimerListHead = TimerListHead->Next;
 800ed2a:	6963      	ldr	r3, [r4, #20]
      cur->Callback(cur->argument);
 800ed2c:	6920      	ldr	r0, [r4, #16]
      TimerListHead = TimerListHead->Next;
 800ed2e:	602b      	str	r3, [r5, #0]
      cur->IsPending = 0;
 800ed30:	2300      	movs	r3, #0
 800ed32:	8123      	strh	r3, [r4, #8]
      cur->Callback(cur->argument);
 800ed34:	68e3      	ldr	r3, [r4, #12]
 800ed36:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 800ed38:	2280      	movs	r2, #128	; 0x80
 800ed3a:	8963      	ldrh	r3, [r4, #10]
 800ed3c:	0052      	lsls	r2, r2, #1
 800ed3e:	4293      	cmp	r3, r2
 800ed40:	d102      	bne.n	800ed48 <UTIL_TIMER_IRQ_Handler+0x64>
        (void)UTIL_TIMER_Start(cur);
 800ed42:	0020      	movs	r0, r4
 800ed44:	f7ff ff56 	bl	800ebf4 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800ed48:	682b      	ldr	r3, [r5, #0]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d1e4      	bne.n	800ed18 <UTIL_TIMER_IRQ_Handler+0x34>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 800ed4e:	6828      	ldr	r0, [r5, #0]
 800ed50:	2800      	cmp	r0, #0
 800ed52:	d102      	bne.n	800ed5a <UTIL_TIMER_IRQ_Handler+0x76>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ed54:	f387 8810 	msr	PRIMASK, r7
}
 800ed58:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 800ed5a:	7a03      	ldrb	r3, [r0, #8]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d1f9      	bne.n	800ed54 <UTIL_TIMER_IRQ_Handler+0x70>
    TimerSetTimeout( TimerListHead );
 800ed60:	f7ff fed8 	bl	800eb14 <TimerSetTimeout>
 800ed64:	e7f6      	b.n	800ed54 <UTIL_TIMER_IRQ_Handler+0x70>
 800ed66:	46c0      	nop			; (mov r8, r8)
 800ed68:	0800f278 	.word	0x0800f278
 800ed6c:	20001108 	.word	0x20001108

0800ed70 <TRACE_AllocateBufer>:
  * @param  Size to allocate within fifo
  * @param  Pos position within the fifo
  * @retval write position inside the buffer is -1 no space available.
  */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 800ed70:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ed72:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800ed76:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if (ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 800ed78:	4b16      	ldr	r3, [pc, #88]	; (800edd4 <TRACE_AllocateBufer+0x64>)
 800ed7a:	8a5d      	ldrh	r5, [r3, #18]
 800ed7c:	8a1a      	ldrh	r2, [r3, #16]
 800ed7e:	4295      	cmp	r5, r2
 800ed80:	d114      	bne.n	800edac <TRACE_AllocateBufer+0x3c>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800ed82:	2280      	movs	r2, #128	; 0x80
 800ed84:	0092      	lsls	r2, r2, #2
 800ed86:	1b52      	subs	r2, r2, r5
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 800ed88:	b292      	uxth	r2, r2
 800ed8a:	4290      	cmp	r0, r2
 800ed8c:	d306      	bcc.n	800ed9c <TRACE_AllocateBufer+0x2c>
 800ed8e:	4285      	cmp	r5, r0
 800ed90:	d916      	bls.n	800edc0 <TRACE_AllocateBufer+0x50>
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800ed92:	2201      	movs	r2, #1
 800ed94:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 800ed96:	2200      	movs	r2, #0
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800ed98:	801d      	strh	r5, [r3, #0]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 800ed9a:	825a      	strh	r2, [r3, #18]
#endif
  }
  
  if (freesize > Size)
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 800ed9c:	8a5a      	ldrh	r2, [r3, #18]
 800ed9e:	800a      	strh	r2, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 800eda0:	1812      	adds	r2, r2, r0
 800eda2:	05d2      	lsls	r2, r2, #23
 800eda4:	0dd2      	lsrs	r2, r2, #23
    ret = 0;
 800eda6:	2000      	movs	r0, #0
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 800eda8:	825a      	strh	r2, [r3, #18]
    ret = 0;
 800edaa:	e00b      	b.n	800edc4 <TRACE_AllocateBufer+0x54>
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800edac:	4295      	cmp	r5, r2
 800edae:	d90c      	bls.n	800edca <TRACE_AllocateBufer+0x5a>
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800edb0:	2680      	movs	r6, #128	; 0x80
 800edb2:	00b6      	lsls	r6, r6, #2
 800edb4:	1b76      	subs	r6, r6, r5
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 800edb6:	b2b6      	uxth	r6, r6
 800edb8:	4286      	cmp	r6, r0
 800edba:	d8ef      	bhi.n	800ed9c <TRACE_AllocateBufer+0x2c>
 800edbc:	4282      	cmp	r2, r0
 800edbe:	d8e8      	bhi.n	800ed92 <TRACE_AllocateBufer+0x22>
  int16_t ret = -1;
 800edc0:	2001      	movs	r0, #1
 800edc2:	4240      	negs	r0, r0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800edc4:	f384 8810 	msr	PRIMASK, r4
#endif
  }

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();  
  return ret;
}
 800edc8:	bd70      	pop	{r4, r5, r6, pc}
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 800edca:	1b52      	subs	r2, r2, r5
  if (freesize > Size)
 800edcc:	b292      	uxth	r2, r2
 800edce:	4282      	cmp	r2, r0
 800edd0:	d8e4      	bhi.n	800ed9c <TRACE_AllocateBufer+0x2c>
 800edd2:	e7f5      	b.n	800edc0 <TRACE_AllocateBufer+0x50>
 800edd4:	2000130c 	.word	0x2000130c

0800edd8 <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800edd8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800eddc:	b672      	cpsid	i
  * @retval None.
  */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 800edde:	4a03      	ldr	r2, [pc, #12]	; (800edec <TRACE_Lock+0x14>)
 800ede0:	8ad3      	ldrh	r3, [r2, #22]
 800ede2:	3301      	adds	r3, #1
 800ede4:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ede6:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800edea:	4770      	bx	lr
 800edec:	2000130c 	.word	0x2000130c

0800edf0 <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800edf0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800edf4:	b672      	cpsid	i
  * @retval None.
  */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 800edf6:	4a03      	ldr	r2, [pc, #12]	; (800ee04 <TRACE_UnLock+0x14>)
 800edf8:	8ad3      	ldrh	r3, [r2, #22]
 800edfa:	3b01      	subs	r3, #1
 800edfc:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800edfe:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800ee02:	4770      	bx	lr
 800ee04:	2000130c 	.word	0x2000130c

0800ee08 <UTIL_ADV_TRACE_Init>:
{
 800ee08:	b510      	push	{r4, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 800ee0a:	2218      	movs	r2, #24
 800ee0c:	2100      	movs	r1, #0
 800ee0e:	4807      	ldr	r0, [pc, #28]	; (800ee2c <UTIL_ADV_TRACE_Init+0x24>)
 800ee10:	f7ff fba2 	bl	800e558 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 800ee14:	2280      	movs	r2, #128	; 0x80
 800ee16:	2100      	movs	r1, #0
 800ee18:	4805      	ldr	r0, [pc, #20]	; (800ee30 <UTIL_ADV_TRACE_Init+0x28>)
 800ee1a:	0092      	lsls	r2, r2, #2
 800ee1c:	f7ff fb9c 	bl	800e558 <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 800ee20:	4b04      	ldr	r3, [pc, #16]	; (800ee34 <UTIL_ADV_TRACE_Init+0x2c>)
 800ee22:	4805      	ldr	r0, [pc, #20]	; (800ee38 <UTIL_ADV_TRACE_Init+0x30>)
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	4798      	blx	r3
}
 800ee28:	bd10      	pop	{r4, pc}
 800ee2a:	46c0      	nop			; (mov r8, r8)
 800ee2c:	2000130c 	.word	0x2000130c
 800ee30:	2000110c 	.word	0x2000110c
 800ee34:	0800f450 	.word	0x0800f450
 800ee38:	0800efb5 	.word	0x0800efb5

0800ee3c <UTIL_ADV_TRACE_StartRxProcess>:
{
 800ee3c:	b510      	push	{r4, lr}
  return UTIL_TraceDriver.StartRx(UserCallback);
 800ee3e:	4b02      	ldr	r3, [pc, #8]	; (800ee48 <UTIL_ADV_TRACE_StartRxProcess+0xc>)
 800ee40:	689b      	ldr	r3, [r3, #8]
 800ee42:	4798      	blx	r3
}
 800ee44:	bd10      	pop	{r4, pc}
 800ee46:	46c0      	nop			; (mov r8, r8)
 800ee48:	0800f450 	.word	0x0800f450

0800ee4c <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
	ADV_TRACE_Ctx.timestamp_func = *cb;
 800ee4c:	4b01      	ldr	r3, [pc, #4]	; (800ee54 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 800ee4e:	6058      	str	r0, [r3, #4]
}
 800ee50:	4770      	bx	lr
 800ee52:	46c0      	nop			; (mov r8, r8)
 800ee54:	2000130c 	.word	0x2000130c

0800ee58 <UTIL_ADV_TRACE_SetVerboseLevel>:
	ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 800ee58:	4b01      	ldr	r3, [pc, #4]	; (800ee60 <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 800ee5a:	7218      	strb	r0, [r3, #8]
}
 800ee5c:	4770      	bx	lr
 800ee5e:	46c0      	nop			; (mov r8, r8)
 800ee60:	2000130c 	.word	0x2000130c

0800ee64 <TRACE_Send>:
{
 800ee64:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ee66:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800ee6a:	b672      	cpsid	i
  * @brief  UnLock the trace buffer.
  * @retval None.
  */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 800ee6c:	4c1b      	ldr	r4, [pc, #108]	; (800eedc <TRACE_Send+0x78>)
  if(TRACE_IsLocked() == 0u)
 800ee6e:	8ae5      	ldrh	r5, [r4, #22]
 800ee70:	2d00      	cmp	r5, #0
 800ee72:	d12e      	bne.n	800eed2 <TRACE_Send+0x6e>
    TRACE_Lock();
 800ee74:	f7ff ffb0 	bl	800edd8 <TRACE_Lock>
    if (ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 800ee78:	8a20      	ldrh	r0, [r4, #16]
 800ee7a:	8a62      	ldrh	r2, [r4, #18]
 800ee7c:	4290      	cmp	r0, r2
 800ee7e:	d026      	beq.n	800eece <TRACE_Send+0x6a>
   	  if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800ee80:	78a1      	ldrb	r1, [r4, #2]
 800ee82:	2901      	cmp	r1, #1
 800ee84:	d110      	bne.n	800eea8 <TRACE_Send+0x44>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t)(ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 800ee86:	8823      	ldrh	r3, [r4, #0]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800ee88:	3101      	adds	r1, #1
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t)(ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 800ee8a:	1a1b      	subs	r3, r3, r0
 800ee8c:	b29b      	uxth	r3, r3
 800ee8e:	82a3      	strh	r3, [r4, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800ee90:	70a1      	strb	r1, [r4, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 800ee92:	8025      	strh	r5, [r4, #0]
        if (0u == ADV_TRACE_Ctx.TraceSentSize)
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d109      	bne.n	800eeac <TRACE_Send+0x48>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800ee98:	70a3      	strb	r3, [r4, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 800ee9a:	8223      	strh	r3, [r4, #16]
   	    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800ee9c:	8a23      	ldrh	r3, [r4, #16]
 800ee9e:	429a      	cmp	r2, r3
 800eea0:	d912      	bls.n	800eec8 <TRACE_Send+0x64>
        	ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800eea2:	1ad2      	subs	r2, r2, r3
 800eea4:	82a2      	strh	r2, [r4, #20]
 800eea6:	e001      	b.n	800eeac <TRACE_Send+0x48>
   	  if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800eea8:	2900      	cmp	r1, #0
 800eeaa:	d0f7      	beq.n	800ee9c <TRACE_Send+0x38>
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800eeac:	8a25      	ldrh	r5, [r4, #16]
 800eeae:	4b0c      	ldr	r3, [pc, #48]	; (800eee0 <TRACE_Send+0x7c>)
 800eeb0:	18ed      	adds	r5, r5, r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eeb2:	f386 8810 	msr	PRIMASK, r6
      UTIL_ADV_TRACE_PreSendHook(); 
 800eeb6:	f7f3 ff73 	bl	8002da0 <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800eeba:	4b0a      	ldr	r3, [pc, #40]	; (800eee4 <TRACE_Send+0x80>)
 800eebc:	8aa1      	ldrh	r1, [r4, #20]
 800eebe:	68db      	ldr	r3, [r3, #12]
 800eec0:	0028      	movs	r0, r5
 800eec2:	9301      	str	r3, [sp, #4]
 800eec4:	4798      	blx	r3
}
 800eec6:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
        	ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800eec8:	2280      	movs	r2, #128	; 0x80
 800eeca:	0092      	lsls	r2, r2, #2
 800eecc:	e7e9      	b.n	800eea2 <TRACE_Send+0x3e>
      TRACE_UnLock();
 800eece:	f7ff ff8f 	bl	800edf0 <TRACE_UnLock>
 800eed2:	f386 8810 	msr	PRIMASK, r6
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;  
 800eed6:	2000      	movs	r0, #0
}
 800eed8:	e7f5      	b.n	800eec6 <TRACE_Send+0x62>
 800eeda:	46c0      	nop			; (mov r8, r8)
 800eedc:	2000130c 	.word	0x2000130c
 800eee0:	2000110c 	.word	0x2000110c
 800eee4:	0800f450 	.word	0x0800f450

0800eee8 <UTIL_ADV_TRACE_COND_FSend>:
{
 800eee8:	b408      	push	{r3}
 800eeea:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eeec:	b086      	sub	sp, #24
  uint16_t timestamp_size = 0u;
 800eeee:	2300      	movs	r3, #0
 800eef0:	466c      	mov	r4, sp
 800eef2:	8023      	strh	r3, [r4, #0]
  if (!( ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 800eef4:	4b2c      	ldr	r3, [pc, #176]	; (800efa8 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 800eef6:	7a1c      	ldrb	r4, [r3, #8]
 800eef8:	4284      	cmp	r4, r0
 800eefa:	d350      	bcc.n	800ef9e <UTIL_ADV_TRACE_COND_FSend+0xb6>
  if(( Region & ADV_TRACE_Ctx.RegionMask) != Region)
 800eefc:	68d8      	ldr	r0, [r3, #12]
 800eefe:	4008      	ands	r0, r1
 800ef00:	4288      	cmp	r0, r1
 800ef02:	d14e      	bne.n	800efa2 <UTIL_ADV_TRACE_COND_FSend+0xba>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 800ef04:	685b      	ldr	r3, [r3, #4]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d004      	beq.n	800ef14 <UTIL_ADV_TRACE_COND_FSend+0x2c>
 800ef0a:	2a00      	cmp	r2, #0
 800ef0c:	d002      	beq.n	800ef14 <UTIL_ADV_TRACE_COND_FSend+0x2c>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 800ef0e:	4669      	mov	r1, sp
 800ef10:	a802      	add	r0, sp, #8
 800ef12:	4798      	blx	r3
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800ef14:	2180      	movs	r1, #128	; 0x80
  va_start( vaArgs, strFormat);
 800ef16:	ab0c      	add	r3, sp, #48	; 0x30
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800ef18:	0049      	lsls	r1, r1, #1
 800ef1a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ef1c:	4823      	ldr	r0, [pc, #140]	; (800efac <UTIL_ADV_TRACE_COND_FSend+0xc4>)
  va_start( vaArgs, strFormat);
 800ef1e:	9301      	str	r3, [sp, #4]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800ef20:	f7ff fbbc 	bl	800e69c <tiny_vsnprintf_like>
 800ef24:	0005      	movs	r5, r0
  TRACE_Lock();
 800ef26:	f7ff ff57 	bl	800edd8 <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 800ef2a:	466b      	mov	r3, sp
 800ef2c:	8818      	ldrh	r0, [r3, #0]
 800ef2e:	1c9c      	adds	r4, r3, #2
 800ef30:	1940      	adds	r0, r0, r5
 800ef32:	0021      	movs	r1, r4
 800ef34:	b280      	uxth	r0, r0
 800ef36:	f7ff ff1b 	bl	800ed70 <TRACE_AllocateBufer>
 800ef3a:	1c43      	adds	r3, r0, #1
 800ef3c:	d02a      	beq.n	800ef94 <UTIL_ADV_TRACE_COND_FSend+0xac>
    for (idx = 0u; idx < timestamp_size; idx++)
 800ef3e:	2200      	movs	r2, #0
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800ef40:	2101      	movs	r1, #1
    for (idx = 0u; idx < timestamp_size; idx++)
 800ef42:	466b      	mov	r3, sp
 800ef44:	0015      	movs	r5, r2
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800ef46:	468c      	mov	ip, r1
    for (idx = 0u; idx < timestamp_size; idx++)
 800ef48:	881b      	ldrh	r3, [r3, #0]
 800ef4a:	8826      	ldrh	r6, [r4, #0]
 800ef4c:	4818      	ldr	r0, [pc, #96]	; (800efb0 <UTIL_ADV_TRACE_COND_FSend+0xc8>)
 800ef4e:	b297      	uxth	r7, r2
 800ef50:	19f1      	adds	r1, r6, r7
 800ef52:	b289      	uxth	r1, r1
 800ef54:	42bb      	cmp	r3, r7
 800ef56:	d815      	bhi.n	800ef84 <UTIL_ADV_TRACE_COND_FSend+0x9c>
 800ef58:	199b      	adds	r3, r3, r6
 800ef5a:	b29b      	uxth	r3, r3
 800ef5c:	2d00      	cmp	r5, #0
 800ef5e:	d000      	beq.n	800ef62 <UTIL_ADV_TRACE_COND_FSend+0x7a>
 800ef60:	8023      	strh	r3, [r4, #0]
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800ef62:	2180      	movs	r1, #128	; 0x80
 800ef64:	8823      	ldrh	r3, [r4, #0]
 800ef66:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ef68:	0049      	lsls	r1, r1, #1
 800ef6a:	18c0      	adds	r0, r0, r3
 800ef6c:	9b01      	ldr	r3, [sp, #4]
 800ef6e:	f7ff fb95 	bl	800e69c <tiny_vsnprintf_like>
    TRACE_UnLock();
 800ef72:	f7ff ff3d 	bl	800edf0 <TRACE_UnLock>
    return TRACE_Send();
 800ef76:	f7ff ff75 	bl	800ee64 <TRACE_Send>
}
 800ef7a:	b006      	add	sp, #24
 800ef7c:	bcf0      	pop	{r4, r5, r6, r7}
 800ef7e:	bc08      	pop	{r3}
 800ef80:	b001      	add	sp, #4
 800ef82:	4718      	bx	r3
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800ef84:	466d      	mov	r5, sp
 800ef86:	2708      	movs	r7, #8
 800ef88:	19ed      	adds	r5, r5, r7
 800ef8a:	5cad      	ldrb	r5, [r5, r2]
 800ef8c:	3201      	adds	r2, #1
 800ef8e:	5445      	strb	r5, [r0, r1]
 800ef90:	4665      	mov	r5, ip
 800ef92:	e7dc      	b.n	800ef4e <UTIL_ADV_TRACE_COND_FSend+0x66>
  TRACE_UnLock();
 800ef94:	f7ff ff2c 	bl	800edf0 <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 800ef98:	2003      	movs	r0, #3
    return UTIL_ADV_TRACE_REGIONMASKED;
 800ef9a:	4240      	negs	r0, r0
 800ef9c:	e7ed      	b.n	800ef7a <UTIL_ADV_TRACE_COND_FSend+0x92>
    return UTIL_ADV_TRACE_GIVEUP;
 800ef9e:	2005      	movs	r0, #5
 800efa0:	e7fb      	b.n	800ef9a <UTIL_ADV_TRACE_COND_FSend+0xb2>
    return UTIL_ADV_TRACE_REGIONMASKED;
 800efa2:	2006      	movs	r0, #6
 800efa4:	e7f9      	b.n	800ef9a <UTIL_ADV_TRACE_COND_FSend+0xb2>
 800efa6:	46c0      	nop			; (mov r8, r8)
 800efa8:	2000130c 	.word	0x2000130c
 800efac:	20001324 	.word	0x20001324
 800efb0:	2000110c 	.word	0x2000110c

0800efb4 <TRACE_TxCpltCallback>:
{ 
 800efb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800efb6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800efba:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 800efbc:	4b1f      	ldr	r3, [pc, #124]	; (800f03c <TRACE_TxCpltCallback+0x88>)
 800efbe:	789a      	ldrb	r2, [r3, #2]
 800efc0:	2a02      	cmp	r2, #2
 800efc2:	d11e      	bne.n	800f002 <TRACE_TxCpltCallback+0x4e>
	  ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800efc4:	2200      	movs	r2, #0
 800efc6:	709a      	strb	r2, [r3, #2]
	  ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 800efc8:	821a      	strh	r2, [r3, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 800efca:	8a1d      	ldrh	r5, [r3, #16]
 800efcc:	8a59      	ldrh	r1, [r3, #18]
 800efce:	428d      	cmp	r5, r1
 800efd0:	d02d      	beq.n	800f02e <TRACE_TxCpltCallback+0x7a>
 800efd2:	8ada      	ldrh	r2, [r3, #22]
 800efd4:	2a01      	cmp	r2, #1
 800efd6:	d12a      	bne.n	800f02e <TRACE_TxCpltCallback+0x7a>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800efd8:	7898      	ldrb	r0, [r3, #2]
 800efda:	2801      	cmp	r0, #1
 800efdc:	d117      	bne.n	800f00e <TRACE_TxCpltCallback+0x5a>
   		ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800efde:	3001      	adds	r0, #1
 800efe0:	7098      	strb	r0, [r3, #2]
   		ADV_TRACE_Ctx.unchunk_enabled = 0;
 800efe2:	2000      	movs	r0, #0
   		ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 800efe4:	881a      	ldrh	r2, [r3, #0]
   		ADV_TRACE_Ctx.unchunk_enabled = 0;
 800efe6:	8018      	strh	r0, [r3, #0]
   		ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 800efe8:	1b52      	subs	r2, r2, r5
 800efea:	b292      	uxth	r2, r2
 800efec:	829a      	strh	r2, [r3, #20]
    	if (0u == ADV_TRACE_Ctx.TraceSentSize)
 800efee:	4282      	cmp	r2, r0
 800eff0:	d10f      	bne.n	800f012 <TRACE_TxCpltCallback+0x5e>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800eff2:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 800eff4:	821a      	strh	r2, [r3, #16]
      if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800eff6:	8a1a      	ldrh	r2, [r3, #16]
 800eff8:	4291      	cmp	r1, r2
 800effa:	d915      	bls.n	800f028 <TRACE_TxCpltCallback+0x74>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800effc:	1a89      	subs	r1, r1, r2
 800effe:	8299      	strh	r1, [r3, #20]
 800f000:	e007      	b.n	800f012 <TRACE_TxCpltCallback+0x5e>
	  ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 800f002:	8a1a      	ldrh	r2, [r3, #16]
 800f004:	8a99      	ldrh	r1, [r3, #20]
 800f006:	1852      	adds	r2, r2, r1
 800f008:	05d2      	lsls	r2, r2, #23
 800f00a:	0dd2      	lsrs	r2, r2, #23
 800f00c:	e7dc      	b.n	800efc8 <TRACE_TxCpltCallback+0x14>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800f00e:	2800      	cmp	r0, #0
 800f010:	d0f1      	beq.n	800eff6 <TRACE_TxCpltCallback+0x42>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f012:	f384 8810 	msr	PRIMASK, r4
    UTIL_TraceDriver.Send(&ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr], ADV_TRACE_Ctx.TraceSentSize);
 800f016:	8a18      	ldrh	r0, [r3, #16]
 800f018:	8a99      	ldrh	r1, [r3, #20]
 800f01a:	4b09      	ldr	r3, [pc, #36]	; (800f040 <TRACE_TxCpltCallback+0x8c>)
 800f01c:	18c0      	adds	r0, r0, r3
 800f01e:	4b09      	ldr	r3, [pc, #36]	; (800f044 <TRACE_TxCpltCallback+0x90>)
 800f020:	68db      	ldr	r3, [r3, #12]
 800f022:	9301      	str	r3, [sp, #4]
 800f024:	4798      	blx	r3
}
 800f026:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800f028:	2180      	movs	r1, #128	; 0x80
 800f02a:	0089      	lsls	r1, r1, #2
 800f02c:	e7e6      	b.n	800effc <TRACE_TxCpltCallback+0x48>
    UTIL_ADV_TRACE_PostSendHook();      
 800f02e:	f7f3 febd 	bl	8002dac <UTIL_ADV_TRACE_PostSendHook>
 800f032:	f384 8810 	msr	PRIMASK, r4
    TRACE_UnLock();
 800f036:	f7ff fedb 	bl	800edf0 <TRACE_UnLock>
}
 800f03a:	e7f4      	b.n	800f026 <TRACE_TxCpltCallback+0x72>
 800f03c:	2000130c 	.word	0x2000130c
 800f040:	2000110c 	.word	0x2000110c
 800f044:	0800f450 	.word	0x0800f450

0800f048 <__libc_init_array>:
 800f048:	b570      	push	{r4, r5, r6, lr}
 800f04a:	2600      	movs	r6, #0
 800f04c:	4d0c      	ldr	r5, [pc, #48]	; (800f080 <__libc_init_array+0x38>)
 800f04e:	4c0d      	ldr	r4, [pc, #52]	; (800f084 <__libc_init_array+0x3c>)
 800f050:	1b64      	subs	r4, r4, r5
 800f052:	10a4      	asrs	r4, r4, #2
 800f054:	42a6      	cmp	r6, r4
 800f056:	d109      	bne.n	800f06c <__libc_init_array+0x24>
 800f058:	2600      	movs	r6, #0
 800f05a:	f000 f8b5 	bl	800f1c8 <_init>
 800f05e:	4d0a      	ldr	r5, [pc, #40]	; (800f088 <__libc_init_array+0x40>)
 800f060:	4c0a      	ldr	r4, [pc, #40]	; (800f08c <__libc_init_array+0x44>)
 800f062:	1b64      	subs	r4, r4, r5
 800f064:	10a4      	asrs	r4, r4, #2
 800f066:	42a6      	cmp	r6, r4
 800f068:	d105      	bne.n	800f076 <__libc_init_array+0x2e>
 800f06a:	bd70      	pop	{r4, r5, r6, pc}
 800f06c:	00b3      	lsls	r3, r6, #2
 800f06e:	58eb      	ldr	r3, [r5, r3]
 800f070:	4798      	blx	r3
 800f072:	3601      	adds	r6, #1
 800f074:	e7ee      	b.n	800f054 <__libc_init_array+0xc>
 800f076:	00b3      	lsls	r3, r6, #2
 800f078:	58eb      	ldr	r3, [r5, r3]
 800f07a:	4798      	blx	r3
 800f07c:	3601      	adds	r6, #1
 800f07e:	e7f2      	b.n	800f066 <__libc_init_array+0x1e>
 800f080:	0800fe58 	.word	0x0800fe58
 800f084:	0800fe58 	.word	0x0800fe58
 800f088:	0800fe58 	.word	0x0800fe58
 800f08c:	0800fe5c 	.word	0x0800fe5c

0800f090 <memcpy>:
 800f090:	2300      	movs	r3, #0
 800f092:	b510      	push	{r4, lr}
 800f094:	429a      	cmp	r2, r3
 800f096:	d100      	bne.n	800f09a <memcpy+0xa>
 800f098:	bd10      	pop	{r4, pc}
 800f09a:	5ccc      	ldrb	r4, [r1, r3]
 800f09c:	54c4      	strb	r4, [r0, r3]
 800f09e:	3301      	adds	r3, #1
 800f0a0:	e7f8      	b.n	800f094 <memcpy+0x4>

0800f0a2 <memset>:
 800f0a2:	0003      	movs	r3, r0
 800f0a4:	1882      	adds	r2, r0, r2
 800f0a6:	4293      	cmp	r3, r2
 800f0a8:	d100      	bne.n	800f0ac <memset+0xa>
 800f0aa:	4770      	bx	lr
 800f0ac:	7019      	strb	r1, [r3, #0]
 800f0ae:	3301      	adds	r3, #1
 800f0b0:	e7f9      	b.n	800f0a6 <memset+0x4>
	...

0800f0b4 <floor>:
 800f0b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f0b6:	004b      	lsls	r3, r1, #1
 800f0b8:	4a3d      	ldr	r2, [pc, #244]	; (800f1b0 <floor+0xfc>)
 800f0ba:	0d5b      	lsrs	r3, r3, #21
 800f0bc:	189f      	adds	r7, r3, r2
 800f0be:	4684      	mov	ip, r0
 800f0c0:	000e      	movs	r6, r1
 800f0c2:	000d      	movs	r5, r1
 800f0c4:	0004      	movs	r4, r0
 800f0c6:	9001      	str	r0, [sp, #4]
 800f0c8:	2f13      	cmp	r7, #19
 800f0ca:	dc34      	bgt.n	800f136 <floor+0x82>
 800f0cc:	2f00      	cmp	r7, #0
 800f0ce:	da16      	bge.n	800f0fe <floor+0x4a>
 800f0d0:	4a38      	ldr	r2, [pc, #224]	; (800f1b4 <floor+0x100>)
 800f0d2:	4b39      	ldr	r3, [pc, #228]	; (800f1b8 <floor+0x104>)
 800f0d4:	4660      	mov	r0, ip
 800f0d6:	0031      	movs	r1, r6
 800f0d8:	f7f1 fd26 	bl	8000b28 <__aeabi_dadd>
 800f0dc:	2200      	movs	r2, #0
 800f0de:	2300      	movs	r3, #0
 800f0e0:	f7f1 f9d8 	bl	8000494 <__aeabi_dcmpgt>
 800f0e4:	2800      	cmp	r0, #0
 800f0e6:	d007      	beq.n	800f0f8 <floor+0x44>
 800f0e8:	2e00      	cmp	r6, #0
 800f0ea:	da5d      	bge.n	800f1a8 <floor+0xf4>
 800f0ec:	0073      	lsls	r3, r6, #1
 800f0ee:	085b      	lsrs	r3, r3, #1
 800f0f0:	431c      	orrs	r4, r3
 800f0f2:	d001      	beq.n	800f0f8 <floor+0x44>
 800f0f4:	2400      	movs	r4, #0
 800f0f6:	4d31      	ldr	r5, [pc, #196]	; (800f1bc <floor+0x108>)
 800f0f8:	46a4      	mov	ip, r4
 800f0fa:	002e      	movs	r6, r5
 800f0fc:	e029      	b.n	800f152 <floor+0x9e>
 800f0fe:	4b30      	ldr	r3, [pc, #192]	; (800f1c0 <floor+0x10c>)
 800f100:	413b      	asrs	r3, r7
 800f102:	9300      	str	r3, [sp, #0]
 800f104:	400b      	ands	r3, r1
 800f106:	4303      	orrs	r3, r0
 800f108:	d023      	beq.n	800f152 <floor+0x9e>
 800f10a:	4a2a      	ldr	r2, [pc, #168]	; (800f1b4 <floor+0x100>)
 800f10c:	4b2a      	ldr	r3, [pc, #168]	; (800f1b8 <floor+0x104>)
 800f10e:	4660      	mov	r0, ip
 800f110:	0031      	movs	r1, r6
 800f112:	f7f1 fd09 	bl	8000b28 <__aeabi_dadd>
 800f116:	2200      	movs	r2, #0
 800f118:	2300      	movs	r3, #0
 800f11a:	f7f1 f9bb 	bl	8000494 <__aeabi_dcmpgt>
 800f11e:	2800      	cmp	r0, #0
 800f120:	d0ea      	beq.n	800f0f8 <floor+0x44>
 800f122:	2e00      	cmp	r6, #0
 800f124:	da03      	bge.n	800f12e <floor+0x7a>
 800f126:	2380      	movs	r3, #128	; 0x80
 800f128:	035b      	lsls	r3, r3, #13
 800f12a:	413b      	asrs	r3, r7
 800f12c:	18f5      	adds	r5, r6, r3
 800f12e:	9b00      	ldr	r3, [sp, #0]
 800f130:	2400      	movs	r4, #0
 800f132:	439d      	bics	r5, r3
 800f134:	e7e0      	b.n	800f0f8 <floor+0x44>
 800f136:	2f33      	cmp	r7, #51	; 0x33
 800f138:	dd0f      	ble.n	800f15a <floor+0xa6>
 800f13a:	2380      	movs	r3, #128	; 0x80
 800f13c:	00db      	lsls	r3, r3, #3
 800f13e:	429f      	cmp	r7, r3
 800f140:	d107      	bne.n	800f152 <floor+0x9e>
 800f142:	0002      	movs	r2, r0
 800f144:	000b      	movs	r3, r1
 800f146:	4660      	mov	r0, ip
 800f148:	0031      	movs	r1, r6
 800f14a:	f7f1 fced 	bl	8000b28 <__aeabi_dadd>
 800f14e:	4684      	mov	ip, r0
 800f150:	000e      	movs	r6, r1
 800f152:	4660      	mov	r0, ip
 800f154:	0031      	movs	r1, r6
 800f156:	b003      	add	sp, #12
 800f158:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f15a:	4a1a      	ldr	r2, [pc, #104]	; (800f1c4 <floor+0x110>)
 800f15c:	189b      	adds	r3, r3, r2
 800f15e:	2201      	movs	r2, #1
 800f160:	4252      	negs	r2, r2
 800f162:	40da      	lsrs	r2, r3
 800f164:	9200      	str	r2, [sp, #0]
 800f166:	4210      	tst	r0, r2
 800f168:	d0f3      	beq.n	800f152 <floor+0x9e>
 800f16a:	4a12      	ldr	r2, [pc, #72]	; (800f1b4 <floor+0x100>)
 800f16c:	4b12      	ldr	r3, [pc, #72]	; (800f1b8 <floor+0x104>)
 800f16e:	4660      	mov	r0, ip
 800f170:	0031      	movs	r1, r6
 800f172:	f7f1 fcd9 	bl	8000b28 <__aeabi_dadd>
 800f176:	2200      	movs	r2, #0
 800f178:	2300      	movs	r3, #0
 800f17a:	f7f1 f98b 	bl	8000494 <__aeabi_dcmpgt>
 800f17e:	2800      	cmp	r0, #0
 800f180:	d0ba      	beq.n	800f0f8 <floor+0x44>
 800f182:	2e00      	cmp	r6, #0
 800f184:	da02      	bge.n	800f18c <floor+0xd8>
 800f186:	2f14      	cmp	r7, #20
 800f188:	d103      	bne.n	800f192 <floor+0xde>
 800f18a:	3501      	adds	r5, #1
 800f18c:	9b00      	ldr	r3, [sp, #0]
 800f18e:	439c      	bics	r4, r3
 800f190:	e7b2      	b.n	800f0f8 <floor+0x44>
 800f192:	2334      	movs	r3, #52	; 0x34
 800f194:	1bdf      	subs	r7, r3, r7
 800f196:	3b33      	subs	r3, #51	; 0x33
 800f198:	40bb      	lsls	r3, r7
 800f19a:	18e4      	adds	r4, r4, r3
 800f19c:	9b01      	ldr	r3, [sp, #4]
 800f19e:	429c      	cmp	r4, r3
 800f1a0:	419b      	sbcs	r3, r3
 800f1a2:	425b      	negs	r3, r3
 800f1a4:	18f5      	adds	r5, r6, r3
 800f1a6:	e7f1      	b.n	800f18c <floor+0xd8>
 800f1a8:	2400      	movs	r4, #0
 800f1aa:	0025      	movs	r5, r4
 800f1ac:	e7a4      	b.n	800f0f8 <floor+0x44>
 800f1ae:	46c0      	nop			; (mov r8, r8)
 800f1b0:	fffffc01 	.word	0xfffffc01
 800f1b4:	8800759c 	.word	0x8800759c
 800f1b8:	7e37e43c 	.word	0x7e37e43c
 800f1bc:	bff00000 	.word	0xbff00000
 800f1c0:	000fffff 	.word	0x000fffff
 800f1c4:	fffffbed 	.word	0xfffffbed

0800f1c8 <_init>:
 800f1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1ca:	46c0      	nop			; (mov r8, r8)
 800f1cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1ce:	bc08      	pop	{r3}
 800f1d0:	469e      	mov	lr, r3
 800f1d2:	4770      	bx	lr

0800f1d4 <_fini>:
 800f1d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1d6:	46c0      	nop			; (mov r8, r8)
 800f1d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1da:	bc08      	pop	{r3}
 800f1dc:	469e      	mov	lr, r3
 800f1de:	4770      	bx	lr
